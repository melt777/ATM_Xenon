
e:/aacrs/02_12/markvisser/git_clone/ATM_XENON/ATM_Xenon/target/1.4.4/xenon/ATM_Xenon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005260  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00019314  2**0
                  CONTENTS
  4 .data         00000068  2003cf18  000d9280  0000cf18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001870  2003cf80  2003cf80  0001cf80  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d92e8  000d92e8  000192e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9310  000d9310  00019310  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00143b7e  00000000  00000000  00019314  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00018cb4  00000000  00000000  0015ce92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000265b0  00000000  00000000  00175b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000030b8  00000000  00000000  0019c0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005b78  00000000  00000000  0019f1ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040722  00000000  00000000  001a4d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003d4c4  00000000  00000000  001e5448  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00116980  00000000  00000000  0022290c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ed4c  00000000  00000000  0033928c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fb7e 	bl	d8732 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fb9e 	bl	d877e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003cf18 	.word	0x2003cf18
   d404c:	000d9280 	.word	0x000d9280
   d4050:	2003cf80 	.word	0x2003cf80
   d4054:	2003cf80 	.word	0x2003cf80
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f929 	bl	d62b4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d927c 	.word	0x000d927c
   d4084:	000d9224 	.word	0x000d9224

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8c0 	b.w	d420c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f955 	bl	d433c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b8db 	b.w	d6250 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 b833 	b.w	d5104 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f001 b831 	b.w	d5104 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f001 b837 	b.w	d5114 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f001 b835 	b.w	d5114 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ba:	6803      	ldr	r3, [r0, #0]
   d40bc:	4718      	bx	r3

000d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40be:	2a01      	cmp	r2, #1
   d40c0:	d002      	beq.n	d40c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40c2:	2a02      	cmp	r2, #2
   d40c4:	d002      	beq.n	d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40c6:	e004      	b.n	d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c8:	6001      	str	r1, [r0, #0]
	      break;
   d40ca:	e002      	b.n	d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40cc:	680b      	ldr	r3, [r1, #0]
   d40ce:	b100      	cbz	r0, d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40d0:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40d2:	2000      	movs	r0, #0
   d40d4:	4770      	bx	lr
	...

000d40d8 <_Z18cloudResetFunction6String>:
      softDelay(2000);
    }
} 

//  Remote Reset Function
int cloudResetFunction(String command){
   d40d8:	b508      	push	{r3, lr}
    resetFlag = true;
   d40da:	4b04      	ldr	r3, [pc, #16]	; (d40ec <_Z18cloudResetFunction6String+0x14>)
   d40dc:	2201      	movs	r2, #1
   d40de:	701a      	strb	r2, [r3, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40e0:	f000 fd5e 	bl	d4ba0 <HAL_Timer_Get_Milli_Seconds>
    rebootSync = millis();
   d40e4:	4b02      	ldr	r3, [pc, #8]	; (d40f0 <_Z18cloudResetFunction6String+0x18>)
   d40e6:	6018      	str	r0, [r3, #0]
    return 0;
}
   d40e8:	2000      	movs	r0, #0
   d40ea:	bd08      	pop	{r3, pc}
   d40ec:	2003e334 	.word	0x2003e334
   d40f0:	2003e35c 	.word	0x2003e35c

000d40f4 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d40f4:	6943      	ldr	r3, [r0, #20]
   d40f6:	b113      	cbz	r3, d40fe <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40f8:	6983      	ldr	r3, [r0, #24]
   d40fa:	300c      	adds	r0, #12
   d40fc:	4718      	bx	r3
   d40fe:	4770      	bx	lr

000d4100 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4100:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4102:	2100      	movs	r1, #0
   d4104:	4604      	mov	r4, r0
   d4106:	4608      	mov	r0, r1
   d4108:	f000 fd9e 	bl	d4c48 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d410c:	a902      	add	r1, sp, #8
   d410e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4110:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4112:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4116:	f000 fdaf 	bl	d4c78 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d411a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d411c:	b10c      	cbz	r4, d4122 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d411e:	2301      	movs	r3, #1
   d4120:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4122:	2100      	movs	r1, #0
   d4124:	2001      	movs	r0, #1
   d4126:	f000 fd8f 	bl	d4c48 <os_thread_scheduling>
            }
        }
        if (t) {
   d412a:	b12c      	cbz	r4, d4138 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d412c:	6823      	ldr	r3, [r4, #0]
   d412e:	4620      	mov	r0, r4
   d4130:	689b      	ldr	r3, [r3, #8]
   d4132:	4798      	blx	r3
            t->running = false;
   d4134:	2300      	movs	r3, #0
   d4136:	7123      	strb	r3, [r4, #4]
        }
    }
   d4138:	b002      	add	sp, #8
   d413a:	bd10      	pop	{r4, pc}

000d413c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d413c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d413e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4140:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4142:	b113      	cbz	r3, d414a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4144:	2203      	movs	r2, #3
   d4146:	4601      	mov	r1, r0
   d4148:	4798      	blx	r3
    }
   d414a:	4620      	mov	r0, r4
   d414c:	bd10      	pop	{r4, pc}

000d414e <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d414e:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4150:	6880      	ldr	r0, [r0, #8]
   d4152:	2300      	movs	r3, #0
   d4154:	b138      	cbz	r0, d4166 <_ZN5Timer5_stopEjb+0x18>
   d4156:	e88d 000a 	stmia.w	sp, {r1, r3}
   d415a:	2102      	movs	r1, #2
   d415c:	f000 fd94 	bl	d4c88 <os_timer_change>
   d4160:	fab0 f080 	clz	r0, r0
   d4164:	0940      	lsrs	r0, r0, #5
    }
   d4166:	b003      	add	sp, #12
   d4168:	f85d fb04 	ldr.w	pc, [sp], #4

000d416c <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d416c:	b538      	push	{r3, r4, r5, lr}
   d416e:	4b10      	ldr	r3, [pc, #64]	; (d41b0 <_ZN5TimerD1Ev+0x44>)
   d4170:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d4172:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4174:	4604      	mov	r4, r0
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d4176:	b1a3      	cbz	r3, d41a2 <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d417c:	2200      	movs	r2, #0
   d417e:	f7ff ffe6 	bl	d414e <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4182:	2100      	movs	r1, #0
   d4184:	68a0      	ldr	r0, [r4, #8]
   d4186:	f000 fdaf 	bl	d4ce8 <os_timer_set_id>
            while (running) {
   d418a:	7923      	ldrb	r3, [r4, #4]
   d418c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4190:	b113      	cbz	r3, d4198 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4192:	f000 fd41 	bl	d4c18 <os_thread_yield>
   d4196:	e7f8      	b.n	d418a <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4198:	4629      	mov	r1, r5
   d419a:	68a0      	ldr	r0, [r4, #8]
   d419c:	f000 fd64 	bl	d4c68 <os_timer_destroy>
            handle = nullptr;
   d41a0:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d41a2:	f104 000c 	add.w	r0, r4, #12
   d41a6:	f7ff ffc9 	bl	d413c <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41aa:	4620      	mov	r0, r4
   d41ac:	bd38      	pop	{r3, r4, r5, pc}
   d41ae:	bf00      	nop
   d41b0:	000d88d0 	.word	0x000d88d0

000d41b4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d41b4:	b510      	push	{r4, lr}
   d41b6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41b8:	f7ff ffd8 	bl	d416c <_ZN5TimerD1Ev>
   d41bc:	4620      	mov	r0, r4
   d41be:	211c      	movs	r1, #28
   d41c0:	f003 fd22 	bl	d7c08 <_ZdlPvj>
   d41c4:	4620      	mov	r0, r4
   d41c6:	bd10      	pop	{r4, pc}

000d41c8 <_ZN8particle13BleScanResultC1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d41c8:	b510      	push	{r4, lr}
   d41ca:	4604      	mov	r4, r0
   d41cc:	f001 fc3e 	bl	d5a4c <_ZN8particle10BleAddressC1Ev>
   d41d0:	f104 0008 	add.w	r0, r4, #8
   d41d4:	f001 fcab 	bl	d5b2e <_ZN8particle18BleAdvertisingDataC1Ev>
   d41d8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d41dc:	f001 fca7 	bl	d5b2e <_ZN8particle18BleAdvertisingDataC1Ev>
   d41e0:	4620      	mov	r0, r4
   d41e2:	bd10      	pop	{r4, pc}

000d41e4 <_Z9softDelaym>:
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
const char *EVENT_NAME = "Beacon MAC"; // here we need to change it to name of node if possible

inline void softDelay(uint32_t msDelay){
   d41e4:	b570      	push	{r4, r5, r6, lr}
   d41e6:	4606      	mov	r6, r0
   d41e8:	f000 fcda 	bl	d4ba0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41ec:	4c06      	ldr	r4, [pc, #24]	; (d4208 <_Z9softDelaym+0x24>)
   d41ee:	4605      	mov	r5, r0
   d41f0:	f000 fcd6 	bl	d4ba0 <HAL_Timer_Get_Milli_Seconds>
      for (uint32_t ms = millis(); 
   d41f4:	1b40      	subs	r0, r0, r5
   d41f6:	42b0      	cmp	r0, r6
   d41f8:	d205      	bcs.n	d4206 <_Z9softDelaym+0x22>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41fa:	f000 fcd1 	bl	d4ba0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41fe:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4200:	f000 ff48 	bl	d5094 <spark_process>
   d4204:	e7f4      	b.n	d41f0 <_Z9softDelaym+0xc>
   d4206:	bd70      	pop	{r4, r5, r6, pc}
   d4208:	2003e730 	.word	0x2003e730

000d420c <setup>:
    resetFlag = true;
    rebootSync = millis();
    return 0;
}

void setup() {
   d420c:	b530      	push	{r4, r5, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d420e:	2001      	movs	r0, #1
   d4210:	b085      	sub	sp, #20
   d4212:	f000 fea1 	bl	d4f58 <set_system_mode>
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d4216:	2400      	movs	r4, #0
        conn_prop.size = sizeof(conn_prop);
   d4218:	2308      	movs	r3, #8
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d421a:	9402      	str	r4, [sp, #8]
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d421c:	4d3f      	ldr	r5, [pc, #252]	; (d431c <setup+0x110>)
        conn_prop.size = sizeof(conn_prop);
   d421e:	f8ad 3008 	strh.w	r3, [sp, #8]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4222:	2301      	movs	r3, #1
   d4224:	9303      	str	r3, [sp, #12]
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4226:	aa02      	add	r2, sp, #8
   d4228:	4623      	mov	r3, r4
   d422a:	f644 6120 	movw	r1, #20000	; 0x4e20
   d422e:	4620      	mov	r0, r4
   d4230:	f000 ff58 	bl	d50e4 <spark_set_connection_property>
   d4234:	4622      	mov	r2, r4
   d4236:	4621      	mov	r1, r4
   d4238:	4628      	mov	r0, r5
   d423a:	f7ff ff88 	bl	d414e <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d423e:	68a8      	ldr	r0, [r5, #8]
   d4240:	b140      	cbz	r0, d4254 <setup+0x48>
   d4242:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4246:	9300      	str	r3, [sp, #0]
   d4248:	9401      	str	r4, [sp, #4]
   d424a:	4623      	mov	r3, r4
   d424c:	4622      	mov	r2, r4
   d424e:	4621      	mov	r1, r4
   d4250:	f000 fd1a 	bl	d4c88 <os_timer_change>
  SYSTEM_MODE(AUTOMATIC);
  Particle.keepAlive(20);
  timer.start(); // start timer to send info to ubidots once per hour or whatever its set to
  Serial.begin(115200);
   d4254:	f002 fc22 	bl	d6a9c <_Z16_fetch_usbserialv>
   d4258:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d425c:	f002 fc12 	bl	d6a84 <_ZN9USBSerial5beginEl>
  pinMode(RELAY1, OUTPUT);//output for triggered led
   d4260:	2101      	movs	r1, #1
   d4262:	2004      	movs	r0, #4
   d4264:	f003 fc3e 	bl	d7ae4 <pinMode>
  pinMode(RELAY2, OUTPUT);//output for triggered led
   d4268:	2101      	movs	r1, #1
   d426a:	2005      	movs	r0, #5
   d426c:	f003 fc3a 	bl	d7ae4 <pinMode>
  pinMode(led_red, OUTPUT);//output for triggered led
   d4270:	2101      	movs	r1, #1
   d4272:	2006      	movs	r0, #6
   d4274:	f003 fc36 	bl	d7ae4 <pinMode>
  pinMode(led_green, OUTPUT);//output for triggered led
   d4278:	2101      	movs	r1, #1
   d427a:	2008      	movs	r0, #8
   d427c:	f003 fc32 	bl	d7ae4 <pinMode>
  pinMode(led_blue, OUTPUT);//output for triggered led
   d4280:	2101      	movs	r1, #1
   d4282:	2007      	movs	r0, #7
   d4284:	f003 fc2e 	bl	d7ae4 <pinMode>
  pinMode(PCH1, OUTPUT);//output for triggered led
   d4288:	2101      	movs	r1, #1
   d428a:	2012      	movs	r0, #18
   d428c:	f003 fc2a 	bl	d7ae4 <pinMode>
  pinMode(NCH1, OUTPUT);//output for triggered led
   d4290:	2101      	movs	r1, #1
   d4292:	2013      	movs	r0, #19
   d4294:	f003 fc26 	bl	d7ae4 <pinMode>
  pinMode(LOAD, INPUT);//output for triggered led
   d4298:	2100      	movs	r1, #0
   d429a:	2003      	movs	r0, #3
   d429c:	f003 fc22 	bl	d7ae4 <pinMode>
  pinMode(CLEAR, INPUT);//output for triggered led
   d42a0:	2100      	movs	r1, #0
   d42a2:	2002      	movs	r0, #2
   d42a4:	f003 fc1e 	bl	d7ae4 <pinMode>
  pinMode(BATT, INPUT); // argon battery 
   d42a8:	2100      	movs	r1, #0
   d42aa:	2018      	movs	r0, #24
   d42ac:	f003 fc1a 	bl	d7ae4 <pinMode>
  BLE.setTxPower(4); // Use lower power // Use lower power -20, -16, -12, -8, -4, 0, 4, 8.
   d42b0:	f001 fcb8 	bl	d5c24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42b4:	2104      	movs	r1, #4
   d42b6:	f001 fcd3 	bl	d5c60 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
  // set initial IO states
  digitalWrite (led_blue, HIGH);//led off
   d42ba:	2101      	movs	r1, #1
   d42bc:	2007      	movs	r0, #7
   d42be:	f003 fc22 	bl	d7b06 <digitalWrite>
  digitalWrite (led_green, HIGH);//led off
   d42c2:	2101      	movs	r1, #1
   d42c4:	2008      	movs	r0, #8
   d42c6:	f003 fc1e 	bl	d7b06 <digitalWrite>
  digitalWrite (led_red, HIGH);//led off
   d42ca:	2101      	movs	r1, #1
   d42cc:	2006      	movs	r0, #6
   d42ce:	f003 fc1a 	bl	d7b06 <digitalWrite>
  digitalWrite (RELAY1, LOW);//relay off
   d42d2:	2100      	movs	r1, #0
   d42d4:	2004      	movs	r0, #4
   d42d6:	f003 fc16 	bl	d7b06 <digitalWrite>
  digitalWrite (RELAY2, LOW);//relay off
   d42da:	2100      	movs	r1, #0
   d42dc:	2005      	movs	r0, #5
   d42de:	f003 fc12 	bl	d7b06 <digitalWrite>
  digitalWrite (LOAD, LOW);//off
   d42e2:	2100      	movs	r1, #0
   d42e4:	2003      	movs	r0, #3
   d42e6:	f003 fc0e 	bl	d7b06 <digitalWrite>
  digitalWrite (CLEAR, LOW);//off
   d42ea:	2100      	movs	r1, #0
   d42ec:	2002      	movs	r0, #2
   d42ee:	f003 fc0a 	bl	d7b06 <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d42f2:	4a0b      	ldr	r2, [pc, #44]	; (d4320 <setup+0x114>)
   d42f4:	490b      	ldr	r1, [pc, #44]	; (d4324 <setup+0x118>)
   d42f6:	480c      	ldr	r0, [pc, #48]	; (d4328 <setup+0x11c>)
   d42f8:	f002 f854 	bl	d63a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  //Remote Reset Particle Function, to reset device from the cloud
  Particle.function("reset", cloudResetFunction);//Remote Reset Particle Function, to reset device from the cloud
  Mesh.subscribe("Detonate", DetonateAction);
   d42fc:	4a0b      	ldr	r2, [pc, #44]	; (d432c <setup+0x120>)
   d42fe:	490c      	ldr	r1, [pc, #48]	; (d4330 <setup+0x124>)
   d4300:	480c      	ldr	r0, [pc, #48]	; (d4334 <setup+0x128>)
   d4302:	f003 f81b 	bl	d733c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  pinMode(BATT, INPUT);
   d4306:	2100      	movs	r1, #0
   d4308:	2018      	movs	r0, #24
   d430a:	f003 fbeb 	bl	d7ae4 <pinMode>
  ubidots.setDebug(true);  // Uncomment this line for printing debug messages
   d430e:	2101      	movs	r1, #1
   d4310:	4809      	ldr	r0, [pc, #36]	; (d4338 <setup+0x12c>)
   d4312:	f000 fa3f 	bl	d4794 <_ZN7Ubidots8setDebugEb>
}
   d4316:	b005      	add	sp, #20
   d4318:	bd30      	pop	{r4, r5, pc}
   d431a:	bf00      	nop
   d431c:	2003e33c 	.word	0x2003e33c
   d4320:	000d89b4 	.word	0x000d89b4
   d4324:	000d40d9 	.word	0x000d40d9
   d4328:	000d6379 	.word	0x000d6379
   d432c:	000d445d 	.word	0x000d445d
   d4330:	000d88dc 	.word	0x000d88dc
   d4334:	2003e53c 	.word	0x2003e53c
   d4338:	2003e360 	.word	0x2003e360

000d433c <loop>:
        
void loop() {
   d433c:	4770      	bx	lr

000d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d433e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4340:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4342:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4344:	b17c      	cbz	r4, d4366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4346:	6863      	ldr	r3, [r4, #4]
   d4348:	3b01      	subs	r3, #1
   d434a:	6063      	str	r3, [r4, #4]
   d434c:	b95b      	cbnz	r3, d4366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d434e:	6823      	ldr	r3, [r4, #0]
   d4350:	4620      	mov	r0, r4
   d4352:	689b      	ldr	r3, [r3, #8]
   d4354:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4356:	68a3      	ldr	r3, [r4, #8]
   d4358:	3b01      	subs	r3, #1
   d435a:	60a3      	str	r3, [r4, #8]
   d435c:	b91b      	cbnz	r3, d4366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d435e:	6823      	ldr	r3, [r4, #0]
   d4360:	4620      	mov	r0, r4
   d4362:	68db      	ldr	r3, [r3, #12]
   d4364:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4366:	4628      	mov	r0, r5
   d4368:	bd38      	pop	{r3, r4, r5, pc}
   d436a:	0000      	movs	r0, r0
   d436c:	0000      	movs	r0, r0
	...

000d4370 <_Z14Name_of_DevicePKcS0_>:
char VARIABLE_LABEL[32] = ""; // keeps the device name
bool publishName = false; // to publish the name


// used for getting the device name ***********************************************
void Name_of_Device(const char *topic, const char *data) {
   d4370:	b570      	push	{r4, r5, r6, lr}
  strncpy(dev_name, data, sizeof(dev_name)-1);
   d4372:	4e2f      	ldr	r6, [pc, #188]	; (d4430 <_Z14Name_of_DevicePKcS0_+0xc0>)
char VARIABLE_LABEL[32] = ""; // keeps the device name
bool publishName = false; // to publish the name


// used for getting the device name ***********************************************
void Name_of_Device(const char *topic, const char *data) {
   d4374:	b08a      	sub	sp, #40	; 0x28
   d4376:	4604      	mov	r4, r0
  strncpy(dev_name, data, sizeof(dev_name)-1);
   d4378:	221f      	movs	r2, #31
   d437a:	4630      	mov	r0, r6
   d437c:	f004 fa7a 	bl	d8874 <strncpy>
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
   d4380:	f002 fb8c 	bl	d6a9c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4384:	9600      	str	r6, [sp, #0]
   d4386:	4623      	mov	r3, r4
   d4388:	4a2a      	ldr	r2, [pc, #168]	; (d4434 <_Z14Name_of_DevicePKcS0_+0xc4>)
  publishName = true;
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d438a:	4c2b      	ldr	r4, [pc, #172]	; (d4438 <_Z14Name_of_DevicePKcS0_+0xc8>)
   d438c:	2101      	movs	r1, #1
   d438e:	f001 fec1 	bl	d6114 <_ZN5Print11printf_implEbPKcz>

// used for getting the device name ***********************************************
void Name_of_Device(const char *topic, const char *data) {
  strncpy(dev_name, data, sizeof(dev_name)-1);
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
  publishName = true;
   d4392:	4b2a      	ldr	r3, [pc, #168]	; (d443c <_Z14Name_of_DevicePKcS0_+0xcc>)
   d4394:	2501      	movs	r5, #1
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d4396:	4631      	mov	r1, r6
   d4398:	2220      	movs	r2, #32
   d439a:	4620      	mov	r0, r4

// used for getting the device name ***********************************************
void Name_of_Device(const char *topic, const char *data) {
  strncpy(dev_name, data, sizeof(dev_name)-1);
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
  publishName = true;
   d439c:	701d      	strb	r5, [r3, #0]
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d439e:	f004 fa69 	bl	d8874 <strncpy>
  Serial.printlnf("variable label  that is copied from dev_name : %s", VARIABLE_LABEL);
   d43a2:	f002 fb7b 	bl	d6a9c <_Z16_fetch_usbserialv>
   d43a6:	4623      	mov	r3, r4
   d43a8:	4a25      	ldr	r2, [pc, #148]	; (d4440 <_Z14Name_of_DevicePKcS0_+0xd0>)
  float voltage = analogRead(BATT) * 0.0011224;
  Particle.publish("voltage", String::format("%.2f",voltage), PRIVATE);
  ubidots.add(VARIABLE_LABEL, voltage); //pair Vbatt with name of Xenon
   d43aa:	4e26      	ldr	r6, [pc, #152]	; (d4444 <_Z14Name_of_DevicePKcS0_+0xd4>)
   d43ac:	4629      	mov	r1, r5
   d43ae:	f001 feb1 	bl	d6114 <_ZN5Print11printf_implEbPKcz>
  strncpy(dev_name, data, sizeof(dev_name)-1);
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
  publishName = true;
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
  Serial.printlnf("variable label  that is copied from dev_name : %s", VARIABLE_LABEL);
  float voltage = analogRead(BATT) * 0.0011224;
   d43b2:	2018      	movs	r0, #24
   d43b4:	f003 fbc0 	bl	d7b38 <analogRead>
   d43b8:	f003 fed6 	bl	d8168 <__aeabi_i2d>
   d43bc:	a31a      	add	r3, pc, #104	; (adr r3, d4428 <_Z14Name_of_DevicePKcS0_+0xb8>)
   d43be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43c2:	f003 ff37 	bl	d8234 <__aeabi_dmul>
   d43c6:	f004 f947 	bl	d8658 <__aeabi_d2f>
   d43ca:	9003      	str	r0, [sp, #12]
  Particle.publish("voltage", String::format("%.2f",voltage), PRIVATE);
   d43cc:	f003 fede 	bl	d818c <__aeabi_f2d>
   d43d0:	4602      	mov	r2, r0
   d43d2:	460b      	mov	r3, r1
   d43d4:	a806      	add	r0, sp, #24
   d43d6:	491c      	ldr	r1, [pc, #112]	; (d4448 <_Z14Name_of_DevicePKcS0_+0xd8>)
   d43d8:	f001 fae0 	bl	d599c <_ZN6String6formatEPKcz>
   d43dc:	4b1b      	ldr	r3, [pc, #108]	; (d444c <_Z14Name_of_DevicePKcS0_+0xdc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43de:	9a06      	ldr	r2, [sp, #24]
   d43e0:	781b      	ldrb	r3, [r3, #0]
   d43e2:	491b      	ldr	r1, [pc, #108]	; (d4450 <_Z14Name_of_DevicePKcS0_+0xe0>)
   d43e4:	f88d 3000 	strb.w	r3, [sp]
   d43e8:	a804      	add	r0, sp, #16
   d43ea:	233c      	movs	r3, #60	; 0x3c
   d43ec:	f002 f8ea 	bl	d65c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43f0:	a805      	add	r0, sp, #20
   d43f2:	f7ff ffa4 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43f6:	a806      	add	r0, sp, #24
   d43f8:	f001 fa5b 	bl	d58b2 <_ZN6StringD1Ev>
  ubidots.add(VARIABLE_LABEL, voltage); //pair Vbatt with name of Xenon
   d43fc:	ed9d 0a03 	vldr	s0, [sp, #12]
   d4400:	4621      	mov	r1, r4
   d4402:	4630      	mov	r0, r6
   d4404:	f000 f9ba 	bl	d477c <_ZN7Ubidots3addEPcf>
  Serial.printlnf("variable label that is uploaded to ubidots :  %s", VARIABLE_LABEL);
   d4408:	f002 fb48 	bl	d6a9c <_Z16_fetch_usbserialv>
   d440c:	4623      	mov	r3, r4
   d440e:	4a11      	ldr	r2, [pc, #68]	; (d4454 <_Z14Name_of_DevicePKcS0_+0xe4>)
   d4410:	4629      	mov	r1, r5
   d4412:	f001 fe7f 	bl	d6114 <_ZN5Print11printf_implEbPKcz>
  ubidots.meshPublishToUbidots("Ubidots"); // webhook its publishing to on particle consol
   d4416:	4910      	ldr	r1, [pc, #64]	; (d4458 <_Z14Name_of_DevicePKcS0_+0xe8>)
   d4418:	4630      	mov	r0, r6
   d441a:	f000 f9b8 	bl	d478e <_ZN7Ubidots20meshPublishToUbidotsEPKc>
}
   d441e:	b00a      	add	sp, #40	; 0x28
   d4420:	bd70      	pop	{r4, r5, r6, pc}
   d4422:	bf00      	nop
   d4424:	f3af 8000 	nop.w
   d4428:	d2c10294 	.word	0xd2c10294
   d442c:	3f5263af 	.word	0x3f5263af
   d4430:	2003e391 	.word	0x2003e391
   d4434:	000d88e5 	.word	0x000d88e5
   d4438:	2003e370 	.word	0x2003e370
   d443c:	2003e390 	.word	0x2003e390
   d4440:	000d8911 	.word	0x000d8911
   d4444:	2003e360 	.word	0x2003e360
   d4448:	000d8943 	.word	0x000d8943
   d444c:	2003e359 	.word	0x2003e359
   d4450:	000d8948 	.word	0x000d8948
   d4454:	000d8950 	.word	0x000d8950
   d4458:	000d8981 	.word	0x000d8981

000d445c <_Z14DetonateActionPKcS0_>:
            millis() - ms < msDelay;  
            Particle.process());
}

//XENON
void DetonateAction(const char *event, const char *data){
   d445c:	b530      	push	{r4, r5, lr}
   d445e:	460d      	mov	r5, r1
   d4460:	b085      	sub	sp, #20
    
   if (strcmp (data, "Boom")==0){ 
   d4462:	4925      	ldr	r1, [pc, #148]	; (d44f8 <_Z14DetonateActionPKcS0_+0x9c>)
   d4464:	4628      	mov	r0, r5
   d4466:	f004 f9bb 	bl	d87e0 <strcmp>
   d446a:	4604      	mov	r4, r0
   d446c:	bb18      	cbnz	r0, d44b6 <_Z14DetonateActionPKcS0_+0x5a>
      softDelay(3000);// wait 3 seconds 
   d446e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4472:	f7ff feb7 	bl	d41e4 <_Z9softDelaym>
      digitalWrite (NCH1, HIGH);//on
   d4476:	2101      	movs	r1, #1
   d4478:	2013      	movs	r0, #19
   d447a:	f003 fb44 	bl	d7b06 <digitalWrite>
      digitalWrite (PCH1, HIGH);//on
   d447e:	2101      	movs	r1, #1
   d4480:	2012      	movs	r0, #18
   d4482:	f003 fb40 	bl	d7b06 <digitalWrite>
      delay(500);
   d4486:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d448a:	f001 fe93 	bl	d61b4 <delay>
      digitalWrite (NCH1, LOW);//off
   d448e:	4621      	mov	r1, r4
   d4490:	2013      	movs	r0, #19
   d4492:	f003 fb38 	bl	d7b06 <digitalWrite>
      digitalWrite (PCH1, LOW);//off
   d4496:	4621      	mov	r1, r4
   d4498:	2012      	movs	r0, #18
   d449a:	f003 fb34 	bl	d7b06 <digitalWrite>
      DetonateSatus=1; // shows it has detonated
   d449e:	4b17      	ldr	r3, [pc, #92]	; (d44fc <_Z14DetonateActionPKcS0_+0xa0>)
      //Particle.publish("BOOM!",PRIVATE);
      Mesh.publish ("Detonate_ack","Boom_ack"); // publish to all subscriber to detonate
   d44a0:	4917      	ldr	r1, [pc, #92]	; (d4500 <_Z14DetonateActionPKcS0_+0xa4>)
   d44a2:	4818      	ldr	r0, [pc, #96]	; (d4504 <_Z14DetonateActionPKcS0_+0xa8>)
      digitalWrite (NCH1, HIGH);//on
      digitalWrite (PCH1, HIGH);//on
      delay(500);
      digitalWrite (NCH1, LOW);//off
      digitalWrite (PCH1, LOW);//off
      DetonateSatus=1; // shows it has detonated
   d44a4:	2201      	movs	r2, #1
   d44a6:	701a      	strb	r2, [r3, #0]
      //Particle.publish("BOOM!",PRIVATE);
      Mesh.publish ("Detonate_ack","Boom_ack"); // publish to all subscriber to detonate
   d44a8:	4a17      	ldr	r2, [pc, #92]	; (d4508 <_Z14DetonateActionPKcS0_+0xac>)
   d44aa:	f002 fecf 	bl	d724c <_ZN5spark11MeshPublish7publishEPKcS2_>
      softDelay(3000);
   d44ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d44b2:	f7ff fe97 	bl	d41e4 <_Z9softDelaym>
    }
   //Serial.println (data);
    if (strcmp (data, "Boom_reset")==0){  // turn led off as well as detonator voltage
   d44b6:	4915      	ldr	r1, [pc, #84]	; (d450c <_Z14DetonateActionPKcS0_+0xb0>)
   d44b8:	4628      	mov	r0, r5
   d44ba:	f004 f991 	bl	d87e0 <strcmp>
   d44be:	4604      	mov	r4, r0
   d44c0:	b9b8      	cbnz	r0, d44f2 <_Z14DetonateActionPKcS0_+0x96>
      digitalWrite (led_red, LOW);
   d44c2:	4601      	mov	r1, r0
   d44c4:	2006      	movs	r0, #6
   d44c6:	f003 fb1e 	bl	d7b06 <digitalWrite>
      DetonateSatus=1; // shows it has detonated
   d44ca:	4b0c      	ldr	r3, [pc, #48]	; (d44fc <_Z14DetonateActionPKcS0_+0xa0>)
   d44cc:	4910      	ldr	r1, [pc, #64]	; (d4510 <_Z14DetonateActionPKcS0_+0xb4>)
   d44ce:	2201      	movs	r2, #1
   d44d0:	701a      	strb	r2, [r3, #0]
   d44d2:	4b10      	ldr	r3, [pc, #64]	; (d4514 <_Z14DetonateActionPKcS0_+0xb8>)
   d44d4:	781b      	ldrb	r3, [r3, #0]
   d44d6:	f88d 3000 	strb.w	r3, [sp]
   d44da:	4622      	mov	r2, r4
   d44dc:	233c      	movs	r3, #60	; 0x3c
   d44de:	a802      	add	r0, sp, #8
   d44e0:	f002 f870 	bl	d65c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d44e4:	a803      	add	r0, sp, #12
   d44e6:	f7ff ff2a 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("BOOM_reset",PRIVATE);
      softDelay(2000);
   d44ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d44ee:	f7ff fe79 	bl	d41e4 <_Z9softDelaym>
    }
} 
   d44f2:	b005      	add	sp, #20
   d44f4:	bd30      	pop	{r4, r5, pc}
   d44f6:	bf00      	nop
   d44f8:	000d8989 	.word	0x000d8989
   d44fc:	2003e358 	.word	0x2003e358
   d4500:	000d8997 	.word	0x000d8997
   d4504:	2003e53c 	.word	0x2003e53c
   d4508:	000d898e 	.word	0x000d898e
   d450c:	000d89a4 	.word	0x000d89a4
   d4510:	000d89af 	.word	0x000d89af
   d4514:	2003e359 	.word	0x2003e359

000d4518 <_Z22timerUbidotInformationv>:
        
void loop() {
  
} // end of main

void timerUbidotInformation(void){
   d4518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d451a:	f000 fdc3 	bl	d50a4 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d451e:	b1e8      	cbz	r0, d455c <_Z22timerUbidotInformationv+0x44>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4520:	2400      	movs	r4, #0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4522:	f000 fdbf 	bl	d50a4 <spark_cloud_flag_connected>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4526:	4622      	mov	r2, r4
   d4528:	2301      	movs	r3, #1
   d452a:	490e      	ldr	r1, [pc, #56]	; (d4564 <_Z22timerUbidotInformationv+0x4c>)
   d452c:	9401      	str	r4, [sp, #4]
   d452e:	9400      	str	r4, [sp, #0]
   d4530:	480d      	ldr	r0, [pc, #52]	; (d4568 <_Z22timerUbidotInformationv+0x50>)
   d4532:	f000 fdcf 	bl	d50d4 <spark_subscribe>
  
  waitUntil(Particle.connected);
  Particle.subscribe("particle/device/name", Name_of_Device);
  softDelay(3000);
   d4536:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d453a:	f7ff fe53 	bl	d41e4 <_Z9softDelaym>
   d453e:	4b0b      	ldr	r3, [pc, #44]	; (d456c <_Z22timerUbidotInformationv+0x54>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4540:	4909      	ldr	r1, [pc, #36]	; (d4568 <_Z22timerUbidotInformationv+0x50>)
   d4542:	781b      	ldrb	r3, [r3, #0]
   d4544:	f88d 3000 	strb.w	r3, [sp]
   d4548:	4622      	mov	r2, r4
   d454a:	233c      	movs	r3, #60	; 0x3c
   d454c:	a802      	add	r0, sp, #8
   d454e:	f002 f839 	bl	d65c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4552:	a803      	add	r0, sp, #12
   d4554:	f7ff fef3 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("particle/device/name");  // ask the cloud for the name to be sent to you

   d4558:	b004      	add	sp, #16
   d455a:	bd10      	pop	{r4, pc}
            spark_process();
   d455c:	f000 fd9a 	bl	d5094 <spark_process>
   d4560:	e7db      	b.n	d451a <_Z22timerUbidotInformationv+0x2>
   d4562:	bf00      	nop
   d4564:	000d4371 	.word	0x000d4371
   d4568:	000d89ba 	.word	0x000d89ba
   d456c:	2003e3b1 	.word	0x2003e3b1

000d4570 <_GLOBAL__sub_I_buttonLOAD>:
   d4570:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4572:	4b35      	ldr	r3, [pc, #212]	; (d4648 <_GLOBAL__sub_I_buttonLOAD+0xd8>)
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4574:	4d35      	ldr	r5, [pc, #212]	; (d464c <_GLOBAL__sub_I_buttonLOAD+0xdc>)
   d4576:	2400      	movs	r4, #0
   d4578:	701c      	strb	r4, [r3, #0]
   d457a:	4b35      	ldr	r3, [pc, #212]	; (d4650 <_GLOBAL__sub_I_buttonLOAD+0xe0>)
   d457c:	b088      	sub	sp, #32
   d457e:	2201      	movs	r2, #1
   d4580:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4582:	f000 fa8d 	bl	d4aa0 <HAL_Pin_Map>
   d4586:	f000 fb0b 	bl	d4ba0 <HAL_Timer_Get_Milli_Seconds>
int buttonCLEAR;//hold button clear value

// Ubidots *******************************************************************
//Ubidots ubidots(UBIDOTS_TOKEN, UBI_INDUSTRIAL, UBI_MESH);
const char* WEBHOOK_NAME = "Ubidots";
Ubidots ubidots("webhook", UBI_PARTICLE); //  =================check this
   d458a:	2203      	movs	r2, #3
   d458c:	4931      	ldr	r1, [pc, #196]	; (d4654 <_GLOBAL__sub_I_buttonLOAD+0xe4>)
   d458e:	4832      	ldr	r0, [pc, #200]	; (d4658 <_GLOBAL__sub_I_buttonLOAD+0xe8>)
   d4590:	f000 f8d2 	bl	d4738 <_ZN7UbidotsC1EPc11IotProtocol>
   d4594:	4a31      	ldr	r2, [pc, #196]	; (d465c <_GLOBAL__sub_I_buttonLOAD+0xec>)
   d4596:	4932      	ldr	r1, [pc, #200]	; (d4660 <_GLOBAL__sub_I_buttonLOAD+0xf0>)
   d4598:	482f      	ldr	r0, [pc, #188]	; (d4658 <_GLOBAL__sub_I_buttonLOAD+0xe8>)
   d459a:	f003 fb27 	bl	d7bec <__aeabi_atexit>

//ubidots wigets variables
float value = analogRead(A0); // variable
   d459e:	2013      	movs	r0, #19
   d45a0:	f003 faca 	bl	d7b38 <analogRead>
   d45a4:	ee07 0a90 	vmov	s15, r0
   d45a8:	4b2e      	ldr	r3, [pc, #184]	; (d4664 <_GLOBAL__sub_I_buttonLOAD+0xf4>)
   d45aa:	712c      	strb	r4, [r5, #4]
   d45ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d45b0:	ae04      	add	r6, sp, #16
   d45b2:	edc3 7a00 	vstr	s15, [r3]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d45b6:	4b2c      	ldr	r3, [pc, #176]	; (d4668 <_GLOBAL__sub_I_buttonLOAD+0xf8>)
   d45b8:	9304      	str	r3, [sp, #16]
   d45ba:	e896 0003 	ldmia.w	r6, {r0, r1}
   d45be:	4b2b      	ldr	r3, [pc, #172]	; (d466c <_GLOBAL__sub_I_buttonLOAD+0xfc>)
   d45c0:	602b      	str	r3, [r5, #0]
   d45c2:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d45c4:	f105 030c 	add.w	r3, r5, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d45c8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d45cc:	e893 0003 	ldmia.w	r3, {r0, r1}
   d45d0:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d45d4:	e892 0003 	ldmia.w	r2, {r0, r1}
   d45d8:	e883 0003 	stmia.w	r3, {r0, r1}
   d45dc:	4b24      	ldr	r3, [pc, #144]	; (d4670 <_GLOBAL__sub_I_buttonLOAD+0x100>)
   d45de:	616b      	str	r3, [r5, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d45e0:	69ab      	ldr	r3, [r5, #24]
   d45e2:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d45e4:	4b23      	ldr	r3, [pc, #140]	; (d4674 <_GLOBAL__sub_I_buttonLOAD+0x104>)
   d45e6:	61ab      	str	r3, [r5, #24]
   d45e8:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d45ea:	462b      	mov	r3, r5
   d45ec:	4a22      	ldr	r2, [pc, #136]	; (d4678 <_GLOBAL__sub_I_buttonLOAD+0x108>)
   d45ee:	4923      	ldr	r1, [pc, #140]	; (d467c <_GLOBAL__sub_I_buttonLOAD+0x10c>)
   d45f0:	9401      	str	r4, [sp, #4]
   d45f2:	f105 0008 	add.w	r0, r5, #8
   d45f6:	9400      	str	r4, [sp, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d45f8:	9406      	str	r4, [sp, #24]
   d45fa:	f000 fb2d 	bl	d4c58 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d45fe:	4630      	mov	r0, r6
   d4600:	f7ff fd9c 	bl	d413c <_ZNSt14_Function_baseD1Ev>
float EM_BEACON1_BATT = 0 ;
float EM_BEACON2_BATT = 0;
Timer timer(3600000, timerUbidotInformation);// 5min timer to send info to ubidots
   d4604:	4628      	mov	r0, r5
   d4606:	4a15      	ldr	r2, [pc, #84]	; (d465c <_GLOBAL__sub_I_buttonLOAD+0xec>)
   d4608:	491d      	ldr	r1, [pc, #116]	; (d4680 <_GLOBAL__sub_I_buttonLOAD+0x110>)
//*******************************************************************
//BLE 
#define SCAN_RESULT_COUNT 30
BleScanResult results[SCAN_RESULT_COUNT];
   d460a:	4e1e      	ldr	r6, [pc, #120]	; (d4684 <_GLOBAL__sub_I_buttonLOAD+0x114>)

//ubidots wigets variables
float value = analogRead(A0); // variable
float EM_BEACON1_BATT = 0 ;
float EM_BEACON2_BATT = 0;
Timer timer(3600000, timerUbidotInformation);// 5min timer to send info to ubidots
   d460c:	f003 faee 	bl	d7bec <__aeabi_atexit>
//*******************************************************************
//BLE 
#define SCAN_RESULT_COUNT 30
BleScanResult results[SCAN_RESULT_COUNT];
   d4610:	f640 15d8 	movw	r5, #2520	; 0x9d8
   d4614:	1930      	adds	r0, r6, r4
   d4616:	3454      	adds	r4, #84	; 0x54
   d4618:	f7ff fdd6 	bl	d41c8 <_ZN8particle13BleScanResultC1Ev>
   d461c:	42ac      	cmp	r4, r5
   d461e:	d1f9      	bne.n	d4614 <_GLOBAL__sub_I_buttonLOAD+0xa4>
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d4620:	4e19      	ldr	r6, [pc, #100]	; (d4688 <_GLOBAL__sub_I_buttonLOAD+0x118>)
float EM_BEACON2_BATT = 0;
Timer timer(3600000, timerUbidotInformation);// 5min timer to send info to ubidots
//*******************************************************************
//BLE 
#define SCAN_RESULT_COUNT 30
BleScanResult results[SCAN_RESULT_COUNT];
   d4622:	2400      	movs	r4, #0
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d4624:	f640 15d8 	movw	r5, #2520	; 0x9d8
   d4628:	1930      	adds	r0, r6, r4
   d462a:	3454      	adds	r4, #84	; 0x54
   d462c:	f7ff fdcc 	bl	d41c8 <_ZN8particle13BleScanResultC1Ev>
   d4630:	42ac      	cmp	r4, r5
   d4632:	d1f9      	bne.n	d4628 <_GLOBAL__sub_I_buttonLOAD+0xb8>
   d4634:	f000 fab4 	bl	d4ba0 <HAL_Timer_Get_Milli_Seconds>

//*******************************************************************
//setup remote cloud reset
#define DELAY_BEFORE_REBOOT 2000
unsigned int rebootDelayMillis = DELAY_BEFORE_REBOOT;
unsigned long rebootSync = millis();
   d4638:	4b14      	ldr	r3, [pc, #80]	; (d468c <_GLOBAL__sub_I_buttonLOAD+0x11c>)
/********************************************************************************************
*********************************************************************************************
*********************************************************************************************/
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
   d463a:	2100      	movs	r1, #0

//*******************************************************************
//setup remote cloud reset
#define DELAY_BEFORE_REBOOT 2000
unsigned int rebootDelayMillis = DELAY_BEFORE_REBOOT;
unsigned long rebootSync = millis();
   d463c:	6018      	str	r0, [r3, #0]
/********************************************************************************************
*********************************************************************************************
*********************************************************************************************/
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
   d463e:	2001      	movs	r0, #1
   d4640:	f000 fc9a 	bl	d4f78 <system_thread_set_state>
  waitUntil(Particle.connected);
  Particle.subscribe("particle/device/name", Name_of_Device);
  softDelay(3000);
  Particle.publish("particle/device/name");  // ask the cloud for the name to be sent to you

   d4644:	b008      	add	sp, #32
   d4646:	bd70      	pop	{r4, r5, r6, pc}
   d4648:	2003e3b1 	.word	0x2003e3b1
   d464c:	2003e33c 	.word	0x2003e33c
   d4650:	2003e359 	.word	0x2003e359
   d4654:	000d89cf 	.word	0x000d89cf
   d4658:	2003e360 	.word	0x2003e360
   d465c:	2003cf80 	.word	0x2003cf80
   d4660:	000d4755 	.word	0x000d4755
   d4664:	2003e338 	.word	0x2003e338
   d4668:	000d4519 	.word	0x000d4519
   d466c:	000d88d0 	.word	0x000d88d0
   d4670:	000d40bf 	.word	0x000d40bf
   d4674:	000d40bb 	.word	0x000d40bb
   d4678:	000d4101 	.word	0x000d4101
   d467c:	0036ee80 	.word	0x0036ee80
   d4680:	000d416d 	.word	0x000d416d
   d4684:	2003d95c 	.word	0x2003d95c
   d4688:	2003cf84 	.word	0x2003cf84
   d468c:	2003e35c 	.word	0x2003e35c

000d4690 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4690:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4692:	6984      	ldr	r4, [r0, #24]
   d4694:	4b0a      	ldr	r3, [pc, #40]	; (d46c0 <_ZN9TCPClientD1Ev+0x30>)
   d4696:	6003      	str	r3, [r0, #0]
   d4698:	4605      	mov	r5, r0
   d469a:	b17c      	cbz	r4, d46bc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d469c:	6863      	ldr	r3, [r4, #4]
   d469e:	3b01      	subs	r3, #1
   d46a0:	6063      	str	r3, [r4, #4]
   d46a2:	b95b      	cbnz	r3, d46bc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d46a4:	6823      	ldr	r3, [r4, #0]
   d46a6:	4620      	mov	r0, r4
   d46a8:	689b      	ldr	r3, [r3, #8]
   d46aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46ac:	68a3      	ldr	r3, [r4, #8]
   d46ae:	3b01      	subs	r3, #1
   d46b0:	60a3      	str	r3, [r4, #8]
   d46b2:	b91b      	cbnz	r3, d46bc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d46b4:	6823      	ldr	r3, [r4, #0]
   d46b6:	4620      	mov	r0, r4
   d46b8:	68db      	ldr	r3, [r3, #12]
   d46ba:	4798      	blx	r3
   d46bc:	4628      	mov	r0, r5
   d46be:	bd38      	pop	{r3, r4, r5, pc}
   d46c0:	000d9138 	.word	0x000d9138

000d46c4 <_ZN9TCPClientD0Ev>:
   d46c4:	b510      	push	{r4, lr}
   d46c6:	4604      	mov	r4, r0
   d46c8:	f7ff ffe2 	bl	d4690 <_ZN9TCPClientD1Ev>
   d46cc:	4620      	mov	r0, r4
   d46ce:	211c      	movs	r1, #28
   d46d0:	f003 fa9a 	bl	d7c08 <_ZdlPvj>
   d46d4:	4620      	mov	r0, r4
   d46d6:	bd10      	pop	{r4, pc}

000d46d8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d46d8:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d46da:	4c06      	ldr	r4, [pc, #24]	; (d46f4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d46dc:	f000 f9e0 	bl	d4aa0 <HAL_Pin_Map>
   d46e0:	4620      	mov	r0, r4
   d46e2:	f003 f919 	bl	d7918 <_ZN9TCPClientC1Ev>
   d46e6:	4620      	mov	r0, r4
   d46e8:	4a03      	ldr	r2, [pc, #12]	; (d46f8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d46ea:	4904      	ldr	r1, [pc, #16]	; (d46fc <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
   d46ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d46f0:	f003 ba7c 	b.w	d7bec <__aeabi_atexit>
   d46f4:	2003e3b4 	.word	0x2003e3b4
   d46f8:	2003cf80 	.word	0x2003cf80
   d46fc:	000d4691 	.word	0x000d4691

000d4700 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
   d4700:	4b02      	ldr	r3, [pc, #8]	; (d470c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
   d4702:	2200      	movs	r2, #0
   d4704:	701a      	strb	r2, [r3, #0]
   d4706:	f000 b9cb 	b.w	d4aa0 <HAL_Pin_Map>
   d470a:	bf00      	nop
   d470c:	2003e3d0 	.word	0x2003e3d0

000d4710 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d4710:	b570      	push	{r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d4712:	7303      	strb	r3, [r0, #12]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d4714:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d4716:	2050      	movs	r0, #80	; 0x50

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d4718:	460e      	mov	r6, r1
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d471a:	f000 fcf3 	bl	d5104 <malloc>
   d471e:	60a0      	str	r0, [r4, #8]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d4720:	f44f 7082 	mov.w	r0, #260	; 0x104
   d4724:	f7ff fcb9 	bl	d409a <_Znwj>
   d4728:	4605      	mov	r5, r0
   d472a:	b110      	cbz	r0, d4732 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x22>
   d472c:	4631      	mov	r1, r6
   d472e:	f000 f89e 	bl	d486e <_ZN7UbiMeshC1EPc>
   d4732:	6025      	str	r5, [r4, #0]
   d4734:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4738 <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
   d4738:	b510      	push	{r4, lr}
   d473a:	2300      	movs	r3, #0
   d473c:	4604      	mov	r4, r0
   d473e:	7343      	strb	r3, [r0, #13]
   d4740:	7383      	strb	r3, [r0, #14]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
   d4742:	4613      	mov	r3, r2
   d4744:	4a02      	ldr	r2, [pc, #8]	; (d4750 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d4746:	f7ff ffe3 	bl	d4710 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
   d474a:	4620      	mov	r0, r4
   d474c:	bd10      	pop	{r4, pc}
   d474e:	bf00      	nop
   d4750:	000d89e2 	.word	0x000d89e2

000d4754 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d4754:	b538      	push	{r3, r4, r5, lr}
   d4756:	4604      	mov	r4, r0
  free(_context);
   d4758:	6880      	ldr	r0, [r0, #8]
   d475a:	f000 fcdb 	bl	d5114 <free>
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  delete _protocolMesh;
   d475e:	6825      	ldr	r5, [r4, #0]
   d4760:	b13d      	cbz	r5, d4772 <_ZN7UbidotsD1Ev+0x1e>
   d4762:	4628      	mov	r0, r5
   d4764:	f000 f896 	bl	d4894 <_ZN7UbiMeshD1Ev>
   d4768:	f44f 7182 	mov.w	r1, #260	; 0x104
   d476c:	4628      	mov	r0, r5
   d476e:	f003 fa4b 	bl	d7c08 <_ZdlPvj>
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
#endif
}
   d4772:	4620      	mov	r0, r4
   d4774:	bd38      	pop	{r3, r4, r5, pc}

000d4776 <_ZN7Ubidots3addEPcfS0_mj>:
        "Ubidots constructor");
  }
// Xenon only supports Mesh cloud protocol
#elif PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
   d4776:	6800      	ldr	r0, [r0, #0]
   d4778:	f000 b894 	b.w	d48a4 <_ZN7UbiMesh3addEPKcfS1_mj>

000d477c <_ZN7Ubidots3addEPcf>:
 * datalogger. Default NULL
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void Ubidots::add(char* variable_label, float value) {
   d477c:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
   d477e:	2300      	movs	r3, #0
   d4780:	9300      	str	r3, [sp, #0]
   d4782:	461a      	mov	r2, r3
   d4784:	f7ff fff7 	bl	d4776 <_ZN7Ubidots3addEPcfS0_mj>
}
   d4788:	b003      	add	sp, #12
   d478a:	f85d fb04 	ldr.w	pc, [sp], #4

000d478e <_ZN7Ubidots20meshPublishToUbidotsEPKc>:
}

bool Ubidots::meshPublishToUbidots(const char* device_label) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  return _protocolMesh->meshPublishToUbidots(device_label);
   d478e:	6800      	ldr	r0, [r0, #0]
   d4790:	f000 b94e 	b.w	d4a30 <_ZN7UbiMesh20meshPublishToUbidotsEPKc>

000d4794 <_ZN7Ubidots8setDebugEb>:
  return ERROR_VALUE;
#endif
}

void Ubidots::setDebug(bool debug) {
  _debug = debug;
   d4794:	7381      	strb	r1, [r0, #14]
#elif PLATFORM_ID == PLATFORM_PHOTON_DEV ||      \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION || \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  _cloudProtocol->setDebug(debug);
#elif PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  _protocolMesh->setDebug(debug);
   d4796:	6800      	ldr	r0, [r0, #0]
   d4798:	f000 b94e 	b.w	d4a38 <_ZN7UbiMesh8setDebugEb>

000d479c <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
      }
    }
  }
   d479c:	b508      	push	{r3, lr}
   d479e:	f000 f97f 	bl	d4aa0 <HAL_Pin_Map>
   d47a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d47a6:	f000 b9fb 	b.w	d4ba0 <HAL_Timer_Get_Milli_Seconds>
	...

000d47ac <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d47ac:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d47ae:	4c06      	ldr	r4, [pc, #24]	; (d47c8 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d47b0:	f000 f976 	bl	d4aa0 <HAL_Pin_Map>
   d47b4:	4620      	mov	r0, r4
   d47b6:	f003 f8af 	bl	d7918 <_ZN9TCPClientC1Ev>
   d47ba:	4620      	mov	r0, r4
   d47bc:	4a03      	ldr	r2, [pc, #12]	; (d47cc <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d47be:	4904      	ldr	r1, [pc, #16]	; (d47d0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
   d47c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d47c4:	f003 ba12 	b.w	d7bec <__aeabi_atexit>
   d47c8:	2003e3d4 	.word	0x2003e3d4
   d47cc:	2003cf80 	.word	0x2003cf80
   d47d0:	000d4691 	.word	0x000d4691

000d47d4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d47d4:	b510      	push	{r4, lr}
   d47d6:	4b06      	ldr	r3, [pc, #24]	; (d47f0 <_ZN3UDPD1Ev+0x1c>)
   d47d8:	6003      	str	r3, [r0, #0]
   d47da:	3364      	adds	r3, #100	; 0x64
   d47dc:	4604      	mov	r4, r0
   d47de:	6103      	str	r3, [r0, #16]
   d47e0:	f000 fdd1 	bl	d5386 <_ZN3UDP4stopEv>
   d47e4:	4620      	mov	r0, r4
   d47e6:	f000 fff7 	bl	d57d8 <_ZN3UDP13releaseBufferEv>
   d47ea:	4620      	mov	r0, r4
   d47ec:	bd10      	pop	{r4, pc}
   d47ee:	bf00      	nop
   d47f0:	000d8ccc 	.word	0x000d8ccc

000d47f4 <_ZN3UDPD0Ev>:
   d47f4:	b510      	push	{r4, lr}
   d47f6:	4604      	mov	r4, r0
   d47f8:	f7ff ffec 	bl	d47d4 <_ZN3UDPD1Ev>
   d47fc:	4620      	mov	r0, r4
   d47fe:	214c      	movs	r1, #76	; 0x4c
   d4800:	f003 fa02 	bl	d7c08 <_ZdlPvj>
   d4804:	4620      	mov	r0, r4
   d4806:	bd10      	pop	{r4, pc}

000d4808 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
   d4808:	b570      	push	{r4, r5, r6, lr}
   d480a:	4d10      	ldr	r5, [pc, #64]	; (d484c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d480c:	4c10      	ldr	r4, [pc, #64]	; (d4850 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d480e:	4e11      	ldr	r6, [pc, #68]	; (d4854 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d4810:	f000 f946 	bl	d4aa0 <HAL_Pin_Map>
   d4814:	4628      	mov	r0, r5
   d4816:	f003 f87f 	bl	d7918 <_ZN9TCPClientC1Ev>
   d481a:	4628      	mov	r0, r5
   d481c:	4d0e      	ldr	r5, [pc, #56]	; (d4858 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d481e:	4622      	mov	r2, r4
   d4820:	4631      	mov	r1, r6
   d4822:	f003 f9e3 	bl	d7bec <__aeabi_atexit>
   d4826:	4628      	mov	r0, r5
   d4828:	f003 f876 	bl	d7918 <_ZN9TCPClientC1Ev>
   d482c:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d482e:	4d0b      	ldr	r5, [pc, #44]	; (d485c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
   d4830:	4622      	mov	r2, r4
   d4832:	4631      	mov	r1, r6
   d4834:	f003 f9da 	bl	d7bec <__aeabi_atexit>
   d4838:	4628      	mov	r0, r5
   d483a:	f000 ffaf 	bl	d579c <_ZN3UDPC1Ev>
   d483e:	4622      	mov	r2, r4
   d4840:	4628      	mov	r0, r5
   d4842:	4907      	ldr	r1, [pc, #28]	; (d4860 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
   d4844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4848:	f003 b9d0 	b.w	d7bec <__aeabi_atexit>
   d484c:	2003e40c 	.word	0x2003e40c
   d4850:	2003cf80 	.word	0x2003cf80
   d4854:	000d4691 	.word	0x000d4691
   d4858:	2003e3f0 	.word	0x2003e3f0
   d485c:	2003e428 	.word	0x2003e428
   d4860:	000d47d5 	.word	0x000d47d5

000d4864 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4864:	2200      	movs	r2, #0
   d4866:	4611      	mov	r1, r2
   d4868:	6840      	ldr	r0, [r0, #4]
   d486a:	f000 bbd3 	b.w	d5014 <network_ready>

000d486e <_ZN7UbiMeshC1EPc>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d486e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4870:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4872:	4668      	mov	r0, sp
   d4874:	f000 fc1e 	bl	d50b4 <spark_deviceID>
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d4878:	9802      	ldr	r0, [sp, #8]
   d487a:	3001      	adds	r0, #1
   d487c:	f7ff fc0f 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d4880:	9900      	ldr	r1, [sp, #0]
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d4882:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d4884:	f003 ffb6 	bl	d87f4 <strcpy>
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
   d4888:	4668      	mov	r0, sp
   d488a:	f001 f812 	bl	d58b2 <_ZN6StringD1Ev>
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
};
   d488e:	4620      	mov	r0, r4
   d4890:	b004      	add	sp, #16
   d4892:	bd10      	pop	{r4, pc}

000d4894 <_ZN7UbiMeshD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

UbiMesh::~UbiMesh() { delete[] _default_device_label; }
   d4894:	b510      	push	{r4, lr}
   d4896:	4604      	mov	r4, r0
   d4898:	6800      	ldr	r0, [r0, #0]
   d489a:	b108      	cbz	r0, d48a0 <_ZN7UbiMeshD1Ev+0xc>
   d489c:	f7ff fc03 	bl	d40a6 <_ZdaPv>
   d48a0:	4620      	mov	r0, r4
   d48a2:	bd10      	pop	{r4, pc}

000d48a4 <_ZN7UbiMesh3addEPKcfS1_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void UbiMesh::add(const char* variable_label, float value, const char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d48a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d48a8:	b0a4      	sub	sp, #144	; 0x90
   d48aa:	4606      	mov	r6, r0
   d48ac:	4689      	mov	r9, r1
   d48ae:	ee10 aa10 	vmov	sl, s0
   d48b2:	461f      	mov	r7, r3
   d48b4:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
  char _context[100];
  char _dot_timestamp_seconds[11];
  char _dot_timestamp_millis[4];

  if (context != NULL && strlen(context) > 100) {
   d48b8:	4615      	mov	r5, r2
   d48ba:	ac0b      	add	r4, sp, #44	; 0x2c
   d48bc:	b152      	cbz	r2, d48d4 <_ZN7UbiMesh3addEPKcfS1_mj+0x30>
   d48be:	4610      	mov	r0, r2
   d48c0:	f003 ffbb 	bl	d883a <strlen>
   d48c4:	2864      	cmp	r0, #100	; 0x64
   d48c6:	d907      	bls.n	d48d8 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
    Serial.println("[WARNING] Your Mesh context length must be lower than 100");
   d48c8:	f002 f8e8 	bl	d6a9c <_Z16_fetch_usbserialv>
   d48cc:	491a      	ldr	r1, [pc, #104]	; (d4938 <_ZN7UbiMesh3addEPKcfS1_mj+0x94>)
   d48ce:	f001 fbe8 	bl	d60a2 <_ZN5Print7printlnEPKc>
   d48d2:	e001      	b.n	d48d8 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
  }

  context != NULL ? sprintf(_context, "%s", context)
                  : sprintf(_context, "%s", " ");
   d48d4:	4919      	ldr	r1, [pc, #100]	; (d493c <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d48d6:	e000      	b.n	d48da <_ZN7UbiMesh3addEPKcfS1_mj+0x36>
   d48d8:	4629      	mov	r1, r5
   d48da:	4620      	mov	r0, r4
   d48dc:	f003 ff8a 	bl	d87f4 <strcpy>
   d48e0:	ad08      	add	r5, sp, #32

  dot_timestamp_seconds != NULL
      ? sprintf(_dot_timestamp_seconds, "%lu", dot_timestamp_seconds)
      : sprintf(_dot_timestamp_seconds, "%s", " ");
   d48e2:	b12f      	cbz	r7, d48f0 <_ZN7UbiMesh3addEPKcfS1_mj+0x4c>
   d48e4:	463a      	mov	r2, r7
   d48e6:	4916      	ldr	r1, [pc, #88]	; (d4940 <_ZN7UbiMesh3addEPKcfS1_mj+0x9c>)
   d48e8:	4628      	mov	r0, r5
   d48ea:	f000 fc23 	bl	d5134 <sprintf>
   d48ee:	e003      	b.n	d48f8 <_ZN7UbiMesh3addEPKcfS1_mj+0x54>
   d48f0:	4912      	ldr	r1, [pc, #72]	; (d493c <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d48f2:	4628      	mov	r0, r5
   d48f4:	f003 ff7e 	bl	d87f4 <strcpy>
   d48f8:	af07      	add	r7, sp, #28

  dot_timestamp_millis != NULL
      ? sprintf(_dot_timestamp_millis, "%d", dot_timestamp_millis)
      : sprintf(_dot_timestamp_millis, "%s", " ");
   d48fa:	f1b8 0f00 	cmp.w	r8, #0
   d48fe:	d005      	beq.n	d490c <_ZN7UbiMesh3addEPKcfS1_mj+0x68>
   d4900:	4642      	mov	r2, r8
   d4902:	4910      	ldr	r1, [pc, #64]	; (d4944 <_ZN7UbiMesh3addEPKcfS1_mj+0xa0>)
   d4904:	4638      	mov	r0, r7
   d4906:	f000 fc15 	bl	d5134 <sprintf>
   d490a:	e003      	b.n	d4914 <_ZN7UbiMesh3addEPKcfS1_mj+0x70>
   d490c:	490b      	ldr	r1, [pc, #44]	; (d493c <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d490e:	4638      	mov	r0, r7
   d4910:	f003 ff70 	bl	d87f4 <strcpy>

  sprintf(_meshPayload, "%s|%f|%s|%s|%s", variable_label, value, _context,
          _dot_timestamp_seconds, _dot_timestamp_millis);
   d4914:	4650      	mov	r0, sl
   d4916:	9704      	str	r7, [sp, #16]
   d4918:	9503      	str	r5, [sp, #12]
   d491a:	9402      	str	r4, [sp, #8]
   d491c:	f003 fc36 	bl	d818c <__aeabi_f2d>
   d4920:	3604      	adds	r6, #4
   d4922:	e9cd 0100 	strd	r0, r1, [sp]
   d4926:	464a      	mov	r2, r9
   d4928:	4907      	ldr	r1, [pc, #28]	; (d4948 <_ZN7UbiMesh3addEPKcfS1_mj+0xa4>)
   d492a:	4630      	mov	r0, r6
   d492c:	f000 fc02 	bl	d5134 <sprintf>
}
   d4930:	b024      	add	sp, #144	; 0x90
   d4932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4936:	bf00      	nop
   d4938:	000d8b4d 	.word	0x000d8b4d
   d493c:	000d8f72 	.word	0x000d8f72
   d4940:	000d8b87 	.word	0x000d8b87
   d4944:	000d9189 	.word	0x000d9189
   d4948:	000d8b8b 	.word	0x000d8b8b

000d494c <_ZN7UbiMesh14_MeshReconnectEi>:

/*
  Checks Mesh network connection status
*/

bool UbiMesh::_MeshReconnect(int timeout) {
   d494c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  int _timeout = 0;

  // Waits up to the set timeout to begin a socket exchange
  while (!Mesh.ready() && _timeout < 5000) {
   d494e:	4d11      	ldr	r5, [pc, #68]	; (d4994 <_ZN7UbiMesh14_MeshReconnectEi+0x48>)

/*
  Checks Mesh network connection status
*/

bool UbiMesh::_MeshReconnect(int timeout) {
   d4950:	f241 3489 	movw	r4, #5001	; 0x1389
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  int _timeout = 0;

  // Waits up to the set timeout to begin a socket exchange
  while (!Mesh.ready() && _timeout < 5000) {
   d4954:	480f      	ldr	r0, [pc, #60]	; (d4994 <_ZN7UbiMesh14_MeshReconnectEi+0x48>)
   d4956:	f7ff ff85 	bl	d4864 <_ZN5spark9MeshClass5readyEv>
   d495a:	4603      	mov	r3, r0
   d495c:	b950      	cbnz	r0, d4974 <_ZN7UbiMesh14_MeshReconnectEi+0x28>
   d495e:	3c01      	subs	r4, #1
   d4960:	d008      	beq.n	d4974 <_ZN7UbiMesh14_MeshReconnectEi+0x28>
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4962:	4602      	mov	r2, r0
   d4964:	4601      	mov	r1, r0
   d4966:	6868      	ldr	r0, [r5, #4]
   d4968:	f000 fb3c 	bl	d4fe4 <network_connect>
    Mesh.connect();
    _timeout++;
    delay(1);
   d496c:	2001      	movs	r0, #1
   d496e:	f001 fc21 	bl	d61b4 <delay>
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  int _timeout = 0;

  // Waits up to the set timeout to begin a socket exchange
  while (!Mesh.ready() && _timeout < 5000) {
   d4972:	e7ef      	b.n	d4954 <_ZN7UbiMesh14_MeshReconnectEi+0x8>
    Mesh.connect();
    _timeout++;
    delay(1);
  }

  if (!Mesh.ready()) {
   d4974:	4807      	ldr	r0, [pc, #28]	; (d4994 <_ZN7UbiMesh14_MeshReconnectEi+0x48>)
   d4976:	f7ff ff75 	bl	d4864 <_ZN5spark9MeshClass5readyEv>
   d497a:	4604      	mov	r4, r0
   d497c:	b938      	cbnz	r0, d498e <_ZN7UbiMesh14_MeshReconnectEi+0x42>
    if (_debugMesh) {
   d497e:	4b06      	ldr	r3, [pc, #24]	; (d4998 <_ZN7UbiMesh14_MeshReconnectEi+0x4c>)
   d4980:	781b      	ldrb	r3, [r3, #0]
   d4982:	b123      	cbz	r3, d498e <_ZN7UbiMesh14_MeshReconnectEi+0x42>
      Serial.println(
   d4984:	f002 f88a 	bl	d6a9c <_Z16_fetch_usbserialv>
          "A problem has raised with the device trying to open a Mesh"
          "socket");
   d4988:	4904      	ldr	r1, [pc, #16]	; (d499c <_ZN7UbiMesh14_MeshReconnectEi+0x50>)
   d498a:	f001 fb8a 	bl	d60a2 <_ZN5Print7printlnEPKc>

  return true;
#else
  return false;
#endif
}
   d498e:	4620      	mov	r0, r4
   d4990:	bd38      	pop	{r3, r4, r5, pc}
   d4992:	bf00      	nop
   d4994:	2003e534 	.word	0x2003e534
   d4998:	2003e474 	.word	0x2003e474
   d499c:	000d8be8 	.word	0x000d8be8

000d49a0 <_ZN7UbiMesh11meshPublishEPKcS1_i>:

bool UbiMesh::meshPublish(const char* channel, const char* data) {
  return meshPublish(channel, data, 5000);
}

bool UbiMesh::meshPublish(const char* channel, const char* data, int timeout) {
   d49a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49a2:	4606      	mov	r6, r0
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (!Mesh.ready()) {
   d49a4:	480b      	ldr	r0, [pc, #44]	; (d49d4 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x34>)

bool UbiMesh::meshPublish(const char* channel, const char* data) {
  return meshPublish(channel, data, 5000);
}

bool UbiMesh::meshPublish(const char* channel, const char* data, int timeout) {
   d49a6:	460c      	mov	r4, r1
   d49a8:	4615      	mov	r5, r2
   d49aa:	461f      	mov	r7, r3
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (!Mesh.ready()) {
   d49ac:	f7ff ff5a 	bl	d4864 <_ZN5spark9MeshClass5readyEv>
   d49b0:	b918      	cbnz	r0, d49ba <_ZN7UbiMesh11meshPublishEPKcS1_i+0x1a>
    _MeshReconnect(timeout);
   d49b2:	4639      	mov	r1, r7
   d49b4:	4630      	mov	r0, r6
   d49b6:	f7ff ffc9 	bl	d494c <_ZN7UbiMesh14_MeshReconnectEi>
  }
  if (!Mesh.ready()) {
   d49ba:	4806      	ldr	r0, [pc, #24]	; (d49d4 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x34>)
   d49bc:	f7ff ff52 	bl	d4864 <_ZN5spark9MeshClass5readyEv>
   d49c0:	b138      	cbz	r0, d49d2 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x32>
    return false;
  }

  bool result = Mesh.publish(channel, data);
   d49c2:	462a      	mov	r2, r5
   d49c4:	4621      	mov	r1, r4
   d49c6:	4804      	ldr	r0, [pc, #16]	; (d49d8 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x38>)
   d49c8:	f002 fc40 	bl	d724c <_ZN5spark11MeshPublish7publishEPKcS2_>
   d49cc:	3000      	adds	r0, #0
   d49ce:	bf18      	it	ne
   d49d0:	2001      	movne	r0, #1
  return result;
#else
  return false;
#endif
}
   d49d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d49d4:	2003e534 	.word	0x2003e534
   d49d8:	2003e53c 	.word	0x2003e53c

000d49dc <_ZN7UbiMesh11meshPublishEPKcS1_>:
/**************************************************************************
 * Mesh handler functions
 ***************************************************************************/

bool UbiMesh::meshPublish(const char* channel, const char* data) {
  return meshPublish(channel, data, 5000);
   d49dc:	f241 3388 	movw	r3, #5000	; 0x1388
   d49e0:	f7ff bfde 	b.w	d49a0 <_ZN7UbiMesh11meshPublishEPKcS1_i>

000d49e4 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_>:
bool UbiMesh::meshPublishToUbidots(const char* device_label) {
  return meshPublishToUbidots(device_label, device_label);
}

bool UbiMesh::meshPublishToUbidots(const char* device_label,
                                   const char* device_name) {
   d49e4:	b530      	push	{r4, r5, lr}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (strlen(_meshPayload) <= 0) {
   d49e6:	7905      	ldrb	r5, [r0, #4]
bool UbiMesh::meshPublishToUbidots(const char* device_label) {
  return meshPublishToUbidots(device_label, device_label);
}

bool UbiMesh::meshPublishToUbidots(const char* device_label,
                                   const char* device_name) {
   d49e8:	b0c3      	sub	sp, #268	; 0x10c
   d49ea:	4604      	mov	r4, r0
   d49ec:	4613      	mov	r3, r2
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (strlen(_meshPayload) <= 0) {
   d49ee:	b94d      	cbnz	r5, d4a04 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x20>
    if (_debugMesh) {
   d49f0:	4b0b      	ldr	r3, [pc, #44]	; (d4a20 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x3c>)
   d49f2:	7818      	ldrb	r0, [r3, #0]
   d49f4:	b190      	cbz	r0, d4a1c <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x38>
      Serial.println(
   d49f6:	f002 f851 	bl	d6a9c <_Z16_fetch_usbserialv>
          "You have not added any variable value, please call the add()"
          "method first");
   d49fa:	490a      	ldr	r1, [pc, #40]	; (d4a24 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x40>)
   d49fc:	f001 fb51 	bl	d60a2 <_ZN5Print7printlnEPKc>
   d4a00:	4628      	mov	r0, r5
   d4a02:	e00b      	b.n	d4a1c <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x38>
    }
    return false;
  }
  char payload[256];
  sprintf(payload, "%s|%s|%s", device_label, device_name, _meshPayload);
   d4a04:	1d02      	adds	r2, r0, #4
   d4a06:	9200      	str	r2, [sp, #0]
   d4a08:	a802      	add	r0, sp, #8
   d4a0a:	460a      	mov	r2, r1
   d4a0c:	4906      	ldr	r1, [pc, #24]	; (d4a28 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x44>)
   d4a0e:	f000 fb91 	bl	d5134 <sprintf>
  return meshPublish(UBIDOTS_MESH_CHANNEL, payload);
   d4a12:	aa02      	add	r2, sp, #8
   d4a14:	4905      	ldr	r1, [pc, #20]	; (d4a2c <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x48>)
   d4a16:	4620      	mov	r0, r4
   d4a18:	f7ff ffe0 	bl	d49dc <_ZN7UbiMesh11meshPublishEPKcS1_>
#else
  Serial.println(
      "[WARNING] Your device does not support to publish using Mesh");
#endif
}
   d4a1c:	b043      	add	sp, #268	; 0x10c
   d4a1e:	bd30      	pop	{r4, r5, pc}
   d4a20:	2003e474 	.word	0x2003e474
   d4a24:	000d8c29 	.word	0x000d8c29
   d4a28:	000d8b91 	.word	0x000d8b91
   d4a2c:	000d8c72 	.word	0x000d8c72

000d4a30 <_ZN7UbiMesh20meshPublishToUbidotsEPKc>:
bool UbiMesh::meshPublishToUbidots() {
  return meshPublishToUbidots(_default_device_label);
}

bool UbiMesh::meshPublishToUbidots(const char* device_label) {
  return meshPublishToUbidots(device_label, device_label);
   d4a30:	460a      	mov	r2, r1
   d4a32:	f7ff bfd7 	b.w	d49e4 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_>
	...

000d4a38 <_ZN7UbiMesh8setDebugEb>:

/*
  Makes debug messages available
*/

void UbiMesh::setDebug(bool debug) { _debugMesh = debug; }
   d4a38:	4b01      	ldr	r3, [pc, #4]	; (d4a40 <_ZN7UbiMesh8setDebugEb+0x8>)
   d4a3a:	7019      	strb	r1, [r3, #0]
   d4a3c:	4770      	bx	lr
   d4a3e:	bf00      	nop
   d4a40:	2003e474 	.word	0x2003e474

000d4a44 <_GLOBAL__sub_I__ZN7UbiMeshC2EPc>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
   d4a44:	b508      	push	{r3, lr}
   d4a46:	f000 f82b 	bl	d4aa0 <HAL_Pin_Map>
   d4a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4a4e:	f000 b8a7 	b.w	d4ba0 <HAL_Timer_Get_Milli_Seconds>
	...

000d4a54 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d4a54:	b510      	push	{r4, lr}
   d4a56:	4c06      	ldr	r4, [pc, #24]	; (d4a70 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d4a58:	f000 f822 	bl	d4aa0 <HAL_Pin_Map>
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	f000 fe9d 	bl	d579c <_ZN3UDPC1Ev>
   d4a62:	4620      	mov	r0, r4
   d4a64:	4a03      	ldr	r2, [pc, #12]	; (d4a74 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d4a66:	4904      	ldr	r1, [pc, #16]	; (d4a78 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
   d4a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4a6c:	f003 b8be 	b.w	d7bec <__aeabi_atexit>
   d4a70:	2003e478 	.word	0x2003e478
   d4a74:	2003cf80 	.word	0x2003cf80
   d4a78:	000d47d5 	.word	0x000d47d5

000d4a7c <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
   d4a7c:	f000 b810 	b.w	d4aa0 <HAL_Pin_Map>

000d4a80 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <netdb_freeaddrinfo+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	689b      	ldr	r3, [r3, #8]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030268 	.word	0x00030268

000d4a90 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <netdb_getaddrinfo+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	68db      	ldr	r3, [r3, #12]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030268 	.word	0x00030268

000d4aa0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_Pin_Map+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	681b      	ldr	r3, [r3, #0]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003022c 	.word	0x0003022c

000d4ab0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_Validate_Pin_Function+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	685b      	ldr	r3, [r3, #4]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003022c 	.word	0x0003022c

000d4ac0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_Pin_Mode+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	689b      	ldr	r3, [r3, #8]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003022c 	.word	0x0003022c

000d4ad0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_Get_Pin_Mode+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	68db      	ldr	r3, [r3, #12]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003022c 	.word	0x0003022c

000d4ae0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_GPIO_Write+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	691b      	ldr	r3, [r3, #16]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003022c 	.word	0x0003022c

000d4af0 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_ADC_Read+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003022c 	.word	0x0003022c

000d4b00 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_SPI_Init+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	69db      	ldr	r3, [r3, #28]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030230 	.word	0x00030230

000d4b10 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_SPI_Is_Enabled+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6a1b      	ldr	r3, [r3, #32]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030230 	.word	0x00030230

000d4b20 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <if_name_to_index+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	691b      	ldr	r3, [r3, #16]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003026c 	.word	0x0003026c

000d4b30 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <if_index_to_name+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	695b      	ldr	r3, [r3, #20]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003026c 	.word	0x0003026c

000d4b40 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <if_get_by_index+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	699b      	ldr	r3, [r3, #24]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	0003026c 	.word	0x0003026c

000d4b50 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <if_get_addrs+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	0003026c 	.word	0x0003026c

000d4b60 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <if_free_if_addrs+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003026c 	.word	0x0003026c

000d4b70 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <HAL_RNG_GetRandomNumber+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	685b      	ldr	r3, [r3, #4]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030218 	.word	0x00030218

000d4b80 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <HAL_Delay_Milliseconds+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	689b      	ldr	r3, [r3, #8]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030218 	.word	0x00030218

000d4b90 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <HAL_Delay_Microseconds+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	68db      	ldr	r3, [r3, #12]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030218 	.word	0x00030218

000d4ba0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	695b      	ldr	r3, [r3, #20]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030218 	.word	0x00030218

000d4bb0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <hal_ble_stack_init+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	689b      	ldr	r3, [r3, #8]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030274 	.word	0x00030274

000d4bc0 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <hal_ble_gap_set_tx_power+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030274 	.word	0x00030274

000d4bd0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b03      	ldr	r3, [pc, #12]	; (d4be0 <hal_ble_gap_disconnect+0x10>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4bda:	9301      	str	r3, [sp, #4]
   d4bdc:	bd08      	pop	{r3, pc}
   d4bde:	0000      	.short	0x0000
   d4be0:	00030274 	.word	0x00030274

000d4be4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b03      	ldr	r3, [pc, #12]	; (d4bf4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4bee:	9301      	str	r3, [sp, #4]
   d4bf0:	bd08      	pop	{r3, pc}
   d4bf2:	0000      	.short	0x0000
   d4bf4:	00030274 	.word	0x00030274

000d4bf8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <os_thread_create+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	685b      	ldr	r3, [r3, #4]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030248 	.word	0x00030248

000d4c08 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <os_thread_is_current+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	689b      	ldr	r3, [r3, #8]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030248 	.word	0x00030248

000d4c18 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <os_thread_yield+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	68db      	ldr	r3, [r3, #12]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030248 	.word	0x00030248

000d4c28 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <os_thread_join+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	691b      	ldr	r3, [r3, #16]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030248 	.word	0x00030248

000d4c38 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <os_thread_cleanup+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	695b      	ldr	r3, [r3, #20]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030248 	.word	0x00030248

000d4c48 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <os_thread_scheduling+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	69db      	ldr	r3, [r3, #28]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030248 	.word	0x00030248

000d4c58 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <os_timer_create+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	6a1b      	ldr	r3, [r3, #32]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030248 	.word	0x00030248

000d4c68 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <os_timer_destroy+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030248 	.word	0x00030248

000d4c78 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <os_timer_get_id+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030248 	.word	0x00030248

000d4c88 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <os_timer_change+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030248 	.word	0x00030248

000d4c98 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <os_mutex_create+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030248 	.word	0x00030248

000d4ca8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <os_mutex_recursive_create+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030248 	.word	0x00030248

000d4cb8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <os_mutex_recursive_lock+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	00030248 	.word	0x00030248

000d4cc8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <os_mutex_recursive_unlock+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	00030248 	.word	0x00030248

000d4cd8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <os_thread_exit+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	00030248 	.word	0x00030248

000d4ce8 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <os_timer_set_id+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	00030248 	.word	0x00030248

000d4cf8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <inet_inet_ntop+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	695b      	ldr	r3, [r3, #20]
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	00030264 	.word	0x00030264

000d4d08 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <inet_inet_pton+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	699b      	ldr	r3, [r3, #24]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	00030264 	.word	0x00030264

000d4d18 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <inet_htonl+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	6a1b      	ldr	r3, [r3, #32]
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	00030264 	.word	0x00030264

000d4d28 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <inet_ntohs+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030264 	.word	0x00030264

000d4d38 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <inet_htons+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030264 	.word	0x00030264

000d4d48 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <HAL_USART_Init+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	681b      	ldr	r3, [r3, #0]
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	0003023c 	.word	0x0003023c

000d4d58 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <HAL_USART_Write_Data+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	68db      	ldr	r3, [r3, #12]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	0003023c 	.word	0x0003023c

000d4d68 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <HAL_USART_Available_Data+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	691b      	ldr	r3, [r3, #16]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	0003023c 	.word	0x0003023c

000d4d78 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <HAL_USART_Read_Data+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	695b      	ldr	r3, [r3, #20]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	0003023c 	.word	0x0003023c

000d4d88 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <HAL_USART_Peek_Data+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	699b      	ldr	r3, [r3, #24]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	0003023c 	.word	0x0003023c

000d4d98 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <HAL_USART_Flush_Data+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	69db      	ldr	r3, [r3, #28]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	0003023c 	.word	0x0003023c

000d4da8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <HAL_USART_Is_Enabled+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	6a1b      	ldr	r3, [r3, #32]
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	0003023c 	.word	0x0003023c

000d4db8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <HAL_USART_Available_Data_For_Write+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	0003023c 	.word	0x0003023c

000d4dc8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <HAL_I2C_Write_Data+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	6a1b      	ldr	r3, [r3, #32]
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	00030228 	.word	0x00030228

000d4dd8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <HAL_I2C_Available_Data+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	00030228 	.word	0x00030228

000d4de8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <HAL_I2C_Read_Data+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	00030228 	.word	0x00030228

000d4df8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <HAL_I2C_Peek_Data+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	00030228 	.word	0x00030228

000d4e08 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <HAL_I2C_Flush_Data+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	00030228 	.word	0x00030228

000d4e18 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <HAL_I2C_Is_Enabled+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	00030228 	.word	0x00030228

000d4e28 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <HAL_I2C_Init+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	00030228 	.word	0x00030228

000d4e38 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <sock_bind+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	685b      	ldr	r3, [r3, #4]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	00030238 	.word	0x00030238

000d4e48 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <sock_setsockopt+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	699b      	ldr	r3, [r3, #24]
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	00030238 	.word	0x00030238

000d4e58 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <sock_close+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	69db      	ldr	r3, [r3, #28]
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	00030238 	.word	0x00030238

000d4e68 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <sock_connect+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	6a1b      	ldr	r3, [r3, #32]
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	00030238 	.word	0x00030238

000d4e78 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <sock_recv+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	00030238 	.word	0x00030238

000d4e88 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <sock_recvfrom+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	00030238 	.word	0x00030238

000d4e98 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <sock_send+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	00030238 	.word	0x00030238

000d4ea8 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <sock_sendto+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	00030238 	.word	0x00030238

000d4eb8 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <sock_socket+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	00030238 	.word	0x00030238

000d4ec8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <HAL_USB_USART_Init+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	681b      	ldr	r3, [r3, #0]
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	0003024c 	.word	0x0003024c

000d4ed8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <HAL_USB_USART_Begin+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	685b      	ldr	r3, [r3, #4]
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	0003024c 	.word	0x0003024c

000d4ee8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <HAL_USB_USART_Available_Data+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	691b      	ldr	r3, [r3, #16]
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	0003024c 	.word	0x0003024c

000d4ef8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	695b      	ldr	r3, [r3, #20]
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	0003024c 	.word	0x0003024c

000d4f08 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <HAL_USB_USART_Receive_Data+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	699b      	ldr	r3, [r3, #24]
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	0003024c 	.word	0x0003024c

000d4f18 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <HAL_USB_USART_Send_Data+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	69db      	ldr	r3, [r3, #28]
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	0003024c 	.word	0x0003024c

000d4f28 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <HAL_USB_USART_Flush_Data+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	6a1b      	ldr	r3, [r3, #32]
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	0003024c 	.word	0x0003024c

000d4f38 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <panic_+0xc>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f40:	9301      	str	r3, [sp, #4]
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	00030260 	.word	0x00030260

000d4f48 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <log_message+0xc>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4f50:	9301      	str	r3, [sp, #4]
   d4f52:	bd08      	pop	{r3, pc}
   d4f54:	00030260 	.word	0x00030260

000d4f58 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f58:	b508      	push	{r3, lr}
   d4f5a:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <set_system_mode+0xc>)
   d4f5c:	681b      	ldr	r3, [r3, #0]
   d4f5e:	685b      	ldr	r3, [r3, #4]
   d4f60:	9301      	str	r3, [sp, #4]
   d4f62:	bd08      	pop	{r3, pc}
   d4f64:	00030220 	.word	0x00030220

000d4f68 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b02      	ldr	r3, [pc, #8]	; (d4f74 <system_delay_ms+0xc>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	695b      	ldr	r3, [r3, #20]
   d4f70:	9301      	str	r3, [sp, #4]
   d4f72:	bd08      	pop	{r3, pc}
   d4f74:	00030220 	.word	0x00030220

000d4f78 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4f78:	b508      	push	{r3, lr}
   d4f7a:	4b02      	ldr	r3, [pc, #8]	; (d4f84 <system_thread_set_state+0xc>)
   d4f7c:	681b      	ldr	r3, [r3, #0]
   d4f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f80:	9301      	str	r3, [sp, #4]
   d4f82:	bd08      	pop	{r3, pc}
   d4f84:	00030220 	.word	0x00030220

000d4f88 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4f88:	b508      	push	{r3, lr}
   d4f8a:	4b02      	ldr	r3, [pc, #8]	; (d4f94 <application_thread_current+0xc>)
   d4f8c:	681b      	ldr	r3, [r3, #0]
   d4f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4f90:	9301      	str	r3, [sp, #4]
   d4f92:	bd08      	pop	{r3, pc}
   d4f94:	00030220 	.word	0x00030220

000d4f98 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4f98:	b508      	push	{r3, lr}
   d4f9a:	4b02      	ldr	r3, [pc, #8]	; (d4fa4 <application_thread_invoke+0xc>)
   d4f9c:	681b      	ldr	r3, [r3, #0]
   d4f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4fa0:	9301      	str	r3, [sp, #4]
   d4fa2:	bd08      	pop	{r3, pc}
   d4fa4:	00030220 	.word	0x00030220

000d4fa8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4fa8:	b508      	push	{r3, lr}
   d4faa:	4b03      	ldr	r3, [pc, #12]	; (d4fb8 <system_ctrl_set_app_request_handler+0x10>)
   d4fac:	681b      	ldr	r3, [r3, #0]
   d4fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4fb2:	9301      	str	r3, [sp, #4]
   d4fb4:	bd08      	pop	{r3, pc}
   d4fb6:	0000      	.short	0x0000
   d4fb8:	00030220 	.word	0x00030220

000d4fbc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b03      	ldr	r3, [pc, #12]	; (d4fcc <system_ctrl_set_result+0x10>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4fc6:	9301      	str	r3, [sp, #4]
   d4fc8:	bd08      	pop	{r3, pc}
   d4fca:	0000      	.short	0x0000
   d4fcc:	00030220 	.word	0x00030220

000d4fd0 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b03      	ldr	r3, [pc, #12]	; (d4fe0 <system_invoke_event_handler+0x10>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4fda:	9301      	str	r3, [sp, #4]
   d4fdc:	bd08      	pop	{r3, pc}
   d4fde:	0000      	.short	0x0000
   d4fe0:	00030220 	.word	0x00030220

000d4fe4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <network_connect+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	685b      	ldr	r3, [r3, #4]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030240 	.word	0x00030240

000d4ff4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <network_connecting+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	689b      	ldr	r3, [r3, #8]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030240 	.word	0x00030240

000d5004 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <network_disconnect+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	68db      	ldr	r3, [r3, #12]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030240 	.word	0x00030240

000d5014 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <network_ready+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	691b      	ldr	r3, [r3, #16]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030240 	.word	0x00030240

000d5024 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <network_on+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	695b      	ldr	r3, [r3, #20]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030240 	.word	0x00030240

000d5034 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <network_off+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	699b      	ldr	r3, [r3, #24]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030240 	.word	0x00030240

000d5044 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <network_listen+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	69db      	ldr	r3, [r3, #28]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030240 	.word	0x00030240

000d5054 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <network_listening+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6a1b      	ldr	r3, [r3, #32]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030240 	.word	0x00030240

000d5064 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <network_set_listen_timeout+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030240 	.word	0x00030240

000d5074 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <network_get_listen_timeout+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030240 	.word	0x00030240

000d5084 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <spark_function+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	685b      	ldr	r3, [r3, #4]
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030244 	.word	0x00030244

000d5094 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <spark_process+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	689b      	ldr	r3, [r3, #8]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030244 	.word	0x00030244

000d50a4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <spark_cloud_flag_connected+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	695b      	ldr	r3, [r3, #20]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030244 	.word	0x00030244

000d50b4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <spark_deviceID+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	69db      	ldr	r3, [r3, #28]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030244 	.word	0x00030244

000d50c4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <spark_send_event+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6a1b      	ldr	r3, [r3, #32]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030244 	.word	0x00030244

000d50d4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <spark_subscribe+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030244 	.word	0x00030244

000d50e4 <spark_set_connection_property>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <spark_set_connection_property+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030244 	.word	0x00030244

000d50f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <spark_set_random_seed_from_cloud_handler+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030244 	.word	0x00030244

000d5104 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <malloc+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	681b      	ldr	r3, [r3, #0]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003021c 	.word	0x0003021c

000d5114 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <free+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	685b      	ldr	r3, [r3, #4]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003021c 	.word	0x0003021c

000d5124 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <realloc+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	689b      	ldr	r3, [r3, #8]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003021c 	.word	0x0003021c

000d5134 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <sprintf+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	68db      	ldr	r3, [r3, #12]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003021c 	.word	0x0003021c

000d5144 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <vsnprintf+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003021c 	.word	0x0003021c

000d5154 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <abort+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003021c 	.word	0x0003021c

000d5164 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <_malloc_r+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	0003021c 	.word	0x0003021c

000d5174 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <__errno+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003021c 	.word	0x0003021c

000d5184 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5184:	2200      	movs	r2, #0
   d5186:	4611      	mov	r1, r2
   d5188:	6840      	ldr	r0, [r0, #4]
   d518a:	f7ff bf63 	b.w	d5054 <network_listening>

000d518e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d518e:	2200      	movs	r2, #0
   d5190:	4611      	mov	r1, r2
   d5192:	6840      	ldr	r0, [r0, #4]
   d5194:	f7ff bf6e 	b.w	d5074 <network_get_listen_timeout>

000d5198 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5198:	2200      	movs	r2, #0
   d519a:	6840      	ldr	r0, [r0, #4]
   d519c:	f7ff bf62 	b.w	d5064 <network_set_listen_timeout>

000d51a0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d51a0:	2200      	movs	r2, #0
   d51a2:	f081 0101 	eor.w	r1, r1, #1
   d51a6:	6840      	ldr	r0, [r0, #4]
   d51a8:	f7ff bf4c 	b.w	d5044 <network_listen>

000d51ac <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d51ac:	2300      	movs	r3, #0
   d51ae:	461a      	mov	r2, r3
   d51b0:	4619      	mov	r1, r3
   d51b2:	6840      	ldr	r0, [r0, #4]
   d51b4:	f7ff bf3e 	b.w	d5034 <network_off>

000d51b8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d51b8:	2300      	movs	r3, #0
   d51ba:	461a      	mov	r2, r3
   d51bc:	4619      	mov	r1, r3
   d51be:	6840      	ldr	r0, [r0, #4]
   d51c0:	f7ff bf30 	b.w	d5024 <network_on>

000d51c4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d51c4:	2200      	movs	r2, #0
   d51c6:	4611      	mov	r1, r2
   d51c8:	6840      	ldr	r0, [r0, #4]
   d51ca:	f7ff bf23 	b.w	d5014 <network_ready>

000d51ce <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d51ce:	2200      	movs	r2, #0
   d51d0:	4611      	mov	r1, r2
   d51d2:	6840      	ldr	r0, [r0, #4]
   d51d4:	f7ff bf0e 	b.w	d4ff4 <network_connecting>

000d51d8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51d8:	2200      	movs	r2, #0
   d51da:	2102      	movs	r1, #2
   d51dc:	6840      	ldr	r0, [r0, #4]
   d51de:	f7ff bf11 	b.w	d5004 <network_disconnect>

000d51e2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51e2:	2300      	movs	r3, #0
   d51e4:	461a      	mov	r2, r3
   d51e6:	6840      	ldr	r0, [r0, #4]
   d51e8:	f7ff befc 	b.w	d4fe4 <network_connect>

000d51ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d51ec:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d51ee:	2203      	movs	r2, #3
   d51f0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d51f2:	4a02      	ldr	r2, [pc, #8]	; (d51fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d51f4:	601a      	str	r2, [r3, #0]
   d51f6:	4770      	bx	lr
   d51f8:	2003e4c4 	.word	0x2003e4c4
   d51fc:	000d8c88 	.word	0x000d8c88

000d5200 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5200:	4770      	bx	lr

000d5202 <_ZN8SPIClassD0Ev>:
   d5202:	b510      	push	{r4, lr}
   d5204:	2110      	movs	r1, #16
   d5206:	4604      	mov	r4, r0
   d5208:	f002 fcfe 	bl	d7c08 <_ZdlPvj>
   d520c:	4620      	mov	r0, r4
   d520e:	bd10      	pop	{r4, pc}

000d5210 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5210:	b570      	push	{r4, r5, r6, lr}
   d5212:	4b08      	ldr	r3, [pc, #32]	; (d5234 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5214:	6003      	str	r3, [r0, #0]
   d5216:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5218:	2500      	movs	r5, #0
   d521a:	460e      	mov	r6, r1
   d521c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5220:	f7ff fd3a 	bl	d4c98 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5224:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5226:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5228:	f7ff fc6a 	bl	d4b00 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d522c:	60a5      	str	r5, [r4, #8]
}
   d522e:	4620      	mov	r0, r4
   d5230:	bd70      	pop	{r4, r5, r6, pc}
   d5232:	bf00      	nop
   d5234:	000d8cbc 	.word	0x000d8cbc

000d5238 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5238:	7900      	ldrb	r0, [r0, #4]
   d523a:	f7ff bc69 	b.w	d4b10 <HAL_SPI_Is_Enabled>
	...

000d5240 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5240:	4b04      	ldr	r3, [pc, #16]	; (d5254 <_GLOBAL__sub_I_System+0x14>)
   d5242:	2000      	movs	r0, #0
   d5244:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5248:	7018      	strb	r0, [r3, #0]
   d524a:	8058      	strh	r0, [r3, #2]
   d524c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d524e:	f7ff be83 	b.w	d4f58 <set_system_mode>
   d5252:	bf00      	nop
   d5254:	2003e4cc 	.word	0x2003e4cc

000d5258 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5258:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d525a:	6804      	ldr	r4, [r0, #0]
   d525c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d525e:	46a4      	mov	ip, r4
    }
   d5260:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5264:	4760      	bx	ip

000d5266 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5266:	6803      	ldr	r3, [r0, #0]
   d5268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d526a:	4718      	bx	r3

000d526c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d526c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d526e:	4770      	bx	lr

000d5270 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5270:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d5272:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5274:	1a10      	subs	r0, r2, r0
   d5276:	4770      	bx	lr

000d5278 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5278:	b513      	push	{r0, r1, r4, lr}
   d527a:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d527c:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d527e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d5282:	68d4      	ldr	r4, [r2, #12]
   d5284:	4619      	mov	r1, r3
   d5286:	2201      	movs	r2, #1
   d5288:	47a0      	blx	r4
}
   d528a:	b002      	add	sp, #8
   d528c:	bd10      	pop	{r4, pc}

000d528e <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d528e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d5290:	6803      	ldr	r3, [r0, #0]
   d5292:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d5294:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5296:	4798      	blx	r3
   d5298:	b128      	cbz	r0, d52a6 <_ZN3UDP4readEv+0x18>
   d529a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d529c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d529e:	1c59      	adds	r1, r3, #1
   d52a0:	86e1      	strh	r1, [r4, #54]	; 0x36
   d52a2:	5cd0      	ldrb	r0, [r2, r3]
   d52a4:	bd10      	pop	{r4, pc}
   d52a6:	f04f 30ff 	mov.w	r0, #4294967295
}
   d52aa:	bd10      	pop	{r4, pc}

000d52ac <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d52ac:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d52ae:	6803      	ldr	r3, [r0, #0]
   d52b0:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d52b2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d52b4:	4798      	blx	r3
   d52b6:	b118      	cbz	r0, d52c0 <_ZN3UDP4peekEv+0x14>
   d52b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d52ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d52bc:	5cd0      	ldrb	r0, [r2, r3]
   d52be:	bd10      	pop	{r4, pc}
   d52c0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d52c4:	bd10      	pop	{r4, pc}

000d52c6 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d52c6:	4770      	bx	lr

000d52c8 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d52c8:	b410      	push	{r4}
   d52ca:	4603      	mov	r3, r0
   d52cc:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d52ce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d52d0:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d52d2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d52d4:	6803      	ldr	r3, [r0, #0]
   d52d6:	1a52      	subs	r2, r2, r1
   d52d8:	68db      	ldr	r3, [r3, #12]
   d52da:	4421      	add	r1, r4
}
   d52dc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d52e0:	4718      	bx	r3

000d52e2 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d52e2:	f1a0 0010 	sub.w	r0, r0, #16
   d52e6:	f7ff bfef 	b.w	d52c8 <_ZNK3UDP7printToER5Print>

000d52ea <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d52ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d52ec:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d52ee:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d52f0:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d52f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d52f4:	4604      	mov	r4, r0
   d52f6:	460f      	mov	r7, r1
   d52f8:	4615      	mov	r5, r2
    stop();
   d52fa:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d52fc:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d52fe:	4632      	mov	r2, r6
   d5300:	2100      	movs	r1, #0
   d5302:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5304:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5306:	f003 fa3a 	bl	d877e <memset>
    saddr.sin6_len = sizeof(saddr);
   d530a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d530e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5310:	260a      	movs	r6, #10
   d5312:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5316:	f7ff fd0f 	bl	d4d38 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d531a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d531c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5320:	2102      	movs	r1, #2
   d5322:	4630      	mov	r0, r6
   d5324:	f7ff fdc8 	bl	d4eb8 <sock_socket>

    if (_sock < 0) {
   d5328:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d532a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d532c:	db24      	blt.n	d5378 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d532e:	2204      	movs	r2, #4
   d5330:	9200      	str	r2, [sp, #0]
   d5332:	ab02      	add	r3, sp, #8
   d5334:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5338:	f7ff fd86 	bl	d4e48 <sock_setsockopt>
   d533c:	b9e0      	cbnz	r0, d5378 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d533e:	b195      	cbz	r5, d5366 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d5340:	9003      	str	r0, [sp, #12]
   d5342:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5346:	a903      	add	r1, sp, #12
   d5348:	b2e8      	uxtb	r0, r5
   d534a:	f7ff fbf1 	bl	d4b30 <if_index_to_name>
   d534e:	b998      	cbnz	r0, d5378 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d5350:	2306      	movs	r3, #6
   d5352:	9300      	str	r3, [sp, #0]
   d5354:	f241 020b 	movw	r2, #4107	; 0x100b
   d5358:	ab03      	add	r3, sp, #12
   d535a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d535e:	6960      	ldr	r0, [r4, #20]
   d5360:	f7ff fd72 	bl	d4e48 <sock_setsockopt>
   d5364:	b940      	cbnz	r0, d5378 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5366:	221c      	movs	r2, #28
   d5368:	a905      	add	r1, sp, #20
   d536a:	6960      	ldr	r0, [r4, #20]
   d536c:	f7ff fd64 	bl	d4e38 <sock_bind>
   d5370:	b910      	cbnz	r0, d5378 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d5372:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d5374:	2001      	movs	r0, #1
   d5376:	e004      	b.n	d5382 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5378:	6823      	ldr	r3, [r4, #0]
   d537a:	4620      	mov	r0, r4
   d537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d537e:	4798      	blx	r3
   d5380:	2000      	movs	r0, #0
    }
    return bound;
}
   d5382:	b00d      	add	sp, #52	; 0x34
   d5384:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5386 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d5386:	b510      	push	{r4, lr}
   d5388:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d538a:	6940      	ldr	r0, [r0, #20]
   d538c:	2800      	cmp	r0, #0
   d538e:	db01      	blt.n	d5394 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d5390:	f7ff fd62 	bl	d4e58 <sock_close>
    }

    _sock = -1;
   d5394:	f04f 33ff 	mov.w	r3, #4294967295
   d5398:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d539a:	2300      	movs	r3, #0
   d539c:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d539e:	8723      	strh	r3, [r4, #56]	; 0x38
   d53a0:	bd10      	pop	{r4, pc}

000d53a2 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d53a2:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d53a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d53a6:	4605      	mov	r5, r0
   d53a8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d53aa:	b113      	cbz	r3, d53b2 <_ZN3UDP5writeEPKhj+0x10>
   d53ac:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d53ae:	1a24      	subs	r4, r4, r0
   d53b0:	e000      	b.n	d53b4 <_ZN3UDP5writeEPKhj+0x12>
   d53b2:	461c      	mov	r4, r3
   d53b4:	4294      	cmp	r4, r2
   d53b6:	bf28      	it	cs
   d53b8:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d53ba:	4622      	mov	r2, r4
   d53bc:	4418      	add	r0, r3
   d53be:	f003 f9b8 	bl	d8732 <memcpy>
    _offset += size;
   d53c2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d53c4:	4423      	add	r3, r4
   d53c6:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d53c8:	4620      	mov	r0, r4
   d53ca:	bd38      	pop	{r3, r4, r5, pc}

000d53cc <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d53cc:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d53ce:	6803      	ldr	r3, [r0, #0]
   d53d0:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d53d2:	4604      	mov	r4, r0
   d53d4:	460e      	mov	r6, r1
   d53d6:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d53d8:	4798      	blx	r3
   d53da:	b188      	cbz	r0, d5400 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d53dc:	6823      	ldr	r3, [r4, #0]
   d53de:	4620      	mov	r0, r4
   d53e0:	691b      	ldr	r3, [r3, #16]
   d53e2:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d53e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d53e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d53e8:	4285      	cmp	r5, r0
   d53ea:	bfa8      	it	ge
   d53ec:	4605      	movge	r5, r0
   d53ee:	4419      	add	r1, r3
   d53f0:	462a      	mov	r2, r5
   d53f2:	4630      	mov	r0, r6
   d53f4:	f003 f99d 	bl	d8732 <memcpy>
        _offset += read;
   d53f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d53fa:	442b      	add	r3, r5
   d53fc:	86e3      	strh	r3, [r4, #54]	; 0x36
   d53fe:	e001      	b.n	d5404 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d5400:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d5404:	4628      	mov	r0, r5
   d5406:	bd70      	pop	{r4, r5, r6, pc}

000d5408 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5408:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d540a:	4604      	mov	r4, r0
   d540c:	4b05      	ldr	r3, [pc, #20]	; (d5424 <_ZN3UDP8remoteIPEv+0x1c>)
   d540e:	f844 3b04 	str.w	r3, [r4], #4
   d5412:	f101 0520 	add.w	r5, r1, #32
   d5416:	4606      	mov	r6, r0
   d5418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d541a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d541c:	682b      	ldr	r3, [r5, #0]
   d541e:	7023      	strb	r3, [r4, #0]
   d5420:	4630      	mov	r0, r6
   d5422:	bd70      	pop	{r4, r5, r6, pc}
   d5424:	000d901c 	.word	0x000d901c

000d5428 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5428:	b5f0      	push	{r4, r5, r6, r7, lr}
   d542a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d542c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d542e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5430:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d5432:	4a0a      	ldr	r2, [pc, #40]	; (d545c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5434:	9202      	str	r2, [sp, #8]
   d5436:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5438:	468e      	mov	lr, r1
   d543a:	4606      	mov	r6, r0
   d543c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d543e:	ac03      	add	r4, sp, #12
   d5440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5442:	682b      	ldr	r3, [r5, #0]
   d5444:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5446:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d544a:	9300      	str	r3, [sp, #0]
   d544c:	4662      	mov	r2, ip
   d544e:	ab02      	add	r3, sp, #8
   d5450:	4671      	mov	r1, lr
   d5452:	4630      	mov	r0, r6
   d5454:	47b8      	blx	r7
    }
   d5456:	b009      	add	sp, #36	; 0x24
   d5458:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d545a:	bf00      	nop
   d545c:	000d901c 	.word	0x000d901c

000d5460 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5460:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5462:	6803      	ldr	r3, [r0, #0]
   d5464:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5468:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d546a:	4b0d      	ldr	r3, [pc, #52]	; (d54a0 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d546c:	b089      	sub	sp, #36	; 0x24
   d546e:	f100 0620 	add.w	r6, r0, #32
   d5472:	4604      	mov	r4, r0
   d5474:	9302      	str	r3, [sp, #8]
   d5476:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5478:	ad03      	add	r5, sp, #12
   d547a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d547c:	6833      	ldr	r3, [r6, #0]
   d547e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5480:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d5482:	9300      	str	r3, [sp, #0]
   d5484:	4672      	mov	r2, lr
   d5486:	ab02      	add	r3, sp, #8
   d5488:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d548a:	4620      	mov	r0, r4
   d548c:	47b8      	blx	r7
    flush(); // wait for send to complete
   d548e:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5490:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d5492:	69db      	ldr	r3, [r3, #28]
   d5494:	4620      	mov	r0, r4
   d5496:	4798      	blx	r3
    return result;
}
   d5498:	4628      	mov	r0, r5
   d549a:	b009      	add	sp, #36	; 0x24
   d549c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d549e:	bf00      	nop
   d54a0:	000d901c 	.word	0x000d901c

000d54a4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d54a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d54a6:	7843      	ldrb	r3, [r0, #1]
   d54a8:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d54aa:	b08d      	sub	sp, #52	; 0x34
   d54ac:	4605      	mov	r5, r0
   d54ae:	460c      	mov	r4, r1
   d54b0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d54b2:	d101      	bne.n	d54b8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d54b4:	1d01      	adds	r1, r0, #4
   d54b6:	e033      	b.n	d5520 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d54b8:	2b0a      	cmp	r3, #10
   d54ba:	d135      	bne.n	d5528 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d54bc:	2211      	movs	r2, #17
   d54be:	2100      	movs	r1, #0
   d54c0:	a801      	add	r0, sp, #4
   d54c2:	f003 f95c 	bl	d877e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d54c6:	68ab      	ldr	r3, [r5, #8]
   d54c8:	b943      	cbnz	r3, d54dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d54ca:	68eb      	ldr	r3, [r5, #12]
   d54cc:	b933      	cbnz	r3, d54dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d54ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d54d2:	692e      	ldr	r6, [r5, #16]
   d54d4:	f7ff fc20 	bl	d4d18 <inet_htonl>
   d54d8:	4286      	cmp	r6, r0
   d54da:	d01f      	beq.n	d551c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d54dc:	f105 0308 	add.w	r3, r5, #8
   d54e0:	ae01      	add	r6, sp, #4
   d54e2:	f105 0e18 	add.w	lr, r5, #24
   d54e6:	6818      	ldr	r0, [r3, #0]
   d54e8:	6859      	ldr	r1, [r3, #4]
   d54ea:	4632      	mov	r2, r6
   d54ec:	c203      	stmia	r2!, {r0, r1}
   d54ee:	3308      	adds	r3, #8
   d54f0:	4573      	cmp	r3, lr
   d54f2:	4616      	mov	r6, r2
   d54f4:	d1f7      	bne.n	d54e6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d54f6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d54f8:	a901      	add	r1, sp, #4
   d54fa:	a806      	add	r0, sp, #24
   d54fc:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d54fe:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5502:	f001 fa29 	bl	d6958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5506:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5508:	3404      	adds	r4, #4
   d550a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d550c:	6833      	ldr	r3, [r6, #0]
   d550e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d5510:	b157      	cbz	r7, d5528 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d5512:	8868      	ldrh	r0, [r5, #2]
   d5514:	f7ff fc08 	bl	d4d28 <inet_ntohs>
   d5518:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d551a:	e005      	b.n	d5528 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d551c:	f105 0114 	add.w	r1, r5, #20
   d5520:	4620      	mov	r0, r4
   d5522:	f001 fa4e 	bl	d69c2 <_ZN9IPAddressaSEPKh>
   d5526:	e7f3      	b.n	d5510 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5528:	b00d      	add	sp, #52	; 0x34
   d552a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d552c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5530:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5532:	ab0e      	add	r3, sp, #56	; 0x38
   d5534:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5536:	4606      	mov	r6, r0
   d5538:	4617      	mov	r7, r2
   d553a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d553c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5540:	462a      	mov	r2, r5
   d5542:	4629      	mov	r1, r5
   d5544:	f7ff faa4 	bl	d4a90 <netdb_getaddrinfo>
   d5548:	2800      	cmp	r0, #0
   d554a:	db1f      	blt.n	d558c <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d554c:	9b01      	ldr	r3, [sp, #4]
   d554e:	b1fb      	cbz	r3, d5590 <_ZN3UDP11beginPacketEPKct+0x64>
   d5550:	695b      	ldr	r3, [r3, #20]
   d5552:	b1eb      	cbz	r3, d5590 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d5554:	a802      	add	r0, sp, #8
   d5556:	f001 f9f1 	bl	d693c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d555a:	9b01      	ldr	r3, [sp, #4]
   d555c:	462a      	mov	r2, r5
   d555e:	6958      	ldr	r0, [r3, #20]
   d5560:	a902      	add	r1, sp, #8
   d5562:	f7ff ff9f 	bl	d54a4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5566:	a802      	add	r0, sp, #8
   d5568:	f001 fa08 	bl	d697c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d556c:	b180      	cbz	r0, d5590 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d556e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5570:	ad03      	add	r5, sp, #12
   d5572:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5576:	4b0b      	ldr	r3, [pc, #44]	; (d55a4 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5578:	9308      	str	r3, [sp, #32]
   d557a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d557c:	ac09      	add	r4, sp, #36	; 0x24
   d557e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5580:	682b      	ldr	r3, [r5, #0]
   d5582:	7023      	strb	r3, [r4, #0]
   d5584:	463a      	mov	r2, r7
   d5586:	a908      	add	r1, sp, #32
   d5588:	4630      	mov	r0, r6
   d558a:	47c0      	blx	r8
   d558c:	4604      	mov	r4, r0
   d558e:	e001      	b.n	d5594 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d5590:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5594:	9801      	ldr	r0, [sp, #4]
   d5596:	f7ff fa73 	bl	d4a80 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d559a:	4620      	mov	r0, r4
   d559c:	b00e      	add	sp, #56	; 0x38
   d559e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d55a2:	bf00      	nop
   d55a4:	000d901c 	.word	0x000d901c

000d55a8 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d55a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d55ac:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d55b0:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d55b4:	b08c      	sub	sp, #48	; 0x30
   d55b6:	4605      	mov	r5, r0
   d55b8:	460c      	mov	r4, r1
   d55ba:	4617      	mov	r7, r2
   d55bc:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d55be:	db00      	blt.n	d55c2 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d55c0:	b911      	cbnz	r1, d55c8 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d55c2:	f04f 30ff 	mov.w	r0, #4294967295
   d55c6:	e035      	b.n	d5634 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d55c8:	f04f 0a1c 	mov.w	sl, #28
   d55cc:	ae05      	add	r6, sp, #20
   d55ce:	4652      	mov	r2, sl
   d55d0:	2100      	movs	r1, #0
   d55d2:	4630      	mov	r0, r6
   d55d4:	f003 f8d3 	bl	d877e <memset>
        socklen_t slen = sizeof(saddr);
   d55d8:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d55dc:	f1b9 0f00 	cmp.w	r9, #0
   d55e0:	d014      	beq.n	d560c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d55e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55e6:	fbb9 f1f2 	udiv	r1, r9, r2
   d55ea:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d55ec:	fb02 9111 	mls	r1, r2, r1, r9
   d55f0:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d55f2:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d55f4:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d55f6:	9300      	str	r3, [sp, #0]
   d55f8:	f241 0206 	movw	r2, #4102	; 0x1006
   d55fc:	ab03      	add	r3, sp, #12
   d55fe:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5602:	4640      	mov	r0, r8
   d5604:	f7ff fc20 	bl	d4e48 <sock_setsockopt>
            if (ret) {
   d5608:	b108      	cbz	r0, d560e <_ZN3UDP13receivePacketEPhjm+0x66>
   d560a:	e013      	b.n	d5634 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d560c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d560e:	ab02      	add	r3, sp, #8
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	4621      	mov	r1, r4
   d5614:	4603      	mov	r3, r0
   d5616:	9600      	str	r6, [sp, #0]
   d5618:	463a      	mov	r2, r7
   d561a:	6968      	ldr	r0, [r5, #20]
   d561c:	f7ff fc34 	bl	d4e88 <sock_recvfrom>
        if (ret >= 0) {
   d5620:	1e04      	subs	r4, r0, #0
   d5622:	db06      	blt.n	d5632 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5624:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5628:	f105 011c 	add.w	r1, r5, #28
   d562c:	4630      	mov	r0, r6
   d562e:	f7ff ff39 	bl	d54a4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5632:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5634:	b00c      	add	sp, #48	; 0x30
   d5636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d563a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d563a:	b538      	push	{r3, r4, r5, lr}
   d563c:	4605      	mov	r5, r0
   d563e:	4614      	mov	r4, r2
   d5640:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d5642:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5644:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5646:	d111      	bne.n	d566c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5648:	231c      	movs	r3, #28
   d564a:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d564c:	230a      	movs	r3, #10
   d564e:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5650:	f7ff fb72 	bl	d4d38 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5654:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5656:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d565a:	1d2b      	adds	r3, r5, #4
   d565c:	3514      	adds	r5, #20
   d565e:	f853 2b04 	ldr.w	r2, [r3], #4
   d5662:	f844 2b04 	str.w	r2, [r4], #4
   d5666:	42ab      	cmp	r3, r5
   d5668:	d1f9      	bne.n	d565e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d566a:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d566c:	2b04      	cmp	r3, #4
   d566e:	d10a      	bne.n	d5686 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5670:	2310      	movs	r3, #16
   d5672:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5674:	2302      	movs	r3, #2
   d5676:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5678:	f7ff fb5e 	bl	d4d38 <inet_htons>
   d567c:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d567e:	6868      	ldr	r0, [r5, #4]
   d5680:	f7ff fb4a 	bl	d4d18 <inet_htonl>
   d5684:	6060      	str	r0, [r4, #4]
   d5686:	bd38      	pop	{r3, r4, r5, pc}

000d5688 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d568c:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d568e:	ac03      	add	r4, sp, #12
   d5690:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5692:	4699      	mov	r9, r3
   d5694:	4606      	mov	r6, r0
   d5696:	460f      	mov	r7, r1
   d5698:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d569a:	2100      	movs	r1, #0
   d569c:	462a      	mov	r2, r5
   d569e:	4620      	mov	r0, r4
   d56a0:	f003 f86d 	bl	d877e <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d56a4:	4622      	mov	r2, r4
   d56a6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d56aa:	4648      	mov	r0, r9
   d56ac:	f7ff ffc5 	bl	d563a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d56b0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d56b4:	b143      	cbz	r3, d56c8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d56b6:	e88d 0030 	stmia.w	sp, {r4, r5}
   d56ba:	2300      	movs	r3, #0
   d56bc:	4642      	mov	r2, r8
   d56be:	4639      	mov	r1, r7
   d56c0:	6970      	ldr	r0, [r6, #20]
   d56c2:	f7ff fbf1 	bl	d4ea8 <sock_sendto>
   d56c6:	e001      	b.n	d56cc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d56c8:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d56cc:	b00b      	add	sp, #44	; 0x2c
   d56ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d56d2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d56d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56d4:	b091      	sub	sp, #68	; 0x44
   d56d6:	460c      	mov	r4, r1
   d56d8:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d56da:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d56dc:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d56de:	a809      	add	r0, sp, #36	; 0x24
   d56e0:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d56e2:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d56e4:	f003 f84b 	bl	d877e <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d56e8:	aa09      	add	r2, sp, #36	; 0x24
   d56ea:	2100      	movs	r1, #0
   d56ec:	4620      	mov	r0, r4
   d56ee:	f7ff ffa4 	bl	d563a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d56f2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d56f6:	2b02      	cmp	r3, #2
   d56f8:	d12e      	bne.n	d5758 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d56fa:	2300      	movs	r3, #0
   d56fc:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d56fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5700:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5702:	b1dd      	cbz	r5, d573c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5704:	a902      	add	r1, sp, #8
   d5706:	4628      	mov	r0, r5
   d5708:	f7ff fa1a 	bl	d4b40 <if_get_by_index>
   d570c:	b9b0      	cbnz	r0, d573c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d570e:	a910      	add	r1, sp, #64	; 0x40
   d5710:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5714:	9802      	ldr	r0, [sp, #8]
   d5716:	f7ff fa1b 	bl	d4b50 <if_get_addrs>
   d571a:	b960      	cbnz	r0, d5736 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d571c:	9b03      	ldr	r3, [sp, #12]
   d571e:	b153      	cbz	r3, d5736 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5720:	68da      	ldr	r2, [r3, #12]
   d5722:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5724:	7851      	ldrb	r1, [r2, #1]
   d5726:	2902      	cmp	r1, #2
   d5728:	d103      	bne.n	d5732 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d572a:	6852      	ldr	r2, [r2, #4]
   d572c:	b10a      	cbz	r2, d5732 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d572e:	9205      	str	r2, [sp, #20]
   d5730:	e001      	b.n	d5736 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5732:	681b      	ldr	r3, [r3, #0]
   d5734:	e7f3      	b.n	d571e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5736:	9803      	ldr	r0, [sp, #12]
   d5738:	f7ff fa12 	bl	d4b60 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d573c:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d573e:	f04f 0308 	mov.w	r3, #8
   d5742:	9300      	str	r3, [sp, #0]
   d5744:	bf18      	it	ne
   d5746:	2203      	movne	r2, #3
   d5748:	ab04      	add	r3, sp, #16
   d574a:	bf08      	it	eq
   d574c:	2204      	moveq	r2, #4
   d574e:	2100      	movs	r1, #0
   d5750:	4630      	mov	r0, r6
   d5752:	f7ff fb79 	bl	d4e48 <sock_setsockopt>
   d5756:	e01e      	b.n	d5796 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5758:	2b0a      	cmp	r3, #10
   d575a:	d11a      	bne.n	d5792 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d575c:	ac04      	add	r4, sp, #16
   d575e:	2214      	movs	r2, #20
   d5760:	2100      	movs	r1, #0
   d5762:	4620      	mov	r0, r4
   d5764:	f003 f80b 	bl	d877e <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5768:	ab0b      	add	r3, sp, #44	; 0x2c
   d576a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d576c:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d576e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5772:	f04f 0314 	mov.w	r3, #20
   d5776:	9300      	str	r3, [sp, #0]
   d5778:	bf18      	it	ne
   d577a:	220c      	movne	r2, #12
   d577c:	4623      	mov	r3, r4
   d577e:	bf08      	it	eq
   d5780:	220d      	moveq	r2, #13
   d5782:	2129      	movs	r1, #41	; 0x29
   d5784:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5786:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5788:	f7ff fb5e 	bl	d4e48 <sock_setsockopt>
   d578c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5790:	e001      	b.n	d5796 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d5792:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5796:	b011      	add	sp, #68	; 0x44
   d5798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d579c <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d579c:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d579e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57a2:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d57a4:	4b0b      	ldr	r3, [pc, #44]	; (d57d4 <_ZN3UDPC1Ev+0x38>)
   d57a6:	f103 0208 	add.w	r2, r3, #8
   d57aa:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57ac:	2500      	movs	r5, #0
   d57ae:	6103      	str	r3, [r0, #16]
   d57b0:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d57b4:	4604      	mov	r4, r0
   d57b6:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d57b8:	6002      	str	r2, [r0, #0]
   d57ba:	6143      	str	r3, [r0, #20]
   d57bc:	301c      	adds	r0, #28
   d57be:	f001 f8bd 	bl	d693c <_ZN9IPAddressC1Ev>
   d57c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d57c6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d57c8:	8725      	strh	r5, [r4, #56]	; 0x38
   d57ca:	63e5      	str	r5, [r4, #60]	; 0x3c
   d57cc:	6423      	str	r3, [r4, #64]	; 0x40
   d57ce:	6465      	str	r5, [r4, #68]	; 0x44
}
   d57d0:	4620      	mov	r0, r4
   d57d2:	bd38      	pop	{r3, r4, r5, pc}
   d57d4:	000d8cc4 	.word	0x000d8cc4

000d57d8 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d57d8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d57da:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d57de:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d57e0:	b123      	cbz	r3, d57ec <_ZN3UDP13releaseBufferEv+0x14>
   d57e2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d57e4:	b110      	cbz	r0, d57ec <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d57e6:	2101      	movs	r1, #1
   d57e8:	f002 fa0e 	bl	d7c08 <_ZdlPvj>
    }
    _buffer = NULL;
   d57ec:	2300      	movs	r3, #0
   d57ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d57f0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d57f4:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d57f6:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d57f8:	8723      	strh	r3, [r4, #56]	; 0x38
   d57fa:	bd10      	pop	{r4, pc}

000d57fc <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d57fc:	b570      	push	{r4, r5, r6, lr}
   d57fe:	4604      	mov	r4, r0
   d5800:	4616      	mov	r6, r2
   d5802:	460d      	mov	r5, r1
    releaseBuffer();
   d5804:	f7ff ffe8 	bl	d57d8 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5808:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d580a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d580c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d580e:	b93e      	cbnz	r6, d5820 <_ZN3UDP9setBufferEjPh+0x24>
   d5810:	b135      	cbz	r5, d5820 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5812:	4628      	mov	r0, r5
   d5814:	f7fe fc43 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   d5818:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d581a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d581c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5822:	b103      	cbz	r3, d5826 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5824:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5826:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5828:	3000      	adds	r0, #0
   d582a:	bf18      	it	ne
   d582c:	2001      	movne	r0, #1
   d582e:	bd70      	pop	{r4, r5, r6, pc}

000d5830 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5832:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5834:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5836:	4605      	mov	r5, r0
   d5838:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d583a:	b91a      	cbnz	r2, d5844 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d583c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d583e:	b109      	cbz	r1, d5844 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d5840:	f7ff ffdc 	bl	d57fc <_ZN3UDP9setBufferEjPh>
   d5844:	3404      	adds	r4, #4
   d5846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5848:	f105 0620 	add.w	r6, r5, #32
   d584c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d584e:	6823      	ldr	r3, [r4, #0]
   d5850:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5852:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d5854:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5856:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5858:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d585a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d585e <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d585e:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5860:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5862:	4604      	mov	r4, r0
   d5864:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d5866:	b91a      	cbnz	r2, d5870 <_ZN3UDP11parsePacketEm+0x12>
   d5868:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d586a:	b109      	cbz	r1, d5870 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d586c:	f7ff ffc6 	bl	d57fc <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5870:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5872:	2200      	movs	r2, #0
   d5874:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d5876:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5878:	b149      	cbz	r1, d588e <_ZN3UDP11parsePacketEm+0x30>
   d587a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d587c:	b13a      	cbz	r2, d588e <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d587e:	6823      	ldr	r3, [r4, #0]
   d5880:	4620      	mov	r0, r4
   d5882:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d5884:	4633      	mov	r3, r6
   d5886:	47a8      	blx	r5
        if (result > 0) {
   d5888:	2800      	cmp	r0, #0
            _total = result;
   d588a:	bfc8      	it	gt
   d588c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d588e:	6823      	ldr	r3, [r4, #0]
   d5890:	4620      	mov	r0, r4
   d5892:	691b      	ldr	r3, [r3, #16]
}
   d5894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d5898:	4718      	bx	r3

000d589a <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d589a:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d589c:	6940      	ldr	r0, [r0, #20]
   d589e:	2800      	cmp	r0, #0
   d58a0:	db04      	blt.n	d58ac <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d58a2:	2301      	movs	r3, #1
   d58a4:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d58a8:	f7ff bf13 	b.w	d56d2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d58ac:	f04f 30ff 	mov.w	r0, #4294967295
   d58b0:	4770      	bx	lr

000d58b2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d58b2:	b510      	push	{r4, lr}
   d58b4:	4604      	mov	r4, r0
{
	free(buffer);
   d58b6:	6800      	ldr	r0, [r0, #0]
   d58b8:	f7ff fc2c 	bl	d5114 <free>
}
   d58bc:	4620      	mov	r0, r4
   d58be:	bd10      	pop	{r4, pc}

000d58c0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d58c0:	b510      	push	{r4, lr}
   d58c2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d58c4:	6800      	ldr	r0, [r0, #0]
   d58c6:	b108      	cbz	r0, d58cc <_ZN6String10invalidateEv+0xc>
   d58c8:	f7ff fc24 	bl	d5114 <free>
	buffer = NULL;
   d58cc:	2300      	movs	r3, #0
   d58ce:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d58d0:	60a3      	str	r3, [r4, #8]
   d58d2:	6063      	str	r3, [r4, #4]
   d58d4:	bd10      	pop	{r4, pc}

000d58d6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d58d6:	b538      	push	{r3, r4, r5, lr}
   d58d8:	4604      	mov	r4, r0
   d58da:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d58dc:	6800      	ldr	r0, [r0, #0]
   d58de:	3101      	adds	r1, #1
   d58e0:	f7ff fc20 	bl	d5124 <realloc>
	if (newbuffer) {
   d58e4:	b110      	cbz	r0, d58ec <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d58e6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d58ea:	2001      	movs	r0, #1
	}
	return 0;
}
   d58ec:	bd38      	pop	{r3, r4, r5, pc}

000d58ee <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d58ee:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d58f0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d58f2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d58f4:	b113      	cbz	r3, d58fc <_ZN6String7reserveEj+0xe>
   d58f6:	6843      	ldr	r3, [r0, #4]
   d58f8:	428b      	cmp	r3, r1
   d58fa:	d207      	bcs.n	d590c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d58fc:	4620      	mov	r0, r4
   d58fe:	f7ff ffea 	bl	d58d6 <_ZN6String12changeBufferEj>
   d5902:	b120      	cbz	r0, d590e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5904:	68a3      	ldr	r3, [r4, #8]
   d5906:	b90b      	cbnz	r3, d590c <_ZN6String7reserveEj+0x1e>
   d5908:	6822      	ldr	r2, [r4, #0]
   d590a:	7013      	strb	r3, [r2, #0]
   d590c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d590e:	bd10      	pop	{r4, pc}

000d5910 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5910:	b570      	push	{r4, r5, r6, lr}
   d5912:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5914:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5916:	4604      	mov	r4, r0
   d5918:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d591a:	f7ff ffe8 	bl	d58ee <_ZN6String7reserveEj>
   d591e:	b918      	cbnz	r0, d5928 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5920:	4620      	mov	r0, r4
   d5922:	f7ff ffcd 	bl	d58c0 <_ZN6String10invalidateEv>
		return *this;
   d5926:	e009      	b.n	d593c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5928:	462a      	mov	r2, r5
   d592a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d592c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d592e:	6820      	ldr	r0, [r4, #0]
   d5930:	f002 feff 	bl	d8732 <memcpy>
	buffer[len] = 0;
   d5934:	6822      	ldr	r2, [r4, #0]
   d5936:	68a3      	ldr	r3, [r4, #8]
   d5938:	2100      	movs	r1, #0
   d593a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d593c:	4620      	mov	r0, r4
   d593e:	bd70      	pop	{r4, r5, r6, pc}

000d5940 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5940:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5942:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5944:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5946:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5948:	6043      	str	r3, [r0, #4]
	len = 0;
   d594a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d594c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d594e:	460d      	mov	r5, r1
   d5950:	b139      	cbz	r1, d5962 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5952:	4608      	mov	r0, r1
   d5954:	f002 ff71 	bl	d883a <strlen>
   d5958:	4629      	mov	r1, r5
   d595a:	4602      	mov	r2, r0
   d595c:	4620      	mov	r0, r4
   d595e:	f7ff ffd7 	bl	d5910 <_ZN6String4copyEPKcj>
}
   d5962:	4620      	mov	r0, r4
   d5964:	bd38      	pop	{r3, r4, r5, pc}

000d5966 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5966:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5968:	b510      	push	{r4, lr}
   d596a:	460b      	mov	r3, r1
   d596c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d596e:	d007      	beq.n	d5980 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5970:	6809      	ldr	r1, [r1, #0]
   d5972:	b119      	cbz	r1, d597c <_ZN6StringaSERKS_+0x16>
   d5974:	689a      	ldr	r2, [r3, #8]
   d5976:	f7ff ffcb 	bl	d5910 <_ZN6String4copyEPKcj>
   d597a:	e001      	b.n	d5980 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d597c:	f7ff ffa0 	bl	d58c0 <_ZN6String10invalidateEv>

	return *this;
}
   d5980:	4620      	mov	r0, r4
   d5982:	bd10      	pop	{r4, pc}

000d5984 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5984:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5986:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5988:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d598a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d598c:	6043      	str	r3, [r0, #4]
	len = 0;
   d598e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5990:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5992:	f7ff ffe8 	bl	d5966 <_ZN6StringaSERKS_>
}
   d5996:	4620      	mov	r0, r4
   d5998:	bd10      	pop	{r4, pc}
	...

000d599c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d599c:	b40e      	push	{r1, r2, r3}
   d599e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d59a0:	ac09      	add	r4, sp, #36	; 0x24
   d59a2:	4605      	mov	r5, r0
   d59a4:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d59a8:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d59aa:	4623      	mov	r3, r4
   d59ac:	463a      	mov	r2, r7
   d59ae:	2105      	movs	r1, #5
   d59b0:	a802      	add	r0, sp, #8
   d59b2:	f7ff fbc7 	bl	d5144 <vsnprintf>
    va_end(marker);

    String result;
   d59b6:	490c      	ldr	r1, [pc, #48]	; (d59e8 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d59b8:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d59ba:	4628      	mov	r0, r5
   d59bc:	f7ff ffc0 	bl	d5940 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d59c0:	4631      	mov	r1, r6
   d59c2:	4628      	mov	r0, r5
   d59c4:	f7ff ff93 	bl	d58ee <_ZN6String7reserveEj>
    if (result.buffer) {
   d59c8:	6828      	ldr	r0, [r5, #0]
   d59ca:	b130      	cbz	r0, d59da <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d59cc:	4623      	mov	r3, r4
   d59ce:	463a      	mov	r2, r7
   d59d0:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d59d2:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d59d4:	f7ff fbb6 	bl	d5144 <vsnprintf>
        va_end(marker);
        result.len = n;
   d59d8:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d59da:	4628      	mov	r0, r5
   d59dc:	b004      	add	sp, #16
   d59de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d59e2:	b003      	add	sp, #12
   d59e4:	4770      	bx	lr
   d59e6:	bf00      	nop
   d59e8:	000d8f94 	.word	0x000d8f94

000d59ec <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d59ec:	4770      	bx	lr

000d59ee <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d59ee:	2000      	movs	r0, #0
   d59f0:	4770      	bx	lr

000d59f2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d59f2:	b510      	push	{r4, lr}
   d59f4:	2114      	movs	r1, #20
   d59f6:	4604      	mov	r4, r0
   d59f8:	f002 f906 	bl	d7c08 <_ZdlPvj>
   d59fc:	4620      	mov	r0, r4
   d59fe:	bd10      	pop	{r4, pc}

000d5a00 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5a00:	f7fe bb4f 	b.w	d40a2 <_ZdlPv>

000d5a04 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5a04:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d5a06:	200a      	movs	r0, #10
   d5a08:	4a02      	ldr	r2, [pc, #8]	; (d5a14 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d5a0a:	2100      	movs	r1, #0
   d5a0c:	f7ff fa94 	bl	d4f38 <panic_>
    }
}
   d5a10:	bd08      	pop	{r3, pc}
   d5a12:	bf00      	nop
   d5a14:	000d4b91 	.word	0x000d4b91

000d5a18 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5a18:	b510      	push	{r4, lr}
            locked_(false) {
   d5a1a:	2300      	movs	r3, #0
   d5a1c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5a1e:	4b04      	ldr	r3, [pc, #16]	; (d5a30 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5a20:	4604      	mov	r4, r0
   d5a22:	6818      	ldr	r0, [r3, #0]
   d5a24:	f7ff f948 	bl	d4cb8 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5a28:	2301      	movs	r3, #1
   d5a2a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	bd10      	pop	{r4, pc}
   d5a30:	2003e4dc 	.word	0x2003e4dc

000d5a34 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5a34:	b510      	push	{r4, lr}
        if (locked_) {
   d5a36:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5a38:	4604      	mov	r4, r0
        if (locked_) {
   d5a3a:	b11b      	cbz	r3, d5a44 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5a3c:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5a3e:	6818      	ldr	r0, [r3, #0]
   d5a40:	f7ff f942 	bl	d4cc8 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5a44:	4620      	mov	r0, r4
   d5a46:	bd10      	pop	{r4, pc}
   d5a48:	2003e4dc 	.word	0x2003e4dc

000d5a4c <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5a4c:	2200      	movs	r2, #0
   d5a4e:	6002      	str	r2, [r0, #0]
   d5a50:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d5a52:	4770      	bx	lr

000d5a54 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5a54:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5a56:	7982      	ldrb	r2, [r0, #6]
   d5a58:	798b      	ldrb	r3, [r1, #6]
   d5a5a:	429a      	cmp	r2, r3
   d5a5c:	d106      	bne.n	d5a6c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5a5e:	2206      	movs	r2, #6
   d5a60:	f002 fe58 	bl	d8714 <memcmp>
   d5a64:	fab0 f080 	clz	r0, r0
   d5a68:	0940      	lsrs	r0, r0, #5
   d5a6a:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5a6c:	2000      	movs	r0, #0
}
   d5a6e:	bd08      	pop	{r3, pc}

000d5a70 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5a72:	b18b      	cbz	r3, d5a98 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5a74:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5a76:	1ce5      	adds	r5, r4, #3
   d5a78:	428d      	cmp	r5, r1
   d5a7a:	d80f      	bhi.n	d5a9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5a7c:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5a7e:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5a80:	5d87      	ldrb	r7, [r0, r6]
   d5a82:	4297      	cmp	r7, r2
   d5a84:	d105      	bne.n	d5a92 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5a86:	442e      	add	r6, r5
   d5a88:	42b1      	cmp	r1, r6
   d5a8a:	d307      	bcc.n	d5a9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5a8c:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5a8e:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5a92:	3501      	adds	r5, #1
   d5a94:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5a96:	e7ee      	b.n	d5a76 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5a98:	4618      	mov	r0, r3
   d5a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a9c:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5aa0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5aa4:	4604      	mov	r4, r0
   d5aa6:	460e      	mov	r6, r1
   d5aa8:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5aaa:	4617      	mov	r7, r2
   d5aac:	2a00      	cmp	r2, #0
   d5aae:	d03a      	beq.n	d5b26 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5ab0:	460a      	mov	r2, r1
   d5ab2:	ab01      	add	r3, sp, #4
   d5ab4:	6a01      	ldr	r1, [r0, #32]
   d5ab6:	f7ff ffdb 	bl	d5a70 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5aba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5abe:	6a22      	ldr	r2, [r4, #32]
   d5ac0:	bb03      	cbnz	r3, d5b04 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5ac2:	b1f8      	cbz	r0, d5b04 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5ac4:	1c96      	adds	r6, r2, #2
   d5ac6:	442e      	add	r6, r5
   d5ac8:	1a36      	subs	r6, r6, r0
   d5aca:	2e1f      	cmp	r6, #31
   d5acc:	d82b      	bhi.n	d5b26 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5ace:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5ad2:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5ad6:	ebc8 0202 	rsb	r2, r8, r2
   d5ada:	1a12      	subs	r2, r2, r0
   d5adc:	eb00 0108 	add.w	r1, r0, r8
   d5ae0:	eb05 0009 	add.w	r0, r5, r9
   d5ae4:	b292      	uxth	r2, r2
   d5ae6:	4421      	add	r1, r4
   d5ae8:	4420      	add	r0, r4
   d5aea:	f002 fe2d 	bl	d8748 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5aee:	1c6b      	adds	r3, r5, #1
   d5af0:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5af4:	462a      	mov	r2, r5
   d5af6:	4639      	mov	r1, r7
   d5af8:	eb04 0009 	add.w	r0, r4, r9
   d5afc:	f002 fe19 	bl	d8732 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5b00:	6226      	str	r6, [r4, #32]
   d5b02:	e010      	b.n	d5b26 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5b04:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5b06:	182b      	adds	r3, r5, r0
   d5b08:	2b1f      	cmp	r3, #31
   d5b0a:	d80c      	bhi.n	d5b26 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5b0c:	1c6b      	adds	r3, r5, #1
   d5b0e:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5b10:	4422      	add	r2, r4
   d5b12:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5b14:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5b16:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5b18:	4420      	add	r0, r4
   d5b1a:	462a      	mov	r2, r5
   d5b1c:	f002 fe09 	bl	d8732 <memcpy>
        selfLen_ += len;
   d5b20:	6a22      	ldr	r2, [r4, #32]
   d5b22:	442a      	add	r2, r5
   d5b24:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5b26:	6a20      	ldr	r0, [r4, #32]
}
   d5b28:	b003      	add	sp, #12
   d5b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5b2e <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5b2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5b30:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5b32:	4603      	mov	r3, r0
   d5b34:	f100 021f 	add.w	r2, r0, #31
   d5b38:	2000      	movs	r0, #0
   d5b3a:	f803 0b01 	strb.w	r0, [r3], #1
   d5b3e:	4293      	cmp	r3, r2
   d5b40:	f04f 0100 	mov.w	r1, #0
   d5b44:	d1f9      	bne.n	d5b3a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5b46:	aa04      	add	r2, sp, #16
   d5b48:	2306      	movs	r3, #6
   d5b4a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b4e:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5b50:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b52:	9100      	str	r1, [sp, #0]
   d5b54:	4620      	mov	r0, r4
   d5b56:	4619      	mov	r1, r3
   d5b58:	f7ff ffa2 	bl	d5aa0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	b004      	add	sp, #16
   d5b60:	bd10      	pop	{r4, pc}

000d5b62 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5b62:	b510      	push	{r4, lr}
   d5b64:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5b66:	69c2      	ldr	r2, [r0, #28]
   d5b68:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5b6c:	4293      	cmp	r3, r2
   d5b6e:	4618      	mov	r0, r3
   d5b70:	d006      	beq.n	d5b80 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5b72:	6804      	ldr	r4, [r0, #0]
   d5b74:	8824      	ldrh	r4, [r4, #0]
   d5b76:	428c      	cmp	r4, r1
   d5b78:	f103 0308 	add.w	r3, r3, #8
   d5b7c:	d1f6      	bne.n	d5b6c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5b7e:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5b80:	2000      	movs	r0, #0
    }
   d5b82:	bd10      	pop	{r4, pc}

000d5b84 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5b84:	b510      	push	{r4, lr}
    return impl()->address();
   d5b86:	680a      	ldr	r2, [r1, #0]
   d5b88:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5b8c:	6003      	str	r3, [r0, #0]
   d5b8e:	6853      	ldr	r3, [r2, #4]
   d5b90:	6043      	str	r3, [r0, #4]
}
   d5b92:	bd10      	pop	{r4, pc}

000d5b94 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5b96:	6802      	ldr	r2, [r0, #0]
   d5b98:	680b      	ldr	r3, [r1, #0]
   d5b9a:	8812      	ldrh	r2, [r2, #0]
   d5b9c:	881b      	ldrh	r3, [r3, #0]
   d5b9e:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5ba0:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5ba2:	d10c      	bne.n	d5bbe <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5ba4:	4601      	mov	r1, r0
   d5ba6:	4668      	mov	r0, sp
   d5ba8:	f7ff ffec 	bl	d5b84 <_ZNK8particle13BlePeerDevice7addressEv>
   d5bac:	4621      	mov	r1, r4
   d5bae:	a802      	add	r0, sp, #8
   d5bb0:	f7ff ffe8 	bl	d5b84 <_ZNK8particle13BlePeerDevice7addressEv>
   d5bb4:	a902      	add	r1, sp, #8
   d5bb6:	4668      	mov	r0, sp
   d5bb8:	f7ff ff4c 	bl	d5a54 <_ZNK8particle10BleAddresseqERKS0_>
   d5bbc:	b900      	cbnz	r0, d5bc0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5bbe:	2000      	movs	r0, #0
}
   d5bc0:	b004      	add	sp, #16
   d5bc2:	bd10      	pop	{r4, pc}

000d5bc4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5bc4:	b510      	push	{r4, lr}
   d5bc6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5bc8:	2034      	movs	r0, #52	; 0x34
   d5bca:	f7fe fa66 	bl	d409a <_Znwj>
   d5bce:	4601      	mov	r1, r0
   d5bd0:	b168      	cbz	r0, d5bee <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5bd2:	2300      	movs	r3, #0
   d5bd4:	6003      	str	r3, [r0, #0]
   d5bd6:	6043      	str	r3, [r0, #4]
   d5bd8:	6083      	str	r3, [r0, #8]
   d5bda:	60c3      	str	r3, [r0, #12]
   d5bdc:	6103      	str	r3, [r0, #16]
   d5bde:	6143      	str	r3, [r0, #20]
   d5be0:	6183      	str	r3, [r0, #24]
   d5be2:	61c3      	str	r3, [r0, #28]
   d5be4:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5be6:	6243      	str	r3, [r0, #36]	; 0x24
   d5be8:	6283      	str	r3, [r0, #40]	; 0x28
   d5bea:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5bec:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5bee:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5bf0:	b919      	cbnz	r1, d5bfa <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5bf2:	4a0a      	ldr	r2, [pc, #40]	; (d5c1c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5bf4:	200a      	movs	r0, #10
   d5bf6:	f7ff f99f 	bl	d4f38 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5bfa:	2000      	movs	r0, #0
   d5bfc:	f7fe ffd8 	bl	d4bb0 <hal_ble_stack_init>
   d5c00:	b120      	cbz	r0, d5c0c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5c02:	4a06      	ldr	r2, [pc, #24]	; (d5c1c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5c04:	2100      	movs	r1, #0
   d5c06:	200a      	movs	r0, #10
   d5c08:	f7ff f996 	bl	d4f38 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5c0c:	2200      	movs	r2, #0
   d5c0e:	6821      	ldr	r1, [r4, #0]
   d5c10:	4803      	ldr	r0, [pc, #12]	; (d5c20 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5c12:	f7fe ffe7 	bl	d4be4 <hal_ble_set_callback_on_periph_link_events>
}
   d5c16:	4620      	mov	r0, r4
   d5c18:	bd10      	pop	{r4, pc}
   d5c1a:	bf00      	nop
   d5c1c:	000d4b91 	.word	0x000d4b91
   d5c20:	000d5ee1 	.word	0x000d5ee1

000d5c24 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5c24:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5c26:	4c0a      	ldr	r4, [pc, #40]	; (d5c50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5c28:	6823      	ldr	r3, [r4, #0]
   d5c2a:	07db      	lsls	r3, r3, #31
   d5c2c:	d40e      	bmi.n	d5c4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5c2e:	4620      	mov	r0, r4
   d5c30:	f7fe fa3b 	bl	d40aa <__cxa_guard_acquire>
   d5c34:	b150      	cbz	r0, d5c4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5c36:	4807      	ldr	r0, [pc, #28]	; (d5c54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5c38:	f7ff ffc4 	bl	d5bc4 <_ZN8particle14BleLocalDeviceC1Ev>
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	f7fe fa39 	bl	d40b4 <__cxa_guard_release>
   d5c42:	4a05      	ldr	r2, [pc, #20]	; (d5c58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5c44:	4905      	ldr	r1, [pc, #20]	; (d5c5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5c46:	4803      	ldr	r0, [pc, #12]	; (d5c54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5c48:	f001 ffd0 	bl	d7bec <__aeabi_atexit>
    return instance;
}
   d5c4c:	4801      	ldr	r0, [pc, #4]	; (d5c54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5c4e:	bd10      	pop	{r4, pc}
   d5c50:	2003e4d8 	.word	0x2003e4d8
   d5c54:	2003e4d4 	.word	0x2003e4d4
   d5c58:	2003cf80 	.word	0x2003cf80
   d5c5c:	000d5cf5 	.word	0x000d5cf5

000d5c60 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   d5c60:	b513      	push	{r0, r1, r4, lr}
   d5c62:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5c64:	a801      	add	r0, sp, #4
   d5c66:	f7ff fed7 	bl	d5a18 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   d5c6a:	2100      	movs	r1, #0
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	f7fe ffa7 	bl	d4bc0 <hal_ble_gap_set_tx_power>
   d5c72:	4604      	mov	r4, r0
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
   d5c74:	a801      	add	r0, sp, #4
   d5c76:	f7ff fedd 	bl	d5a34 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}
   d5c7a:	4620      	mov	r0, r4
   d5c7c:	b002      	add	sp, #8
   d5c7e:	bd10      	pop	{r4, pc}

000d5c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5c80:	680b      	ldr	r3, [r1, #0]
   d5c82:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5c84:	b113      	cbz	r3, d5c8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5c86:	685a      	ldr	r2, [r3, #4]
   d5c88:	3201      	adds	r2, #1
   d5c8a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5c8c:	4770      	bx	lr

000d5c8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5c8e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5c90:	6804      	ldr	r4, [r0, #0]
   d5c92:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5c94:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5c96:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5c9a:	42a6      	cmp	r6, r4
   d5c9c:	d004      	beq.n	d5ca8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c9e:	1d20      	adds	r0, r4, #4
   d5ca0:	f7fe fb4d 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ca4:	3408      	adds	r4, #8
   d5ca6:	e7f8      	b.n	d5c9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ca8:	6828      	ldr	r0, [r5, #0]
   d5caa:	f7ff fa33 	bl	d5114 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5cae:	4628      	mov	r0, r5
   d5cb0:	bd70      	pop	{r4, r5, r6, pc}

000d5cb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5cb2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5cb4:	6804      	ldr	r4, [r0, #0]
   d5cb6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5cb8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5cba:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5cbe:	42a6      	cmp	r6, r4
   d5cc0:	d004      	beq.n	d5ccc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5cc2:	1d20      	adds	r0, r4, #4
   d5cc4:	f7fe fb3b 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cc8:	3408      	adds	r4, #8
   d5cca:	e7f8      	b.n	d5cbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ccc:	6828      	ldr	r0, [r5, #0]
   d5cce:	f7ff fa21 	bl	d5114 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5cd2:	4628      	mov	r0, r5
   d5cd4:	bd70      	pop	{r4, r5, r6, pc}

000d5cd6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5cd6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5cd8:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5cda:	f104 0018 	add.w	r0, r4, #24
   d5cde:	f7ff ffe8 	bl	d5cb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5ce2:	f104 000c 	add.w	r0, r4, #12
   d5ce6:	f7ff ffd2 	bl	d5c8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5cea:	4620      	mov	r0, r4
   d5cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5cf0:	f7fe b9d7 	b.w	d40a2 <_ZdlPv>

000d5cf4 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cf6:	6804      	ldr	r4, [r0, #0]
   d5cf8:	4607      	mov	r7, r0
   d5cfa:	b1c4      	cbz	r4, d5d2e <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5cfc:	69a5      	ldr	r5, [r4, #24]
   d5cfe:	69e3      	ldr	r3, [r4, #28]
   d5d00:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5d04:	42ae      	cmp	r6, r5
   d5d06:	d004      	beq.n	d5d12 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d08:	1d28      	adds	r0, r5, #4
   d5d0a:	f7fe fb18 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d0e:	3508      	adds	r5, #8
   d5d10:	e7f8      	b.n	d5d04 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5d12:	69a0      	ldr	r0, [r4, #24]
   d5d14:	f7ff f9fe 	bl	d5114 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5d18:	f104 000c 	add.w	r0, r4, #12
   d5d1c:	f7ff ffc9 	bl	d5cb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5d20:	4620      	mov	r0, r4
   d5d22:	f7ff ffb4 	bl	d5c8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d26:	2134      	movs	r1, #52	; 0x34
   d5d28:	4620      	mov	r0, r4
   d5d2a:	f001 ff6d 	bl	d7c08 <_ZdlPvj>
   d5d2e:	4638      	mov	r0, r7
   d5d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5d34 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5d34:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5d36:	2500      	movs	r5, #0
   d5d38:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d3a:	6045      	str	r5, [r0, #4]
   d5d3c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5d3e:	2024      	movs	r0, #36	; 0x24
   d5d40:	f7fe f9ab 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5d44:	4604      	mov	r4, r0
   d5d46:	b178      	cbz	r0, d5d68 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5d48:	4603      	mov	r3, r0
   d5d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5d4e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5d52:	f8c0 5002 	str.w	r5, [r0, #2]
   d5d56:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5d58:	7285      	strb	r5, [r0, #10]
   d5d5a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5d5c:	60c5      	str	r5, [r0, #12]
   d5d5e:	6105      	str	r5, [r0, #16]
   d5d60:	6145      	str	r5, [r0, #20]
   d5d62:	6185      	str	r5, [r0, #24]
   d5d64:	61c5      	str	r5, [r0, #28]
   d5d66:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5d68:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5d6a:	2014      	movs	r0, #20
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	f7fe f994 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5d72:	4603      	mov	r3, r0
   d5d74:	b128      	cbz	r0, d5d82 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5d76:	2201      	movs	r2, #1
   d5d78:	6042      	str	r2, [r0, #4]
   d5d7a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5d7c:	4a08      	ldr	r2, [pc, #32]	; (d5da0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5d7e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5d80:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5d82:	a802      	add	r0, sp, #8
   d5d84:	6872      	ldr	r2, [r6, #4]
   d5d86:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5d8a:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5d8c:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5d8e:	f7fe fad6 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5d92:	6833      	ldr	r3, [r6, #0]
   d5d94:	b90b      	cbnz	r3, d5d9a <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5d96:	f7ff fe35 	bl	d5a04 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d5d9a:	4630      	mov	r0, r6
   d5d9c:	b002      	add	sp, #8
   d5d9e:	bd70      	pop	{r4, r5, r6, pc}
   d5da0:	000d8d3c 	.word	0x000d8d3c

000d5da4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5da4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5da6:	b570      	push	{r4, r5, r6, lr}
   d5da8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5daa:	d91a      	bls.n	d5de2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5dac:	4290      	cmp	r0, r2
   d5dae:	d219      	bcs.n	d5de4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5db0:	f1a1 0608 	sub.w	r6, r1, #8
   d5db4:	1a51      	subs	r1, r2, r1
   d5db6:	3904      	subs	r1, #4
   d5db8:	1f15      	subs	r5, r2, #4
   d5dba:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5dbc:	1f2b      	subs	r3, r5, #4
   d5dbe:	429e      	cmp	r6, r3
   d5dc0:	d025      	beq.n	d5e0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5dc2:	2c04      	cmp	r4, #4
   d5dc4:	d007      	beq.n	d5dd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5dc6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5dca:	f844 3c04 	str.w	r3, [r4, #-4]
   d5dce:	4629      	mov	r1, r5
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	f7ff ff55 	bl	d5c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dd6:	4628      	mov	r0, r5
   d5dd8:	f7fe fab1 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ddc:	3d08      	subs	r5, #8
   d5dde:	3c08      	subs	r4, #8
   d5de0:	e7ec      	b.n	d5dbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5de2:	d014      	beq.n	d5e0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5de4:	1d0c      	adds	r4, r1, #4
   d5de6:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5de8:	1f23      	subs	r3, r4, #4
   d5dea:	429d      	cmp	r5, r3
   d5dec:	d00f      	beq.n	d5e0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5dee:	2e04      	cmp	r6, #4
   d5df0:	d007      	beq.n	d5e02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5df2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5df6:	f846 3c04 	str.w	r3, [r6, #-4]
   d5dfa:	4621      	mov	r1, r4
   d5dfc:	4630      	mov	r0, r6
   d5dfe:	f7ff ff3f 	bl	d5c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e02:	4620      	mov	r0, r4
   d5e04:	f7fe fa9b 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e08:	3408      	adds	r4, #8
   d5e0a:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5e0c:	e7ec      	b.n	d5de8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5e0e:	bd70      	pop	{r4, r5, r6, pc}

000d5e10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5e14:	6804      	ldr	r4, [r0, #0]
   d5e16:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5e18:	4605      	mov	r5, r0
   d5e1a:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5e1c:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5e20:	42a7      	cmp	r7, r4
   d5e22:	d018      	beq.n	d5e56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5e24:	4641      	mov	r1, r8
   d5e26:	4620      	mov	r0, r4
   d5e28:	f7ff feb4 	bl	d5b94 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5e2c:	4606      	mov	r6, r0
   d5e2e:	b908      	cbnz	r0, d5e34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5e30:	3408      	adds	r4, #8
   d5e32:	e7f5      	b.n	d5e20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5e34:	b18c      	cbz	r4, d5e5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5e36:	1d20      	adds	r0, r4, #4
   d5e38:	f7fe fa81 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5e3c:	682b      	ldr	r3, [r5, #0]
   d5e3e:	686a      	ldr	r2, [r5, #4]
   d5e40:	f104 0108 	add.w	r1, r4, #8
   d5e44:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5e48:	4620      	mov	r0, r4
   d5e4a:	f7ff ffab 	bl	d5da4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5e4e:	686b      	ldr	r3, [r5, #4]
   d5e50:	3b01      	subs	r3, #1
   d5e52:	606b      	str	r3, [r5, #4]
    return true;
   d5e54:	e002      	b.n	d5e5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5e56:	2600      	movs	r6, #0
   d5e58:	e000      	b.n	d5e5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5e5a:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5e5c:	4630      	mov	r0, r6
   d5e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5e64:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e66:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5e6a:	6847      	ldr	r7, [r0, #4]
   d5e6c:	9300      	str	r3, [sp, #0]
   d5e6e:	a801      	add	r0, sp, #4
   d5e70:	f7ff ff06 	bl	d5c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e74:	6866      	ldr	r6, [r4, #4]
   d5e76:	68a3      	ldr	r3, [r4, #8]
   d5e78:	429e      	cmp	r6, r3
   d5e7a:	db14      	blt.n	d5ea6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5e7c:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5e7e:	2e00      	cmp	r6, #0
   d5e80:	dd0b      	ble.n	d5e9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5e82:	00f0      	lsls	r0, r6, #3
   d5e84:	f7ff f93e 	bl	d5104 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5e88:	4605      	mov	r5, r0
   d5e8a:	b318      	cbz	r0, d5ed4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5e8c:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5e90:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5e94:	f7ff ff86 	bl	d5da4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5e98:	e000      	b.n	d5e9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5e9a:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5e9c:	6820      	ldr	r0, [r4, #0]
   d5e9e:	f7ff f939 	bl	d5114 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5ea2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5ea4:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5ea6:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5ea8:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5eaa:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5eae:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5eb2:	4629      	mov	r1, r5
   d5eb4:	f105 0008 	add.w	r0, r5, #8
   d5eb8:	f7ff ff74 	bl	d5da4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5ebc:	b135      	cbz	r5, d5ecc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5ebe:	9b00      	ldr	r3, [sp, #0]
   d5ec0:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5ec4:	a901      	add	r1, sp, #4
   d5ec6:	1d28      	adds	r0, r5, #4
   d5ec8:	f7ff feda 	bl	d5c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5ecc:	6863      	ldr	r3, [r4, #4]
   d5ece:	3301      	adds	r3, #1
   d5ed0:	6063      	str	r3, [r4, #4]
   d5ed2:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ed4:	a801      	add	r0, sp, #4
   d5ed6:	f7fe fa32 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5eda:	4628      	mov	r0, r5
   d5edc:	b003      	add	sp, #12
   d5ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ee0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ee4:	4604      	mov	r4, r0
   d5ee6:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5ee8:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5eea:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5eec:	f7ff fd94 	bl	d5a18 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5ef0:	6823      	ldr	r3, [r4, #0]
   d5ef2:	2b03      	cmp	r3, #3
   d5ef4:	d002      	beq.n	d5efc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5ef6:	2b04      	cmp	r3, #4
   d5ef8:	d042      	beq.n	d5f80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5efa:	e087      	b.n	d600c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5efc:	a804      	add	r0, sp, #16
   d5efe:	f7ff ff19 	bl	d5d34 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5f02:	9b04      	ldr	r3, [sp, #16]
   d5f04:	8922      	ldrh	r2, [r4, #8]
   d5f06:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5f08:	6862      	ldr	r2, [r4, #4]
   d5f0a:	9904      	ldr	r1, [sp, #16]
   d5f0c:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5f10:	f8c1 3002 	str.w	r3, [r1, #2]
   d5f14:	6853      	ldr	r3, [r2, #4]
   d5f16:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f1a:	a807      	add	r0, sp, #28
   d5f1c:	9b04      	ldr	r3, [sp, #16]
   d5f1e:	9306      	str	r3, [sp, #24]
   d5f20:	a905      	add	r1, sp, #20
   d5f22:	f7ff fead 	bl	d5c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5f26:	a906      	add	r1, sp, #24
   d5f28:	f105 0018 	add.w	r0, r5, #24
   d5f2c:	f7ff ff99 	bl	d5e62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5f30:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f32:	a807      	add	r0, sp, #28
   d5f34:	f7fe fa03 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f38:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5f3a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5f3c:	b974      	cbnz	r4, d5f5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5f3e:	4b36      	ldr	r3, [pc, #216]	; (d6018 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5f40:	9300      	str	r3, [sp, #0]
   d5f42:	aa06      	add	r2, sp, #24
   d5f44:	4623      	mov	r3, r4
   d5f46:	4935      	ldr	r1, [pc, #212]	; (d601c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5f48:	9407      	str	r4, [sp, #28]
   d5f4a:	2032      	movs	r0, #50	; 0x32
   d5f4c:	f7fe fffc 	bl	d4f48 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5f50:	9b04      	ldr	r3, [sp, #16]
   d5f52:	4621      	mov	r1, r4
   d5f54:	8818      	ldrh	r0, [r3, #0]
   d5f56:	f7fe fe3b 	bl	d4bd0 <hal_ble_gap_disconnect>
   d5f5a:	e00d      	b.n	d5f78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5f5c:	4a30      	ldr	r2, [pc, #192]	; (d6020 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5f5e:	9200      	str	r2, [sp, #0]
   d5f60:	2300      	movs	r3, #0
   d5f62:	aa06      	add	r2, sp, #24
   d5f64:	492d      	ldr	r1, [pc, #180]	; (d601c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5f66:	9307      	str	r3, [sp, #28]
   d5f68:	2001      	movs	r0, #1
   d5f6a:	f7fe ffed 	bl	d4f48 <log_message>
                if (impl->connectedCb_) {
   d5f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5f70:	b113      	cbz	r3, d5f78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5f72:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5f74:	a804      	add	r0, sp, #16
   d5f76:	4798      	blx	r3
   d5f78:	a805      	add	r0, sp, #20
   d5f7a:	f7fe f9e0 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f7e:	e045      	b.n	d600c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5f80:	8921      	ldrh	r1, [r4, #8]
   d5f82:	4628      	mov	r0, r5
   d5f84:	f7ff fded 	bl	d5b62 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5f88:	4607      	mov	r7, r0
   d5f8a:	2800      	cmp	r0, #0
   d5f8c:	d03e      	beq.n	d600c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5f8e:	6804      	ldr	r4, [r0, #0]
   d5f90:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5f92:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5f98:	8022      	strh	r2, [r4, #0]
   d5f9a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5f9e:	4299      	cmp	r1, r3
   d5fa0:	d003      	beq.n	d5faa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5fa2:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5fa6:	8042      	strh	r2, [r0, #2]
   d5fa8:	e7f9      	b.n	d5f9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5faa:	68e6      	ldr	r6, [r4, #12]
   d5fac:	6923      	ldr	r3, [r4, #16]
   d5fae:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5fb2:	45b0      	cmp	r8, r6
   d5fb4:	d004      	beq.n	d5fc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5fb6:	1d30      	adds	r0, r6, #4
   d5fb8:	f7fe f9c1 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fbc:	3608      	adds	r6, #8
   d5fbe:	e7f8      	b.n	d5fb2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5fc0:	2300      	movs	r3, #0
   d5fc2:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5fc4:	69a6      	ldr	r6, [r4, #24]
   d5fc6:	69e3      	ldr	r3, [r4, #28]
   d5fc8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5fcc:	45b0      	cmp	r8, r6
   d5fce:	d004      	beq.n	d5fda <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5fd0:	1d30      	adds	r0, r6, #4
   d5fd2:	f7fe f9b4 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fd6:	3608      	adds	r6, #8
   d5fd8:	e7f8      	b.n	d5fcc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5fda:	2300      	movs	r3, #0
   d5fdc:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5fde:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5fe0:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5fe2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5fe4:	b113      	cbz	r3, d5fec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5fe6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5fe8:	4638      	mov	r0, r7
   d5fea:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5fec:	2320      	movs	r3, #32
   d5fee:	4a0d      	ldr	r2, [pc, #52]	; (d6024 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5ff0:	9306      	str	r3, [sp, #24]
   d5ff2:	9200      	str	r2, [sp, #0]
   d5ff4:	2300      	movs	r3, #0
   d5ff6:	4909      	ldr	r1, [pc, #36]	; (d601c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5ff8:	9307      	str	r3, [sp, #28]
   d5ffa:	2001      	movs	r0, #1
   d5ffc:	aa06      	add	r2, sp, #24
   d5ffe:	f7fe ffa3 	bl	d4f48 <log_message>
                    impl->peers_.removeOne(*peer);
   d6002:	4639      	mov	r1, r7
   d6004:	f105 0018 	add.w	r0, r5, #24
   d6008:	f7ff ff02 	bl	d5e10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d600c:	a803      	add	r0, sp, #12
   d600e:	f7ff fd11 	bl	d5a34 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d6012:	b00e      	add	sp, #56	; 0x38
   d6014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6018:	000d8db2 	.word	0x000d8db2
   d601c:	000d8d50 	.word	0x000d8d50
   d6020:	000d8dd8 	.word	0x000d8dd8
   d6024:	000d8df5 	.word	0x000d8df5

000d6028 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6028:	4802      	ldr	r0, [pc, #8]	; (d6034 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d602a:	2300      	movs	r3, #0
   d602c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d602e:	f7fe be3b 	b.w	d4ca8 <os_mutex_recursive_create>
   d6032:	bf00      	nop
   d6034:	2003e4dc 	.word	0x2003e4dc

000d6038 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d603a:	4606      	mov	r6, r0
   d603c:	460d      	mov	r5, r1
   d603e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6040:	2400      	movs	r4, #0
  while (size--) {
   d6042:	42bd      	cmp	r5, r7
   d6044:	d00c      	beq.n	d6060 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6046:	6833      	ldr	r3, [r6, #0]
   d6048:	f815 1b01 	ldrb.w	r1, [r5], #1
   d604c:	689b      	ldr	r3, [r3, #8]
   d604e:	4630      	mov	r0, r6
   d6050:	4798      	blx	r3
     if (chunk>=0)
   d6052:	2800      	cmp	r0, #0
   d6054:	db01      	blt.n	d605a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6056:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6058:	e7f3      	b.n	d6042 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d605a:	2c00      	cmp	r4, #0
   d605c:	bf08      	it	eq
   d605e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6060:	4620      	mov	r0, r4
   d6062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6064 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6064:	b570      	push	{r4, r5, r6, lr}
   d6066:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6068:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d606a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d606c:	b149      	cbz	r1, d6082 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d606e:	f002 fbe4 	bl	d883a <strlen>
   d6072:	682b      	ldr	r3, [r5, #0]
   d6074:	4602      	mov	r2, r0
   d6076:	4621      	mov	r1, r4
   d6078:	4628      	mov	r0, r5
   d607a:	68db      	ldr	r3, [r3, #12]
    }
   d607c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6080:	4718      	bx	r3
    }
   d6082:	bd70      	pop	{r4, r5, r6, pc}

000d6084 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6084:	6803      	ldr	r3, [r0, #0]
   d6086:	689b      	ldr	r3, [r3, #8]
   d6088:	4718      	bx	r3

000d608a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d608a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d608c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d608e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6090:	f7ff fff8 	bl	d6084 <_ZN5Print5printEc>
  n += print('\n');
   d6094:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6096:	4604      	mov	r4, r0
  n += print('\n');
   d6098:	4628      	mov	r0, r5
   d609a:	f7ff fff3 	bl	d6084 <_ZN5Print5printEc>
  return n;
}
   d609e:	4420      	add	r0, r4
   d60a0:	bd38      	pop	{r3, r4, r5, pc}

000d60a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d60a2:	b538      	push	{r3, r4, r5, lr}
   d60a4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60a6:	f7ff ffdd 	bl	d6064 <_ZN5Print5writeEPKc>
   d60aa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d60ac:	4628      	mov	r0, r5
   d60ae:	f7ff ffec 	bl	d608a <_ZN5Print7printlnEv>
  return n;
}
   d60b2:	4420      	add	r0, r4
   d60b4:	bd38      	pop	{r3, r4, r5, pc}

000d60b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d60b6:	b530      	push	{r4, r5, lr}
   d60b8:	b08b      	sub	sp, #44	; 0x2c
   d60ba:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d60bc:	2100      	movs	r1, #0
   d60be:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d60c2:	2a01      	cmp	r2, #1
   d60c4:	bf98      	it	ls
   d60c6:	220a      	movls	r2, #10
   d60c8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d60cc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d60d0:	fb05 3312 	mls	r3, r5, r2, r3
   d60d4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d60d8:	2b09      	cmp	r3, #9
   d60da:	bf94      	ite	ls
   d60dc:	3330      	addls	r3, #48	; 0x30
   d60de:	3337      	addhi	r3, #55	; 0x37
   d60e0:	b2db      	uxtb	r3, r3
   d60e2:	4621      	mov	r1, r4
   d60e4:	f804 3901 	strb.w	r3, [r4], #-1
   d60e8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d60ea:	2d00      	cmp	r5, #0
   d60ec:	d1ee      	bne.n	d60cc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d60ee:	f7ff ffb9 	bl	d6064 <_ZN5Print5writeEPKc>
}
   d60f2:	b00b      	add	sp, #44	; 0x2c
   d60f4:	bd30      	pop	{r4, r5, pc}

000d60f6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d60f6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d60f8:	b92a      	cbnz	r2, d6106 <_ZN5Print5printEmi+0x10>
   d60fa:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d60fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6100:	689b      	ldr	r3, [r3, #8]
   d6102:	b2c9      	uxtb	r1, r1
   d6104:	4718      	bx	r3
  else return printNumber(n, base);
   d6106:	b2d2      	uxtb	r2, r2
}
   d6108:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d610c:	f7ff bfd3 	b.w	d60b6 <_ZN5Print11printNumberEmh>

000d6110 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6110:	f7ff bff1 	b.w	d60f6 <_ZN5Print5printEmi>

000d6114 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6114:	b40c      	push	{r2, r3}
   d6116:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d611a:	b087      	sub	sp, #28
   d611c:	af00      	add	r7, sp, #0
   d611e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6122:	4605      	mov	r5, r0
   d6124:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6128:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d612a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d612c:	4623      	mov	r3, r4
   d612e:	464a      	mov	r2, r9
   d6130:	2114      	movs	r1, #20
   d6132:	1d38      	adds	r0, r7, #4
   d6134:	f7ff f806 	bl	d5144 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6138:	2813      	cmp	r0, #19
   d613a:	d805      	bhi.n	d6148 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d613c:	1d39      	adds	r1, r7, #4
   d613e:	4628      	mov	r0, r5
   d6140:	f7ff ff90 	bl	d6064 <_ZN5Print5writeEPKc>
   d6144:	4604      	mov	r4, r0
   d6146:	e013      	b.n	d6170 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6148:	f100 0308 	add.w	r3, r0, #8
   d614c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6150:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6152:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6156:	1c41      	adds	r1, r0, #1
   d6158:	4623      	mov	r3, r4
   d615a:	464a      	mov	r2, r9
   d615c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d615e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6160:	f7fe fff0 	bl	d5144 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6164:	4669      	mov	r1, sp
   d6166:	4628      	mov	r0, r5
   d6168:	f7ff ff7c 	bl	d6064 <_ZN5Print5writeEPKc>
   d616c:	4604      	mov	r4, r0
   d616e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6170:	b11e      	cbz	r6, d617a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6172:	4628      	mov	r0, r5
   d6174:	f7ff ff89 	bl	d608a <_ZN5Print7printlnEv>
   d6178:	4404      	add	r4, r0
    return n;
}
   d617a:	4620      	mov	r0, r4
   d617c:	371c      	adds	r7, #28
   d617e:	46bd      	mov	sp, r7
   d6180:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6184:	b002      	add	sp, #8
   d6186:	4770      	bx	lr

000d6188 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6188:	6800      	ldr	r0, [r0, #0]
   d618a:	f7fe bd95 	b.w	d4cb8 <os_mutex_recursive_lock>
	...

000d6190 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6190:	4b01      	ldr	r3, [pc, #4]	; (d6198 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6192:	4a02      	ldr	r2, [pc, #8]	; (d619c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6194:	601a      	str	r2, [r3, #0]
   d6196:	4770      	bx	lr
   d6198:	2003e4e0 	.word	0x2003e4e0
   d619c:	000d8f63 	.word	0x000d8f63

000d61a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d61a0:	4b02      	ldr	r3, [pc, #8]	; (d61ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d61a2:	681a      	ldr	r2, [r3, #0]
   d61a4:	4b02      	ldr	r3, [pc, #8]	; (d61b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d61a6:	601a      	str	r2, [r3, #0]
   d61a8:	4770      	bx	lr
   d61aa:	bf00      	nop
   d61ac:	2003cf18 	.word	0x2003cf18
   d61b0:	2003e4e4 	.word	0x2003e4e4

000d61b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d61b4:	2100      	movs	r1, #0
   d61b6:	f7fe bed7 	b.w	d4f68 <system_delay_ms>

000d61ba <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d61ba:	b510      	push	{r4, lr}
   d61bc:	4604      	mov	r4, r0
   d61be:	f7fd ffbd 	bl	d413c <_ZNSt14_Function_baseD1Ev>
   d61c2:	4620      	mov	r0, r4
   d61c4:	bd10      	pop	{r4, pc}

000d61c6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d61c6:	b513      	push	{r0, r1, r4, lr}
   d61c8:	460b      	mov	r3, r1
   d61ca:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61cc:	c803      	ldmia	r0, {r0, r1}
   d61ce:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d61d2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d61d6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d61da:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d61de:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d61e2:	b002      	add	sp, #8
   d61e4:	bd10      	pop	{r4, pc}
	...

000d61e8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61e8:	4803      	ldr	r0, [pc, #12]	; (d61f8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d61ea:	4a04      	ldr	r2, [pc, #16]	; (d61fc <_GLOBAL__sub_I_RGB+0x14>)
   d61ec:	4904      	ldr	r1, [pc, #16]	; (d6200 <_GLOBAL__sub_I_RGB+0x18>)
   d61ee:	2300      	movs	r3, #0
   d61f0:	6083      	str	r3, [r0, #8]
   d61f2:	f001 bcfb 	b.w	d7bec <__aeabi_atexit>
   d61f6:	bf00      	nop
   d61f8:	2003e4e8 	.word	0x2003e4e8
   d61fc:	2003cf80 	.word	0x2003cf80
   d6200:	000d61bb 	.word	0x000d61bb

000d6204 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6204:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6206:	4b0f      	ldr	r3, [pc, #60]	; (d6244 <serialEventRun+0x40>)
   d6208:	b133      	cbz	r3, d6218 <serialEventRun+0x14>
   d620a:	f000 fc47 	bl	d6a9c <_Z16_fetch_usbserialv>
   d620e:	6803      	ldr	r3, [r0, #0]
   d6210:	691b      	ldr	r3, [r3, #16]
   d6212:	4798      	blx	r3
   d6214:	2800      	cmp	r0, #0
   d6216:	dc0d      	bgt.n	d6234 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6218:	4b0b      	ldr	r3, [pc, #44]	; (d6248 <serialEventRun+0x44>)
   d621a:	b133      	cbz	r3, d622a <serialEventRun+0x26>
   d621c:	f000 fcc0 	bl	d6ba0 <_Z22__fetch_global_Serial1v>
   d6220:	6803      	ldr	r3, [r0, #0]
   d6222:	691b      	ldr	r3, [r3, #16]
   d6224:	4798      	blx	r3
   d6226:	2800      	cmp	r0, #0
   d6228:	dc07      	bgt.n	d623a <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d622a:	4b08      	ldr	r3, [pc, #32]	; (d624c <serialEventRun+0x48>)
   d622c:	b143      	cbz	r3, d6240 <serialEventRun+0x3c>
   d622e:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d6232:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6234:	f3af 8000 	nop.w
   d6238:	e7ee      	b.n	d6218 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d623a:	f3af 8000 	nop.w
   d623e:	e7f4      	b.n	d622a <serialEventRun+0x26>
   d6240:	bd08      	pop	{r3, pc}
   d6242:	bf00      	nop
	...

000d6250 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6250:	b508      	push	{r3, lr}
	serialEventRun();
   d6252:	f7ff ffd7 	bl	d6204 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6256:	f7fe fca3 	bl	d4ba0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d625a:	4b01      	ldr	r3, [pc, #4]	; (d6260 <_post_loop+0x10>)
   d625c:	6018      	str	r0, [r3, #0]
   d625e:	bd08      	pop	{r3, pc}
   d6260:	2003e730 	.word	0x2003e730

000d6264 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6264:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6266:	2300      	movs	r3, #0
   d6268:	9300      	str	r3, [sp, #0]
   d626a:	461a      	mov	r2, r3
   d626c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6270:	f7fe fea4 	bl	d4fbc <system_ctrl_set_result>
}
   d6274:	b003      	add	sp, #12
   d6276:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d627c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d627c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d627e:	8843      	ldrh	r3, [r0, #2]
   d6280:	2b0a      	cmp	r3, #10
   d6282:	d008      	beq.n	d6296 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6284:	2b50      	cmp	r3, #80	; 0x50
   d6286:	d109      	bne.n	d629c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6288:	4b09      	ldr	r3, [pc, #36]	; (d62b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d628a:	681b      	ldr	r3, [r3, #0]
   d628c:	b13b      	cbz	r3, d629e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d628e:	b003      	add	sp, #12
   d6290:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6294:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6296:	f7ff ffe5 	bl	d6264 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d629a:	e006      	b.n	d62aa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d629c:	2300      	movs	r3, #0
   d629e:	9300      	str	r3, [sp, #0]
   d62a0:	461a      	mov	r2, r3
   d62a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d62a6:	f7fe fe89 	bl	d4fbc <system_ctrl_set_result>
        break;
    }
}
   d62aa:	b003      	add	sp, #12
   d62ac:	f85d fb04 	ldr.w	pc, [sp], #4
   d62b0:	2003e4f8 	.word	0x2003e4f8

000d62b4 <module_user_init_hook>:

void module_user_init_hook()
{
   d62b4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d62b6:	f7fe fc5b 	bl	d4b70 <HAL_RNG_GetRandomNumber>
   d62ba:	4604      	mov	r4, r0
    srand(seed);
   d62bc:	f002 fa68 	bl	d8790 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d62c0:	4b07      	ldr	r3, [pc, #28]	; (d62e0 <module_user_init_hook+0x2c>)
   d62c2:	b113      	cbz	r3, d62ca <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d62c4:	4620      	mov	r0, r4
   d62c6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d62ca:	2100      	movs	r1, #0
   d62cc:	4804      	ldr	r0, [pc, #16]	; (d62e0 <module_user_init_hook+0x2c>)
   d62ce:	f7fe ff11 	bl	d50f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d62d2:	2100      	movs	r1, #0
   d62d4:	4803      	ldr	r0, [pc, #12]	; (d62e4 <module_user_init_hook+0x30>)
}
   d62d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d62da:	f7fe be65 	b.w	d4fa8 <system_ctrl_set_app_request_handler>
   d62de:	bf00      	nop
   d62e0:	00000000 	.word	0x00000000
   d62e4:	000d627d 	.word	0x000d627d

000d62e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d62e8:	4770      	bx	lr

000d62ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d62ea:	2000      	movs	r0, #0
   d62ec:	4770      	bx	lr

000d62ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d62ee:	b510      	push	{r4, lr}
   d62f0:	2110      	movs	r1, #16
   d62f2:	4604      	mov	r4, r0
   d62f4:	f001 fc88 	bl	d7c08 <_ZdlPvj>
   d62f8:	4620      	mov	r0, r4
   d62fa:	bd10      	pop	{r4, pc}

000d62fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d62fc:	b508      	push	{r3, lr}
      { delete this; }
   d62fe:	b108      	cbz	r0, d6304 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6300:	f7ff fff5 	bl	d62ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6304:	bd08      	pop	{r3, pc}

000d6306 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6306:	2200      	movs	r2, #0
   d6308:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d630a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d630c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6310:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6312:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6316:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6318:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d631a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d631c:	680c      	ldr	r4, [r1, #0]
   d631e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6320:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6322:	bd10      	pop	{r4, pc}

000d6324 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6324:	b510      	push	{r4, lr}
   d6326:	4604      	mov	r4, r0
    free((void*)msg_);
   d6328:	6800      	ldr	r0, [r0, #0]
   d632a:	f7fe fef3 	bl	d5114 <free>
}
   d632e:	4620      	mov	r0, r4
   d6330:	bd10      	pop	{r4, pc}

000d6332 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6332:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6334:	68c4      	ldr	r4, [r0, #12]
   d6336:	b1f4      	cbz	r4, d6376 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6338:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d633a:	2b02      	cmp	r3, #2
   d633c:	d103      	bne.n	d6346 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d633e:	f104 000c 	add.w	r0, r4, #12
   d6342:	f7ff ffef 	bl	d6324 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6346:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6348:	b135      	cbz	r5, d6358 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d634a:	4628      	mov	r0, r5
   d634c:	f7fd fef6 	bl	d413c <_ZNSt14_Function_baseD1Ev>
   d6350:	2110      	movs	r1, #16
   d6352:	4628      	mov	r0, r5
   d6354:	f001 fc58 	bl	d7c08 <_ZdlPvj>
   d6358:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d635a:	b135      	cbz	r5, d636a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d635c:	4628      	mov	r0, r5
   d635e:	f7fd feed 	bl	d413c <_ZNSt14_Function_baseD1Ev>
   d6362:	2110      	movs	r1, #16
   d6364:	4628      	mov	r0, r5
   d6366:	f001 fc4f 	bl	d7c08 <_ZdlPvj>
   d636a:	4620      	mov	r0, r4
   d636c:	2114      	movs	r1, #20
   d636e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6372:	f001 bc49 	b.w	d7c08 <_ZdlPvj>
   d6376:	bd38      	pop	{r3, r4, r5, pc}

000d6378 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6378:	b510      	push	{r4, lr}
   d637a:	b088      	sub	sp, #32
   d637c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d637e:	4668      	mov	r0, sp
   d6380:	f7ff fade 	bl	d5940 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d6384:	4669      	mov	r1, sp
   d6386:	a804      	add	r0, sp, #16
   d6388:	f7ff fafc 	bl	d5984 <_ZN6StringC1ERKS_>
   d638c:	a804      	add	r0, sp, #16
   d638e:	47a0      	blx	r4
   d6390:	4604      	mov	r4, r0
   d6392:	a804      	add	r0, sp, #16
   d6394:	f7ff fa8d 	bl	d58b2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6398:	4668      	mov	r0, sp
   d639a:	f7ff fa8a 	bl	d58b2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d639e:	4620      	mov	r0, r4
   d63a0:	b008      	add	sp, #32
   d63a2:	bd10      	pop	{r4, pc}

000d63a4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d63a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d63a6:	2410      	movs	r4, #16
   d63a8:	b085      	sub	sp, #20
   d63aa:	4607      	mov	r7, r0
   d63ac:	460e      	mov	r6, r1
   d63ae:	4615      	mov	r5, r2
   d63b0:	2100      	movs	r1, #0
   d63b2:	4622      	mov	r2, r4
   d63b4:	4668      	mov	r0, sp
   d63b6:	f002 f9e2 	bl	d877e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d63ba:	2200      	movs	r2, #0
   d63bc:	4669      	mov	r1, sp
   d63be:	4610      	mov	r0, r2
         size = sizeof(*this);
   d63c0:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d63c4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d63c6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d63c8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d63ca:	f7fe fe5b 	bl	d5084 <spark_function>
}
   d63ce:	b005      	add	sp, #20
   d63d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d63d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d63d2:	b513      	push	{r0, r1, r4, lr}
   d63d4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d63d6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d63da:	2300      	movs	r3, #0
   d63dc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d63de:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d63e0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d63e2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63e4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d63e6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d63e8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63ea:	f7fd ffa8 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63ee:	4620      	mov	r0, r4
   d63f0:	b002      	add	sp, #8
   d63f2:	bd10      	pop	{r4, pc}

000d63f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d63f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63f6:	460c      	mov	r4, r1
   d63f8:	ad02      	add	r5, sp, #8
   d63fa:	f854 3b04 	ldr.w	r3, [r4], #4
   d63fe:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6402:	4606      	mov	r6, r0
   d6404:	460f      	mov	r7, r1
   d6406:	a801      	add	r0, sp, #4
   d6408:	4621      	mov	r1, r4
   d640a:	f7ff fc39 	bl	d5c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d640e:	4629      	mov	r1, r5
   d6410:	4630      	mov	r0, r6
   d6412:	f7ff ffde 	bl	d63d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6416:	a801      	add	r0, sp, #4
   d6418:	f7fd ff91 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d641c:	4620      	mov	r0, r4
   d641e:	f7fd ff8e 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6422:	4638      	mov	r0, r7
   d6424:	2108      	movs	r1, #8
   d6426:	f001 fbef 	bl	d7c08 <_ZdlPvj>
        return p;
    }
   d642a:	4630      	mov	r0, r6
   d642c:	b003      	add	sp, #12
   d642e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6430:	b538      	push	{r3, r4, r5, lr}
   d6432:	2300      	movs	r3, #0
   d6434:	4604      	mov	r4, r0
   d6436:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6438:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d643a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d643c:	f7fd fe2d 	bl	d409a <_Znwj>
   d6440:	b128      	cbz	r0, d644e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6442:	2301      	movs	r3, #1
   d6444:	6043      	str	r3, [r0, #4]
   d6446:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6448:	4b02      	ldr	r3, [pc, #8]	; (d6454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d644a:	6003      	str	r3, [r0, #0]
   d644c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d644e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6450:	4620      	mov	r0, r4
   d6452:	bd38      	pop	{r3, r4, r5, pc}
   d6454:	000d9000 	.word	0x000d9000

000d6458 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6458:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d645a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d645c:	b90a      	cbnz	r2, d6462 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d645e:	f001 fbe6 	bl	d7c2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6462:	68c3      	ldr	r3, [r0, #12]
    }
   d6464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6468:	4718      	bx	r3

000d646a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d646a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d646c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d646e:	f100 0110 	add.w	r1, r0, #16
   d6472:	f7ff fff1 	bl	d6458 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6476:	bd08      	pop	{r3, pc}

000d6478 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6478:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d647a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d647c:	b90a      	cbnz	r2, d6482 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d647e:	f001 fbd6 	bl	d7c2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6482:	68c3      	ldr	r3, [r0, #12]
    }
   d6484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6488:	4718      	bx	r3

000d648a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d648a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d648c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d648e:	f100 0110 	add.w	r1, r0, #16
   d6492:	f7ff fff1 	bl	d6478 <_ZNKSt8functionIFvRKbEEclES1_>
   d6496:	bd08      	pop	{r3, pc}

000d6498 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6498:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d649a:	2300      	movs	r3, #0
   d649c:	6083      	str	r3, [r0, #8]
   d649e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d64a0:	4604      	mov	r4, r0
   d64a2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d64a4:	b12b      	cbz	r3, d64b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d64a6:	2202      	movs	r2, #2
   d64a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d64aa:	68eb      	ldr	r3, [r5, #12]
   d64ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d64ae:	68ab      	ldr	r3, [r5, #8]
   d64b0:	60a3      	str	r3, [r4, #8]
	}
    }
   d64b2:	4620      	mov	r0, r4
   d64b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d64b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d64b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64ba:	b089      	sub	sp, #36	; 0x24
   d64bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d64be:	4668      	mov	r0, sp
   d64c0:	f7ff ff21 	bl	d6306 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d64c4:	2300      	movs	r3, #0
   d64c6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d64ca:	f04f 0202 	mov.w	r2, #2
   d64ce:	e8d4 3f4f 	ldrexb	r3, [r4]
   d64d2:	2b00      	cmp	r3, #0
   d64d4:	d103      	bne.n	d64de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d64d6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d64da:	2900      	cmp	r1, #0
   d64dc:	d1f7      	bne.n	d64ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d64de:	d002      	beq.n	d64e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d64e0:	f88d 3008 	strb.w	r3, [sp, #8]
   d64e4:	e063      	b.n	d65ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d64e6:	f114 050c 	adds.w	r5, r4, #12
   d64ea:	d003      	beq.n	d64f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d64ec:	4669      	mov	r1, sp
   d64ee:	4628      	mov	r0, r5
   d64f0:	f7ff ff09 	bl	d6306 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d64f4:	f3bf 8f5f 	dmb	sy
   d64f8:	2301      	movs	r3, #1
   d64fa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d64fc:	2000      	movs	r0, #0
   d64fe:	f104 0308 	add.w	r3, r4, #8
   d6502:	f3bf 8f5f 	dmb	sy
   d6506:	e853 6f00 	ldrex	r6, [r3]
   d650a:	e843 0200 	strex	r2, r0, [r3]
   d650e:	2a00      	cmp	r2, #0
   d6510:	d1f9      	bne.n	d6506 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6512:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6516:	2e00      	cmp	r6, #0
   d6518:	d049      	beq.n	d65ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d651a:	f7fe fd35 	bl	d4f88 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d651e:	b120      	cbz	r0, d652a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6520:	4629      	mov	r1, r5
   d6522:	4630      	mov	r0, r6
   d6524:	f7ff ff98 	bl	d6458 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6528:	e03a      	b.n	d65a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d652a:	4631      	mov	r1, r6
   d652c:	a802      	add	r0, sp, #8
   d652e:	f7ff ffb3 	bl	d6498 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6532:	68e0      	ldr	r0, [r4, #12]
   d6534:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6538:	b108      	cbz	r0, d653e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d653a:	f002 f963 	bl	d8804 <strdup>
   d653e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6540:	2010      	movs	r0, #16
   d6542:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6546:	f7fd fda8 	bl	d409a <_Znwj>
   d654a:	4605      	mov	r5, r0
   d654c:	b1e8      	cbz	r0, d658a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d654e:	2700      	movs	r7, #0
   d6550:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6552:	2018      	movs	r0, #24
   d6554:	f7fd fda1 	bl	d409a <_Znwj>
   d6558:	4604      	mov	r4, r0
   d655a:	b188      	cbz	r0, d6580 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d655c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d655e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6560:	a802      	add	r0, sp, #8
   d6562:	f7ff fe30 	bl	d61c6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6566:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6568:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d656a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d656c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d656e:	9204      	str	r2, [sp, #16]
   d6570:	a906      	add	r1, sp, #24
   d6572:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6574:	60e3      	str	r3, [r4, #12]
   d6576:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d657a:	9205      	str	r2, [sp, #20]
   d657c:	f7ff fec3 	bl	d6306 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6580:	4b0d      	ldr	r3, [pc, #52]	; (d65b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6582:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6584:	4b0d      	ldr	r3, [pc, #52]	; (d65bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6586:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6588:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d658a:	a806      	add	r0, sp, #24
   d658c:	f7ff feca 	bl	d6324 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6590:	a802      	add	r0, sp, #8
   d6592:	f7fd fdd3 	bl	d413c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6596:	2200      	movs	r2, #0
   d6598:	4629      	mov	r1, r5
   d659a:	4809      	ldr	r0, [pc, #36]	; (d65c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d659c:	f7fe fcfc 	bl	d4f98 <application_thread_invoke>
   d65a0:	4630      	mov	r0, r6
   d65a2:	f7fd fdcb 	bl	d413c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d65a6:	2110      	movs	r1, #16
   d65a8:	4630      	mov	r0, r6
   d65aa:	f001 fb2d 	bl	d7c08 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d65ae:	4668      	mov	r0, sp
   d65b0:	f7ff feb8 	bl	d6324 <_ZN8particle5ErrorD1Ev>
    }
   d65b4:	b009      	add	sp, #36	; 0x24
   d65b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d65b8:	000d646b 	.word	0x000d646b
   d65bc:	000d66e1 	.word	0x000d66e1
   d65c0:	000d6c21 	.word	0x000d6c21

000d65c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d65c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65c8:	b08b      	sub	sp, #44	; 0x2c
   d65ca:	4606      	mov	r6, r0
   d65cc:	460f      	mov	r7, r1
   d65ce:	4690      	mov	r8, r2
   d65d0:	4699      	mov	r9, r3
   d65d2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d65d6:	f7fe fd65 	bl	d50a4 <spark_cloud_flag_connected>
   d65da:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d65dc:	4683      	mov	fp, r0
   d65de:	bb30      	cbnz	r0, d662e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d65e0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d65e4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d65e6:	a905      	add	r1, sp, #20
   d65e8:	4628      	mov	r0, r5
   d65ea:	f8ad 3018 	strh.w	r3, [sp, #24]
   d65ee:	f7ff fe8a 	bl	d6306 <_ZN8particle5ErrorC1EOS0_>
   d65f2:	2014      	movs	r0, #20
   d65f4:	f7fd fd51 	bl	d409a <_Znwj>
   d65f8:	4604      	mov	r4, r0
   d65fa:	b158      	cbz	r0, d6614 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d65fc:	2302      	movs	r3, #2
   d65fe:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6600:	2301      	movs	r3, #1
   d6602:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6604:	f8c0 b004 	str.w	fp, [r0, #4]
   d6608:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d660c:	4629      	mov	r1, r5
   d660e:	300c      	adds	r0, #12
   d6610:	f7ff fe79 	bl	d6306 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6614:	4630      	mov	r0, r6
   d6616:	4621      	mov	r1, r4
   d6618:	f840 4b04 	str.w	r4, [r0], #4
   d661c:	f7ff ff08 	bl	d6430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6620:	4628      	mov	r0, r5
   d6622:	f7ff fe7f 	bl	d6324 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6626:	a805      	add	r0, sp, #20
   d6628:	f7ff fe7c 	bl	d6324 <_ZN8particle5ErrorD1Ev>
   d662c:	e052      	b.n	d66d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d662e:	2400      	movs	r4, #0
   d6630:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6632:	2014      	movs	r0, #20
   d6634:	606c      	str	r4, [r5, #4]
   d6636:	60ac      	str	r4, [r5, #8]
   d6638:	9307      	str	r3, [sp, #28]
   d663a:	f7fd fd2e 	bl	d409a <_Znwj>
   d663e:	4601      	mov	r1, r0
   d6640:	b118      	cbz	r0, d664a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6642:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6644:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6646:	6044      	str	r4, [r0, #4]
   d6648:	6084      	str	r4, [r0, #8]
   d664a:	a804      	add	r0, sp, #16
   d664c:	9103      	str	r1, [sp, #12]
   d664e:	f7ff feef 	bl	d6430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6652:	4b22      	ldr	r3, [pc, #136]	; (d66dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6654:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6656:	2008      	movs	r0, #8
   d6658:	f7fd fd1f 	bl	d409a <_Znwj>
   d665c:	4604      	mov	r4, r0
   d665e:	b128      	cbz	r0, d666c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6660:	9b03      	ldr	r3, [sp, #12]
   d6662:	f840 3b04 	str.w	r3, [r0], #4
   d6666:	a904      	add	r1, sp, #16
   d6668:	f7ff fb0a 	bl	d5c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d666c:	9500      	str	r5, [sp, #0]
   d666e:	fa5f f38a 	uxtb.w	r3, sl
   d6672:	464a      	mov	r2, r9
   d6674:	4641      	mov	r1, r8
   d6676:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6678:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d667a:	f7fe fd23 	bl	d50c4 <spark_send_event>
   d667e:	b920      	cbnz	r0, d668a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6680:	9b03      	ldr	r3, [sp, #12]
   d6682:	785b      	ldrb	r3, [r3, #1]
   d6684:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6688:	b183      	cbz	r3, d66ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d668a:	9b03      	ldr	r3, [sp, #12]
   d668c:	9305      	str	r3, [sp, #20]
   d668e:	a904      	add	r1, sp, #16
   d6690:	a806      	add	r0, sp, #24
   d6692:	f7ff faf5 	bl	d5c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6696:	a905      	add	r1, sp, #20
   d6698:	4630      	mov	r0, r6
   d669a:	f7ff fe9a 	bl	d63d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d669e:	a806      	add	r0, sp, #24
   d66a0:	f7fd fe4d 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66a4:	a804      	add	r0, sp, #16
   d66a6:	f7fd fe4a 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66aa:	e013      	b.n	d66d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d66ac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d66b0:	a905      	add	r1, sp, #20
   d66b2:	a803      	add	r0, sp, #12
   d66b4:	9205      	str	r2, [sp, #20]
   d66b6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d66ba:	f7ff fefd 	bl	d64b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d66be:	a805      	add	r0, sp, #20
   d66c0:	f7ff fe30 	bl	d6324 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d66c4:	a805      	add	r0, sp, #20
   d66c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d66c8:	f7ff fe94 	bl	d63f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d66cc:	a806      	add	r0, sp, #24
   d66ce:	f7fd fe36 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66d2:	e7da      	b.n	d668a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d66d4:	4630      	mov	r0, r6
   d66d6:	b00b      	add	sp, #44	; 0x2c
   d66d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66dc:	000d6851 	.word	0x000d6851

000d66e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d66e0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d66e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66e4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d66e6:	d006      	beq.n	d66f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d66e8:	2a03      	cmp	r2, #3
   d66ea:	d017      	beq.n	d671c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d66ec:	2a01      	cmp	r2, #1
   d66ee:	d122      	bne.n	d6736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d66f0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d66f2:	6003      	str	r3, [r0, #0]
	      break;
   d66f4:	e01f      	b.n	d6736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d66f6:	2018      	movs	r0, #24
   d66f8:	680e      	ldr	r6, [r1, #0]
   d66fa:	f7fd fcce 	bl	d409a <_Znwj>
   d66fe:	4605      	mov	r5, r0
   d6700:	b150      	cbz	r0, d6718 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6702:	4631      	mov	r1, r6
   d6704:	f7ff fec8 	bl	d6498 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6708:	6930      	ldr	r0, [r6, #16]
   d670a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d670e:	b108      	cbz	r0, d6714 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6710:	f002 f878 	bl	d8804 <strdup>
   d6714:	6128      	str	r0, [r5, #16]
   d6716:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6718:	6025      	str	r5, [r4, #0]
   d671a:	e00c      	b.n	d6736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d671c:	6804      	ldr	r4, [r0, #0]
   d671e:	b154      	cbz	r4, d6736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6720:	f104 0010 	add.w	r0, r4, #16
   d6724:	f7ff fdfe 	bl	d6324 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6728:	4620      	mov	r0, r4
   d672a:	f7fd fd07 	bl	d413c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d672e:	2118      	movs	r1, #24
   d6730:	4620      	mov	r0, r4
   d6732:	f001 fa69 	bl	d7c08 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6736:	2000      	movs	r0, #0
   d6738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d673a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d673a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d673c:	2300      	movs	r3, #0
   d673e:	6083      	str	r3, [r0, #8]
   d6740:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6742:	4604      	mov	r4, r0
   d6744:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6746:	b12b      	cbz	r3, d6754 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6748:	2202      	movs	r2, #2
   d674a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d674c:	68eb      	ldr	r3, [r5, #12]
   d674e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6750:	68ab      	ldr	r3, [r5, #8]
   d6752:	60a3      	str	r3, [r4, #8]
	}
    }
   d6754:	4620      	mov	r0, r4
   d6756:	bd38      	pop	{r3, r4, r5, pc}

000d6758 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6758:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d675a:	b570      	push	{r4, r5, r6, lr}
   d675c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d675e:	d006      	beq.n	d676e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6760:	2a03      	cmp	r2, #3
   d6762:	d011      	beq.n	d6788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6764:	2a01      	cmp	r2, #1
   d6766:	d118      	bne.n	d679a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6768:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d676a:	6003      	str	r3, [r0, #0]
	      break;
   d676c:	e015      	b.n	d679a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d676e:	2014      	movs	r0, #20
   d6770:	680e      	ldr	r6, [r1, #0]
   d6772:	f7fd fc92 	bl	d409a <_Znwj>
   d6776:	4605      	mov	r5, r0
   d6778:	b120      	cbz	r0, d6784 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d677a:	4631      	mov	r1, r6
   d677c:	f7ff ffdd 	bl	d673a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6780:	7c33      	ldrb	r3, [r6, #16]
   d6782:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6784:	6025      	str	r5, [r4, #0]
   d6786:	e008      	b.n	d679a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6788:	6804      	ldr	r4, [r0, #0]
   d678a:	b134      	cbz	r4, d679a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d678c:	4620      	mov	r0, r4
   d678e:	f7fd fcd5 	bl	d413c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6792:	2114      	movs	r1, #20
   d6794:	4620      	mov	r0, r4
   d6796:	f001 fa37 	bl	d7c08 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d679a:	2000      	movs	r0, #0
   d679c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d67a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d67a0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d67a2:	2300      	movs	r3, #0
   d67a4:	b087      	sub	sp, #28
   d67a6:	460c      	mov	r4, r1
   d67a8:	f3bf 8f5f 	dmb	sy
   d67ac:	e850 6f00 	ldrex	r6, [r0]
   d67b0:	e840 3200 	strex	r2, r3, [r0]
   d67b4:	2a00      	cmp	r2, #0
   d67b6:	d1f9      	bne.n	d67ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d67b8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d67bc:	2e00      	cmp	r6, #0
   d67be:	d03f      	beq.n	d6840 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d67c0:	4618      	mov	r0, r3
   d67c2:	f7fe fbe1 	bl	d4f88 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d67c6:	4607      	mov	r7, r0
   d67c8:	b120      	cbz	r0, d67d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d67ca:	4621      	mov	r1, r4
   d67cc:	4630      	mov	r0, r6
   d67ce:	f7ff fe53 	bl	d6478 <_ZNKSt8functionIFvRKbEEclES1_>
   d67d2:	e02e      	b.n	d6832 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d67d4:	4631      	mov	r1, r6
   d67d6:	a801      	add	r0, sp, #4
   d67d8:	f7ff ffaf 	bl	d673a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d67dc:	7823      	ldrb	r3, [r4, #0]
   d67de:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d67e2:	2010      	movs	r0, #16
   d67e4:	f7fd fc59 	bl	d409a <_Znwj>
   d67e8:	4605      	mov	r5, r0
   d67ea:	b1d0      	cbz	r0, d6822 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67ec:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d67ee:	2014      	movs	r0, #20
   d67f0:	f7fd fc53 	bl	d409a <_Znwj>
   d67f4:	4604      	mov	r4, r0
   d67f6:	b178      	cbz	r0, d6818 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67f8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d67fa:	4601      	mov	r1, r0
   d67fc:	a801      	add	r0, sp, #4
   d67fe:	f7ff fce2 	bl	d61c6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6802:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6804:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6806:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6808:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d680a:	9203      	str	r2, [sp, #12]
   d680c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d680e:	60e3      	str	r3, [r4, #12]
   d6810:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6814:	9204      	str	r2, [sp, #16]
   d6816:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6818:	4b0a      	ldr	r3, [pc, #40]	; (d6844 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d681a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d681c:	4b0a      	ldr	r3, [pc, #40]	; (d6848 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d681e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6820:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6822:	a801      	add	r0, sp, #4
   d6824:	f7fd fc8a 	bl	d413c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6828:	2200      	movs	r2, #0
   d682a:	4629      	mov	r1, r5
   d682c:	4807      	ldr	r0, [pc, #28]	; (d684c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d682e:	f7fe fbb3 	bl	d4f98 <application_thread_invoke>
   d6832:	4630      	mov	r0, r6
   d6834:	f7fd fc82 	bl	d413c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6838:	2110      	movs	r1, #16
   d683a:	4630      	mov	r0, r6
   d683c:	f001 f9e4 	bl	d7c08 <_ZdlPvj>
        }
    }
   d6840:	b007      	add	sp, #28
   d6842:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6844:	000d648b 	.word	0x000d648b
   d6848:	000d6759 	.word	0x000d6759
   d684c:	000d6c21 	.word	0x000d6c21

000d6850 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6850:	b530      	push	{r4, r5, lr}
   d6852:	b085      	sub	sp, #20
   d6854:	4604      	mov	r4, r0
   d6856:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6858:	4668      	mov	r0, sp
   d685a:	4611      	mov	r1, r2
   d685c:	f7ff fdca 	bl	d63f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6860:	b17c      	cbz	r4, d6882 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6862:	b224      	sxth	r4, r4
   d6864:	4628      	mov	r0, r5
   d6866:	b10d      	cbz	r5, d686c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6868:	f001 ffcc 	bl	d8804 <strdup>
   d686c:	9002      	str	r0, [sp, #8]
   d686e:	a902      	add	r1, sp, #8
   d6870:	4668      	mov	r0, sp
   d6872:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6876:	f7ff fe1f 	bl	d64b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d687a:	a802      	add	r0, sp, #8
   d687c:	f7ff fd52 	bl	d6324 <_ZN8particle5ErrorD1Ev>
   d6880:	e01d      	b.n	d68be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6882:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6884:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6888:	f04f 0201 	mov.w	r2, #1
   d688c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6890:	42a3      	cmp	r3, r4
   d6892:	d103      	bne.n	d689c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6894:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6898:	2900      	cmp	r1, #0
   d689a:	d1f7      	bne.n	d688c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d689c:	d002      	beq.n	d68a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d689e:	f88d 3008 	strb.w	r3, [sp, #8]
   d68a2:	e00c      	b.n	d68be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d68a4:	f110 010c 	adds.w	r1, r0, #12
   d68a8:	f04f 0301 	mov.w	r3, #1
   d68ac:	bf18      	it	ne
   d68ae:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d68b0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d68b4:	3004      	adds	r0, #4
   d68b6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d68ba:	f7ff ff71 	bl	d67a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d68be:	a801      	add	r0, sp, #4
   d68c0:	f7fd fd3d 	bl	d433e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d68c4:	b005      	add	sp, #20
   d68c6:	bd30      	pop	{r4, r5, pc}

000d68c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d68c8:	4770      	bx	lr

000d68ca <_ZN9IPAddressD0Ev>:
   d68ca:	b510      	push	{r4, lr}
   d68cc:	2118      	movs	r1, #24
   d68ce:	4604      	mov	r4, r0
   d68d0:	f001 f99a 	bl	d7c08 <_ZdlPvj>
   d68d4:	4620      	mov	r0, r4
   d68d6:	bd10      	pop	{r4, pc}

000d68d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d68d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d68da:	7d03      	ldrb	r3, [r0, #20]
   d68dc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d68de:	b08d      	sub	sp, #52	; 0x34
   d68e0:	460e      	mov	r6, r1
   d68e2:	f100 0704 	add.w	r7, r0, #4
   d68e6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d68ea:	d002      	beq.n	d68f2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d68ec:	f100 0508 	add.w	r5, r0, #8
   d68f0:	e018      	b.n	d6924 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d68f2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d68f4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d68f6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d68fa:	232f      	movs	r3, #47	; 0x2f
   d68fc:	462a      	mov	r2, r5
   d68fe:	200a      	movs	r0, #10
   d6900:	f7fe f9fa 	bl	d4cf8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6904:	4628      	mov	r0, r5
   d6906:	f001 ff98 	bl	d883a <strlen>
   d690a:	6833      	ldr	r3, [r6, #0]
   d690c:	4602      	mov	r2, r0
   d690e:	68db      	ldr	r3, [r3, #12]
   d6910:	4629      	mov	r1, r5
   d6912:	4630      	mov	r0, r6
   d6914:	4798      	blx	r3
   d6916:	e00f      	b.n	d6938 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6918:	b124      	cbz	r4, d6924 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d691a:	212e      	movs	r1, #46	; 0x2e
   d691c:	4630      	mov	r0, r6
   d691e:	f7ff fbb1 	bl	d6084 <_ZN5Print5printEc>
   d6922:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6924:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6928:	220a      	movs	r2, #10
   d692a:	4630      	mov	r0, r6
   d692c:	f7ff fbf0 	bl	d6110 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6930:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6932:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6934:	d1f0      	bne.n	d6918 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6936:	4620      	mov	r0, r4
    }
    return n;
}
   d6938:	b00d      	add	sp, #52	; 0x34
   d693a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d693c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d693c:	b510      	push	{r4, lr}
   d693e:	4b05      	ldr	r3, [pc, #20]	; (d6954 <_ZN9IPAddressC1Ev+0x18>)
   d6940:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6942:	2211      	movs	r2, #17
   d6944:	f840 3b04 	str.w	r3, [r0], #4
   d6948:	2100      	movs	r1, #0
   d694a:	f001 ff18 	bl	d877e <memset>
{
    clear();
}
   d694e:	4620      	mov	r0, r4
   d6950:	bd10      	pop	{r4, pc}
   d6952:	bf00      	nop
   d6954:	000d901c 	.word	0x000d901c

000d6958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6958:	4603      	mov	r3, r0
   d695a:	4a07      	ldr	r2, [pc, #28]	; (d6978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d695c:	b510      	push	{r4, lr}
   d695e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6962:	f101 0210 	add.w	r2, r1, #16
   d6966:	f851 4b04 	ldr.w	r4, [r1], #4
   d696a:	f843 4b04 	str.w	r4, [r3], #4
   d696e:	4291      	cmp	r1, r2
   d6970:	d1f9      	bne.n	d6966 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6972:	780a      	ldrb	r2, [r1, #0]
   d6974:	701a      	strb	r2, [r3, #0]
}
   d6976:	bd10      	pop	{r4, pc}
   d6978:	000d901c 	.word	0x000d901c

000d697c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d697c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d697e:	2b04      	cmp	r3, #4
   d6980:	d101      	bne.n	d6986 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6982:	6840      	ldr	r0, [r0, #4]
   d6984:	e008      	b.n	d6998 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6986:	2b06      	cmp	r3, #6
   d6988:	d10a      	bne.n	d69a0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d698a:	6843      	ldr	r3, [r0, #4]
   d698c:	b953      	cbnz	r3, d69a4 <_ZNK9IPAddresscvbEv+0x28>
   d698e:	6883      	ldr	r3, [r0, #8]
   d6990:	b943      	cbnz	r3, d69a4 <_ZNK9IPAddresscvbEv+0x28>
   d6992:	68c3      	ldr	r3, [r0, #12]
   d6994:	b933      	cbnz	r3, d69a4 <_ZNK9IPAddresscvbEv+0x28>
   d6996:	6900      	ldr	r0, [r0, #16]
   d6998:	3000      	adds	r0, #0
   d699a:	bf18      	it	ne
   d699c:	2001      	movne	r0, #1
   d699e:	4770      	bx	lr
    } else {
        return false;
   d69a0:	2000      	movs	r0, #0
   d69a2:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d69a4:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d69a6:	4770      	bx	lr

000d69a8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d69a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d69aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d69ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d69b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d69b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d69ba:	2304      	movs	r3, #4
   d69bc:	6041      	str	r1, [r0, #4]
   d69be:	7503      	strb	r3, [r0, #20]
   d69c0:	bd10      	pop	{r4, pc}

000d69c2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d69c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d69c4:	780d      	ldrb	r5, [r1, #0]
   d69c6:	788b      	ldrb	r3, [r1, #2]
   d69c8:	784a      	ldrb	r2, [r1, #1]
   d69ca:	78c9      	ldrb	r1, [r1, #3]
   d69cc:	9100      	str	r1, [sp, #0]
   d69ce:	4629      	mov	r1, r5
   d69d0:	f7ff ffea 	bl	d69a8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d69d4:	b003      	add	sp, #12
   d69d6:	bd30      	pop	{r4, r5, pc}

000d69d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69d8:	7441      	strb	r1, [r0, #17]
   d69da:	4770      	bx	lr

000d69dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d69dc:	4770      	bx	lr

000d69de <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d69de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d69e0:	2100      	movs	r1, #0
   d69e2:	7c00      	ldrb	r0, [r0, #16]
   d69e4:	f7fe fa90 	bl	d4f08 <HAL_USB_USART_Receive_Data>
}
   d69e8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69ec:	bf28      	it	cs
   d69ee:	f04f 30ff 	movcs.w	r0, #4294967295
   d69f2:	bd08      	pop	{r3, pc}

000d69f4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d69f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d69f6:	2101      	movs	r1, #1
   d69f8:	7c00      	ldrb	r0, [r0, #16]
   d69fa:	f7fe fa85 	bl	d4f08 <HAL_USB_USART_Receive_Data>
}
   d69fe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a02:	bf28      	it	cs
   d6a04:	f04f 30ff 	movcs.w	r0, #4294967295
   d6a08:	bd08      	pop	{r3, pc}

000d6a0a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6a0a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6a0c:	7c00      	ldrb	r0, [r0, #16]
   d6a0e:	f7fe fa73 	bl	d4ef8 <HAL_USB_USART_Available_Data_For_Write>
}
   d6a12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a16:	bd08      	pop	{r3, pc}

000d6a18 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6a18:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6a1a:	7c00      	ldrb	r0, [r0, #16]
   d6a1c:	f7fe fa64 	bl	d4ee8 <HAL_USB_USART_Available_Data>
}
   d6a20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a24:	bd08      	pop	{r3, pc}

000d6a26 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6a26:	7c00      	ldrb	r0, [r0, #16]
   d6a28:	f7fe ba7e 	b.w	d4f28 <HAL_USB_USART_Flush_Data>

000d6a2c <_ZN9USBSerialD0Ev>:
   d6a2c:	b510      	push	{r4, lr}
   d6a2e:	2114      	movs	r1, #20
   d6a30:	4604      	mov	r4, r0
   d6a32:	f001 f8e9 	bl	d7c08 <_ZdlPvj>
   d6a36:	4620      	mov	r0, r4
   d6a38:	bd10      	pop	{r4, pc}

000d6a3a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6a3a:	b538      	push	{r3, r4, r5, lr}
   d6a3c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a3e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6a40:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a42:	f7fe fa59 	bl	d4ef8 <HAL_USB_USART_Available_Data_For_Write>
   d6a46:	2800      	cmp	r0, #0
   d6a48:	dc01      	bgt.n	d6a4e <_ZN9USBSerial5writeEh+0x14>
   d6a4a:	7c60      	ldrb	r0, [r4, #17]
   d6a4c:	b128      	cbz	r0, d6a5a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6a4e:	4629      	mov	r1, r5
   d6a50:	7c20      	ldrb	r0, [r4, #16]
   d6a52:	f7fe fa61 	bl	d4f18 <HAL_USB_USART_Send_Data>
   d6a56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6a5a:	bd38      	pop	{r3, r4, r5, pc}

000d6a5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a5c:	b510      	push	{r4, lr}
   d6a5e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a60:	2300      	movs	r3, #0
   d6a62:	6063      	str	r3, [r4, #4]
   d6a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a68:	60a3      	str	r3, [r4, #8]
   d6a6a:	4b05      	ldr	r3, [pc, #20]	; (d6a80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a6c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6a6e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a70:	4608      	mov	r0, r1
{
  _serial = serial;
   d6a72:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6a74:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6a76:	4611      	mov	r1, r2
   d6a78:	f7fe fa26 	bl	d4ec8 <HAL_USB_USART_Init>
}
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	bd10      	pop	{r4, pc}
   d6a80:	000d9030 	.word	0x000d9030

000d6a84 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6a84:	2200      	movs	r2, #0
   d6a86:	7c00      	ldrb	r0, [r0, #16]
   d6a88:	f7fe ba26 	b.w	d4ed8 <HAL_USB_USART_Begin>

000d6a8c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a8c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a8e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a90:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6a92:	2100      	movs	r1, #0
   d6a94:	f001 fe73 	bl	d877e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6a98:	4620      	mov	r0, r4
   d6a9a:	bd10      	pop	{r4, pc}

000d6a9c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6a9c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a9e:	4d0e      	ldr	r5, [pc, #56]	; (d6ad8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6aa0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6aa2:	a801      	add	r0, sp, #4
   d6aa4:	f7ff fff2 	bl	d6a8c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6aa8:	6829      	ldr	r1, [r5, #0]
   d6aaa:	f011 0401 	ands.w	r4, r1, #1
   d6aae:	d110      	bne.n	d6ad2 <_Z16_fetch_usbserialv+0x36>
   d6ab0:	4628      	mov	r0, r5
   d6ab2:	f7fd fafa 	bl	d40aa <__cxa_guard_acquire>
   d6ab6:	b160      	cbz	r0, d6ad2 <_Z16_fetch_usbserialv+0x36>
   d6ab8:	aa01      	add	r2, sp, #4
   d6aba:	4621      	mov	r1, r4
   d6abc:	4807      	ldr	r0, [pc, #28]	; (d6adc <_Z16_fetch_usbserialv+0x40>)
   d6abe:	f7ff ffcd 	bl	d6a5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6ac2:	4628      	mov	r0, r5
   d6ac4:	f7fd faf6 	bl	d40b4 <__cxa_guard_release>
   d6ac8:	4a05      	ldr	r2, [pc, #20]	; (d6ae0 <_Z16_fetch_usbserialv+0x44>)
   d6aca:	4906      	ldr	r1, [pc, #24]	; (d6ae4 <_Z16_fetch_usbserialv+0x48>)
   d6acc:	4803      	ldr	r0, [pc, #12]	; (d6adc <_Z16_fetch_usbserialv+0x40>)
   d6ace:	f001 f88d 	bl	d7bec <__aeabi_atexit>
	return _usbserial;
}
   d6ad2:	4802      	ldr	r0, [pc, #8]	; (d6adc <_Z16_fetch_usbserialv+0x40>)
   d6ad4:	b007      	add	sp, #28
   d6ad6:	bd30      	pop	{r4, r5, pc}
   d6ad8:	2003e4fc 	.word	0x2003e4fc
   d6adc:	2003e500 	.word	0x2003e500
   d6ae0:	2003cf80 	.word	0x2003cf80
   d6ae4:	000d69dd 	.word	0x000d69dd

000d6ae8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6ae8:	4770      	bx	lr

000d6aea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6aea:	7441      	strb	r1, [r0, #17]
   d6aec:	4770      	bx	lr

000d6aee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6aee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6af0:	7c00      	ldrb	r0, [r0, #16]
   d6af2:	f7fe f961 	bl	d4db8 <HAL_USART_Available_Data_For_Write>
}
   d6af6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6afa:	bd08      	pop	{r3, pc}

000d6afc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6afc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6afe:	7c00      	ldrb	r0, [r0, #16]
   d6b00:	f7fe f932 	bl	d4d68 <HAL_USART_Available_Data>
}
   d6b04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b08:	bd08      	pop	{r3, pc}

000d6b0a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6b0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6b0c:	7c00      	ldrb	r0, [r0, #16]
   d6b0e:	f7fe f93b 	bl	d4d88 <HAL_USART_Peek_Data>
}
   d6b12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b16:	bf28      	it	cs
   d6b18:	f04f 30ff 	movcs.w	r0, #4294967295
   d6b1c:	bd08      	pop	{r3, pc}

000d6b1e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6b1e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6b20:	7c00      	ldrb	r0, [r0, #16]
   d6b22:	f7fe f929 	bl	d4d78 <HAL_USART_Read_Data>
}
   d6b26:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b2a:	bf28      	it	cs
   d6b2c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6b30:	bd08      	pop	{r3, pc}

000d6b32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6b32:	7c00      	ldrb	r0, [r0, #16]
   d6b34:	f7fe b930 	b.w	d4d98 <HAL_USART_Flush_Data>

000d6b38 <_ZN11USARTSerialD0Ev>:
   d6b38:	b510      	push	{r4, lr}
   d6b3a:	2114      	movs	r1, #20
   d6b3c:	4604      	mov	r4, r0
   d6b3e:	f001 f863 	bl	d7c08 <_ZdlPvj>
   d6b42:	4620      	mov	r0, r4
   d6b44:	bd10      	pop	{r4, pc}

000d6b46 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6b46:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b48:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6b4a:	4604      	mov	r4, r0
   d6b4c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b4e:	b925      	cbnz	r5, d6b5a <_ZN11USARTSerial5writeEh+0x14>
   d6b50:	7c00      	ldrb	r0, [r0, #16]
   d6b52:	f7fe f931 	bl	d4db8 <HAL_USART_Available_Data_For_Write>
   d6b56:	2800      	cmp	r0, #0
   d6b58:	dd05      	ble.n	d6b66 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b5a:	4631      	mov	r1, r6
   d6b5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b62:	f7fe b8f9 	b.w	d4d58 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6b66:	4628      	mov	r0, r5
   d6b68:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6b6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6b6c:	b510      	push	{r4, lr}
   d6b6e:	4604      	mov	r4, r0
   d6b70:	4608      	mov	r0, r1
   d6b72:	4611      	mov	r1, r2
   d6b74:	2200      	movs	r2, #0
   d6b76:	6062      	str	r2, [r4, #4]
   d6b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b7c:	60a2      	str	r2, [r4, #8]
   d6b7e:	4a05      	ldr	r2, [pc, #20]	; (d6b94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6b80:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6b82:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6b84:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6b86:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6b88:	461a      	mov	r2, r3
   d6b8a:	f7fe f8dd 	bl	d4d48 <HAL_USART_Init>
}
   d6b8e:	4620      	mov	r0, r4
   d6b90:	bd10      	pop	{r4, pc}
   d6b92:	bf00      	nop
   d6b94:	000d9060 	.word	0x000d9060

000d6b98 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6b98:	7c00      	ldrb	r0, [r0, #16]
   d6b9a:	f7fe b905 	b.w	d4da8 <HAL_USART_Is_Enabled>
	...

000d6ba0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d6ba2:	4c19      	ldr	r4, [pc, #100]	; (d6c08 <_Z22__fetch_global_Serial1v+0x68>)
   d6ba4:	6825      	ldr	r5, [r4, #0]
   d6ba6:	b94d      	cbnz	r5, d6bbc <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d6ba8:	2084      	movs	r0, #132	; 0x84
   d6baa:	f7fd fa76 	bl	d409a <_Znwj>
   d6bae:	4606      	mov	r6, r0
   d6bb0:	b118      	cbz	r0, d6bba <_Z22__fetch_global_Serial1v+0x1a>
   d6bb2:	2284      	movs	r2, #132	; 0x84
   d6bb4:	4629      	mov	r1, r5
   d6bb6:	f001 fde2 	bl	d877e <memset>
   d6bba:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6bbc:	4d13      	ldr	r5, [pc, #76]	; (d6c0c <_Z22__fetch_global_Serial1v+0x6c>)
   d6bbe:	682e      	ldr	r6, [r5, #0]
   d6bc0:	b94e      	cbnz	r6, d6bd6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d6bc2:	2084      	movs	r0, #132	; 0x84
   d6bc4:	f7fd fa69 	bl	d409a <_Znwj>
   d6bc8:	4607      	mov	r7, r0
   d6bca:	b118      	cbz	r0, d6bd4 <_Z22__fetch_global_Serial1v+0x34>
   d6bcc:	2284      	movs	r2, #132	; 0x84
   d6bce:	4631      	mov	r1, r6
   d6bd0:	f001 fdd5 	bl	d877e <memset>
   d6bd4:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6bd6:	4f0e      	ldr	r7, [pc, #56]	; (d6c10 <_Z22__fetch_global_Serial1v+0x70>)
   d6bd8:	6839      	ldr	r1, [r7, #0]
   d6bda:	f011 0601 	ands.w	r6, r1, #1
   d6bde:	d111      	bne.n	d6c04 <_Z22__fetch_global_Serial1v+0x64>
   d6be0:	4638      	mov	r0, r7
   d6be2:	f7fd fa62 	bl	d40aa <__cxa_guard_acquire>
   d6be6:	b168      	cbz	r0, d6c04 <_Z22__fetch_global_Serial1v+0x64>
   d6be8:	6822      	ldr	r2, [r4, #0]
   d6bea:	682b      	ldr	r3, [r5, #0]
   d6bec:	4809      	ldr	r0, [pc, #36]	; (d6c14 <_Z22__fetch_global_Serial1v+0x74>)
   d6bee:	4631      	mov	r1, r6
   d6bf0:	f7ff ffbc 	bl	d6b6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6bf4:	4638      	mov	r0, r7
   d6bf6:	f7fd fa5d 	bl	d40b4 <__cxa_guard_release>
   d6bfa:	4a07      	ldr	r2, [pc, #28]	; (d6c18 <_Z22__fetch_global_Serial1v+0x78>)
   d6bfc:	4907      	ldr	r1, [pc, #28]	; (d6c1c <_Z22__fetch_global_Serial1v+0x7c>)
   d6bfe:	4805      	ldr	r0, [pc, #20]	; (d6c14 <_Z22__fetch_global_Serial1v+0x74>)
   d6c00:	f000 fff4 	bl	d7bec <__aeabi_atexit>
#endif
	return serial1;
}
   d6c04:	4803      	ldr	r0, [pc, #12]	; (d6c14 <_Z22__fetch_global_Serial1v+0x74>)
   d6c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6c08:	2003e530 	.word	0x2003e530
   d6c0c:	2003e528 	.word	0x2003e528
   d6c10:	2003e52c 	.word	0x2003e52c
   d6c14:	2003e514 	.word	0x2003e514
   d6c18:	2003cf80 	.word	0x2003cf80
   d6c1c:	000d6ae9 	.word	0x000d6ae9

000d6c20 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6c20:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6c22:	6883      	ldr	r3, [r0, #8]
   d6c24:	4604      	mov	r4, r0
   d6c26:	b90b      	cbnz	r3, d6c2c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6c28:	f001 f801 	bl	d7c2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c2c:	68c3      	ldr	r3, [r0, #12]
   d6c2e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6c30:	68a3      	ldr	r3, [r4, #8]
   d6c32:	b11b      	cbz	r3, d6c3c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6c34:	2203      	movs	r2, #3
   d6c36:	4621      	mov	r1, r4
   d6c38:	4620      	mov	r0, r4
   d6c3a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6c3c:	4620      	mov	r0, r4
   d6c3e:	2110      	movs	r1, #16
}
   d6c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6c44:	f000 bfe0 	b.w	d7c08 <_ZdlPvj>

000d6c48 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6c48:	4770      	bx	lr

000d6c4a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c4c:	4606      	mov	r6, r0
   d6c4e:	4615      	mov	r5, r2
   d6c50:	460c      	mov	r4, r1
   d6c52:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6c54:	42bc      	cmp	r4, r7
   d6c56:	d006      	beq.n	d6c66 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6c58:	6833      	ldr	r3, [r6, #0]
   d6c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6c5e:	689b      	ldr	r3, [r3, #8]
   d6c60:	4630      	mov	r0, r6
   d6c62:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6c64:	e7f6      	b.n	d6c54 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6c66:	4628      	mov	r0, r5
   d6c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c6a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6c6a:	2200      	movs	r2, #0
   d6c6c:	7c00      	ldrb	r0, [r0, #16]
   d6c6e:	f7fe b8ab 	b.w	d4dc8 <HAL_I2C_Write_Data>

000d6c72 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6c72:	2100      	movs	r1, #0
   d6c74:	7c00      	ldrb	r0, [r0, #16]
   d6c76:	f7fe b8af 	b.w	d4dd8 <HAL_I2C_Available_Data>

000d6c7a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6c7a:	2100      	movs	r1, #0
   d6c7c:	7c00      	ldrb	r0, [r0, #16]
   d6c7e:	f7fe b8b3 	b.w	d4de8 <HAL_I2C_Read_Data>

000d6c82 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6c82:	2100      	movs	r1, #0
   d6c84:	7c00      	ldrb	r0, [r0, #16]
   d6c86:	f7fe b8b7 	b.w	d4df8 <HAL_I2C_Peek_Data>

000d6c8a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6c8a:	2100      	movs	r1, #0
   d6c8c:	7c00      	ldrb	r0, [r0, #16]
   d6c8e:	f7fe b8bb 	b.w	d4e08 <HAL_I2C_Flush_Data>

000d6c92 <_ZN7TwoWireD0Ev>:
   d6c92:	b510      	push	{r4, lr}
   d6c94:	2114      	movs	r1, #20
   d6c96:	4604      	mov	r4, r0
   d6c98:	f000 ffb6 	bl	d7c08 <_ZdlPvj>
   d6c9c:	4620      	mov	r0, r4
   d6c9e:	bd10      	pop	{r4, pc}

000d6ca0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6ca0:	b510      	push	{r4, lr}
   d6ca2:	4604      	mov	r4, r0
   d6ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ca8:	4608      	mov	r0, r1
   d6caa:	60a3      	str	r3, [r4, #8]
   d6cac:	2100      	movs	r1, #0
   d6cae:	4b04      	ldr	r3, [pc, #16]	; (d6cc0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6cb0:	7420      	strb	r0, [r4, #16]
   d6cb2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6cb4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6cb6:	f7fe f8b7 	bl	d4e28 <HAL_I2C_Init>

}
   d6cba:	4620      	mov	r0, r4
   d6cbc:	bd10      	pop	{r4, pc}
   d6cbe:	bf00      	nop
   d6cc0:	000d9090 	.word	0x000d9090

000d6cc4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6cc4:	2100      	movs	r1, #0
   d6cc6:	7c00      	ldrb	r0, [r0, #16]
   d6cc8:	f7fe b8a6 	b.w	d4e18 <HAL_I2C_Is_Enabled>

000d6ccc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6ccc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6cce:	2301      	movs	r3, #1
   d6cd0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6cd2:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6cd4:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d6cd6:	b10b      	cbz	r3, d6cdc <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d6cd8:	68c0      	ldr	r0, [r0, #12]
   d6cda:	e006      	b.n	d6cea <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6cdc:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6cde:	b128      	cbz	r0, d6cec <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ce0:	6883      	ldr	r3, [r0, #8]
   d6ce2:	b90b      	cbnz	r3, d6ce8 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d6ce4:	f000 ffa3 	bl	d7c2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ce8:	68c3      	ldr	r3, [r0, #12]
   d6cea:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d6cec:	2301      	movs	r3, #1
   d6cee:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6cf0:	2000      	movs	r0, #0
    }
   d6cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d6cf6:	f7fd bfef 	b.w	d4cd8 <os_thread_exit>

000d6cfa <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6cfa:	2200      	movs	r2, #0
   d6cfc:	4611      	mov	r1, r2
   d6cfe:	6840      	ldr	r0, [r0, #4]
   d6d00:	f7fe b9a8 	b.w	d5054 <network_listening>

000d6d04 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6d04:	2200      	movs	r2, #0
   d6d06:	4611      	mov	r1, r2
   d6d08:	6840      	ldr	r0, [r0, #4]
   d6d0a:	f7fe b9b3 	b.w	d5074 <network_get_listen_timeout>

000d6d0e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6d0e:	2200      	movs	r2, #0
   d6d10:	6840      	ldr	r0, [r0, #4]
   d6d12:	f7fe b9a7 	b.w	d5064 <network_set_listen_timeout>

000d6d16 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6d16:	2200      	movs	r2, #0
   d6d18:	f081 0101 	eor.w	r1, r1, #1
   d6d1c:	6840      	ldr	r0, [r0, #4]
   d6d1e:	f7fe b991 	b.w	d5044 <network_listen>

000d6d22 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6d22:	2300      	movs	r3, #0
   d6d24:	461a      	mov	r2, r3
   d6d26:	2101      	movs	r1, #1
   d6d28:	6840      	ldr	r0, [r0, #4]
   d6d2a:	f7fe b983 	b.w	d5034 <network_off>

000d6d2e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6d2e:	2300      	movs	r3, #0
   d6d30:	461a      	mov	r2, r3
   d6d32:	4619      	mov	r1, r3
   d6d34:	6840      	ldr	r0, [r0, #4]
   d6d36:	f7fe b975 	b.w	d5024 <network_on>

000d6d3a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6d3a:	2200      	movs	r2, #0
   d6d3c:	4611      	mov	r1, r2
   d6d3e:	6840      	ldr	r0, [r0, #4]
   d6d40:	f7fe b958 	b.w	d4ff4 <network_connecting>

000d6d44 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d44:	2200      	movs	r2, #0
   d6d46:	2102      	movs	r1, #2
   d6d48:	6840      	ldr	r0, [r0, #4]
   d6d4a:	f7fe b95b 	b.w	d5004 <network_disconnect>

000d6d4e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6d4e:	2300      	movs	r3, #0
   d6d50:	461a      	mov	r2, r3
   d6d52:	6840      	ldr	r0, [r0, #4]
   d6d54:	f7fe b946 	b.w	d4fe4 <network_connect>

000d6d58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6d58:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d5a:	4605      	mov	r5, r0
   d6d5c:	b188      	cbz	r0, d6d82 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d5e:	6804      	ldr	r4, [r0, #0]
   d6d60:	b14c      	cbz	r4, d6d76 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6d62:	68a3      	ldr	r3, [r4, #8]
   d6d64:	b11b      	cbz	r3, d6d6e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d66:	2203      	movs	r2, #3
   d6d68:	4621      	mov	r1, r4
   d6d6a:	4620      	mov	r0, r4
   d6d6c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d6e:	2110      	movs	r1, #16
   d6d70:	4620      	mov	r0, r4
   d6d72:	f000 ff49 	bl	d7c08 <_ZdlPvj>
   d6d76:	4628      	mov	r0, r5
   d6d78:	2114      	movs	r1, #20
      }
   d6d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d7e:	f000 bf43 	b.w	d7c08 <_ZdlPvj>
   d6d82:	bd38      	pop	{r3, r4, r5, pc}

000d6d84 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6d84:	b110      	cbz	r0, d6d8c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6d86:	6803      	ldr	r3, [r0, #0]
   d6d88:	685b      	ldr	r3, [r3, #4]
   d6d8a:	4718      	bx	r3
   d6d8c:	4770      	bx	lr

000d6d8e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6d8e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6d90:	6803      	ldr	r3, [r0, #0]
   d6d92:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6d94:	b1bb      	cbz	r3, d6dc6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6d96:	6858      	ldr	r0, [r3, #4]
   d6d98:	f7fd ff36 	bl	d4c08 <os_thread_is_current>
   d6d9c:	b978      	cbnz	r0, d6dbe <_ZN6ThreadD1Ev+0x30>
   d6d9e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6da0:	7c5a      	ldrb	r2, [r3, #17]
   d6da2:	b912      	cbnz	r2, d6daa <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6da4:	6858      	ldr	r0, [r3, #4]
   d6da6:	f7fd ff3f 	bl	d4c28 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6daa:	6823      	ldr	r3, [r4, #0]
   d6dac:	6858      	ldr	r0, [r3, #4]
   d6dae:	f7fd ff43 	bl	d4c38 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6db2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6db4:	2300      	movs	r3, #0
   d6db6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6db8:	b128      	cbz	r0, d6dc6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6dba:	f7ff ffcd 	bl	d6d58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6dbe:	6820      	ldr	r0, [r4, #0]
   d6dc0:	b108      	cbz	r0, d6dc6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6dc2:	f7ff ffc9 	bl	d6d58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6dc6:	4620      	mov	r0, r4
   d6dc8:	bd10      	pop	{r4, pc}
	...

000d6dcc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6dcc:	b538      	push	{r3, r4, r5, lr}
   d6dce:	4b0c      	ldr	r3, [pc, #48]	; (d6e00 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6dd0:	6003      	str	r3, [r0, #0]
   d6dd2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6dd4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6dd8:	b108      	cbz	r0, d6dde <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6dda:	f7fd f964 	bl	d40a6 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6dde:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6de2:	b135      	cbz	r5, d6df2 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6de4:	4628      	mov	r0, r5
   d6de6:	f7ff ffd2 	bl	d6d8e <_ZN6ThreadD1Ev>
   d6dea:	2104      	movs	r1, #4
   d6dec:	4628      	mov	r0, r5
   d6dee:	f000 ff0b 	bl	d7c08 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6df2:	68a0      	ldr	r0, [r4, #8]
   d6df4:	b108      	cbz	r0, d6dfa <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6df6:	f7ff ffc5 	bl	d6d84 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6dfa:	4620      	mov	r0, r4
   d6dfc:	bd38      	pop	{r3, r4, r5, pc}
   d6dfe:	bf00      	nop
   d6e00:	000d90b8 	.word	0x000d90b8

000d6e04 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d6e0a:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d6e0e:	4606      	mov	r6, r0
   d6e10:	4688      	mov	r8, r1
   d6e12:	4691      	mov	r9, r2
   d6e14:	469a      	mov	sl, r3
   d6e16:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6e18:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d6e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6e1c:	454b      	cmp	r3, r9
   d6e1e:	d129      	bne.n	d6e74 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d6e20:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d6e22:	4553      	cmp	r3, sl
   d6e24:	d126      	bne.n	d6e74 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d6e26:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d6e2a:	455b      	cmp	r3, fp
   d6e2c:	d122      	bne.n	d6e74 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6e2e:	2140      	movs	r1, #64	; 0x40
   d6e30:	4640      	mov	r0, r8
   d6e32:	f001 fd32 	bl	d889a <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d6e36:	4641      	mov	r1, r8
   d6e38:	4602      	mov	r2, r0
   d6e3a:	4620      	mov	r0, r4
   d6e3c:	f001 fd05 	bl	d884a <strncmp>
   d6e40:	b9c0      	cbnz	r0, d6e74 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d6e42:	b16f      	cbz	r7, d6e60 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d6e44:	210c      	movs	r1, #12
   d6e46:	4638      	mov	r0, r7
   d6e48:	f001 fd27 	bl	d889a <strnlen>
                if (id_len)
   d6e4c:	4602      	mov	r2, r0
   d6e4e:	b138      	cbz	r0, d6e60 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d6e50:	2358      	movs	r3, #88	; 0x58
   d6e52:	fb03 6005 	mla	r0, r3, r5, r6
   d6e56:	4639      	mov	r1, r7
   d6e58:	3049      	adds	r0, #73	; 0x49
   d6e5a:	f001 fcf6 	bl	d884a <strncmp>
   d6e5e:	e004      	b.n	d6e6a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d6e60:	2058      	movs	r0, #88	; 0x58
   d6e62:	fb00 6505 	mla	r5, r0, r5, r6
   d6e66:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d6e6a:	fab0 f080 	clz	r0, r0
   d6e6e:	0940      	lsrs	r0, r0, #5
   d6e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6e74:	3501      	adds	r5, #1
   d6e76:	2d05      	cmp	r5, #5
   d6e78:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d6e7c:	d1cd      	bne.n	d6e1a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d6e7e:	2000      	movs	r0, #0
}
   d6e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6e84 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e88:	b085      	sub	sp, #20
   d6e8a:	4607      	mov	r7, r0
   d6e8c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6e90:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d6e92:	9601      	str	r6, [sp, #4]
   d6e94:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6e98:	4689      	mov	r9, r1
   d6e9a:	9202      	str	r2, [sp, #8]
   d6e9c:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d6e9e:	f7ff ffb1 	bl	d6e04 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d6ea2:	2800      	cmp	r0, #0
   d6ea4:	d13c      	bne.n	d6f20 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d6ea6:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d6ea8:	2358      	movs	r3, #88	; 0x58
   d6eaa:	fb03 7504 	mla	r5, r3, r4, r7
   d6eae:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d6eb2:	f1b8 0f00 	cmp.w	r8, #0
   d6eb6:	d12e      	bne.n	d6f16 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6eb8:	2140      	movs	r1, #64	; 0x40
   d6eba:	4648      	mov	r0, r9
   d6ebc:	f001 fced 	bl	d889a <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d6ec0:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6ec2:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d6ec4:	4602      	mov	r2, r0
   d6ec6:	4628      	mov	r0, r5
   d6ec8:	f001 fc33 	bl	d8732 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d6ecc:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d6ed0:	4641      	mov	r1, r8
   d6ed2:	eb05 000b 	add.w	r0, r5, fp
   d6ed6:	f001 fc52 	bl	d877e <memset>
            event_handlers[i].handler = handler;
   d6eda:	9b02      	ldr	r3, [sp, #8]
   d6edc:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d6ede:	9b03      	ldr	r3, [sp, #12]
   d6ee0:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d6ee2:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d6ee6:	b12e      	cbz	r6, d6ef4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d6ee8:	210c      	movs	r1, #12
   d6eea:	4630      	mov	r0, r6
   d6eec:	f001 fcd5 	bl	d889a <strnlen>
   d6ef0:	4605      	mov	r5, r0
   d6ef2:	e000      	b.n	d6ef6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d6ef4:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d6ef6:	2058      	movs	r0, #88	; 0x58
   d6ef8:	4344      	muls	r4, r0
   d6efa:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d6efc:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d6efe:	462a      	mov	r2, r5
   d6f00:	4631      	mov	r1, r6
   d6f02:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d6f04:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d6f06:	f001 fc14 	bl	d8732 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d6f0a:	2000      	movs	r0, #0
   d6f0c:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d6f10:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d6f14:	e005      	b.n	d6f22 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6f16:	3401      	adds	r4, #1
   d6f18:	2c05      	cmp	r4, #5
   d6f1a:	d1c6      	bne.n	d6eaa <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d6f1c:	4802      	ldr	r0, [pc, #8]	; (d6f28 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d6f1e:	e000      	b.n	d6f22 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d6f20:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d6f22:	b005      	add	sp, #20
   d6f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f28:	fffffefc 	.word	0xfffffefc

000d6f2c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d6f2c:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d6f2e:	2300      	movs	r3, #0
   d6f30:	9301      	str	r3, [sp, #4]
   d6f32:	9300      	str	r3, [sp, #0]
   d6f34:	f7ff ffa6 	bl	d6e84 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d6f38:	b003      	add	sp, #12
   d6f3a:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f3e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6f3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6f42:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d6f44:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6f46:	460d      	mov	r5, r1
   d6f48:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d6f4a:	f001 fc76 	bl	d883a <strlen>
   d6f4e:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d6f52:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d6f54:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6f56:	b1ab      	cbz	r3, d6f84 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6f58:	2140      	movs	r1, #64	; 0x40
   d6f5a:	4620      	mov	r0, r4
   d6f5c:	f001 fc9d 	bl	d889a <strnlen>

        if (event_name_length < filter_length)
   d6f60:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6f62:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d6f64:	d30b      	bcc.n	d6f7e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d6f66:	4629      	mov	r1, r5
   d6f68:	4620      	mov	r0, r4
   d6f6a:	f001 fbd3 	bl	d8714 <memcmp>
        if (0 == cmp)
   d6f6e:	b930      	cbnz	r0, d6f7e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d6f70:	9000      	str	r0, [sp, #0]
   d6f72:	4643      	mov	r3, r8
   d6f74:	462a      	mov	r2, r5
   d6f76:	4621      	mov	r1, r4
   d6f78:	2058      	movs	r0, #88	; 0x58
   d6f7a:	f7fe f829 	bl	d4fd0 <system_invoke_event_handler>
   d6f7e:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6f80:	42b4      	cmp	r4, r6
   d6f82:	d1e7      	bne.n	d6f54 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d6f84:	b002      	add	sp, #8
   d6f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6f8c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d6f8c:	b530      	push	{r4, r5, lr}
   d6f8e:	b08d      	sub	sp, #52	; 0x34
   d6f90:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d6f92:	2211      	movs	r2, #17
   d6f94:	2100      	movs	r1, #0
   d6f96:	a801      	add	r0, sp, #4
   d6f98:	f001 fbf1 	bl	d877e <memset>
    addr.v = 6;
   d6f9c:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6f9e:	aa01      	add	r2, sp, #4
   d6fa0:	4909      	ldr	r1, [pc, #36]	; (d6fc8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d6fa2:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6fa6:	200a      	movs	r0, #10
   d6fa8:	f7fd feae 	bl	d4d08 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6fac:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d6fae:	a901      	add	r1, sp, #4
   d6fb0:	a806      	add	r0, sp, #24
   d6fb2:	f7ff fcd1 	bl	d6958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6fb8:	3404      	adds	r4, #4
   d6fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6fbc:	682b      	ldr	r3, [r5, #0]
   d6fbe:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d6fc0:	2000      	movs	r0, #0
   d6fc2:	b00d      	add	sp, #52	; 0x34
   d6fc4:	bd30      	pop	{r4, r5, pc}
   d6fc6:	bf00      	nop
   d6fc8:	000d90e4 	.word	0x000d90e4

000d6fcc <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6fd0:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d6fd2:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6fd6:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6fd8:	4630      	mov	r0, r6
   d6fda:	f7ff f8d5 	bl	d6188 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6fde:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6fe0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6fe4:	f7fd fe70 	bl	d4cc8 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d6fe8:	2c00      	cmp	r4, #0
   d6fea:	d063      	beq.n	d70b4 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d6fec:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d6ff0:	b163      	cbz	r3, d700c <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d6ff2:	6823      	ldr	r3, [r4, #0]
   d6ff4:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d6ff8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d6ffa:	4620      	mov	r0, r4
   d6ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7000:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d7004:	47b8      	blx	r7
        if (len > 0) {
   d7006:	1e04      	subs	r4, r0, #0
   d7008:	dc13      	bgt.n	d7032 <_ZN5spark11MeshPublish4pollEv+0x66>
   d700a:	e056      	b.n	d70ba <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d700c:	492d      	ldr	r1, [pc, #180]	; (d70c4 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d700e:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d7012:	f000 fdfb 	bl	d7c0c <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7016:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d701a:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d701e:	b113      	cbz	r3, d7026 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7020:	4618      	mov	r0, r3
   d7022:	f7fd f840 	bl	d40a6 <_ZdaPv>
            if (!buffer_) {
   d7026:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d702a:	2b00      	cmp	r3, #0
   d702c:	d1e1      	bne.n	d6ff2 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d702e:	4826      	ldr	r0, [pc, #152]	; (d70c8 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d7030:	e044      	b.n	d70bc <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d7032:	2320      	movs	r3, #32
   d7034:	4a25      	ldr	r2, [pc, #148]	; (d70cc <_ZN5spark11MeshPublish4pollEv+0x100>)
   d7036:	9302      	str	r3, [sp, #8]
   d7038:	9200      	str	r2, [sp, #0]
   d703a:	2300      	movs	r3, #0
   d703c:	9401      	str	r4, [sp, #4]
   d703e:	aa02      	add	r2, sp, #8
   d7040:	4923      	ldr	r1, [pc, #140]	; (d70d0 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d7042:	9303      	str	r3, [sp, #12]
   d7044:	2001      	movs	r0, #1
   d7046:	f7fd ff7f 	bl	d4f48 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d704a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d704e:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d7050:	781b      	ldrb	r3, [r3, #0]
   d7052:	bb6b      	cbnz	r3, d70b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d7054:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d7056:	4621      	mov	r1, r4
   d7058:	4638      	mov	r0, r7
   d705a:	f001 fc1e 	bl	d889a <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d705e:	b338      	cbz	r0, d70b0 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d7060:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d7062:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d7064:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d7068:	dd22      	ble.n	d70b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d706a:	5c3b      	ldrb	r3, [r7, r0]
   d706c:	bb03      	cbnz	r3, d70b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d706e:	3c01      	subs	r4, #1
   d7070:	d00e      	beq.n	d7090 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d7072:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d7076:	4621      	mov	r1, r4
   d7078:	4640      	mov	r0, r8
   d707a:	f001 fc0e 	bl	d889a <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d707e:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d7080:	2c00      	cmp	r4, #0
   d7082:	dd15      	ble.n	d70b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d7084:	f818 3000 	ldrb.w	r3, [r8, r0]
   d7088:	b993      	cbnz	r3, d70b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d708a:	2c01      	cmp	r4, #1
   d708c:	d002      	beq.n	d7094 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d708e:	e00f      	b.n	d70b0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d7090:	f8df 8044 	ldr.w	r8, [pc, #68]	; d70d8 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d7094:	4630      	mov	r0, r6
   d7096:	f7ff f877 	bl	d6188 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d709a:	4642      	mov	r2, r8
   d709c:	4639      	mov	r1, r7
   d709e:	1d28      	adds	r0, r5, #4
   d70a0:	f7ff ff4d 	bl	d6f3e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d70a4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d70a8:	f7fd fe0e 	bl	d4cc8 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d70ac:	2000      	movs	r0, #0
   d70ae:	e005      	b.n	d70bc <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d70b0:	4808      	ldr	r0, [pc, #32]	; (d70d4 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d70b2:	e003      	b.n	d70bc <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d70b4:	2064      	movs	r0, #100	; 0x64
   d70b6:	f7fd fd63 	bl	d4b80 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d70ba:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d70bc:	b00a      	add	sp, #40	; 0x28
   d70be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d70c2:	bf00      	nop
   d70c4:	000d91c0 	.word	0x000d91c0
   d70c8:	fffffefc 	.word	0xfffffefc
   d70cc:	000d90f8 	.word	0x000d90f8
   d70d0:	000d90f1 	.word	0x000d90f1
   d70d4:	fffffee8 	.word	0xfffffee8
   d70d8:	000d8f94 	.word	0x000d8f94

000d70dc <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d70dc:	b510      	push	{r4, lr}
   d70de:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d70e0:	f3bf 8f5f 	dmb	sy
   d70e4:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d70e8:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d70ec:	b91b      	cbnz	r3, d70f6 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d70ee:	4620      	mov	r0, r4
   d70f0:	f7ff ff6c 	bl	d6fcc <_ZN5spark11MeshPublish4pollEv>
   d70f4:	e7f4      	b.n	d70e0 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d70f6:	bd10      	pop	{r4, pc}

000d70f8 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d70f8:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70fa:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d70fc:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d70fe:	b144      	cbz	r4, d7112 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7100:	4620      	mov	r0, r4
   d7102:	f7ff fe44 	bl	d6d8e <_ZN6ThreadD1Ev>
   d7106:	4620      	mov	r0, r4
   d7108:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d710a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d710e:	f000 bd7b 	b.w	d7c08 <_ZdlPvj>
   d7112:	bd10      	pop	{r4, pc}

000d7114 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d7114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7118:	4605      	mov	r5, r0
   d711a:	b08a      	sub	sp, #40	; 0x28
   d711c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d7120:	f7ff f832 	bl	d6188 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d7124:	682c      	ldr	r4, [r5, #0]
   d7126:	2c00      	cmp	r4, #0
   d7128:	d17b      	bne.n	d7222 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d712a:	204c      	movs	r0, #76	; 0x4c
   d712c:	f7fc ffb5 	bl	d409a <_Znwj>
   d7130:	4606      	mov	r6, r0
   d7132:	2800      	cmp	r0, #0
   d7134:	d073      	beq.n	d721e <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d7136:	f7fe fb31 	bl	d579c <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d713a:	4622      	mov	r2, r4
   d713c:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d7140:	4630      	mov	r0, r6
   d7142:	f7fe fb5b 	bl	d57fc <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d7146:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d7148:	483a      	ldr	r0, [pc, #232]	; (d7234 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d714a:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d714e:	f7fd fce7 	bl	d4b20 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d7152:	6833      	ldr	r3, [r6, #0]
   d7154:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7158:	6a1b      	ldr	r3, [r3, #32]
   d715a:	f249 0169 	movw	r1, #36969	; 0x9069
   d715e:	4630      	mov	r0, r6
   d7160:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d7162:	a804      	add	r0, sp, #16
   d7164:	f7ff fbea 	bl	d693c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d7168:	a804      	add	r0, sp, #16
   d716a:	f7ff ff0f 	bl	d6f8c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d716e:	2800      	cmp	r0, #0
   d7170:	db4a      	blt.n	d7208 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d7172:	a904      	add	r1, sp, #16
   d7174:	4630      	mov	r0, r6
   d7176:	f7fe fb90 	bl	d589a <_ZN3UDP13joinMulticastERK9IPAddress>
   d717a:	2800      	cmp	r0, #0
   d717c:	db44      	blt.n	d7208 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d717e:	f3bf 8f5f 	dmb	sy
   d7182:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d7186:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d718a:	492b      	ldr	r1, [pc, #172]	; (d7238 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d718c:	2004      	movs	r0, #4
   d718e:	f000 fd3f 	bl	d7c10 <_ZnwjRKSt9nothrow_t>
   d7192:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d7196:	4607      	mov	r7, r0
   d7198:	b348      	cbz	r0, d71ee <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d719a:	4927      	ldr	r1, [pc, #156]	; (d7238 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d719c:	2014      	movs	r0, #20
   d719e:	f000 fd37 	bl	d7c10 <_ZnwjRKSt9nothrow_t>
   d71a2:	b128      	cbz	r0, d71b0 <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d71a4:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d71a6:	6004      	str	r4, [r0, #0]
   d71a8:	6044      	str	r4, [r0, #4]
   d71aa:	6084      	str	r4, [r0, #8]
   d71ac:	60c4      	str	r4, [r0, #12]
   d71ae:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d71b0:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d71b2:	b1b0      	cbz	r0, d71e2 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d71b4:	4b21      	ldr	r3, [pc, #132]	; (d723c <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d71b6:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d71b8:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d71ba:	4921      	ldr	r1, [pc, #132]	; (d7240 <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d71bc:	60dd      	str	r5, [r3, #12]
   d71be:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d71c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d71c4:	e88d 0009 	stmia.w	sp, {r0, r3}
   d71c8:	2203      	movs	r2, #3
   d71ca:	4b1e      	ldr	r3, [pc, #120]	; (d7244 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d71cc:	3004      	adds	r0, #4
   d71ce:	f7fd fd13 	bl	d4bf8 <os_thread_create>
   d71d2:	b930      	cbnz	r0, d71e2 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d71d4:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d71d6:	7c1b      	ldrb	r3, [r3, #16]
   d71d8:	b94b      	cbnz	r3, d71ee <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d71da:	2001      	movs	r0, #1
   d71dc:	f7fd fcd0 	bl	d4b80 <HAL_Delay_Milliseconds>
   d71e0:	e7f8      	b.n	d71d4 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71e2:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71e4:	2300      	movs	r3, #0
   d71e6:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d71e8:	b108      	cbz	r0, d71ee <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d71ea:	f7ff fdb5 	bl	d6d58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d71ee:	4639      	mov	r1, r7
   d71f0:	4640      	mov	r0, r8
   d71f2:	f7ff ff81 	bl	d70f8 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d71f6:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d71fa:	b13b      	cbz	r3, d720c <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71fc:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71fe:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7200:	b130      	cbz	r0, d7210 <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d7202:	f7ff fdbf 	bl	d6d84 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7206:	e00c      	b.n	d7222 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d7208:	4604      	mov	r4, r0
   d720a:	e003      	b.n	d7214 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d720c:	4c0e      	ldr	r4, [pc, #56]	; (d7248 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d720e:	e001      	b.n	d7214 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d7210:	4604      	mov	r4, r0
   d7212:	e007      	b.n	d7224 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7214:	b136      	cbz	r6, d7224 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d7216:	4630      	mov	r0, r6
   d7218:	f7ff fdb4 	bl	d6d84 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d721c:	e002      	b.n	d7224 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d721e:	4c0a      	ldr	r4, [pc, #40]	; (d7248 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d7220:	e000      	b.n	d7224 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d7222:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7224:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d7228:	f7fd fd4e 	bl	d4cc8 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d722c:	4620      	mov	r0, r4
   d722e:	b00a      	add	sp, #40	; 0x28
   d7230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7234:	000d9108 	.word	0x000d9108
   d7238:	000d91c0 	.word	0x000d91c0
   d723c:	000d70dd 	.word	0x000d70dd
   d7240:	000d910c 	.word	0x000d910c
   d7244:	000d6ccd 	.word	0x000d6ccd
   d7248:	fffffefc 	.word	0xfffffefc

000d724c <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7250:	4605      	mov	r5, r0
   d7252:	b08c      	sub	sp, #48	; 0x30
   d7254:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d7256:	460f      	mov	r7, r1
   d7258:	b109      	cbz	r1, d725e <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d725a:	780b      	ldrb	r3, [r1, #0]
   d725c:	b90b      	cbnz	r3, d7262 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d725e:	4c35      	ldr	r4, [pc, #212]	; (d7334 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d7260:	e064      	b.n	d732c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d7262:	4608      	mov	r0, r1
   d7264:	f001 fae9 	bl	d883a <strlen>
   d7268:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d726a:	2e00      	cmp	r6, #0
   d726c:	d05c      	beq.n	d7328 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d726e:	4630      	mov	r0, r6
   d7270:	f001 fae3 	bl	d883a <strlen>
   d7274:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d7276:	f108 0302 	add.w	r3, r8, #2
   d727a:	4423      	add	r3, r4
   d727c:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d7280:	d84f      	bhi.n	d7322 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d7282:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d7286:	f7fe ff7f 	bl	d6188 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d728a:	4628      	mov	r0, r5
   d728c:	f7ff ff42 	bl	d7114 <_ZN5spark11MeshPublish13initializeUdpEv>
   d7290:	2800      	cmp	r0, #0
   d7292:	db40      	blt.n	d7316 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d7294:	4668      	mov	r0, sp
   d7296:	f7ff fb51 	bl	d693c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d729a:	4668      	mov	r0, sp
   d729c:	f7ff fe76 	bl	d6f8c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d72a0:	2800      	cmp	r0, #0
   d72a2:	db38      	blt.n	d7316 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d72a4:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d72a8:	f8da 3000 	ldr.w	r3, [sl]
   d72ac:	f10d 0c04 	add.w	ip, sp, #4
   d72b0:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d72b4:	4b20      	ldr	r3, [pc, #128]	; (d7338 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d72b6:	9306      	str	r3, [sp, #24]
   d72b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d72bc:	f10d 0e1c 	add.w	lr, sp, #28
   d72c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d72c4:	f8dc 3000 	ldr.w	r3, [ip]
   d72c8:	f88e 3000 	strb.w	r3, [lr]
   d72cc:	f249 0269 	movw	r2, #36969	; 0x9069
   d72d0:	a906      	add	r1, sp, #24
   d72d2:	4650      	mov	r0, sl
   d72d4:	47c8      	blx	r9
   d72d6:	2800      	cmp	r0, #0
   d72d8:	db1d      	blt.n	d7316 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d72da:	2300      	movs	r3, #0
   d72dc:	6828      	ldr	r0, [r5, #0]
   d72de:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d72e2:	6803      	ldr	r3, [r0, #0]
   d72e4:	2201      	movs	r2, #1
   d72e6:	68db      	ldr	r3, [r3, #12]
   d72e8:	a906      	add	r1, sp, #24
   d72ea:	4798      	blx	r3
   d72ec:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d72ee:	6803      	ldr	r3, [r0, #0]
   d72f0:	f108 0201 	add.w	r2, r8, #1
   d72f4:	68db      	ldr	r3, [r3, #12]
   d72f6:	4639      	mov	r1, r7
   d72f8:	4798      	blx	r3
    if (dataLen > 0) {
   d72fa:	b12c      	cbz	r4, d7308 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d72fc:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d72fe:	6803      	ldr	r3, [r0, #0]
   d7300:	4622      	mov	r2, r4
   d7302:	68db      	ldr	r3, [r3, #12]
   d7304:	4631      	mov	r1, r6
   d7306:	4798      	blx	r3
   d7308:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d730a:	6803      	ldr	r3, [r0, #0]
   d730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d730e:	4798      	blx	r3
   d7310:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d7314:	e000      	b.n	d7318 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d7316:	4604      	mov	r4, r0
   d7318:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d731c:	f7fd fcd4 	bl	d4cc8 <os_mutex_recursive_unlock>
   d7320:	e004      	b.n	d732c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d7322:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d7326:	e001      	b.n	d732c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d7328:	4634      	mov	r4, r6
   d732a:	e7a4      	b.n	d7276 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d732c:	4620      	mov	r0, r4
   d732e:	b00c      	add	sp, #48	; 0x30
   d7330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7334:	fffffef2 	.word	0xfffffef2
   d7338:	000d901c 	.word	0x000d901c

000d733c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d733e:	4605      	mov	r5, r0
   d7340:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d7344:	460e      	mov	r6, r1
   d7346:	4617      	mov	r7, r2
   d7348:	f7fe ff1e 	bl	d6188 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d734c:	4628      	mov	r0, r5
   d734e:	f7ff fee1 	bl	d7114 <_ZN5spark11MeshPublish13initializeUdpEv>
   d7352:	2800      	cmp	r0, #0
   d7354:	db07      	blt.n	d7366 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   d7356:	463a      	mov	r2, r7
   d7358:	4631      	mov	r1, r6
   d735a:	1d28      	adds	r0, r5, #4
   d735c:	f7ff fde6 	bl	d6f2c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d7360:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d7364:	e000      	b.n	d7368 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   d7366:	4604      	mov	r4, r0
   d7368:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d736c:	f7fd fcac 	bl	d4cc8 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d7370:	4620      	mov	r0, r4
   d7372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7374 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7374:	b538      	push	{r3, r4, r5, lr}
   d7376:	4c0e      	ldr	r4, [pc, #56]	; (d73b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7378:	4b0e      	ldr	r3, [pc, #56]	; (d73b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d737a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d737c:	2500      	movs	r5, #0
   d737e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7380:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7384:	6063      	str	r3, [r4, #4]
   d7386:	60a5      	str	r5, [r4, #8]
   d7388:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d738c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7390:	f7fd fc8a 	bl	d4ca8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7394:	4b08      	ldr	r3, [pc, #32]	; (d73b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7396:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d739a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d739e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d73a0:	4620      	mov	r0, r4
   d73a2:	4a06      	ldr	r2, [pc, #24]	; (d73bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d73a4:	4906      	ldr	r1, [pc, #24]	; (d73c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d73a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d73aa:	f000 bc1f 	b.w	d7bec <__aeabi_atexit>
   d73ae:	bf00      	nop
   d73b0:	2003e534 	.word	0x2003e534
   d73b4:	000d9194 	.word	0x000d9194
   d73b8:	000d90b8 	.word	0x000d90b8
   d73bc:	2003cf80 	.word	0x2003cf80
   d73c0:	000d6dcd 	.word	0x000d6dcd

000d73c4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73c6:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73c8:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73ca:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73ce:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d73d0:	2201      	movs	r2, #1
   d73d2:	f04f 33ff 	mov.w	r3, #4294967295
   d73d6:	4621      	mov	r1, r4
   d73d8:	47a8      	blx	r5
}
   d73da:	b003      	add	sp, #12
   d73dc:	bd30      	pop	{r4, r5, pc}

000d73de <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d73de:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d73e0:	6803      	ldr	r3, [r0, #0]
   d73e2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d73e4:	f04f 33ff 	mov.w	r3, #4294967295
   d73e8:	46a4      	mov	ip, r4
}
   d73ea:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d73ee:	4760      	bx	ip

000d73f0 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d73f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73f2:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d73f4:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d73f6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d73fa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d73fc:	4621      	mov	r1, r4
   d73fe:	4613      	mov	r3, r2
   d7400:	2201      	movs	r2, #1
   d7402:	47a8      	blx	r5
}
   d7404:	b003      	add	sp, #12
   d7406:	bd30      	pop	{r4, r5, pc}

000d7408 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7408:	4770      	bx	lr

000d740a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d740a:	b538      	push	{r3, r4, r5, lr}
   d740c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d740e:	681a      	ldr	r2, [r3, #0]
   d7410:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7412:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7414:	da05      	bge.n	d7422 <_ZN9TCPClient9connectedEv+0x18>
   d7416:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d741a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d741e:	429a      	cmp	r2, r3
   d7420:	d001      	beq.n	d7426 <_ZN9TCPClient9connectedEv+0x1c>
   d7422:	2501      	movs	r5, #1
   d7424:	e00b      	b.n	d743e <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7426:	6803      	ldr	r3, [r0, #0]
   d7428:	691b      	ldr	r3, [r3, #16]
   d742a:	4798      	blx	r3
   d742c:	2800      	cmp	r0, #0
   d742e:	bf14      	ite	ne
   d7430:	2501      	movne	r5, #1
   d7432:	2500      	moveq	r5, #0
        if (!rv) {
   d7434:	d103      	bne.n	d743e <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7436:	6823      	ldr	r3, [r4, #0]
   d7438:	4620      	mov	r0, r4
   d743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d743c:	4798      	blx	r3
        }
    }
    return rv;
}
   d743e:	4628      	mov	r0, r5
   d7440:	bd38      	pop	{r3, r4, r5, pc}

000d7442 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7442:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7444:	6818      	ldr	r0, [r3, #0]
}
   d7446:	43c0      	mvns	r0, r0
   d7448:	0fc0      	lsrs	r0, r0, #31
   d744a:	4770      	bx	lr

000d744c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d744c:	4770      	bx	lr

000d744e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d744e:	2000      	movs	r0, #0
   d7450:	4770      	bx	lr

000d7452 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7452:	b510      	push	{r4, lr}
   d7454:	2114      	movs	r1, #20
   d7456:	4604      	mov	r4, r0
   d7458:	f000 fbd6 	bl	d7c08 <_ZdlPvj>
   d745c:	4620      	mov	r0, r4
   d745e:	bd10      	pop	{r4, pc}

000d7460 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7460:	f7fc be1f 	b.w	d40a2 <_ZdlPv>

000d7464 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7466:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7468:	2200      	movs	r2, #0
   d746a:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d746c:	9202      	str	r2, [sp, #8]
   d746e:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7470:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7472:	4604      	mov	r4, r0
   d7474:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7476:	d008      	beq.n	d748a <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d747c:	fbb3 f1f2 	udiv	r1, r3, r2
   d7480:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7482:	fb02 3111 	mls	r1, r2, r1, r3
   d7486:	434a      	muls	r2, r1
   d7488:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d748a:	6960      	ldr	r0, [r4, #20]
   d748c:	2308      	movs	r3, #8
   d748e:	9300      	str	r3, [sp, #0]
   d7490:	f241 0205 	movw	r2, #4101	; 0x1005
   d7494:	446b      	add	r3, sp
   d7496:	f640 71ff 	movw	r1, #4095	; 0xfff
   d749a:	6800      	ldr	r0, [r0, #0]
   d749c:	f7fd fcd4 	bl	d4e48 <sock_setsockopt>
    if (ret < 0) {
   d74a0:	2800      	cmp	r0, #0
   d74a2:	db08      	blt.n	d74b6 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d74a4:	6960      	ldr	r0, [r4, #20]
   d74a6:	2300      	movs	r3, #0
   d74a8:	4632      	mov	r2, r6
   d74aa:	4629      	mov	r1, r5
   d74ac:	6800      	ldr	r0, [r0, #0]
   d74ae:	f7fd fcf3 	bl	d4e98 <sock_send>
    if (ret < 0) {
   d74b2:	2800      	cmp	r0, #0
   d74b4:	da04      	bge.n	d74c0 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d74b6:	f7fd fe5d 	bl	d5174 <__errno>
   d74ba:	6803      	ldr	r3, [r0, #0]
   d74bc:	6063      	str	r3, [r4, #4]
   d74be:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d74c0:	b004      	add	sp, #16
   d74c2:	bd70      	pop	{r4, r5, r6, pc}

000d74c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74c4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74c6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74c8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74ca:	689b      	ldr	r3, [r3, #8]
   d74cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d74ce:	68a3      	ldr	r3, [r4, #8]
   d74d0:	3b01      	subs	r3, #1
   d74d2:	60a3      	str	r3, [r4, #8]
   d74d4:	b92b      	cbnz	r3, d74e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d74d6:	6823      	ldr	r3, [r4, #0]
   d74d8:	4620      	mov	r0, r4
   d74da:	68db      	ldr	r3, [r3, #12]
        }
    }
   d74dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d74e0:	4718      	bx	r3
   d74e2:	bd10      	pop	{r4, pc}

000d74e4 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d74e4:	b570      	push	{r4, r5, r6, lr}
   d74e6:	4604      	mov	r4, r0
   d74e8:	694d      	ldr	r5, [r1, #20]
   d74ea:	4b05      	ldr	r3, [pc, #20]	; (d7500 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d74ec:	f844 3b04 	str.w	r3, [r4], #4
   d74f0:	358c      	adds	r5, #140	; 0x8c
   d74f2:	4606      	mov	r6, r0
   d74f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74f8:	682b      	ldr	r3, [r5, #0]
   d74fa:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d74fc:	4630      	mov	r0, r6
   d74fe:	bd70      	pop	{r4, r5, r6, pc}
   d7500:	000d901c 	.word	0x000d901c

000d7504 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7504:	b510      	push	{r4, lr}
   d7506:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7508:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d750c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7510:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7512:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7514:	d005      	beq.n	d7522 <_ZN9TCPClient4peekEv+0x1e>
   d7516:	6962      	ldr	r2, [r4, #20]
   d7518:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d751c:	4413      	add	r3, r2
   d751e:	7918      	ldrb	r0, [r3, #4]
   d7520:	bd10      	pop	{r4, pc}
   d7522:	6803      	ldr	r3, [r0, #0]
   d7524:	691b      	ldr	r3, [r3, #16]
   d7526:	4798      	blx	r3
   d7528:	2800      	cmp	r0, #0
   d752a:	d1f4      	bne.n	d7516 <_ZN9TCPClient4peekEv+0x12>
   d752c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7530:	bd10      	pop	{r4, pc}

000d7532 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7532:	b510      	push	{r4, lr}
   d7534:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7536:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d753a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d753e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7540:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7542:	d008      	beq.n	d7556 <_ZN9TCPClient4readEv+0x24>
   d7544:	6962      	ldr	r2, [r4, #20]
   d7546:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d754a:	1c59      	adds	r1, r3, #1
   d754c:	4413      	add	r3, r2
   d754e:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7552:	7918      	ldrb	r0, [r3, #4]
   d7554:	bd10      	pop	{r4, pc}
   d7556:	6803      	ldr	r3, [r0, #0]
   d7558:	691b      	ldr	r3, [r3, #16]
   d755a:	4798      	blx	r3
   d755c:	2800      	cmp	r0, #0
   d755e:	d1f1      	bne.n	d7544 <_ZN9TCPClient4readEv+0x12>
   d7560:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7564:	bd10      	pop	{r4, pc}

000d7566 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7568:	6943      	ldr	r3, [r0, #20]
   d756a:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d756c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7570:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7574:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7576:	4605      	mov	r5, r0
   d7578:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d757a:	d106      	bne.n	d758a <_ZN9TCPClient4readEPhj+0x24>
   d757c:	6803      	ldr	r3, [r0, #0]
   d757e:	691b      	ldr	r3, [r3, #16]
   d7580:	4798      	blx	r3
   d7582:	b910      	cbnz	r0, d758a <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7584:	f04f 34ff 	mov.w	r4, #4294967295
   d7588:	e014      	b.n	d75b4 <_ZN9TCPClient4readEPhj+0x4e>
   d758a:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d758c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7590:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7594:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7596:	42bc      	cmp	r4, r7
   d7598:	bf28      	it	cs
   d759a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d759c:	4419      	add	r1, r3
   d759e:	4622      	mov	r2, r4
   d75a0:	3104      	adds	r1, #4
   d75a2:	4630      	mov	r0, r6
   d75a4:	f001 f8c5 	bl	d8732 <memcpy>
   d75a8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d75aa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d75ae:	4423      	add	r3, r4
   d75b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d75b4:	4620      	mov	r0, r4
   d75b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75b8 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d75bc:	4698      	mov	r8, r3
    stop();
   d75be:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75c0:	b093      	sub	sp, #76	; 0x4c
    stop();
   d75c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75c4:	460d      	mov	r5, r1
   d75c6:	4606      	mov	r6, r0
   d75c8:	4617      	mov	r7, r2
    stop();
   d75ca:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d75cc:	ab12      	add	r3, sp, #72	; 0x48
   d75ce:	2400      	movs	r4, #0
   d75d0:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d75d4:	4622      	mov	r2, r4
   d75d6:	4621      	mov	r1, r4
   d75d8:	4628      	mov	r0, r5
   d75da:	f7fd fa59 	bl	d4a90 <netdb_getaddrinfo>
   d75de:	4681      	mov	r9, r0
   d75e0:	2800      	cmp	r0, #0
   d75e2:	d13d      	bne.n	d7660 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d75e4:	9b00      	ldr	r3, [sp, #0]
   d75e6:	2b00      	cmp	r3, #0
   d75e8:	d056      	beq.n	d7698 <_ZN9TCPClient7connectEPKctm+0xe0>
   d75ea:	695b      	ldr	r3, [r3, #20]
   d75ec:	2b00      	cmp	r3, #0
   d75ee:	d053      	beq.n	d7698 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d75f0:	a806      	add	r0, sp, #24
   d75f2:	f7ff f9a3 	bl	d693c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d75f6:	9b00      	ldr	r3, [sp, #0]
   d75f8:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d75fa:	7863      	ldrb	r3, [r4, #1]
   d75fc:	2b02      	cmp	r3, #2
   d75fe:	d101      	bne.n	d7604 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7600:	1d21      	adds	r1, r4, #4
   d7602:	e013      	b.n	d762c <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7604:	2b0a      	cmp	r3, #10
   d7606:	d114      	bne.n	d7632 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7608:	2211      	movs	r2, #17
   d760a:	4649      	mov	r1, r9
   d760c:	a801      	add	r0, sp, #4
   d760e:	f001 f8b6 	bl	d877e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7612:	68a3      	ldr	r3, [r4, #8]
   d7614:	bb33      	cbnz	r3, d7664 <_ZN9TCPClient7connectEPKctm+0xac>
   d7616:	68e3      	ldr	r3, [r4, #12]
   d7618:	bb23      	cbnz	r3, d7664 <_ZN9TCPClient7connectEPKctm+0xac>
   d761a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d761e:	6925      	ldr	r5, [r4, #16]
   d7620:	f7fd fb7a 	bl	d4d18 <inet_htonl>
   d7624:	4285      	cmp	r5, r0
   d7626:	d11d      	bne.n	d7664 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7628:	f104 0114 	add.w	r1, r4, #20
   d762c:	a806      	add	r0, sp, #24
   d762e:	f7ff f9c8 	bl	d69c2 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7632:	a806      	add	r0, sp, #24
   d7634:	f7ff f9a2 	bl	d697c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7638:	2800      	cmp	r0, #0
   d763a:	d02d      	beq.n	d7698 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d763c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d763e:	ad07      	add	r5, sp, #28
   d7640:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7644:	4b18      	ldr	r3, [pc, #96]	; (d76a8 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7646:	930c      	str	r3, [sp, #48]	; 0x30
   d7648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d764a:	ac0d      	add	r4, sp, #52	; 0x34
   d764c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d764e:	682b      	ldr	r3, [r5, #0]
   d7650:	7023      	strb	r3, [r4, #0]
   d7652:	463a      	mov	r2, r7
   d7654:	4643      	mov	r3, r8
   d7656:	a90c      	add	r1, sp, #48	; 0x30
   d7658:	4630      	mov	r0, r6
   d765a:	47c8      	blx	r9
   d765c:	4681      	mov	r9, r0
   d765e:	e01b      	b.n	d7698 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7660:	46a1      	mov	r9, r4
   d7662:	e019      	b.n	d7698 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7664:	f104 0308 	add.w	r3, r4, #8
   d7668:	ad01      	add	r5, sp, #4
   d766a:	3418      	adds	r4, #24
   d766c:	6818      	ldr	r0, [r3, #0]
   d766e:	6859      	ldr	r1, [r3, #4]
   d7670:	462a      	mov	r2, r5
   d7672:	c203      	stmia	r2!, {r0, r1}
   d7674:	3308      	adds	r3, #8
   d7676:	42a3      	cmp	r3, r4
   d7678:	4615      	mov	r5, r2
   d767a:	d1f7      	bne.n	d766c <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d767c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d767e:	a901      	add	r1, sp, #4
   d7680:	a80c      	add	r0, sp, #48	; 0x30
   d7682:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7684:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7688:	f7ff f966 	bl	d6958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d768c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d768e:	ac07      	add	r4, sp, #28
   d7690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7692:	682b      	ldr	r3, [r5, #0]
   d7694:	7023      	strb	r3, [r4, #0]
   d7696:	e7cc      	b.n	d7632 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7698:	9800      	ldr	r0, [sp, #0]
   d769a:	f7fd f9f1 	bl	d4a80 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d769e:	4648      	mov	r0, r9
   d76a0:	b013      	add	sp, #76	; 0x4c
   d76a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d76a6:	bf00      	nop
   d76a8:	000d901c 	.word	0x000d901c

000d76ac <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d76ac:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d76ae:	2300      	movs	r3, #0
   d76b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d76b4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d76b6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d76ba:	4770      	bx	lr

000d76bc <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76c0:	461e      	mov	r6, r3
    stop();
   d76c2:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76c4:	460c      	mov	r4, r1
   d76c6:	b08a      	sub	sp, #40	; 0x28
    stop();
   d76c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76ca:	4605      	mov	r5, r0
   d76cc:	4617      	mov	r7, r2
    stop();
   d76ce:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d76d0:	7d23      	ldrb	r3, [r4, #20]
   d76d2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d76d6:	2b04      	cmp	r3, #4
   d76d8:	bf0c      	ite	eq
   d76da:	2002      	moveq	r0, #2
   d76dc:	200a      	movne	r0, #10
   d76de:	2206      	movs	r2, #6
   d76e0:	2101      	movs	r1, #1
   d76e2:	f7fd fbe9 	bl	d4eb8 <sock_socket>
   d76e6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d76ea:	696b      	ldr	r3, [r5, #20]
   d76ec:	681b      	ldr	r3, [r3, #0]
   d76ee:	2b00      	cmp	r3, #0
   d76f0:	db18      	blt.n	d7724 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d76f2:	4628      	mov	r0, r5
   d76f4:	f7ff ffda 	bl	d76ac <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d76f8:	b1d6      	cbz	r6, d7730 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d76fa:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d76fc:	a903      	add	r1, sp, #12
   d76fe:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7700:	9303      	str	r3, [sp, #12]
   d7702:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7706:	f7fd fa13 	bl	d4b30 <if_index_to_name>
   d770a:	b958      	cbnz	r0, d7724 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d770c:	6968      	ldr	r0, [r5, #20]
   d770e:	2306      	movs	r3, #6
   d7710:	9300      	str	r3, [sp, #0]
   d7712:	f241 020b 	movw	r2, #4107	; 0x100b
   d7716:	ab03      	add	r3, sp, #12
   d7718:	f640 71ff 	movw	r1, #4095	; 0xfff
   d771c:	6800      	ldr	r0, [r0, #0]
   d771e:	f7fd fb93 	bl	d4e48 <sock_setsockopt>
   d7722:	b128      	cbz	r0, d7730 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7724:	682b      	ldr	r3, [r5, #0]
   d7726:	4628      	mov	r0, r5
   d7728:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d772a:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d772c:	4798      	blx	r3
   d772e:	e03b      	b.n	d77a8 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7730:	261c      	movs	r6, #28
   d7732:	4632      	mov	r2, r6
   d7734:	2100      	movs	r1, #0
   d7736:	a803      	add	r0, sp, #12
   d7738:	f001 f821 	bl	d877e <memset>
    if (ip.version() == 4) {
   d773c:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d773e:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7742:	2b04      	cmp	r3, #4
   d7744:	d10c      	bne.n	d7760 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7746:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7748:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d774a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d774e:	f7fd faf3 	bl	d4d38 <inet_htons>
   d7752:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7756:	6860      	ldr	r0, [r4, #4]
   d7758:	f7fd fade 	bl	d4d18 <inet_htonl>
   d775c:	9004      	str	r0, [sp, #16]
   d775e:	e013      	b.n	d7788 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7760:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7762:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7764:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7768:	f7fd fae6 	bl	d4d38 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d776c:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d776e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7772:	1d23      	adds	r3, r4, #4
   d7774:	f104 0714 	add.w	r7, r4, #20
   d7778:	6818      	ldr	r0, [r3, #0]
   d777a:	6859      	ldr	r1, [r3, #4]
   d777c:	4632      	mov	r2, r6
   d777e:	c203      	stmia	r2!, {r0, r1}
   d7780:	3308      	adds	r3, #8
   d7782:	42bb      	cmp	r3, r7
   d7784:	4616      	mov	r6, r2
   d7786:	d1f7      	bne.n	d7778 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7788:	696b      	ldr	r3, [r5, #20]
   d778a:	221c      	movs	r2, #28
   d778c:	a903      	add	r1, sp, #12
   d778e:	6818      	ldr	r0, [r3, #0]
   d7790:	f7fd fb6a 	bl	d4e68 <sock_connect>
   d7794:	2800      	cmp	r0, #0
   d7796:	d1c5      	bne.n	d7724 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7798:	3404      	adds	r4, #4
   d779a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d779c:	696d      	ldr	r5, [r5, #20]
   d779e:	358c      	adds	r5, #140	; 0x8c
   d77a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d77a2:	6823      	ldr	r3, [r4, #0]
   d77a4:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d77a6:	2401      	movs	r4, #1
}
   d77a8:	4620      	mov	r0, r4
   d77aa:	b00a      	add	sp, #40	; 0x28
   d77ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d77b0 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d77b0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d77b2:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d77b4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d77b6:	6818      	ldr	r0, [r3, #0]
   d77b8:	2800      	cmp	r0, #0
   d77ba:	db01      	blt.n	d77c0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d77bc:	f7fd fb4c 	bl	d4e58 <sock_close>
   d77c0:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d77c2:	f04f 32ff 	mov.w	r2, #4294967295
   d77c6:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d77c8:	6960      	ldr	r0, [r4, #20]
   d77ca:	2211      	movs	r2, #17
   d77cc:	2100      	movs	r1, #0
   d77ce:	308c      	adds	r0, #140	; 0x8c
   d77d0:	f000 ffd5 	bl	d877e <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d77d4:	4620      	mov	r0, r4
}
   d77d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d77da:	f7ff bf67 	b.w	d76ac <_ZN9TCPClient12flush_bufferEv>
	...

000d77e0 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d77e0:	b530      	push	{r4, r5, lr}
   d77e2:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d77e4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d77e8:	b08b      	sub	sp, #44	; 0x2c
   d77ea:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d77ec:	b11b      	cbz	r3, d77f6 <_ZN9TCPClient9availableEv+0x16>
   d77ee:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d77f2:	429a      	cmp	r2, r3
   d77f4:	d040      	beq.n	d7878 <_ZN9TCPClient9availableEv+0x98>
   d77f6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d77f8:	6818      	ldr	r0, [r3, #0]
   d77fa:	2800      	cmp	r0, #0
   d77fc:	db3f      	blt.n	d787e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d77fe:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7802:	2d7f      	cmp	r5, #127	; 0x7f
   d7804:	d83b      	bhi.n	d787e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7806:	1d19      	adds	r1, r3, #4
   d7808:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d780c:	2308      	movs	r3, #8
   d780e:	4429      	add	r1, r5
   d7810:	f7fd fb32 	bl	d4e78 <sock_recv>
            if (ret > 0) {
   d7814:	2800      	cmp	r0, #0
   d7816:	dd0c      	ble.n	d7832 <_ZN9TCPClient9availableEv+0x52>
   d7818:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d781a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d781e:	b90a      	cbnz	r2, d7824 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7820:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7824:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7826:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d782a:	4418      	add	r0, r3
   d782c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7830:	e025      	b.n	d787e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7832:	f7fd fc9f 	bl	d5174 <__errno>
   d7836:	6803      	ldr	r3, [r0, #0]
   d7838:	2b0b      	cmp	r3, #11
   d783a:	d020      	beq.n	d787e <_ZN9TCPClient9availableEv+0x9e>
   d783c:	f7fd fc9a 	bl	d5174 <__errno>
   d7840:	6803      	ldr	r3, [r0, #0]
   d7842:	2b0b      	cmp	r3, #11
   d7844:	d01b      	beq.n	d787e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7846:	2320      	movs	r3, #32
   d7848:	2500      	movs	r5, #0
   d784a:	9302      	str	r3, [sp, #8]
   d784c:	9503      	str	r5, [sp, #12]
   d784e:	f7fd fc91 	bl	d5174 <__errno>
   d7852:	6803      	ldr	r3, [r0, #0]
   d7854:	9301      	str	r3, [sp, #4]
   d7856:	4b0e      	ldr	r3, [pc, #56]	; (d7890 <_ZN9TCPClient9availableEv+0xb0>)
   d7858:	9300      	str	r3, [sp, #0]
   d785a:	aa02      	add	r2, sp, #8
   d785c:	462b      	mov	r3, r5
   d785e:	490d      	ldr	r1, [pc, #52]	; (d7894 <_ZN9TCPClient9availableEv+0xb4>)
   d7860:	2032      	movs	r0, #50	; 0x32
   d7862:	f7fd fb71 	bl	d4f48 <log_message>
                    sock_close(d_->sock);
   d7866:	6963      	ldr	r3, [r4, #20]
   d7868:	6818      	ldr	r0, [r3, #0]
   d786a:	f7fd faf5 	bl	d4e58 <sock_close>
   d786e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7870:	f04f 32ff 	mov.w	r2, #4294967295
   d7874:	601a      	str	r2, [r3, #0]
   d7876:	e002      	b.n	d787e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7878:	f7ff ff18 	bl	d76ac <_ZN9TCPClient12flush_bufferEv>
   d787c:	e7bb      	b.n	d77f6 <_ZN9TCPClient9availableEv+0x16>
   d787e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7880:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7884:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7888:	1a18      	subs	r0, r3, r0
}
   d788a:	b00b      	add	sp, #44	; 0x2c
   d788c:	bd30      	pop	{r4, r5, pc}
   d788e:	bf00      	nop
   d7890:	000d917c 	.word	0x000d917c
   d7894:	000d90f1 	.word	0x000d90f1

000d7898 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7898:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d789a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d789c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d789e:	6001      	str	r1, [r0, #0]
   d78a0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d78a4:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d78a8:	3088      	adds	r0, #136	; 0x88
   d78aa:	f7ff f847 	bl	d693c <_ZN9IPAddressC1Ev>
}
   d78ae:	4620      	mov	r0, r4
   d78b0:	bd10      	pop	{r4, pc}
	...

000d78b4 <_ZN9TCPClientC1Ei>:
   d78b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d78b8:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d78ba:	2300      	movs	r3, #0
   d78bc:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d78be:	4a14      	ldr	r2, [pc, #80]	; (d7910 <_ZN9TCPClientC1Ei+0x5c>)
   d78c0:	6043      	str	r3, [r0, #4]
   d78c2:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d78c4:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d78c6:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d78c8:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78ca:	20a0      	movs	r0, #160	; 0xa0
   d78cc:	460e      	mov	r6, r1
   d78ce:	f7fc fbe4 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78d2:	4605      	mov	r5, r0
   d78d4:	b110      	cbz	r0, d78dc <_ZN9TCPClientC1Ei+0x28>
   d78d6:	4631      	mov	r1, r6
   d78d8:	f7ff ffde 	bl	d7898 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78dc:	2014      	movs	r0, #20
   d78de:	f7fc fbdc 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d78e2:	4603      	mov	r3, r0
   d78e4:	b128      	cbz	r0, d78f2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d78e6:	2201      	movs	r2, #1
   d78e8:	6042      	str	r2, [r0, #4]
   d78ea:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d78ec:	4a09      	ldr	r2, [pc, #36]	; (d7914 <_ZN9TCPClientC1Ei+0x60>)
   d78ee:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d78f0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d78f2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d78f4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d78f6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d78f8:	b128      	cbz	r0, d7906 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d78fa:	6843      	ldr	r3, [r0, #4]
   d78fc:	3b01      	subs	r3, #1
   d78fe:	6043      	str	r3, [r0, #4]
   d7900:	b90b      	cbnz	r3, d7906 <_ZN9TCPClientC1Ei+0x52>
   d7902:	f7ff fddf 	bl	d74c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7906:	4620      	mov	r0, r4
   d7908:	f7ff fed0 	bl	d76ac <_ZN9TCPClient12flush_bufferEv>
}
   d790c:	4620      	mov	r0, r4
   d790e:	bd70      	pop	{r4, r5, r6, pc}
   d7910:	000d9138 	.word	0x000d9138
   d7914:	000d911c 	.word	0x000d911c

000d7918 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7918:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d791a:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d791e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7920:	f7ff ffc8 	bl	d78b4 <_ZN9TCPClientC1Ei>
}
   d7924:	4620      	mov	r0, r4
   d7926:	bd10      	pop	{r4, pc}

000d7928 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7928:	b510      	push	{r4, lr}
   d792a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d792c:	6800      	ldr	r0, [r0, #0]
   d792e:	2800      	cmp	r0, #0
   d7930:	db01      	blt.n	d7936 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7932:	f7fd fa91 	bl	d4e58 <sock_close>
    }
}
   d7936:	4620      	mov	r0, r4
   d7938:	bd10      	pop	{r4, pc}

000d793a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d793a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d793c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d793e:	4620      	mov	r0, r4
   d7940:	f7ff fff2 	bl	d7928 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7944:	b124      	cbz	r4, d7950 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7946:	4620      	mov	r0, r4
   d7948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d794c:	f7fc bba9 	b.w	d40a2 <_ZdlPv>
   d7950:	bd10      	pop	{r4, pc}

000d7952 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7952:	2300      	movs	r3, #0
   d7954:	461a      	mov	r2, r3
   d7956:	6840      	ldr	r0, [r0, #4]
   d7958:	f7fd bb44 	b.w	d4fe4 <network_connect>

000d795c <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d795c:	2200      	movs	r2, #0
   d795e:	2102      	movs	r1, #2
   d7960:	6840      	ldr	r0, [r0, #4]
   d7962:	f7fd bb4f 	b.w	d5004 <network_disconnect>

000d7966 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7966:	2200      	movs	r2, #0
   d7968:	4611      	mov	r1, r2
   d796a:	6840      	ldr	r0, [r0, #4]
   d796c:	f7fd bb42 	b.w	d4ff4 <network_connecting>

000d7970 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7970:	2200      	movs	r2, #0
   d7972:	4611      	mov	r1, r2
   d7974:	6840      	ldr	r0, [r0, #4]
   d7976:	f7fd bb4d 	b.w	d5014 <network_ready>

000d797a <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d797a:	2300      	movs	r3, #0
   d797c:	461a      	mov	r2, r3
   d797e:	4619      	mov	r1, r3
   d7980:	6840      	ldr	r0, [r0, #4]
   d7982:	f7fd bb4f 	b.w	d5024 <network_on>

000d7986 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7986:	2300      	movs	r3, #0
   d7988:	461a      	mov	r2, r3
   d798a:	4619      	mov	r1, r3
   d798c:	6840      	ldr	r0, [r0, #4]
   d798e:	f7fd bb51 	b.w	d5034 <network_off>

000d7992 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7992:	2200      	movs	r2, #0
   d7994:	f081 0101 	eor.w	r1, r1, #1
   d7998:	6840      	ldr	r0, [r0, #4]
   d799a:	f7fd bb53 	b.w	d5044 <network_listen>

000d799e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d799e:	2200      	movs	r2, #0
   d79a0:	6840      	ldr	r0, [r0, #4]
   d79a2:	f7fd bb5f 	b.w	d5064 <network_set_listen_timeout>

000d79a6 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d79a6:	2200      	movs	r2, #0
   d79a8:	4611      	mov	r1, r2
   d79aa:	6840      	ldr	r0, [r0, #4]
   d79ac:	f7fd bb62 	b.w	d5074 <network_get_listen_timeout>

000d79b0 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d79b0:	2200      	movs	r2, #0
   d79b2:	4611      	mov	r1, r2
   d79b4:	6840      	ldr	r0, [r0, #4]
   d79b6:	f7fd bb4d 	b.w	d5054 <network_listening>

000d79ba <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d79ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d79be:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d79c0:	b095      	sub	sp, #84	; 0x54
   d79c2:	4616      	mov	r6, r2
   d79c4:	460d      	mov	r5, r1
   d79c6:	4607      	mov	r7, r0
    IPAddress addr;
   d79c8:	f7fe ffb8 	bl	d693c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d79cc:	4621      	mov	r1, r4
   d79ce:	2220      	movs	r2, #32
   d79d0:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d79d2:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d79d4:	f000 fed3 	bl	d877e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d79d8:	2340      	movs	r3, #64	; 0x40
   d79da:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d79dc:	4621      	mov	r1, r4
   d79de:	466b      	mov	r3, sp
   d79e0:	aa0c      	add	r2, sp, #48	; 0x30
   d79e2:	4630      	mov	r0, r6
   d79e4:	f7fd f854 	bl	d4a90 <netdb_getaddrinfo>
    if (!r) {
   d79e8:	4604      	mov	r4, r0
   d79ea:	2800      	cmp	r0, #0
   d79ec:	d144      	bne.n	d7a78 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d79ee:	4602      	mov	r2, r0
   d79f0:	2101      	movs	r1, #1
   d79f2:	6868      	ldr	r0, [r5, #4]
   d79f4:	f7fd fb0e 	bl	d5014 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d79f8:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d79fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d79fc:	4622      	mov	r2, r4
   d79fe:	6868      	ldr	r0, [r5, #4]
   d7a00:	f7fd fb08 	bl	d5014 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a04:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a06:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7a08:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a0a:	2e00      	cmp	r6, #0
   d7a0c:	d034      	beq.n	d7a78 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7a0e:	2900      	cmp	r1, #0
   d7a10:	d132      	bne.n	d7a78 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7a12:	6873      	ldr	r3, [r6, #4]
   d7a14:	2b02      	cmp	r3, #2
   d7a16:	d002      	beq.n	d7a1e <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7a18:	2b0a      	cmp	r3, #10
   d7a1a:	d009      	beq.n	d7a30 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7a1c:	e02a      	b.n	d7a74 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7a1e:	f1b8 0f00 	cmp.w	r8, #0
   d7a22:	d027      	beq.n	d7a74 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7a24:	6971      	ldr	r1, [r6, #20]
   d7a26:	4638      	mov	r0, r7
   d7a28:	3104      	adds	r1, #4
   d7a2a:	f7fe ffca 	bl	d69c2 <_ZN9IPAddressaSEPKh>
   d7a2e:	e020      	b.n	d7a72 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7a30:	f1b9 0f00 	cmp.w	r9, #0
   d7a34:	d01e      	beq.n	d7a74 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7a36:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7a38:	2211      	movs	r2, #17
   d7a3a:	a801      	add	r0, sp, #4
   d7a3c:	f000 fe9f 	bl	d877e <memset>
                    a.v = 6;
   d7a40:	2306      	movs	r3, #6
   d7a42:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7a46:	ad01      	add	r5, sp, #4
   d7a48:	f104 0308 	add.w	r3, r4, #8
   d7a4c:	3418      	adds	r4, #24
   d7a4e:	6818      	ldr	r0, [r3, #0]
   d7a50:	6859      	ldr	r1, [r3, #4]
   d7a52:	462a      	mov	r2, r5
   d7a54:	c203      	stmia	r2!, {r0, r1}
   d7a56:	3308      	adds	r3, #8
   d7a58:	42a3      	cmp	r3, r4
   d7a5a:	4615      	mov	r5, r2
   d7a5c:	d1f7      	bne.n	d7a4e <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7a5e:	a901      	add	r1, sp, #4
   d7a60:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7a62:	ad07      	add	r5, sp, #28
   d7a64:	f7fe ff78 	bl	d6958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a6a:	1d3c      	adds	r4, r7, #4
   d7a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a6e:	682b      	ldr	r3, [r5, #0]
   d7a70:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7a72:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a74:	69f6      	ldr	r6, [r6, #28]
   d7a76:	e7c8      	b.n	d7a0a <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7a78:	9800      	ldr	r0, [sp, #0]
   d7a7a:	f7fd f801 	bl	d4a80 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7a7e:	4638      	mov	r0, r7
   d7a80:	b015      	add	sp, #84	; 0x54
   d7a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7a88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7a88:	4b02      	ldr	r3, [pc, #8]	; (d7a94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7a8a:	4a03      	ldr	r2, [pc, #12]	; (d7a98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7a8c:	601a      	str	r2, [r3, #0]
   d7a8e:	2200      	movs	r2, #0
   d7a90:	605a      	str	r2, [r3, #4]
   d7a92:	4770      	bx	lr
   d7a94:	2003e708 	.word	0x2003e708
   d7a98:	000d9194 	.word	0x000d9194

000d7a9c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7a9c:	b510      	push	{r4, lr}
   d7a9e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7aa0:	480f      	ldr	r0, [pc, #60]	; (d7ae0 <pinAvailable+0x44>)
   d7aa2:	f7fd fbc9 	bl	d5238 <_ZN8SPIClass9isEnabledEv>
   d7aa6:	b128      	cbz	r0, d7ab4 <pinAvailable+0x18>
   d7aa8:	f1a4 030b 	sub.w	r3, r4, #11
   d7aac:	2b02      	cmp	r3, #2
   d7aae:	d801      	bhi.n	d7ab4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7ab0:	2000      	movs	r0, #0
   d7ab2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7ab4:	f000 f87a 	bl	d7bac <_Z19__fetch_global_Wirev>
   d7ab8:	f7ff f904 	bl	d6cc4 <_ZN7TwoWire9isEnabledEv>
   d7abc:	b108      	cbz	r0, d7ac2 <pinAvailable+0x26>
   d7abe:	2c01      	cmp	r4, #1
   d7ac0:	d9f6      	bls.n	d7ab0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7ac2:	f7ff f86d 	bl	d6ba0 <_Z22__fetch_global_Serial1v>
   d7ac6:	f7ff f867 	bl	d6b98 <_ZN11USARTSerial9isEnabledEv>
   d7aca:	b118      	cbz	r0, d7ad4 <pinAvailable+0x38>
   d7acc:	f1a4 0309 	sub.w	r3, r4, #9
   d7ad0:	2b01      	cmp	r3, #1
   d7ad2:	d9ed      	bls.n	d7ab0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7ad4:	2c1e      	cmp	r4, #30
   d7ad6:	bf8c      	ite	hi
   d7ad8:	2000      	movhi	r0, #0
   d7ada:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7adc:	bd10      	pop	{r4, pc}
   d7ade:	bf00      	nop
   d7ae0:	2003e710 	.word	0x2003e710

000d7ae4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ae4:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7ae6:	b538      	push	{r3, r4, r5, lr}
   d7ae8:	4604      	mov	r4, r0
   d7aea:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7aec:	d80a      	bhi.n	d7b04 <pinMode+0x20>
   d7aee:	29ff      	cmp	r1, #255	; 0xff
   d7af0:	d008      	beq.n	d7b04 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7af2:	f7ff ffd3 	bl	d7a9c <pinAvailable>
   d7af6:	b128      	cbz	r0, d7b04 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7af8:	4629      	mov	r1, r5
   d7afa:	4620      	mov	r0, r4
}
   d7afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7b00:	f7fc bfde 	b.w	d4ac0 <HAL_Pin_Mode>
   d7b04:	bd38      	pop	{r3, r4, r5, pc}

000d7b06 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7b06:	b538      	push	{r3, r4, r5, lr}
   d7b08:	4604      	mov	r4, r0
   d7b0a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7b0c:	f7fc ffe0 	bl	d4ad0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7b10:	28ff      	cmp	r0, #255	; 0xff
   d7b12:	d010      	beq.n	d7b36 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7b14:	2806      	cmp	r0, #6
   d7b16:	d804      	bhi.n	d7b22 <digitalWrite+0x1c>
   d7b18:	234d      	movs	r3, #77	; 0x4d
   d7b1a:	fa23 f000 	lsr.w	r0, r3, r0
   d7b1e:	07c3      	lsls	r3, r0, #31
   d7b20:	d409      	bmi.n	d7b36 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7b22:	4620      	mov	r0, r4
   d7b24:	f7ff ffba 	bl	d7a9c <pinAvailable>
   d7b28:	b128      	cbz	r0, d7b36 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7b2a:	4629      	mov	r1, r5
   d7b2c:	4620      	mov	r0, r4
}
   d7b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7b32:	f7fc bfd5 	b.w	d4ae0 <HAL_GPIO_Write>
   d7b36:	bd38      	pop	{r3, r4, r5, pc}

000d7b38 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7b38:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7b3a:	b510      	push	{r4, lr}
   d7b3c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7b3e:	bf9c      	itt	ls
   d7b40:	340e      	addls	r4, #14
   d7b42:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7b44:	4620      	mov	r0, r4
   d7b46:	f7ff ffa9 	bl	d7a9c <pinAvailable>
   d7b4a:	b150      	cbz	r0, d7b62 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7b4c:	2103      	movs	r1, #3
   d7b4e:	4620      	mov	r0, r4
   d7b50:	f7fc ffae 	bl	d4ab0 <HAL_Validate_Pin_Function>
   d7b54:	2803      	cmp	r0, #3
   d7b56:	d104      	bne.n	d7b62 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7b58:	4620      	mov	r0, r4
}
   d7b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7b5e:	f7fc bfc7 	b.w	d4af0 <HAL_ADC_Read>
}
   d7b62:	2000      	movs	r0, #0
   d7b64:	bd10      	pop	{r4, pc}
	...

000d7b68 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7b68:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7b6a:	4c0c      	ldr	r4, [pc, #48]	; (d7b9c <_GLOBAL__sub_I_SPI+0x34>)
   d7b6c:	4e0c      	ldr	r6, [pc, #48]	; (d7ba0 <_GLOBAL__sub_I_SPI+0x38>)
   d7b6e:	4d0d      	ldr	r5, [pc, #52]	; (d7ba4 <_GLOBAL__sub_I_SPI+0x3c>)
   d7b70:	2100      	movs	r1, #0
   d7b72:	4620      	mov	r0, r4
   d7b74:	f7fd fb4c 	bl	d5210 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7b78:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7b7a:	4c0b      	ldr	r4, [pc, #44]	; (d7ba8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7b7c:	4632      	mov	r2, r6
   d7b7e:	4629      	mov	r1, r5
   d7b80:	f000 f834 	bl	d7bec <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7b84:	2101      	movs	r1, #1
   d7b86:	4620      	mov	r0, r4
   d7b88:	f7fd fb42 	bl	d5210 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7b8c:	4632      	mov	r2, r6
   d7b8e:	4629      	mov	r1, r5
   d7b90:	4620      	mov	r0, r4
   d7b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7b96:	f000 b829 	b.w	d7bec <__aeabi_atexit>
   d7b9a:	bf00      	nop
   d7b9c:	2003e710 	.word	0x2003e710
   d7ba0:	2003cf80 	.word	0x2003cf80
   d7ba4:	000d5201 	.word	0x000d5201
   d7ba8:	2003e720 	.word	0x2003e720

000d7bac <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7bac:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7bae:	4d0b      	ldr	r5, [pc, #44]	; (d7bdc <_Z19__fetch_global_Wirev+0x30>)
   d7bb0:	6829      	ldr	r1, [r5, #0]
   d7bb2:	f011 0401 	ands.w	r4, r1, #1
   d7bb6:	d10f      	bne.n	d7bd8 <_Z19__fetch_global_Wirev+0x2c>
   d7bb8:	4628      	mov	r0, r5
   d7bba:	f7fc fa76 	bl	d40aa <__cxa_guard_acquire>
   d7bbe:	b158      	cbz	r0, d7bd8 <_Z19__fetch_global_Wirev+0x2c>
   d7bc0:	4621      	mov	r1, r4
   d7bc2:	4807      	ldr	r0, [pc, #28]	; (d7be0 <_Z19__fetch_global_Wirev+0x34>)
   d7bc4:	f7ff f86c 	bl	d6ca0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7bc8:	4628      	mov	r0, r5
   d7bca:	f7fc fa73 	bl	d40b4 <__cxa_guard_release>
   d7bce:	4a05      	ldr	r2, [pc, #20]	; (d7be4 <_Z19__fetch_global_Wirev+0x38>)
   d7bd0:	4905      	ldr	r1, [pc, #20]	; (d7be8 <_Z19__fetch_global_Wirev+0x3c>)
   d7bd2:	4803      	ldr	r0, [pc, #12]	; (d7be0 <_Z19__fetch_global_Wirev+0x34>)
   d7bd4:	f000 f80a 	bl	d7bec <__aeabi_atexit>
	return wire;
}
   d7bd8:	4801      	ldr	r0, [pc, #4]	; (d7be0 <_Z19__fetch_global_Wirev+0x34>)
   d7bda:	bd38      	pop	{r3, r4, r5, pc}
   d7bdc:	2003e734 	.word	0x2003e734
   d7be0:	2003e738 	.word	0x2003e738
   d7be4:	2003cf80 	.word	0x2003cf80
   d7be8:	000d6c49 	.word	0x000d6c49

000d7bec <__aeabi_atexit>:
   d7bec:	460b      	mov	r3, r1
   d7bee:	4601      	mov	r1, r0
   d7bf0:	4618      	mov	r0, r3
   d7bf2:	f000 bd81 	b.w	d86f8 <__cxa_atexit>
	...

000d7bf8 <_ZSt15get_new_handlerv>:
   d7bf8:	4b02      	ldr	r3, [pc, #8]	; (d7c04 <_ZSt15get_new_handlerv+0xc>)
   d7bfa:	6818      	ldr	r0, [r3, #0]
   d7bfc:	f3bf 8f5f 	dmb	sy
   d7c00:	4770      	bx	lr
   d7c02:	bf00      	nop
   d7c04:	2003e74c 	.word	0x2003e74c

000d7c08 <_ZdlPvj>:
   d7c08:	f7fc ba4b 	b.w	d40a2 <_ZdlPv>

000d7c0c <_ZnajRKSt9nothrow_t>:
   d7c0c:	f000 b800 	b.w	d7c10 <_ZnwjRKSt9nothrow_t>

000d7c10 <_ZnwjRKSt9nothrow_t>:
   d7c10:	b510      	push	{r4, lr}
   d7c12:	2800      	cmp	r0, #0
   d7c14:	bf14      	ite	ne
   d7c16:	4604      	movne	r4, r0
   d7c18:	2401      	moveq	r4, #1
   d7c1a:	4620      	mov	r0, r4
   d7c1c:	f7fd fa72 	bl	d5104 <malloc>
   d7c20:	b920      	cbnz	r0, d7c2c <_ZnwjRKSt9nothrow_t+0x1c>
   d7c22:	f7ff ffe9 	bl	d7bf8 <_ZSt15get_new_handlerv>
   d7c26:	b108      	cbz	r0, d7c2c <_ZnwjRKSt9nothrow_t+0x1c>
   d7c28:	4780      	blx	r0
   d7c2a:	e7f6      	b.n	d7c1a <_ZnwjRKSt9nothrow_t+0xa>
   d7c2c:	bd10      	pop	{r4, pc}

000d7c2e <_ZSt25__throw_bad_function_callv>:
   d7c2e:	b508      	push	{r3, lr}
   d7c30:	f7fd fa90 	bl	d5154 <abort>

000d7c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7c34:	4b18      	ldr	r3, [pc, #96]	; (d7c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7c36:	681a      	ldr	r2, [r3, #0]
   d7c38:	07d1      	lsls	r1, r2, #31
   d7c3a:	bf5c      	itt	pl
   d7c3c:	2201      	movpl	r2, #1
   d7c3e:	601a      	strpl	r2, [r3, #0]
   d7c40:	4b16      	ldr	r3, [pc, #88]	; (d7c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7c42:	681a      	ldr	r2, [r3, #0]
   d7c44:	07d2      	lsls	r2, r2, #31
   d7c46:	bf5c      	itt	pl
   d7c48:	2201      	movpl	r2, #1
   d7c4a:	601a      	strpl	r2, [r3, #0]
   d7c4c:	4b14      	ldr	r3, [pc, #80]	; (d7ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7c4e:	681a      	ldr	r2, [r3, #0]
   d7c50:	07d0      	lsls	r0, r2, #31
   d7c52:	bf5c      	itt	pl
   d7c54:	2201      	movpl	r2, #1
   d7c56:	601a      	strpl	r2, [r3, #0]
   d7c58:	4b12      	ldr	r3, [pc, #72]	; (d7ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7c5a:	681a      	ldr	r2, [r3, #0]
   d7c5c:	07d1      	lsls	r1, r2, #31
   d7c5e:	bf5c      	itt	pl
   d7c60:	2201      	movpl	r2, #1
   d7c62:	601a      	strpl	r2, [r3, #0]
   d7c64:	4b10      	ldr	r3, [pc, #64]	; (d7ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7c66:	681a      	ldr	r2, [r3, #0]
   d7c68:	07d2      	lsls	r2, r2, #31
   d7c6a:	bf5c      	itt	pl
   d7c6c:	2201      	movpl	r2, #1
   d7c6e:	601a      	strpl	r2, [r3, #0]
   d7c70:	4b0e      	ldr	r3, [pc, #56]	; (d7cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7c72:	681a      	ldr	r2, [r3, #0]
   d7c74:	07d0      	lsls	r0, r2, #31
   d7c76:	bf5c      	itt	pl
   d7c78:	2201      	movpl	r2, #1
   d7c7a:	601a      	strpl	r2, [r3, #0]
   d7c7c:	4b0c      	ldr	r3, [pc, #48]	; (d7cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7c7e:	681a      	ldr	r2, [r3, #0]
   d7c80:	07d1      	lsls	r1, r2, #31
   d7c82:	bf5c      	itt	pl
   d7c84:	2201      	movpl	r2, #1
   d7c86:	601a      	strpl	r2, [r3, #0]
   d7c88:	4b0a      	ldr	r3, [pc, #40]	; (d7cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7c8a:	681a      	ldr	r2, [r3, #0]
   d7c8c:	07d2      	lsls	r2, r2, #31
   d7c8e:	bf5c      	itt	pl
   d7c90:	2201      	movpl	r2, #1
   d7c92:	601a      	strpl	r2, [r3, #0]
   d7c94:	4770      	bx	lr
   d7c96:	bf00      	nop
   d7c98:	2003e76c 	.word	0x2003e76c
   d7c9c:	2003e768 	.word	0x2003e768
   d7ca0:	2003e764 	.word	0x2003e764
   d7ca4:	2003e760 	.word	0x2003e760
   d7ca8:	2003e75c 	.word	0x2003e75c
   d7cac:	2003e758 	.word	0x2003e758
   d7cb0:	2003e754 	.word	0x2003e754
   d7cb4:	2003e750 	.word	0x2003e750

000d7cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7cb8:	4b24      	ldr	r3, [pc, #144]	; (d7d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7cba:	681a      	ldr	r2, [r3, #0]
   d7cbc:	07d0      	lsls	r0, r2, #31
   d7cbe:	bf5c      	itt	pl
   d7cc0:	2201      	movpl	r2, #1
   d7cc2:	601a      	strpl	r2, [r3, #0]
   d7cc4:	4b22      	ldr	r3, [pc, #136]	; (d7d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7cc6:	681a      	ldr	r2, [r3, #0]
   d7cc8:	07d1      	lsls	r1, r2, #31
   d7cca:	bf5c      	itt	pl
   d7ccc:	2201      	movpl	r2, #1
   d7cce:	601a      	strpl	r2, [r3, #0]
   d7cd0:	4b20      	ldr	r3, [pc, #128]	; (d7d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7cd2:	681a      	ldr	r2, [r3, #0]
   d7cd4:	07d2      	lsls	r2, r2, #31
   d7cd6:	bf5c      	itt	pl
   d7cd8:	2201      	movpl	r2, #1
   d7cda:	601a      	strpl	r2, [r3, #0]
   d7cdc:	4b1e      	ldr	r3, [pc, #120]	; (d7d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7cde:	681a      	ldr	r2, [r3, #0]
   d7ce0:	07d0      	lsls	r0, r2, #31
   d7ce2:	bf5c      	itt	pl
   d7ce4:	2201      	movpl	r2, #1
   d7ce6:	601a      	strpl	r2, [r3, #0]
   d7ce8:	4b1c      	ldr	r3, [pc, #112]	; (d7d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7cea:	681a      	ldr	r2, [r3, #0]
   d7cec:	07d1      	lsls	r1, r2, #31
   d7cee:	bf5c      	itt	pl
   d7cf0:	2201      	movpl	r2, #1
   d7cf2:	601a      	strpl	r2, [r3, #0]
   d7cf4:	4b1a      	ldr	r3, [pc, #104]	; (d7d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7cf6:	681a      	ldr	r2, [r3, #0]
   d7cf8:	07d2      	lsls	r2, r2, #31
   d7cfa:	bf5c      	itt	pl
   d7cfc:	2201      	movpl	r2, #1
   d7cfe:	601a      	strpl	r2, [r3, #0]
   d7d00:	4b18      	ldr	r3, [pc, #96]	; (d7d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7d02:	681a      	ldr	r2, [r3, #0]
   d7d04:	07d0      	lsls	r0, r2, #31
   d7d06:	bf5c      	itt	pl
   d7d08:	2201      	movpl	r2, #1
   d7d0a:	601a      	strpl	r2, [r3, #0]
   d7d0c:	4b16      	ldr	r3, [pc, #88]	; (d7d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7d0e:	681a      	ldr	r2, [r3, #0]
   d7d10:	07d1      	lsls	r1, r2, #31
   d7d12:	bf5c      	itt	pl
   d7d14:	2201      	movpl	r2, #1
   d7d16:	601a      	strpl	r2, [r3, #0]
   d7d18:	4b14      	ldr	r3, [pc, #80]	; (d7d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7d1a:	681a      	ldr	r2, [r3, #0]
   d7d1c:	07d2      	lsls	r2, r2, #31
   d7d1e:	bf5c      	itt	pl
   d7d20:	2201      	movpl	r2, #1
   d7d22:	601a      	strpl	r2, [r3, #0]
   d7d24:	4b12      	ldr	r3, [pc, #72]	; (d7d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7d26:	681a      	ldr	r2, [r3, #0]
   d7d28:	07d0      	lsls	r0, r2, #31
   d7d2a:	bf5c      	itt	pl
   d7d2c:	2201      	movpl	r2, #1
   d7d2e:	601a      	strpl	r2, [r3, #0]
   d7d30:	4b10      	ldr	r3, [pc, #64]	; (d7d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7d32:	681a      	ldr	r2, [r3, #0]
   d7d34:	07d1      	lsls	r1, r2, #31
   d7d36:	bf5c      	itt	pl
   d7d38:	2201      	movpl	r2, #1
   d7d3a:	601a      	strpl	r2, [r3, #0]
   d7d3c:	4b0e      	ldr	r3, [pc, #56]	; (d7d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7d3e:	681a      	ldr	r2, [r3, #0]
   d7d40:	07d2      	lsls	r2, r2, #31
   d7d42:	bf5c      	itt	pl
   d7d44:	2201      	movpl	r2, #1
   d7d46:	601a      	strpl	r2, [r3, #0]
   d7d48:	4770      	bx	lr
   d7d4a:	bf00      	nop
   d7d4c:	2003e79c 	.word	0x2003e79c
   d7d50:	2003e798 	.word	0x2003e798
   d7d54:	2003e794 	.word	0x2003e794
   d7d58:	2003e790 	.word	0x2003e790
   d7d5c:	2003e78c 	.word	0x2003e78c
   d7d60:	2003e788 	.word	0x2003e788
   d7d64:	2003e784 	.word	0x2003e784
   d7d68:	2003e780 	.word	0x2003e780
   d7d6c:	2003e77c 	.word	0x2003e77c
   d7d70:	2003e778 	.word	0x2003e778
   d7d74:	2003e774 	.word	0x2003e774
   d7d78:	2003e770 	.word	0x2003e770

000d7d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7d7c:	4b24      	ldr	r3, [pc, #144]	; (d7e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7d7e:	681a      	ldr	r2, [r3, #0]
   d7d80:	07d0      	lsls	r0, r2, #31
   d7d82:	bf5c      	itt	pl
   d7d84:	2201      	movpl	r2, #1
   d7d86:	601a      	strpl	r2, [r3, #0]
   d7d88:	4b22      	ldr	r3, [pc, #136]	; (d7e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7d8a:	681a      	ldr	r2, [r3, #0]
   d7d8c:	07d1      	lsls	r1, r2, #31
   d7d8e:	bf5c      	itt	pl
   d7d90:	2201      	movpl	r2, #1
   d7d92:	601a      	strpl	r2, [r3, #0]
   d7d94:	4b20      	ldr	r3, [pc, #128]	; (d7e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7d96:	681a      	ldr	r2, [r3, #0]
   d7d98:	07d2      	lsls	r2, r2, #31
   d7d9a:	bf5c      	itt	pl
   d7d9c:	2201      	movpl	r2, #1
   d7d9e:	601a      	strpl	r2, [r3, #0]
   d7da0:	4b1e      	ldr	r3, [pc, #120]	; (d7e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7da2:	681a      	ldr	r2, [r3, #0]
   d7da4:	07d0      	lsls	r0, r2, #31
   d7da6:	bf5c      	itt	pl
   d7da8:	2201      	movpl	r2, #1
   d7daa:	601a      	strpl	r2, [r3, #0]
   d7dac:	4b1c      	ldr	r3, [pc, #112]	; (d7e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7dae:	681a      	ldr	r2, [r3, #0]
   d7db0:	07d1      	lsls	r1, r2, #31
   d7db2:	bf5c      	itt	pl
   d7db4:	2201      	movpl	r2, #1
   d7db6:	601a      	strpl	r2, [r3, #0]
   d7db8:	4b1a      	ldr	r3, [pc, #104]	; (d7e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7dba:	681a      	ldr	r2, [r3, #0]
   d7dbc:	07d2      	lsls	r2, r2, #31
   d7dbe:	bf5c      	itt	pl
   d7dc0:	2201      	movpl	r2, #1
   d7dc2:	601a      	strpl	r2, [r3, #0]
   d7dc4:	4b18      	ldr	r3, [pc, #96]	; (d7e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7dc6:	681a      	ldr	r2, [r3, #0]
   d7dc8:	07d0      	lsls	r0, r2, #31
   d7dca:	bf5c      	itt	pl
   d7dcc:	2201      	movpl	r2, #1
   d7dce:	601a      	strpl	r2, [r3, #0]
   d7dd0:	4b16      	ldr	r3, [pc, #88]	; (d7e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7dd2:	681a      	ldr	r2, [r3, #0]
   d7dd4:	07d1      	lsls	r1, r2, #31
   d7dd6:	bf5c      	itt	pl
   d7dd8:	2201      	movpl	r2, #1
   d7dda:	601a      	strpl	r2, [r3, #0]
   d7ddc:	4b14      	ldr	r3, [pc, #80]	; (d7e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7dde:	681a      	ldr	r2, [r3, #0]
   d7de0:	07d2      	lsls	r2, r2, #31
   d7de2:	bf5c      	itt	pl
   d7de4:	2201      	movpl	r2, #1
   d7de6:	601a      	strpl	r2, [r3, #0]
   d7de8:	4b12      	ldr	r3, [pc, #72]	; (d7e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7dea:	681a      	ldr	r2, [r3, #0]
   d7dec:	07d0      	lsls	r0, r2, #31
   d7dee:	bf5c      	itt	pl
   d7df0:	2201      	movpl	r2, #1
   d7df2:	601a      	strpl	r2, [r3, #0]
   d7df4:	4b10      	ldr	r3, [pc, #64]	; (d7e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7df6:	681a      	ldr	r2, [r3, #0]
   d7df8:	07d1      	lsls	r1, r2, #31
   d7dfa:	bf5c      	itt	pl
   d7dfc:	2201      	movpl	r2, #1
   d7dfe:	601a      	strpl	r2, [r3, #0]
   d7e00:	4b0e      	ldr	r3, [pc, #56]	; (d7e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7e02:	681a      	ldr	r2, [r3, #0]
   d7e04:	07d2      	lsls	r2, r2, #31
   d7e06:	bf5c      	itt	pl
   d7e08:	2201      	movpl	r2, #1
   d7e0a:	601a      	strpl	r2, [r3, #0]
   d7e0c:	4770      	bx	lr
   d7e0e:	bf00      	nop
   d7e10:	2003e7cc 	.word	0x2003e7cc
   d7e14:	2003e7c8 	.word	0x2003e7c8
   d7e18:	2003e7c4 	.word	0x2003e7c4
   d7e1c:	2003e7c0 	.word	0x2003e7c0
   d7e20:	2003e7bc 	.word	0x2003e7bc
   d7e24:	2003e7b8 	.word	0x2003e7b8
   d7e28:	2003e7b4 	.word	0x2003e7b4
   d7e2c:	2003e7b0 	.word	0x2003e7b0
   d7e30:	2003e7ac 	.word	0x2003e7ac
   d7e34:	2003e7a8 	.word	0x2003e7a8
   d7e38:	2003e7a4 	.word	0x2003e7a4
   d7e3c:	2003e7a0 	.word	0x2003e7a0

000d7e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7e40:	4b18      	ldr	r3, [pc, #96]	; (d7ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7e42:	681a      	ldr	r2, [r3, #0]
   d7e44:	07d1      	lsls	r1, r2, #31
   d7e46:	bf5c      	itt	pl
   d7e48:	2201      	movpl	r2, #1
   d7e4a:	601a      	strpl	r2, [r3, #0]
   d7e4c:	4b16      	ldr	r3, [pc, #88]	; (d7ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7e4e:	681a      	ldr	r2, [r3, #0]
   d7e50:	07d2      	lsls	r2, r2, #31
   d7e52:	bf5c      	itt	pl
   d7e54:	2201      	movpl	r2, #1
   d7e56:	601a      	strpl	r2, [r3, #0]
   d7e58:	4b14      	ldr	r3, [pc, #80]	; (d7eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7e5a:	681a      	ldr	r2, [r3, #0]
   d7e5c:	07d0      	lsls	r0, r2, #31
   d7e5e:	bf5c      	itt	pl
   d7e60:	2201      	movpl	r2, #1
   d7e62:	601a      	strpl	r2, [r3, #0]
   d7e64:	4b12      	ldr	r3, [pc, #72]	; (d7eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7e66:	681a      	ldr	r2, [r3, #0]
   d7e68:	07d1      	lsls	r1, r2, #31
   d7e6a:	bf5c      	itt	pl
   d7e6c:	2201      	movpl	r2, #1
   d7e6e:	601a      	strpl	r2, [r3, #0]
   d7e70:	4b10      	ldr	r3, [pc, #64]	; (d7eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7e72:	681a      	ldr	r2, [r3, #0]
   d7e74:	07d2      	lsls	r2, r2, #31
   d7e76:	bf5c      	itt	pl
   d7e78:	2201      	movpl	r2, #1
   d7e7a:	601a      	strpl	r2, [r3, #0]
   d7e7c:	4b0e      	ldr	r3, [pc, #56]	; (d7eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7e7e:	681a      	ldr	r2, [r3, #0]
   d7e80:	07d0      	lsls	r0, r2, #31
   d7e82:	bf5c      	itt	pl
   d7e84:	2201      	movpl	r2, #1
   d7e86:	601a      	strpl	r2, [r3, #0]
   d7e88:	4b0c      	ldr	r3, [pc, #48]	; (d7ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7e8a:	681a      	ldr	r2, [r3, #0]
   d7e8c:	07d1      	lsls	r1, r2, #31
   d7e8e:	bf5c      	itt	pl
   d7e90:	2201      	movpl	r2, #1
   d7e92:	601a      	strpl	r2, [r3, #0]
   d7e94:	4b0a      	ldr	r3, [pc, #40]	; (d7ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7e96:	681a      	ldr	r2, [r3, #0]
   d7e98:	07d2      	lsls	r2, r2, #31
   d7e9a:	bf5c      	itt	pl
   d7e9c:	2201      	movpl	r2, #1
   d7e9e:	601a      	strpl	r2, [r3, #0]
   d7ea0:	4770      	bx	lr
   d7ea2:	bf00      	nop
   d7ea4:	2003e7ec 	.word	0x2003e7ec
   d7ea8:	2003e7e8 	.word	0x2003e7e8
   d7eac:	2003e7e4 	.word	0x2003e7e4
   d7eb0:	2003e7e0 	.word	0x2003e7e0
   d7eb4:	2003e7dc 	.word	0x2003e7dc
   d7eb8:	2003e7d8 	.word	0x2003e7d8
   d7ebc:	2003e7d4 	.word	0x2003e7d4
   d7ec0:	2003e7d0 	.word	0x2003e7d0

000d7ec4 <__aeabi_drsub>:
   d7ec4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7ec8:	e002      	b.n	d7ed0 <__adddf3>
   d7eca:	bf00      	nop

000d7ecc <__aeabi_dsub>:
   d7ecc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7ed0 <__adddf3>:
   d7ed0:	b530      	push	{r4, r5, lr}
   d7ed2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7ed6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7eda:	ea94 0f05 	teq	r4, r5
   d7ede:	bf08      	it	eq
   d7ee0:	ea90 0f02 	teqeq	r0, r2
   d7ee4:	bf1f      	itttt	ne
   d7ee6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7eea:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7eee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7ef2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7ef6:	f000 80e2 	beq.w	d80be <__adddf3+0x1ee>
   d7efa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7efe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7f02:	bfb8      	it	lt
   d7f04:	426d      	neglt	r5, r5
   d7f06:	dd0c      	ble.n	d7f22 <__adddf3+0x52>
   d7f08:	442c      	add	r4, r5
   d7f0a:	ea80 0202 	eor.w	r2, r0, r2
   d7f0e:	ea81 0303 	eor.w	r3, r1, r3
   d7f12:	ea82 0000 	eor.w	r0, r2, r0
   d7f16:	ea83 0101 	eor.w	r1, r3, r1
   d7f1a:	ea80 0202 	eor.w	r2, r0, r2
   d7f1e:	ea81 0303 	eor.w	r3, r1, r3
   d7f22:	2d36      	cmp	r5, #54	; 0x36
   d7f24:	bf88      	it	hi
   d7f26:	bd30      	pophi	{r4, r5, pc}
   d7f28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7f2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7f30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7f34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7f38:	d002      	beq.n	d7f40 <__adddf3+0x70>
   d7f3a:	4240      	negs	r0, r0
   d7f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7f40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7f44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7f48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7f4c:	d002      	beq.n	d7f54 <__adddf3+0x84>
   d7f4e:	4252      	negs	r2, r2
   d7f50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7f54:	ea94 0f05 	teq	r4, r5
   d7f58:	f000 80a7 	beq.w	d80aa <__adddf3+0x1da>
   d7f5c:	f1a4 0401 	sub.w	r4, r4, #1
   d7f60:	f1d5 0e20 	rsbs	lr, r5, #32
   d7f64:	db0d      	blt.n	d7f82 <__adddf3+0xb2>
   d7f66:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7f6a:	fa22 f205 	lsr.w	r2, r2, r5
   d7f6e:	1880      	adds	r0, r0, r2
   d7f70:	f141 0100 	adc.w	r1, r1, #0
   d7f74:	fa03 f20e 	lsl.w	r2, r3, lr
   d7f78:	1880      	adds	r0, r0, r2
   d7f7a:	fa43 f305 	asr.w	r3, r3, r5
   d7f7e:	4159      	adcs	r1, r3
   d7f80:	e00e      	b.n	d7fa0 <__adddf3+0xd0>
   d7f82:	f1a5 0520 	sub.w	r5, r5, #32
   d7f86:	f10e 0e20 	add.w	lr, lr, #32
   d7f8a:	2a01      	cmp	r2, #1
   d7f8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7f90:	bf28      	it	cs
   d7f92:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7f96:	fa43 f305 	asr.w	r3, r3, r5
   d7f9a:	18c0      	adds	r0, r0, r3
   d7f9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7fa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7fa4:	d507      	bpl.n	d7fb6 <__adddf3+0xe6>
   d7fa6:	f04f 0e00 	mov.w	lr, #0
   d7faa:	f1dc 0c00 	rsbs	ip, ip, #0
   d7fae:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7fb2:	eb6e 0101 	sbc.w	r1, lr, r1
   d7fb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7fba:	d31b      	bcc.n	d7ff4 <__adddf3+0x124>
   d7fbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7fc0:	d30c      	bcc.n	d7fdc <__adddf3+0x10c>
   d7fc2:	0849      	lsrs	r1, r1, #1
   d7fc4:	ea5f 0030 	movs.w	r0, r0, rrx
   d7fc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7fcc:	f104 0401 	add.w	r4, r4, #1
   d7fd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7fd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7fd8:	f080 809a 	bcs.w	d8110 <__adddf3+0x240>
   d7fdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7fe0:	bf08      	it	eq
   d7fe2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7fe6:	f150 0000 	adcs.w	r0, r0, #0
   d7fea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7fee:	ea41 0105 	orr.w	r1, r1, r5
   d7ff2:	bd30      	pop	{r4, r5, pc}
   d7ff4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7ff8:	4140      	adcs	r0, r0
   d7ffa:	eb41 0101 	adc.w	r1, r1, r1
   d7ffe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8002:	f1a4 0401 	sub.w	r4, r4, #1
   d8006:	d1e9      	bne.n	d7fdc <__adddf3+0x10c>
   d8008:	f091 0f00 	teq	r1, #0
   d800c:	bf04      	itt	eq
   d800e:	4601      	moveq	r1, r0
   d8010:	2000      	moveq	r0, #0
   d8012:	fab1 f381 	clz	r3, r1
   d8016:	bf08      	it	eq
   d8018:	3320      	addeq	r3, #32
   d801a:	f1a3 030b 	sub.w	r3, r3, #11
   d801e:	f1b3 0220 	subs.w	r2, r3, #32
   d8022:	da0c      	bge.n	d803e <__adddf3+0x16e>
   d8024:	320c      	adds	r2, #12
   d8026:	dd08      	ble.n	d803a <__adddf3+0x16a>
   d8028:	f102 0c14 	add.w	ip, r2, #20
   d802c:	f1c2 020c 	rsb	r2, r2, #12
   d8030:	fa01 f00c 	lsl.w	r0, r1, ip
   d8034:	fa21 f102 	lsr.w	r1, r1, r2
   d8038:	e00c      	b.n	d8054 <__adddf3+0x184>
   d803a:	f102 0214 	add.w	r2, r2, #20
   d803e:	bfd8      	it	le
   d8040:	f1c2 0c20 	rsble	ip, r2, #32
   d8044:	fa01 f102 	lsl.w	r1, r1, r2
   d8048:	fa20 fc0c 	lsr.w	ip, r0, ip
   d804c:	bfdc      	itt	le
   d804e:	ea41 010c 	orrle.w	r1, r1, ip
   d8052:	4090      	lslle	r0, r2
   d8054:	1ae4      	subs	r4, r4, r3
   d8056:	bfa2      	ittt	ge
   d8058:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d805c:	4329      	orrge	r1, r5
   d805e:	bd30      	popge	{r4, r5, pc}
   d8060:	ea6f 0404 	mvn.w	r4, r4
   d8064:	3c1f      	subs	r4, #31
   d8066:	da1c      	bge.n	d80a2 <__adddf3+0x1d2>
   d8068:	340c      	adds	r4, #12
   d806a:	dc0e      	bgt.n	d808a <__adddf3+0x1ba>
   d806c:	f104 0414 	add.w	r4, r4, #20
   d8070:	f1c4 0220 	rsb	r2, r4, #32
   d8074:	fa20 f004 	lsr.w	r0, r0, r4
   d8078:	fa01 f302 	lsl.w	r3, r1, r2
   d807c:	ea40 0003 	orr.w	r0, r0, r3
   d8080:	fa21 f304 	lsr.w	r3, r1, r4
   d8084:	ea45 0103 	orr.w	r1, r5, r3
   d8088:	bd30      	pop	{r4, r5, pc}
   d808a:	f1c4 040c 	rsb	r4, r4, #12
   d808e:	f1c4 0220 	rsb	r2, r4, #32
   d8092:	fa20 f002 	lsr.w	r0, r0, r2
   d8096:	fa01 f304 	lsl.w	r3, r1, r4
   d809a:	ea40 0003 	orr.w	r0, r0, r3
   d809e:	4629      	mov	r1, r5
   d80a0:	bd30      	pop	{r4, r5, pc}
   d80a2:	fa21 f004 	lsr.w	r0, r1, r4
   d80a6:	4629      	mov	r1, r5
   d80a8:	bd30      	pop	{r4, r5, pc}
   d80aa:	f094 0f00 	teq	r4, #0
   d80ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d80b2:	bf06      	itte	eq
   d80b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d80b8:	3401      	addeq	r4, #1
   d80ba:	3d01      	subne	r5, #1
   d80bc:	e74e      	b.n	d7f5c <__adddf3+0x8c>
   d80be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d80c2:	bf18      	it	ne
   d80c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d80c8:	d029      	beq.n	d811e <__adddf3+0x24e>
   d80ca:	ea94 0f05 	teq	r4, r5
   d80ce:	bf08      	it	eq
   d80d0:	ea90 0f02 	teqeq	r0, r2
   d80d4:	d005      	beq.n	d80e2 <__adddf3+0x212>
   d80d6:	ea54 0c00 	orrs.w	ip, r4, r0
   d80da:	bf04      	itt	eq
   d80dc:	4619      	moveq	r1, r3
   d80de:	4610      	moveq	r0, r2
   d80e0:	bd30      	pop	{r4, r5, pc}
   d80e2:	ea91 0f03 	teq	r1, r3
   d80e6:	bf1e      	ittt	ne
   d80e8:	2100      	movne	r1, #0
   d80ea:	2000      	movne	r0, #0
   d80ec:	bd30      	popne	{r4, r5, pc}
   d80ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d80f2:	d105      	bne.n	d8100 <__adddf3+0x230>
   d80f4:	0040      	lsls	r0, r0, #1
   d80f6:	4149      	adcs	r1, r1
   d80f8:	bf28      	it	cs
   d80fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d80fe:	bd30      	pop	{r4, r5, pc}
   d8100:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8104:	bf3c      	itt	cc
   d8106:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d810a:	bd30      	popcc	{r4, r5, pc}
   d810c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8110:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8114:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8118:	f04f 0000 	mov.w	r0, #0
   d811c:	bd30      	pop	{r4, r5, pc}
   d811e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8122:	bf1a      	itte	ne
   d8124:	4619      	movne	r1, r3
   d8126:	4610      	movne	r0, r2
   d8128:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d812c:	bf1c      	itt	ne
   d812e:	460b      	movne	r3, r1
   d8130:	4602      	movne	r2, r0
   d8132:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8136:	bf06      	itte	eq
   d8138:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d813c:	ea91 0f03 	teqeq	r1, r3
   d8140:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8144:	bd30      	pop	{r4, r5, pc}
   d8146:	bf00      	nop

000d8148 <__aeabi_ui2d>:
   d8148:	f090 0f00 	teq	r0, #0
   d814c:	bf04      	itt	eq
   d814e:	2100      	moveq	r1, #0
   d8150:	4770      	bxeq	lr
   d8152:	b530      	push	{r4, r5, lr}
   d8154:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8158:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d815c:	f04f 0500 	mov.w	r5, #0
   d8160:	f04f 0100 	mov.w	r1, #0
   d8164:	e750      	b.n	d8008 <__adddf3+0x138>
   d8166:	bf00      	nop

000d8168 <__aeabi_i2d>:
   d8168:	f090 0f00 	teq	r0, #0
   d816c:	bf04      	itt	eq
   d816e:	2100      	moveq	r1, #0
   d8170:	4770      	bxeq	lr
   d8172:	b530      	push	{r4, r5, lr}
   d8174:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8178:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d817c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8180:	bf48      	it	mi
   d8182:	4240      	negmi	r0, r0
   d8184:	f04f 0100 	mov.w	r1, #0
   d8188:	e73e      	b.n	d8008 <__adddf3+0x138>
   d818a:	bf00      	nop

000d818c <__aeabi_f2d>:
   d818c:	0042      	lsls	r2, r0, #1
   d818e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8192:	ea4f 0131 	mov.w	r1, r1, rrx
   d8196:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d819a:	bf1f      	itttt	ne
   d819c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d81a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d81a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d81a8:	4770      	bxne	lr
   d81aa:	f092 0f00 	teq	r2, #0
   d81ae:	bf14      	ite	ne
   d81b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d81b4:	4770      	bxeq	lr
   d81b6:	b530      	push	{r4, r5, lr}
   d81b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d81bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d81c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d81c4:	e720      	b.n	d8008 <__adddf3+0x138>
   d81c6:	bf00      	nop

000d81c8 <__aeabi_ul2d>:
   d81c8:	ea50 0201 	orrs.w	r2, r0, r1
   d81cc:	bf08      	it	eq
   d81ce:	4770      	bxeq	lr
   d81d0:	b530      	push	{r4, r5, lr}
   d81d2:	f04f 0500 	mov.w	r5, #0
   d81d6:	e00a      	b.n	d81ee <__aeabi_l2d+0x16>

000d81d8 <__aeabi_l2d>:
   d81d8:	ea50 0201 	orrs.w	r2, r0, r1
   d81dc:	bf08      	it	eq
   d81de:	4770      	bxeq	lr
   d81e0:	b530      	push	{r4, r5, lr}
   d81e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d81e6:	d502      	bpl.n	d81ee <__aeabi_l2d+0x16>
   d81e8:	4240      	negs	r0, r0
   d81ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d81ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d81f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d81f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d81fa:	f43f aedc 	beq.w	d7fb6 <__adddf3+0xe6>
   d81fe:	f04f 0203 	mov.w	r2, #3
   d8202:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8206:	bf18      	it	ne
   d8208:	3203      	addne	r2, #3
   d820a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d820e:	bf18      	it	ne
   d8210:	3203      	addne	r2, #3
   d8212:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8216:	f1c2 0320 	rsb	r3, r2, #32
   d821a:	fa00 fc03 	lsl.w	ip, r0, r3
   d821e:	fa20 f002 	lsr.w	r0, r0, r2
   d8222:	fa01 fe03 	lsl.w	lr, r1, r3
   d8226:	ea40 000e 	orr.w	r0, r0, lr
   d822a:	fa21 f102 	lsr.w	r1, r1, r2
   d822e:	4414      	add	r4, r2
   d8230:	e6c1      	b.n	d7fb6 <__adddf3+0xe6>
   d8232:	bf00      	nop

000d8234 <__aeabi_dmul>:
   d8234:	b570      	push	{r4, r5, r6, lr}
   d8236:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d823a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d823e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8242:	bf1d      	ittte	ne
   d8244:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8248:	ea94 0f0c 	teqne	r4, ip
   d824c:	ea95 0f0c 	teqne	r5, ip
   d8250:	f000 f8de 	bleq	d8410 <__aeabi_dmul+0x1dc>
   d8254:	442c      	add	r4, r5
   d8256:	ea81 0603 	eor.w	r6, r1, r3
   d825a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d825e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8262:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8266:	bf18      	it	ne
   d8268:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d826c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8274:	d038      	beq.n	d82e8 <__aeabi_dmul+0xb4>
   d8276:	fba0 ce02 	umull	ip, lr, r0, r2
   d827a:	f04f 0500 	mov.w	r5, #0
   d827e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8282:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8286:	fbe0 e503 	umlal	lr, r5, r0, r3
   d828a:	f04f 0600 	mov.w	r6, #0
   d828e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8292:	f09c 0f00 	teq	ip, #0
   d8296:	bf18      	it	ne
   d8298:	f04e 0e01 	orrne.w	lr, lr, #1
   d829c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d82a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d82a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d82a8:	d204      	bcs.n	d82b4 <__aeabi_dmul+0x80>
   d82aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d82ae:	416d      	adcs	r5, r5
   d82b0:	eb46 0606 	adc.w	r6, r6, r6
   d82b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d82b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d82bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d82c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d82c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d82c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d82cc:	bf88      	it	hi
   d82ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d82d2:	d81e      	bhi.n	d8312 <__aeabi_dmul+0xde>
   d82d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d82d8:	bf08      	it	eq
   d82da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d82de:	f150 0000 	adcs.w	r0, r0, #0
   d82e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d82e6:	bd70      	pop	{r4, r5, r6, pc}
   d82e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d82ec:	ea46 0101 	orr.w	r1, r6, r1
   d82f0:	ea40 0002 	orr.w	r0, r0, r2
   d82f4:	ea81 0103 	eor.w	r1, r1, r3
   d82f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d82fc:	bfc2      	ittt	gt
   d82fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8302:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8306:	bd70      	popgt	{r4, r5, r6, pc}
   d8308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d830c:	f04f 0e00 	mov.w	lr, #0
   d8310:	3c01      	subs	r4, #1
   d8312:	f300 80ab 	bgt.w	d846c <__aeabi_dmul+0x238>
   d8316:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d831a:	bfde      	ittt	le
   d831c:	2000      	movle	r0, #0
   d831e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8322:	bd70      	pople	{r4, r5, r6, pc}
   d8324:	f1c4 0400 	rsb	r4, r4, #0
   d8328:	3c20      	subs	r4, #32
   d832a:	da35      	bge.n	d8398 <__aeabi_dmul+0x164>
   d832c:	340c      	adds	r4, #12
   d832e:	dc1b      	bgt.n	d8368 <__aeabi_dmul+0x134>
   d8330:	f104 0414 	add.w	r4, r4, #20
   d8334:	f1c4 0520 	rsb	r5, r4, #32
   d8338:	fa00 f305 	lsl.w	r3, r0, r5
   d833c:	fa20 f004 	lsr.w	r0, r0, r4
   d8340:	fa01 f205 	lsl.w	r2, r1, r5
   d8344:	ea40 0002 	orr.w	r0, r0, r2
   d8348:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d834c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8354:	fa21 f604 	lsr.w	r6, r1, r4
   d8358:	eb42 0106 	adc.w	r1, r2, r6
   d835c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8360:	bf08      	it	eq
   d8362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8366:	bd70      	pop	{r4, r5, r6, pc}
   d8368:	f1c4 040c 	rsb	r4, r4, #12
   d836c:	f1c4 0520 	rsb	r5, r4, #32
   d8370:	fa00 f304 	lsl.w	r3, r0, r4
   d8374:	fa20 f005 	lsr.w	r0, r0, r5
   d8378:	fa01 f204 	lsl.w	r2, r1, r4
   d837c:	ea40 0002 	orr.w	r0, r0, r2
   d8380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8384:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8388:	f141 0100 	adc.w	r1, r1, #0
   d838c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8390:	bf08      	it	eq
   d8392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8396:	bd70      	pop	{r4, r5, r6, pc}
   d8398:	f1c4 0520 	rsb	r5, r4, #32
   d839c:	fa00 f205 	lsl.w	r2, r0, r5
   d83a0:	ea4e 0e02 	orr.w	lr, lr, r2
   d83a4:	fa20 f304 	lsr.w	r3, r0, r4
   d83a8:	fa01 f205 	lsl.w	r2, r1, r5
   d83ac:	ea43 0302 	orr.w	r3, r3, r2
   d83b0:	fa21 f004 	lsr.w	r0, r1, r4
   d83b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d83b8:	fa21 f204 	lsr.w	r2, r1, r4
   d83bc:	ea20 0002 	bic.w	r0, r0, r2
   d83c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d83c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d83c8:	bf08      	it	eq
   d83ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d83ce:	bd70      	pop	{r4, r5, r6, pc}
   d83d0:	f094 0f00 	teq	r4, #0
   d83d4:	d10f      	bne.n	d83f6 <__aeabi_dmul+0x1c2>
   d83d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d83da:	0040      	lsls	r0, r0, #1
   d83dc:	eb41 0101 	adc.w	r1, r1, r1
   d83e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d83e4:	bf08      	it	eq
   d83e6:	3c01      	subeq	r4, #1
   d83e8:	d0f7      	beq.n	d83da <__aeabi_dmul+0x1a6>
   d83ea:	ea41 0106 	orr.w	r1, r1, r6
   d83ee:	f095 0f00 	teq	r5, #0
   d83f2:	bf18      	it	ne
   d83f4:	4770      	bxne	lr
   d83f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d83fa:	0052      	lsls	r2, r2, #1
   d83fc:	eb43 0303 	adc.w	r3, r3, r3
   d8400:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8404:	bf08      	it	eq
   d8406:	3d01      	subeq	r5, #1
   d8408:	d0f7      	beq.n	d83fa <__aeabi_dmul+0x1c6>
   d840a:	ea43 0306 	orr.w	r3, r3, r6
   d840e:	4770      	bx	lr
   d8410:	ea94 0f0c 	teq	r4, ip
   d8414:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8418:	bf18      	it	ne
   d841a:	ea95 0f0c 	teqne	r5, ip
   d841e:	d00c      	beq.n	d843a <__aeabi_dmul+0x206>
   d8420:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8424:	bf18      	it	ne
   d8426:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d842a:	d1d1      	bne.n	d83d0 <__aeabi_dmul+0x19c>
   d842c:	ea81 0103 	eor.w	r1, r1, r3
   d8430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8434:	f04f 0000 	mov.w	r0, #0
   d8438:	bd70      	pop	{r4, r5, r6, pc}
   d843a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d843e:	bf06      	itte	eq
   d8440:	4610      	moveq	r0, r2
   d8442:	4619      	moveq	r1, r3
   d8444:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8448:	d019      	beq.n	d847e <__aeabi_dmul+0x24a>
   d844a:	ea94 0f0c 	teq	r4, ip
   d844e:	d102      	bne.n	d8456 <__aeabi_dmul+0x222>
   d8450:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8454:	d113      	bne.n	d847e <__aeabi_dmul+0x24a>
   d8456:	ea95 0f0c 	teq	r5, ip
   d845a:	d105      	bne.n	d8468 <__aeabi_dmul+0x234>
   d845c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8460:	bf1c      	itt	ne
   d8462:	4610      	movne	r0, r2
   d8464:	4619      	movne	r1, r3
   d8466:	d10a      	bne.n	d847e <__aeabi_dmul+0x24a>
   d8468:	ea81 0103 	eor.w	r1, r1, r3
   d846c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8470:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8478:	f04f 0000 	mov.w	r0, #0
   d847c:	bd70      	pop	{r4, r5, r6, pc}
   d847e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8482:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8486:	bd70      	pop	{r4, r5, r6, pc}

000d8488 <__aeabi_ddiv>:
   d8488:	b570      	push	{r4, r5, r6, lr}
   d848a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d848e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8496:	bf1d      	ittte	ne
   d8498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d849c:	ea94 0f0c 	teqne	r4, ip
   d84a0:	ea95 0f0c 	teqne	r5, ip
   d84a4:	f000 f8a7 	bleq	d85f6 <__aeabi_ddiv+0x16e>
   d84a8:	eba4 0405 	sub.w	r4, r4, r5
   d84ac:	ea81 0e03 	eor.w	lr, r1, r3
   d84b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d84b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d84b8:	f000 8088 	beq.w	d85cc <__aeabi_ddiv+0x144>
   d84bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d84c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d84c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d84c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d84cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d84d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d84d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d84d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d84dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d84e0:	429d      	cmp	r5, r3
   d84e2:	bf08      	it	eq
   d84e4:	4296      	cmpeq	r6, r2
   d84e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d84ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d84ee:	d202      	bcs.n	d84f6 <__aeabi_ddiv+0x6e>
   d84f0:	085b      	lsrs	r3, r3, #1
   d84f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d84f6:	1ab6      	subs	r6, r6, r2
   d84f8:	eb65 0503 	sbc.w	r5, r5, r3
   d84fc:	085b      	lsrs	r3, r3, #1
   d84fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8502:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8506:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d850a:	ebb6 0e02 	subs.w	lr, r6, r2
   d850e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8512:	bf22      	ittt	cs
   d8514:	1ab6      	subcs	r6, r6, r2
   d8516:	4675      	movcs	r5, lr
   d8518:	ea40 000c 	orrcs.w	r0, r0, ip
   d851c:	085b      	lsrs	r3, r3, #1
   d851e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8522:	ebb6 0e02 	subs.w	lr, r6, r2
   d8526:	eb75 0e03 	sbcs.w	lr, r5, r3
   d852a:	bf22      	ittt	cs
   d852c:	1ab6      	subcs	r6, r6, r2
   d852e:	4675      	movcs	r5, lr
   d8530:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8534:	085b      	lsrs	r3, r3, #1
   d8536:	ea4f 0232 	mov.w	r2, r2, rrx
   d853a:	ebb6 0e02 	subs.w	lr, r6, r2
   d853e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8542:	bf22      	ittt	cs
   d8544:	1ab6      	subcs	r6, r6, r2
   d8546:	4675      	movcs	r5, lr
   d8548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d854c:	085b      	lsrs	r3, r3, #1
   d854e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8552:	ebb6 0e02 	subs.w	lr, r6, r2
   d8556:	eb75 0e03 	sbcs.w	lr, r5, r3
   d855a:	bf22      	ittt	cs
   d855c:	1ab6      	subcs	r6, r6, r2
   d855e:	4675      	movcs	r5, lr
   d8560:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8564:	ea55 0e06 	orrs.w	lr, r5, r6
   d8568:	d018      	beq.n	d859c <__aeabi_ddiv+0x114>
   d856a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d856e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8572:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8576:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d857a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d857e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8582:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8586:	d1c0      	bne.n	d850a <__aeabi_ddiv+0x82>
   d8588:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d858c:	d10b      	bne.n	d85a6 <__aeabi_ddiv+0x11e>
   d858e:	ea41 0100 	orr.w	r1, r1, r0
   d8592:	f04f 0000 	mov.w	r0, #0
   d8596:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d859a:	e7b6      	b.n	d850a <__aeabi_ddiv+0x82>
   d859c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d85a0:	bf04      	itt	eq
   d85a2:	4301      	orreq	r1, r0
   d85a4:	2000      	moveq	r0, #0
   d85a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d85aa:	bf88      	it	hi
   d85ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d85b0:	f63f aeaf 	bhi.w	d8312 <__aeabi_dmul+0xde>
   d85b4:	ebb5 0c03 	subs.w	ip, r5, r3
   d85b8:	bf04      	itt	eq
   d85ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   d85be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d85c2:	f150 0000 	adcs.w	r0, r0, #0
   d85c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d85ca:	bd70      	pop	{r4, r5, r6, pc}
   d85cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d85d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d85d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d85d8:	bfc2      	ittt	gt
   d85da:	ebd4 050c 	rsbsgt	r5, r4, ip
   d85de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d85e2:	bd70      	popgt	{r4, r5, r6, pc}
   d85e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85e8:	f04f 0e00 	mov.w	lr, #0
   d85ec:	3c01      	subs	r4, #1
   d85ee:	e690      	b.n	d8312 <__aeabi_dmul+0xde>
   d85f0:	ea45 0e06 	orr.w	lr, r5, r6
   d85f4:	e68d      	b.n	d8312 <__aeabi_dmul+0xde>
   d85f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d85fa:	ea94 0f0c 	teq	r4, ip
   d85fe:	bf08      	it	eq
   d8600:	ea95 0f0c 	teqeq	r5, ip
   d8604:	f43f af3b 	beq.w	d847e <__aeabi_dmul+0x24a>
   d8608:	ea94 0f0c 	teq	r4, ip
   d860c:	d10a      	bne.n	d8624 <__aeabi_ddiv+0x19c>
   d860e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8612:	f47f af34 	bne.w	d847e <__aeabi_dmul+0x24a>
   d8616:	ea95 0f0c 	teq	r5, ip
   d861a:	f47f af25 	bne.w	d8468 <__aeabi_dmul+0x234>
   d861e:	4610      	mov	r0, r2
   d8620:	4619      	mov	r1, r3
   d8622:	e72c      	b.n	d847e <__aeabi_dmul+0x24a>
   d8624:	ea95 0f0c 	teq	r5, ip
   d8628:	d106      	bne.n	d8638 <__aeabi_ddiv+0x1b0>
   d862a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d862e:	f43f aefd 	beq.w	d842c <__aeabi_dmul+0x1f8>
   d8632:	4610      	mov	r0, r2
   d8634:	4619      	mov	r1, r3
   d8636:	e722      	b.n	d847e <__aeabi_dmul+0x24a>
   d8638:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d863c:	bf18      	it	ne
   d863e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8642:	f47f aec5 	bne.w	d83d0 <__aeabi_dmul+0x19c>
   d8646:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d864a:	f47f af0d 	bne.w	d8468 <__aeabi_dmul+0x234>
   d864e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8652:	f47f aeeb 	bne.w	d842c <__aeabi_dmul+0x1f8>
   d8656:	e712      	b.n	d847e <__aeabi_dmul+0x24a>

000d8658 <__aeabi_d2f>:
   d8658:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d865c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8660:	bf24      	itt	cs
   d8662:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8666:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d866a:	d90d      	bls.n	d8688 <__aeabi_d2f+0x30>
   d866c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8670:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8674:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8678:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d867c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8680:	bf08      	it	eq
   d8682:	f020 0001 	biceq.w	r0, r0, #1
   d8686:	4770      	bx	lr
   d8688:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d868c:	d121      	bne.n	d86d2 <__aeabi_d2f+0x7a>
   d868e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8692:	bfbc      	itt	lt
   d8694:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8698:	4770      	bxlt	lr
   d869a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d869e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d86a2:	f1c2 0218 	rsb	r2, r2, #24
   d86a6:	f1c2 0c20 	rsb	ip, r2, #32
   d86aa:	fa10 f30c 	lsls.w	r3, r0, ip
   d86ae:	fa20 f002 	lsr.w	r0, r0, r2
   d86b2:	bf18      	it	ne
   d86b4:	f040 0001 	orrne.w	r0, r0, #1
   d86b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d86bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d86c0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d86c4:	ea40 000c 	orr.w	r0, r0, ip
   d86c8:	fa23 f302 	lsr.w	r3, r3, r2
   d86cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d86d0:	e7cc      	b.n	d866c <__aeabi_d2f+0x14>
   d86d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d86d6:	d107      	bne.n	d86e8 <__aeabi_d2f+0x90>
   d86d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d86dc:	bf1e      	ittt	ne
   d86de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d86e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d86e6:	4770      	bxne	lr
   d86e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d86ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d86f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d86f4:	4770      	bx	lr
   d86f6:	bf00      	nop

000d86f8 <__cxa_atexit>:
   d86f8:	b510      	push	{r4, lr}
   d86fa:	4c05      	ldr	r4, [pc, #20]	; (d8710 <__cxa_atexit+0x18>)
   d86fc:	4613      	mov	r3, r2
   d86fe:	b12c      	cbz	r4, d870c <__cxa_atexit+0x14>
   d8700:	460a      	mov	r2, r1
   d8702:	4601      	mov	r1, r0
   d8704:	2002      	movs	r0, #2
   d8706:	f3af 8000 	nop.w
   d870a:	bd10      	pop	{r4, pc}
   d870c:	4620      	mov	r0, r4
   d870e:	bd10      	pop	{r4, pc}
   d8710:	00000000 	.word	0x00000000

000d8714 <memcmp>:
   d8714:	b510      	push	{r4, lr}
   d8716:	3901      	subs	r1, #1
   d8718:	4402      	add	r2, r0
   d871a:	4290      	cmp	r0, r2
   d871c:	d007      	beq.n	d872e <memcmp+0x1a>
   d871e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8722:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8726:	42a3      	cmp	r3, r4
   d8728:	d0f7      	beq.n	d871a <memcmp+0x6>
   d872a:	1b18      	subs	r0, r3, r4
   d872c:	bd10      	pop	{r4, pc}
   d872e:	2000      	movs	r0, #0
   d8730:	bd10      	pop	{r4, pc}

000d8732 <memcpy>:
   d8732:	b510      	push	{r4, lr}
   d8734:	1e43      	subs	r3, r0, #1
   d8736:	440a      	add	r2, r1
   d8738:	4291      	cmp	r1, r2
   d873a:	d004      	beq.n	d8746 <memcpy+0x14>
   d873c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8740:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8744:	e7f8      	b.n	d8738 <memcpy+0x6>
   d8746:	bd10      	pop	{r4, pc}

000d8748 <memmove>:
   d8748:	4288      	cmp	r0, r1
   d874a:	b510      	push	{r4, lr}
   d874c:	eb01 0302 	add.w	r3, r1, r2
   d8750:	d801      	bhi.n	d8756 <memmove+0xe>
   d8752:	1e42      	subs	r2, r0, #1
   d8754:	e00b      	b.n	d876e <memmove+0x26>
   d8756:	4298      	cmp	r0, r3
   d8758:	d2fb      	bcs.n	d8752 <memmove+0xa>
   d875a:	1881      	adds	r1, r0, r2
   d875c:	1ad2      	subs	r2, r2, r3
   d875e:	42d3      	cmn	r3, r2
   d8760:	d004      	beq.n	d876c <memmove+0x24>
   d8762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8766:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d876a:	e7f8      	b.n	d875e <memmove+0x16>
   d876c:	bd10      	pop	{r4, pc}
   d876e:	4299      	cmp	r1, r3
   d8770:	d004      	beq.n	d877c <memmove+0x34>
   d8772:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8776:	f802 4f01 	strb.w	r4, [r2, #1]!
   d877a:	e7f8      	b.n	d876e <memmove+0x26>
   d877c:	bd10      	pop	{r4, pc}

000d877e <memset>:
   d877e:	4402      	add	r2, r0
   d8780:	4603      	mov	r3, r0
   d8782:	4293      	cmp	r3, r2
   d8784:	d002      	beq.n	d878c <memset+0xe>
   d8786:	f803 1b01 	strb.w	r1, [r3], #1
   d878a:	e7fa      	b.n	d8782 <memset+0x4>
   d878c:	4770      	bx	lr
	...

000d8790 <srand>:
   d8790:	b538      	push	{r3, r4, r5, lr}
   d8792:	4b12      	ldr	r3, [pc, #72]	; (d87dc <srand+0x4c>)
   d8794:	681c      	ldr	r4, [r3, #0]
   d8796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8798:	4605      	mov	r5, r0
   d879a:	b9d3      	cbnz	r3, d87d2 <srand+0x42>
   d879c:	2018      	movs	r0, #24
   d879e:	f7fc fcb1 	bl	d5104 <malloc>
   d87a2:	f243 330e 	movw	r3, #13070	; 0x330e
   d87a6:	63a0      	str	r0, [r4, #56]	; 0x38
   d87a8:	8003      	strh	r3, [r0, #0]
   d87aa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d87ae:	8043      	strh	r3, [r0, #2]
   d87b0:	f241 2334 	movw	r3, #4660	; 0x1234
   d87b4:	8083      	strh	r3, [r0, #4]
   d87b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d87ba:	80c3      	strh	r3, [r0, #6]
   d87bc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d87c0:	8103      	strh	r3, [r0, #8]
   d87c2:	2305      	movs	r3, #5
   d87c4:	8143      	strh	r3, [r0, #10]
   d87c6:	230b      	movs	r3, #11
   d87c8:	8183      	strh	r3, [r0, #12]
   d87ca:	2201      	movs	r2, #1
   d87cc:	2300      	movs	r3, #0
   d87ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d87d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d87d4:	2200      	movs	r2, #0
   d87d6:	611d      	str	r5, [r3, #16]
   d87d8:	615a      	str	r2, [r3, #20]
   d87da:	bd38      	pop	{r3, r4, r5, pc}
   d87dc:	2003cf7c 	.word	0x2003cf7c

000d87e0 <strcmp>:
   d87e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d87e4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d87e8:	2a01      	cmp	r2, #1
   d87ea:	bf28      	it	cs
   d87ec:	429a      	cmpcs	r2, r3
   d87ee:	d0f7      	beq.n	d87e0 <strcmp>
   d87f0:	1ad0      	subs	r0, r2, r3
   d87f2:	4770      	bx	lr

000d87f4 <strcpy>:
   d87f4:	4603      	mov	r3, r0
   d87f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d87fa:	f803 2b01 	strb.w	r2, [r3], #1
   d87fe:	2a00      	cmp	r2, #0
   d8800:	d1f9      	bne.n	d87f6 <strcpy+0x2>
   d8802:	4770      	bx	lr

000d8804 <strdup>:
   d8804:	4b02      	ldr	r3, [pc, #8]	; (d8810 <strdup+0xc>)
   d8806:	4601      	mov	r1, r0
   d8808:	6818      	ldr	r0, [r3, #0]
   d880a:	f000 b803 	b.w	d8814 <_strdup_r>
   d880e:	bf00      	nop
   d8810:	2003cf7c 	.word	0x2003cf7c

000d8814 <_strdup_r>:
   d8814:	b570      	push	{r4, r5, r6, lr}
   d8816:	4606      	mov	r6, r0
   d8818:	4608      	mov	r0, r1
   d881a:	460c      	mov	r4, r1
   d881c:	f000 f80d 	bl	d883a <strlen>
   d8820:	1c45      	adds	r5, r0, #1
   d8822:	4629      	mov	r1, r5
   d8824:	4630      	mov	r0, r6
   d8826:	f7fc fc9d 	bl	d5164 <_malloc_r>
   d882a:	4606      	mov	r6, r0
   d882c:	b118      	cbz	r0, d8836 <_strdup_r+0x22>
   d882e:	462a      	mov	r2, r5
   d8830:	4621      	mov	r1, r4
   d8832:	f7ff ff7e 	bl	d8732 <memcpy>
   d8836:	4630      	mov	r0, r6
   d8838:	bd70      	pop	{r4, r5, r6, pc}

000d883a <strlen>:
   d883a:	4603      	mov	r3, r0
   d883c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8840:	2a00      	cmp	r2, #0
   d8842:	d1fb      	bne.n	d883c <strlen+0x2>
   d8844:	1a18      	subs	r0, r3, r0
   d8846:	3801      	subs	r0, #1
   d8848:	4770      	bx	lr

000d884a <strncmp>:
   d884a:	b530      	push	{r4, r5, lr}
   d884c:	b182      	cbz	r2, d8870 <strncmp+0x26>
   d884e:	1e45      	subs	r5, r0, #1
   d8850:	3901      	subs	r1, #1
   d8852:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8856:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d885a:	42a3      	cmp	r3, r4
   d885c:	d106      	bne.n	d886c <strncmp+0x22>
   d885e:	43ec      	mvns	r4, r5
   d8860:	4414      	add	r4, r2
   d8862:	42e0      	cmn	r0, r4
   d8864:	d001      	beq.n	d886a <strncmp+0x20>
   d8866:	2b00      	cmp	r3, #0
   d8868:	d1f3      	bne.n	d8852 <strncmp+0x8>
   d886a:	461c      	mov	r4, r3
   d886c:	1b18      	subs	r0, r3, r4
   d886e:	bd30      	pop	{r4, r5, pc}
   d8870:	4610      	mov	r0, r2
   d8872:	bd30      	pop	{r4, r5, pc}

000d8874 <strncpy>:
   d8874:	b510      	push	{r4, lr}
   d8876:	4603      	mov	r3, r0
   d8878:	b142      	cbz	r2, d888c <strncpy+0x18>
   d887a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d887e:	f803 4b01 	strb.w	r4, [r3], #1
   d8882:	3a01      	subs	r2, #1
   d8884:	2c00      	cmp	r4, #0
   d8886:	d1f7      	bne.n	d8878 <strncpy+0x4>
   d8888:	441a      	add	r2, r3
   d888a:	e000      	b.n	d888e <strncpy+0x1a>
   d888c:	bd10      	pop	{r4, pc}
   d888e:	4293      	cmp	r3, r2
   d8890:	d002      	beq.n	d8898 <strncpy+0x24>
   d8892:	f803 4b01 	strb.w	r4, [r3], #1
   d8896:	e7fa      	b.n	d888e <strncpy+0x1a>
   d8898:	bd10      	pop	{r4, pc}

000d889a <strnlen>:
   d889a:	b510      	push	{r4, lr}
   d889c:	4603      	mov	r3, r0
   d889e:	4401      	add	r1, r0
   d88a0:	428b      	cmp	r3, r1
   d88a2:	d004      	beq.n	d88ae <strnlen+0x14>
   d88a4:	781a      	ldrb	r2, [r3, #0]
   d88a6:	1c5c      	adds	r4, r3, #1
   d88a8:	b10a      	cbz	r2, d88ae <strnlen+0x14>
   d88aa:	4623      	mov	r3, r4
   d88ac:	e7f8      	b.n	d88a0 <strnlen+0x6>
   d88ae:	1a18      	subs	r0, r3, r0
   d88b0:	bd10      	pop	{r4, pc}

000d88b2 <link_code_end>:
	...

000d88b4 <dynalib_user>:
   d88b4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d88c4:	0000 0000                                   ....

000d88c8 <_ZTV5Timer>:
	...
   d88d0:	416d 000d 41b5 000d 40f5 000d 6544 6f74     mA...A...@..Deto
   d88e0:	616e 6574 7200 6365 6965 6576 2064 6e69     nate.received in
   d88f0:	7320 7075 6373 6972 6562 702f 6275 696c      supscribe/publi
   d8900:	6873 7220 7165 6575 7473 7325 203a 7325     sh request%s: %s
   d8910:	7600 7261 6169 6c62 2065 616c 6562 206c     .variable label 
   d8920:	7420 6168 2074 7369 6320 706f 6569 2064      that is copied 
   d8930:	7266 6d6f 6420 7665 6e5f 6d61 2065 203a     from dev_name : 
   d8940:	7325 2500 322e 0066 6f76 746c 6761 0065     %s.%.2f.voltage.
   d8950:	6176 6972 6261 656c 6c20 6261 6c65 7420     variable label t
   d8960:	6168 2074 7369 7520 6c70 616f 6564 2064     hat is uploaded 
   d8970:	6f74 7520 6962 6f64 7374 3a20 2020 7325     to ubidots :  %s
   d8980:	5500 6962 6f64 7374 4200 6f6f 006d 6f42     .Ubidots.Boom.Bo
   d8990:	6d6f 615f 6b63 4400 7465 6e6f 7461 5f65     om_ack.Detonate_
   d89a0:	6361 006b 6f42 6d6f 725f 7365 7465 4200     ack.Boom_reset.B
   d89b0:	4f4f 5f4d 6572 6573 0074 6170 7472 6369     OOM_reset.partic
   d89c0:	656c 642f 7665 6369 2f65 616e 656d 7700     le/device/name.w
   d89d0:	6265 6f68 6b6f 4200 6165 6f63 206e 414d     ebhook.Beacon MA
   d89e0:	0043 6e69 7564 7473 6972 6c61 612e 6970     C.industrial.api
   d89f0:	752e 6962 6f64 7374 632e 6d6f 5b00 4157     .ubidots.com.[WA
   d8a00:	4e52 4e49 5d47 5920 756f 2072 6f62 7261     RNING] Your boar
   d8a10:	2064 6f64 7365 6e20 746f 7320 7075 6f70     d does not suppo
   d8a20:	7472 7420 6568 6d20 7365 4c68 6f6f 2870     rt the meshLoop(
   d8a30:	2029 656d 6874 646f 5b00 4157 4e52 4e49     ) method.[WARNIN
   d8a40:	5d47 5920 756f 2072 6f62 7261 2064 6f64     G] Your board do
   d8a50:	7365 6e20 746f 7320 7075 6f70 7472 7420     es not support t
   d8a60:	6568 7320 7465 6c43 756f 5064 6f72 6f74     he setCloudProto
   d8a70:	6f63 286c 2029 656d 6874 646f 5b00 4157     col() method.[WA
   d8a80:	4e52 4e49 5d47 5920 756f 2072 6f62 7261     RNING] Your boar
   d8a90:	2064 6f64 7365 6e20 746f 7320 7075 6f70     d does not suppo
   d8aa0:	7472 7420 6568 7320 6e65 2864 2029 656d     rt the send() me
   d8ab0:	6874 646f 5b00 6157 6e72 6e69 5d67 5920     thod.[Warning] Y
   d8ac0:	756f 2072 6f62 7261 2064 6f64 7365 6e20     our board does n
   d8ad0:	746f 7320 7075 6f70 7472 7420 6568 6720     ot support the g
   d8ae0:	7465 2928 6d20 7465 6f68 0064 6f59 2075     et() method.You 
   d8af0:	7261 2065 6461 6964 676e 6d20 726f 2065     are adding more 
   d8b00:	6874 6e61 7420 6568 6d20 7861 6d69 6d75     than the maximum
   d8b10:	6f20 2066 6f63 736e 6365 7475 7669 2065      of consecutive 
   d8b20:	656b 2d79 6176 756c 7365 7020 6961 7372     key-values pairs
   d8b30:	2500 2573 3d73 7325 2500 2473 2500 2273     .%s%s=%s.%s$.%s"
   d8b40:	7325 3a22 2522 2273 2500 2c73 5b00 4157     %s":"%s".%s,.[WA
   d8b50:	4e52 4e49 5d47 5920 756f 2072 654d 6873     RNING] Your Mesh
   d8b60:	6320 6e6f 6574 7478 6c20 6e65 7467 2068      context length 
   d8b70:	756d 7473 6220 2065 6f6c 6577 2072 6874     must be lower th
   d8b80:	6e61 3120 3030 2500 756c 2500 7c73 6625     an 100.%lu.%s|%f
   d8b90:	257c 7c73 7325 257c 0073 575b 7261 696e     |%s|%s|%s.[Warni
   d8ba0:	676e 205d 6854 2065 656d 6873 6f4c 706f     ng] The meshLoop
   d8bb0:	2928 6d20 7465 6f68 2064 6f64 7365 6e20     () method does n
   d8bc0:	746f 6920 706d 656c 656d 746e 6120 796e     ot implement any
   d8bd0:	7220 756f 6974 656e 6920 206e 6f79 7275      routine in your
   d8be0:	6420 7665 6369 0065 2041 7270 626f 656c      device.A proble
   d8bf0:	206d 6168 2073 6172 7369 6465 7720 7469     m has raised wit
   d8c00:	2068 6874 2065 6564 6976 6563 7420 7972     h the device try
   d8c10:	6e69 2067 6f74 6f20 6570 206e 2061 654d     ing to open a Me
   d8c20:	6873 6f73 6b63 7465 5900 756f 6820 7661     shsocket.You hav
   d8c30:	2065 6f6e 2074 6461 6564 2064 6e61 2079     e not added any 
   d8c40:	6176 6972 6261 656c 7620 6c61 6575 202c     variable value, 
   d8c50:	6c70 6165 6573 6320 6c61 206c 6874 2065     please call the 
   d8c60:	6461 2864 6d29 7465 6f68 2064 6966 7372     add()method firs
   d8c70:	0074 6275 6469 746f 2d73 656d 6873 0000     t.ubidots-mesh..

000d8c80 <_ZTVN5spark13EthernetClassE>:
	...
   d8c88:	51e3 000d 51d9 000d 51cf 000d 51c5 000d     .Q...Q...Q...Q..
   d8c98:	51b9 000d 51ad 000d 51a1 000d 5199 000d     .Q...Q...Q...Q..
   d8ca8:	518f 000d 5185 000d 79bb 000d               .Q...Q...y..

000d8cb4 <_ZTV8SPIClass>:
	...
   d8cbc:	5201 000d 5203 000d                         .R...R..

000d8cc4 <_ZTV3UDP>:
	...
   d8ccc:	47d5 000d 47f5 000d 5279 000d 53a3 000d     .G...G..yR...S..
   d8cdc:	5271 000d 528f 000d 52ad 000d 52c7 000d     qR...R...R...R..
   d8cec:	52eb 000d 5387 000d 5689 000d 5429 000d     .R...S...V..)T..
   d8cfc:	55a9 000d 5259 000d 5831 000d 552d 000d     .U..YR..1X..-U..
   d8d0c:	5461 000d 585f 000d 53cd 000d 5267 000d     aT.._X...S..gR..
   d8d1c:	5409 000d 526d 000d 52c9 000d fff0 ffff     .T..mR...R......
   d8d2c:	0000 0000 52e3 000d                         .....R..

000d8d34 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8d3c:	59ed 000d 59f3 000d 5cd7 000d 5a01 000d     .Y...Y...\...Z..
   d8d4c:	59ef 000d 6977 6972 676e 622e 656c 5300     .Y..wiring.ble.S
   d8d5c:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d8d6c:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   d8d7c:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   d8d8c:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   d8d9c:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   d8dac:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   d8dbc:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   d8dcc:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   d8ddc:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   d8dec:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   d8dfc:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   d8e0c:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   d8e1c:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   d8e2c:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   d8e3c:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   d8e4c:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   d8e5c:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   d8e6c:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   d8e7c:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d8e8c:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   d8e9c:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   d8eac:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   d8ebc:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   d8ecc:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d8edc:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d8eec:	6465 002e 6162 6475 5300 7265 6169 006c     ed..baud.Serial.
   d8efc:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   d8f0c:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   d8f1c:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   d8f2c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   d8f3c:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   d8f4c:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   d8f5c:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   d8f6c:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   d8f7c:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   d8f8c:	736c 3d20 0020 0a0d 6c00 006e 6e66 6300     ls = ....ln.fn.c
   d8f9c:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
   d8fac:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
   d8fbc:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
   d8fcc:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d8fdc:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d8fec:	6100 6373 6974 656d 0000 0000               .asctime....

000d8ff8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9000:	62e9 000d 62ef 000d 6333 000d 62fd 000d     .b...b..3c...b..
   d9010:	62eb 000d                                   .b..

000d9014 <_ZTV9IPAddress>:
	...
   d901c:	68d9 000d 68c9 000d 68cb 000d               .h...h...h..

000d9028 <_ZTV9USBSerial>:
	...
   d9030:	69dd 000d 6a2d 000d 6a3b 000d 6039 000d     .i..-j..;j..9`..
   d9040:	6a19 000d 69df 000d 69f5 000d 6a27 000d     .j...i...i..'j..
   d9050:	6a0b 000d 69d9 000d                         .j...i..

000d9058 <_ZTV11USARTSerial>:
	...
   d9060:	6ae9 000d 6b39 000d 6b47 000d 6039 000d     .j..9k..Gk..9`..
   d9070:	6afd 000d 6b1f 000d 6b0b 000d 6b33 000d     .j...k...k..3k..
   d9080:	6aeb 000d 6aef 000d                         .j...j..

000d9088 <_ZTV7TwoWire>:
	...
   d9090:	6c49 000d 6c93 000d 6c6b 000d 6c4b 000d     Il...l..kl..Kl..
   d90a0:	6c73 000d 6c7b 000d 6c83 000d 6c8b 000d     sl..{l...l...l..

000d90b0 <_ZTVN5spark9MeshClassE>:
	...
   d90b8:	6d4f 000d 6d45 000d 6d3b 000d 4865 000d     Om..Em..;m..eH..
   d90c8:	6d2f 000d 6d23 000d 6d17 000d 6d0f 000d     /m..#m...m...m..
   d90d8:	6d05 000d 6cfb 000d 79bb 000d 6666 3330     .m...l...y..ff03
   d90e8:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   d90f8:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   d9108:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000d9114 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d911c:	744d 000d 7453 000d 793b 000d 7461 000d     Mt..St..;y..at..
   d912c:	744f 000d                                   Ot..

000d9130 <_ZTV9TCPClient>:
	...
   d9138:	4691 000d 46c5 000d 73c5 000d 73df 000d     .F...F...s...s..
   d9148:	77e1 000d 7533 000d 7505 000d 7409 000d     .w..3u...u...t..
   d9158:	76bd 000d 75b9 000d 7567 000d 77b1 000d     .v...u..gu...w..
   d9168:	740b 000d 7443 000d 73f1 000d 7465 000d     .t..Ct...s..et..
   d9178:	74e5 000d 6572 7663 6520 7272 726f 3d20     .t..recv error =
   d9188:	2520 0064                                    %d.

000d918c <_ZTVN5spark12NetworkClassE>:
	...
   d9194:	7953 000d 795d 000d 7967 000d 7971 000d     Sy..]y..gy..qy..
   d91a4:	797b 000d 7987 000d 7993 000d 799f 000d     {y...y...y...y..
   d91b4:	79a7 000d 79b1 000d 79bb 000d               .y...y...y..

000d91c0 <_ZSt7nothrow>:
   d91c0:	0000 0000                                   ....

000d91c4 <__sf_fake_stdin>:
	...

000d91e4 <__sf_fake_stdout>:
	...

000d9204 <__sf_fake_stderr>:
	...

000d9224 <link_const_variable_data_end>:
   d9224:	000d4571 	.word	0x000d4571
   d9228:	000d46d9 	.word	0x000d46d9
   d922c:	000d4701 	.word	0x000d4701
   d9230:	000d479d 	.word	0x000d479d
   d9234:	000d47ad 	.word	0x000d47ad
   d9238:	000d4809 	.word	0x000d4809
   d923c:	000d4a45 	.word	0x000d4a45
   d9240:	000d4a55 	.word	0x000d4a55
   d9244:	000d4a7d 	.word	0x000d4a7d
   d9248:	000d51ed 	.word	0x000d51ed
   d924c:	000d5241 	.word	0x000d5241
   d9250:	000d6029 	.word	0x000d6029
   d9254:	000d6191 	.word	0x000d6191
   d9258:	000d61a1 	.word	0x000d61a1
   d925c:	000d61e9 	.word	0x000d61e9
   d9260:	000d7375 	.word	0x000d7375
   d9264:	000d7a89 	.word	0x000d7a89
   d9268:	000d7b69 	.word	0x000d7b69
   d926c:	000d7c35 	.word	0x000d7c35
   d9270:	000d7cb9 	.word	0x000d7cb9
   d9274:	000d7d7d 	.word	0x000d7d7d
   d9278:	000d7e41 	.word	0x000d7e41

000d927c <link_constructors_end>:
   d927c:	00000000 	.word	0x00000000
