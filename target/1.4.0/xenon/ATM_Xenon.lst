
e:/aacrs/02_12/markvisser/git_clone/ATM_XENON/ATM_Xenon/target/1.4.0/xenon/ATM_Xenon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005240  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000192f4  2**0
                  CONTENTS
  4 .data         00000068  2003ce14  000d9260  0000ce14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001974  2003ce7c  2003ce7c  0001ce7c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d92c8  000d92c8  000192c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d92f0  000d92f0  000192f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00143afa  00000000  00000000  000192f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00018cb4  00000000  00000000  0015cdee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026596  00000000  00000000  00175aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000030b8  00000000  00000000  0019c038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005b28  00000000  00000000  0019f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040696  00000000  00000000  001a4c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003d48d  00000000  00000000  001e52ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001167b9  00000000  00000000  0022273b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ed44  00000000  00000000  00338ef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fb6c 	bl	d870e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fb8c 	bl	d875a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ce14 	.word	0x2003ce14
   d404c:	000d9260 	.word	0x000d9260
   d4050:	2003ce7c 	.word	0x2003ce7c
   d4054:	2003ce7c 	.word	0x2003ce7c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f931 	bl	d62c4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9258 	.word	0x000d9258
   d4084:	000d9200 	.word	0x000d9200

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8c0 	b.w	d420c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f951 	bl	d4334 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b8e3 	b.w	d6260 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 b83b 	b.w	d5114 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f001 b839 	b.w	d5114 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f001 b83f 	b.w	d5124 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f001 b83d 	b.w	d5124 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ba:	6803      	ldr	r3, [r0, #0]
   d40bc:	4718      	bx	r3

000d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40be:	2a01      	cmp	r2, #1
   d40c0:	d002      	beq.n	d40c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40c2:	2a02      	cmp	r2, #2
   d40c4:	d002      	beq.n	d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40c6:	e004      	b.n	d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c8:	6001      	str	r1, [r0, #0]
	      break;
   d40ca:	e002      	b.n	d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40cc:	680b      	ldr	r3, [r1, #0]
   d40ce:	b100      	cbz	r0, d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40d0:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40d2:	2000      	movs	r0, #0
   d40d4:	4770      	bx	lr
	...

000d40d8 <_Z18cloudResetFunction6String>:
      softDelay(2000);
    }
} 

//  Remote Reset Function
int cloudResetFunction(String command){
   d40d8:	b508      	push	{r3, lr}
    resetFlag = true;
   d40da:	4b04      	ldr	r3, [pc, #16]	; (d40ec <_Z18cloudResetFunction6String+0x14>)
   d40dc:	2201      	movs	r2, #1
   d40de:	701a      	strb	r2, [r3, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40e0:	f000 fd66 	bl	d4bb0 <HAL_Timer_Get_Milli_Seconds>
    rebootSync = millis();
   d40e4:	4b02      	ldr	r3, [pc, #8]	; (d40f0 <_Z18cloudResetFunction6String+0x18>)
   d40e6:	6018      	str	r0, [r3, #0]
    return 0;
}
   d40e8:	2000      	movs	r0, #0
   d40ea:	bd08      	pop	{r3, pc}
   d40ec:	2003e236 	.word	0x2003e236
   d40f0:	2003e25c 	.word	0x2003e25c

000d40f4 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d40f4:	6943      	ldr	r3, [r0, #20]
   d40f6:	b113      	cbz	r3, d40fe <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40f8:	6983      	ldr	r3, [r0, #24]
   d40fa:	300c      	adds	r0, #12
   d40fc:	4718      	bx	r3
   d40fe:	4770      	bx	lr

000d4100 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4100:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4102:	2100      	movs	r1, #0
   d4104:	4604      	mov	r4, r0
   d4106:	4608      	mov	r0, r1
   d4108:	f000 fda6 	bl	d4c58 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d410c:	a902      	add	r1, sp, #8
   d410e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4110:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4112:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4116:	f000 fdb7 	bl	d4c88 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d411a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d411c:	b10c      	cbz	r4, d4122 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d411e:	2301      	movs	r3, #1
   d4120:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4122:	2100      	movs	r1, #0
   d4124:	2001      	movs	r0, #1
   d4126:	f000 fd97 	bl	d4c58 <os_thread_scheduling>
            }
        }
        if (t) {
   d412a:	b12c      	cbz	r4, d4138 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d412c:	6823      	ldr	r3, [r4, #0]
   d412e:	4620      	mov	r0, r4
   d4130:	689b      	ldr	r3, [r3, #8]
   d4132:	4798      	blx	r3
            t->running = false;
   d4134:	2300      	movs	r3, #0
   d4136:	7123      	strb	r3, [r4, #4]
        }
    }
   d4138:	b002      	add	sp, #8
   d413a:	bd10      	pop	{r4, pc}

000d413c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d413c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d413e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4140:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4142:	b113      	cbz	r3, d414a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4144:	2203      	movs	r2, #3
   d4146:	4601      	mov	r1, r0
   d4148:	4798      	blx	r3
    }
   d414a:	4620      	mov	r0, r4
   d414c:	bd10      	pop	{r4, pc}

000d414e <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d414e:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4150:	6880      	ldr	r0, [r0, #8]
   d4152:	2300      	movs	r3, #0
   d4154:	b138      	cbz	r0, d4166 <_ZN5Timer5_stopEjb+0x18>
   d4156:	e88d 000a 	stmia.w	sp, {r1, r3}
   d415a:	2102      	movs	r1, #2
   d415c:	f000 fd9c 	bl	d4c98 <os_timer_change>
   d4160:	fab0 f080 	clz	r0, r0
   d4164:	0940      	lsrs	r0, r0, #5
    }
   d4166:	b003      	add	sp, #12
   d4168:	f85d fb04 	ldr.w	pc, [sp], #4

000d416c <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d416c:	b538      	push	{r3, r4, r5, lr}
   d416e:	4b10      	ldr	r3, [pc, #64]	; (d41b0 <_ZN5TimerD1Ev+0x44>)
   d4170:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d4172:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4174:	4604      	mov	r4, r0
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d4176:	b1a3      	cbz	r3, d41a2 <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d417c:	2200      	movs	r2, #0
   d417e:	f7ff ffe6 	bl	d414e <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4182:	2100      	movs	r1, #0
   d4184:	68a0      	ldr	r0, [r4, #8]
   d4186:	f000 fdb7 	bl	d4cf8 <os_timer_set_id>
            while (running) {
   d418a:	7923      	ldrb	r3, [r4, #4]
   d418c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4190:	b113      	cbz	r3, d4198 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4192:	f000 fd49 	bl	d4c28 <os_thread_yield>
   d4196:	e7f8      	b.n	d418a <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4198:	4629      	mov	r1, r5
   d419a:	68a0      	ldr	r0, [r4, #8]
   d419c:	f000 fd6c 	bl	d4c78 <os_timer_destroy>
            handle = nullptr;
   d41a0:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d41a2:	f104 000c 	add.w	r0, r4, #12
   d41a6:	f7ff ffc9 	bl	d413c <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41aa:	4620      	mov	r0, r4
   d41ac:	bd38      	pop	{r3, r4, r5, pc}
   d41ae:	bf00      	nop
   d41b0:	000d88ac 	.word	0x000d88ac

000d41b4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d41b4:	b510      	push	{r4, lr}
   d41b6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41b8:	f7ff ffd8 	bl	d416c <_ZN5TimerD1Ev>
   d41bc:	4620      	mov	r0, r4
   d41be:	211c      	movs	r1, #28
   d41c0:	f003 fd10 	bl	d7be4 <_ZdlPvj>
   d41c4:	4620      	mov	r0, r4
   d41c6:	bd10      	pop	{r4, pc}

000d41c8 <_ZN8particle13BleScanResultC1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d41c8:	b510      	push	{r4, lr}
   d41ca:	4604      	mov	r4, r0
   d41cc:	f001 fc46 	bl	d5a5c <_ZN8particle10BleAddressC1Ev>
   d41d0:	f104 0008 	add.w	r0, r4, #8
   d41d4:	f001 fcb3 	bl	d5b3e <_ZN8particle18BleAdvertisingDataC1Ev>
   d41d8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d41dc:	f001 fcaf 	bl	d5b3e <_ZN8particle18BleAdvertisingDataC1Ev>
   d41e0:	4620      	mov	r0, r4
   d41e2:	bd10      	pop	{r4, pc}

000d41e4 <_Z9softDelaym>:
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
const char *EVENT_NAME = "Beacon MAC"; // here we need to change it to name of node if possible

inline void softDelay(uint32_t msDelay){
   d41e4:	b570      	push	{r4, r5, r6, lr}
   d41e6:	4606      	mov	r6, r0
   d41e8:	f000 fce2 	bl	d4bb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41ec:	4c06      	ldr	r4, [pc, #24]	; (d4208 <_Z9softDelaym+0x24>)
   d41ee:	4605      	mov	r5, r0
   d41f0:	f000 fcde 	bl	d4bb0 <HAL_Timer_Get_Milli_Seconds>
      for (uint32_t ms = millis(); 
   d41f4:	1b40      	subs	r0, r0, r5
   d41f6:	42b0      	cmp	r0, r6
   d41f8:	d205      	bcs.n	d4206 <_Z9softDelaym+0x22>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41fa:	f000 fcd9 	bl	d4bb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41fe:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4200:	f000 ff50 	bl	d50a4 <spark_process>
   d4204:	e7f4      	b.n	d41f0 <_Z9softDelaym+0xc>
   d4206:	bd70      	pop	{r4, r5, r6, pc}
   d4208:	2003e730 	.word	0x2003e730

000d420c <setup>:
    resetFlag = true;
    rebootSync = millis();
    return 0;
}

void setup() {
   d420c:	b530      	push	{r4, r5, lr}
   d420e:	b085      	sub	sp, #20
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d4210:	2400      	movs	r4, #0
        conn_prop.size = sizeof(conn_prop);
   d4212:	2308      	movs	r3, #8
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d4214:	9402      	str	r4, [sp, #8]
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4216:	4d3f      	ldr	r5, [pc, #252]	; (d4314 <setup+0x108>)
        conn_prop.size = sizeof(conn_prop);
   d4218:	f8ad 3008 	strh.w	r3, [sp, #8]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d421c:	2301      	movs	r3, #1
   d421e:	9303      	str	r3, [sp, #12]
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4220:	aa02      	add	r2, sp, #8
   d4222:	4623      	mov	r3, r4
   d4224:	f644 6120 	movw	r1, #20000	; 0x4e20
   d4228:	4620      	mov	r0, r4
   d422a:	f000 ff63 	bl	d50f4 <spark_set_connection_property>
   d422e:	4622      	mov	r2, r4
   d4230:	4621      	mov	r1, r4
   d4232:	4628      	mov	r0, r5
   d4234:	f7ff ff8b 	bl	d414e <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4238:	68a8      	ldr	r0, [r5, #8]
   d423a:	b140      	cbz	r0, d424e <setup+0x42>
   d423c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4240:	9300      	str	r3, [sp, #0]
   d4242:	9401      	str	r4, [sp, #4]
   d4244:	4623      	mov	r3, r4
   d4246:	4622      	mov	r2, r4
   d4248:	4621      	mov	r1, r4
   d424a:	f000 fd25 	bl	d4c98 <os_timer_change>
  
  Particle.keepAlive(20);
  timer.start(); // start timer to send info to ubidots once per hour or whatever its set to
  Serial.begin(115200);
   d424e:	f002 fc2d 	bl	d6aac <_Z16_fetch_usbserialv>
   d4252:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4256:	f002 fc1d 	bl	d6a94 <_ZN9USBSerial5beginEl>
  pinMode(RELAY1, OUTPUT);//output for triggered led
   d425a:	2101      	movs	r1, #1
   d425c:	2004      	movs	r0, #4
   d425e:	f003 fc2f 	bl	d7ac0 <pinMode>
  pinMode(RELAY2, OUTPUT);//output for triggered led
   d4262:	2101      	movs	r1, #1
   d4264:	2005      	movs	r0, #5
   d4266:	f003 fc2b 	bl	d7ac0 <pinMode>
  pinMode(led_red, OUTPUT);//output for triggered led
   d426a:	2101      	movs	r1, #1
   d426c:	2006      	movs	r0, #6
   d426e:	f003 fc27 	bl	d7ac0 <pinMode>
  pinMode(led_green, OUTPUT);//output for triggered led
   d4272:	2101      	movs	r1, #1
   d4274:	2008      	movs	r0, #8
   d4276:	f003 fc23 	bl	d7ac0 <pinMode>
  pinMode(led_blue, OUTPUT);//output for triggered led
   d427a:	2101      	movs	r1, #1
   d427c:	2007      	movs	r0, #7
   d427e:	f003 fc1f 	bl	d7ac0 <pinMode>
  pinMode(PCH1, OUTPUT);//output for triggered led
   d4282:	2101      	movs	r1, #1
   d4284:	2012      	movs	r0, #18
   d4286:	f003 fc1b 	bl	d7ac0 <pinMode>
  pinMode(NCH1, OUTPUT);//output for triggered led
   d428a:	2101      	movs	r1, #1
   d428c:	2013      	movs	r0, #19
   d428e:	f003 fc17 	bl	d7ac0 <pinMode>
  pinMode(LOAD, INPUT);//output for triggered led
   d4292:	2100      	movs	r1, #0
   d4294:	2003      	movs	r0, #3
   d4296:	f003 fc13 	bl	d7ac0 <pinMode>
  pinMode(CLEAR, INPUT);//output for triggered led
   d429a:	2100      	movs	r1, #0
   d429c:	2002      	movs	r0, #2
   d429e:	f003 fc0f 	bl	d7ac0 <pinMode>
  pinMode(BATT, INPUT); // argon battery 
   d42a2:	2100      	movs	r1, #0
   d42a4:	2018      	movs	r0, #24
   d42a6:	f003 fc0b 	bl	d7ac0 <pinMode>
  BLE.setTxPower(4); // Use lower power // Use lower power -20, -16, -12, -8, -4, 0, 4, 8.
   d42aa:	f001 fcc3 	bl	d5c34 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42ae:	2104      	movs	r1, #4
   d42b0:	f001 fcde 	bl	d5c70 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
  // set initial IO states
  digitalWrite (led_blue, HIGH);//led off
   d42b4:	2101      	movs	r1, #1
   d42b6:	2007      	movs	r0, #7
   d42b8:	f003 fc13 	bl	d7ae2 <digitalWrite>
  digitalWrite (led_green, HIGH);//led off
   d42bc:	2101      	movs	r1, #1
   d42be:	2008      	movs	r0, #8
   d42c0:	f003 fc0f 	bl	d7ae2 <digitalWrite>
  digitalWrite (led_red, HIGH);//led off
   d42c4:	2101      	movs	r1, #1
   d42c6:	2006      	movs	r0, #6
   d42c8:	f003 fc0b 	bl	d7ae2 <digitalWrite>
  digitalWrite (RELAY1, LOW);//relay off
   d42cc:	2100      	movs	r1, #0
   d42ce:	2004      	movs	r0, #4
   d42d0:	f003 fc07 	bl	d7ae2 <digitalWrite>
  digitalWrite (RELAY2, LOW);//relay off
   d42d4:	2100      	movs	r1, #0
   d42d6:	2005      	movs	r0, #5
   d42d8:	f003 fc03 	bl	d7ae2 <digitalWrite>
  digitalWrite (LOAD, LOW);//off
   d42dc:	2100      	movs	r1, #0
   d42de:	2003      	movs	r0, #3
   d42e0:	f003 fbff 	bl	d7ae2 <digitalWrite>
  digitalWrite (CLEAR, LOW);//off
   d42e4:	2100      	movs	r1, #0
   d42e6:	2002      	movs	r0, #2
   d42e8:	f003 fbfb 	bl	d7ae2 <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d42ec:	4a0a      	ldr	r2, [pc, #40]	; (d4318 <setup+0x10c>)
   d42ee:	490b      	ldr	r1, [pc, #44]	; (d431c <setup+0x110>)
   d42f0:	480b      	ldr	r0, [pc, #44]	; (d4320 <setup+0x114>)
   d42f2:	f002 f85f 	bl	d63b4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  //Remote Reset Particle Function, to reset device from the cloud
  Particle.function("reset", cloudResetFunction);//Remote Reset Particle Function, to reset device from the cloud
  Mesh.subscribe("Detonate", DetonateAction);
   d42f6:	4a0b      	ldr	r2, [pc, #44]	; (d4324 <setup+0x118>)
   d42f8:	490b      	ldr	r1, [pc, #44]	; (d4328 <setup+0x11c>)
   d42fa:	480c      	ldr	r0, [pc, #48]	; (d432c <setup+0x120>)
   d42fc:	f003 f80c 	bl	d7318 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  pinMode(BATT, INPUT);
   d4300:	2100      	movs	r1, #0
   d4302:	2018      	movs	r0, #24
   d4304:	f003 fbdc 	bl	d7ac0 <pinMode>
  ubidots.setDebug(true);  // Uncomment this line for printing debug messages
   d4308:	2101      	movs	r1, #1
   d430a:	4809      	ldr	r0, [pc, #36]	; (d4330 <setup+0x124>)
   d430c:	f000 fa4a 	bl	d47a4 <_ZN7Ubidots8setDebugEb>
}
   d4310:	b005      	add	sp, #20
   d4312:	bd30      	pop	{r4, r5, pc}
   d4314:	2003e23c 	.word	0x2003e23c
   d4318:	000d8990 	.word	0x000d8990
   d431c:	000d40d9 	.word	0x000d40d9
   d4320:	000d6389 	.word	0x000d6389
   d4324:	000d4455 	.word	0x000d4455
   d4328:	000d88b8 	.word	0x000d88b8
   d432c:	2003e53c 	.word	0x2003e53c
   d4330:	2003e260 	.word	0x2003e260

000d4334 <loop>:
        
void loop() {
   d4334:	4770      	bx	lr

000d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4336:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4338:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d433a:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d433c:	b17c      	cbz	r4, d435e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d433e:	6863      	ldr	r3, [r4, #4]
   d4340:	3b01      	subs	r3, #1
   d4342:	6063      	str	r3, [r4, #4]
   d4344:	b95b      	cbnz	r3, d435e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4346:	6823      	ldr	r3, [r4, #0]
   d4348:	4620      	mov	r0, r4
   d434a:	689b      	ldr	r3, [r3, #8]
   d434c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d434e:	68a3      	ldr	r3, [r4, #8]
   d4350:	3b01      	subs	r3, #1
   d4352:	60a3      	str	r3, [r4, #8]
   d4354:	b91b      	cbnz	r3, d435e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4356:	6823      	ldr	r3, [r4, #0]
   d4358:	4620      	mov	r0, r4
   d435a:	68db      	ldr	r3, [r3, #12]
   d435c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d435e:	4628      	mov	r0, r5
   d4360:	bd38      	pop	{r3, r4, r5, pc}
   d4362:	0000      	movs	r0, r0
   d4364:	0000      	movs	r0, r0
	...

000d4368 <_Z14Name_of_DevicePKcS0_>:
char VARIABLE_LABEL[32] = ""; // keeps the device name
bool publishName = false; // to publish the name


// used for getting the device name ***********************************************
void Name_of_Device(const char *topic, const char *data) {
   d4368:	b570      	push	{r4, r5, r6, lr}
  strncpy(dev_name, data, sizeof(dev_name)-1);
   d436a:	4e2f      	ldr	r6, [pc, #188]	; (d4428 <_Z14Name_of_DevicePKcS0_+0xc0>)
char VARIABLE_LABEL[32] = ""; // keeps the device name
bool publishName = false; // to publish the name


// used for getting the device name ***********************************************
void Name_of_Device(const char *topic, const char *data) {
   d436c:	b08a      	sub	sp, #40	; 0x28
   d436e:	4604      	mov	r4, r0
  strncpy(dev_name, data, sizeof(dev_name)-1);
   d4370:	221f      	movs	r2, #31
   d4372:	4630      	mov	r0, r6
   d4374:	f004 fa6c 	bl	d8850 <strncpy>
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
   d4378:	f002 fb98 	bl	d6aac <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d437c:	9600      	str	r6, [sp, #0]
   d437e:	4623      	mov	r3, r4
   d4380:	4a2a      	ldr	r2, [pc, #168]	; (d442c <_Z14Name_of_DevicePKcS0_+0xc4>)
  publishName = true;
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d4382:	4c2b      	ldr	r4, [pc, #172]	; (d4430 <_Z14Name_of_DevicePKcS0_+0xc8>)
   d4384:	2101      	movs	r1, #1
   d4386:	f001 fecd 	bl	d6124 <_ZN5Print11printf_implEbPKcz>

// used for getting the device name ***********************************************
void Name_of_Device(const char *topic, const char *data) {
  strncpy(dev_name, data, sizeof(dev_name)-1);
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
  publishName = true;
   d438a:	4b2a      	ldr	r3, [pc, #168]	; (d4434 <_Z14Name_of_DevicePKcS0_+0xcc>)
   d438c:	2501      	movs	r5, #1
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d438e:	4631      	mov	r1, r6
   d4390:	2220      	movs	r2, #32
   d4392:	4620      	mov	r0, r4

// used for getting the device name ***********************************************
void Name_of_Device(const char *topic, const char *data) {
  strncpy(dev_name, data, sizeof(dev_name)-1);
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
  publishName = true;
   d4394:	701d      	strb	r5, [r3, #0]
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
   d4396:	f004 fa5b 	bl	d8850 <strncpy>
  Serial.printlnf("variable label  that is copied from dev_name : %s", VARIABLE_LABEL);
   d439a:	f002 fb87 	bl	d6aac <_Z16_fetch_usbserialv>
   d439e:	4623      	mov	r3, r4
   d43a0:	4a25      	ldr	r2, [pc, #148]	; (d4438 <_Z14Name_of_DevicePKcS0_+0xd0>)
  float voltage = analogRead(BATT) * 0.0011224;
  Particle.publish("voltage", String::format("%.2f",voltage), PRIVATE);
  ubidots.add(VARIABLE_LABEL, voltage); //pair Vbatt with name of Xenon
   d43a2:	4e26      	ldr	r6, [pc, #152]	; (d443c <_Z14Name_of_DevicePKcS0_+0xd4>)
   d43a4:	4629      	mov	r1, r5
   d43a6:	f001 febd 	bl	d6124 <_ZN5Print11printf_implEbPKcz>
  strncpy(dev_name, data, sizeof(dev_name)-1);
  Serial.printlnf("received in supscribe/publish request%s: %s", topic, dev_name);
  publishName = true;
  strncpy(VARIABLE_LABEL, dev_name, sizeof(dev_name));
  Serial.printlnf("variable label  that is copied from dev_name : %s", VARIABLE_LABEL);
  float voltage = analogRead(BATT) * 0.0011224;
   d43aa:	2018      	movs	r0, #24
   d43ac:	f003 fbb2 	bl	d7b14 <analogRead>
   d43b0:	f003 fec8 	bl	d8144 <__aeabi_i2d>
   d43b4:	a31a      	add	r3, pc, #104	; (adr r3, d4420 <_Z14Name_of_DevicePKcS0_+0xb8>)
   d43b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43ba:	f003 ff29 	bl	d8210 <__aeabi_dmul>
   d43be:	f004 f939 	bl	d8634 <__aeabi_d2f>
   d43c2:	9003      	str	r0, [sp, #12]
  Particle.publish("voltage", String::format("%.2f",voltage), PRIVATE);
   d43c4:	f003 fed0 	bl	d8168 <__aeabi_f2d>
   d43c8:	4602      	mov	r2, r0
   d43ca:	460b      	mov	r3, r1
   d43cc:	a806      	add	r0, sp, #24
   d43ce:	491c      	ldr	r1, [pc, #112]	; (d4440 <_Z14Name_of_DevicePKcS0_+0xd8>)
   d43d0:	f001 faec 	bl	d59ac <_ZN6String6formatEPKcz>
   d43d4:	4b1b      	ldr	r3, [pc, #108]	; (d4444 <_Z14Name_of_DevicePKcS0_+0xdc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43d6:	9a06      	ldr	r2, [sp, #24]
   d43d8:	781b      	ldrb	r3, [r3, #0]
   d43da:	491b      	ldr	r1, [pc, #108]	; (d4448 <_Z14Name_of_DevicePKcS0_+0xe0>)
   d43dc:	f88d 3000 	strb.w	r3, [sp]
   d43e0:	a804      	add	r0, sp, #16
   d43e2:	233c      	movs	r3, #60	; 0x3c
   d43e4:	f002 f8f6 	bl	d65d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43e8:	a805      	add	r0, sp, #20
   d43ea:	f7ff ffa4 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ee:	a806      	add	r0, sp, #24
   d43f0:	f001 fa67 	bl	d58c2 <_ZN6StringD1Ev>
  ubidots.add(VARIABLE_LABEL, voltage); //pair Vbatt with name of Xenon
   d43f4:	ed9d 0a03 	vldr	s0, [sp, #12]
   d43f8:	4621      	mov	r1, r4
   d43fa:	4630      	mov	r0, r6
   d43fc:	f000 f9c6 	bl	d478c <_ZN7Ubidots3addEPcf>
  Serial.printlnf("variable label that is uploaded to ubidots :  %s", VARIABLE_LABEL);
   d4400:	f002 fb54 	bl	d6aac <_Z16_fetch_usbserialv>
   d4404:	4623      	mov	r3, r4
   d4406:	4a11      	ldr	r2, [pc, #68]	; (d444c <_Z14Name_of_DevicePKcS0_+0xe4>)
   d4408:	4629      	mov	r1, r5
   d440a:	f001 fe8b 	bl	d6124 <_ZN5Print11printf_implEbPKcz>
  ubidots.meshPublishToUbidots("Ubidots"); // webhook its publishing to on particle consol
   d440e:	4910      	ldr	r1, [pc, #64]	; (d4450 <_Z14Name_of_DevicePKcS0_+0xe8>)
   d4410:	4630      	mov	r0, r6
   d4412:	f000 f9c4 	bl	d479e <_ZN7Ubidots20meshPublishToUbidotsEPKc>
}
   d4416:	b00a      	add	sp, #40	; 0x28
   d4418:	bd70      	pop	{r4, r5, r6, pc}
   d441a:	bf00      	nop
   d441c:	f3af 8000 	nop.w
   d4420:	d2c10294 	.word	0xd2c10294
   d4424:	3f5263af 	.word	0x3f5263af
   d4428:	2003e291 	.word	0x2003e291
   d442c:	000d88c1 	.word	0x000d88c1
   d4430:	2003e270 	.word	0x2003e270
   d4434:	2003e290 	.word	0x2003e290
   d4438:	000d88ed 	.word	0x000d88ed
   d443c:	2003e260 	.word	0x2003e260
   d4440:	000d891f 	.word	0x000d891f
   d4444:	2003e259 	.word	0x2003e259
   d4448:	000d8924 	.word	0x000d8924
   d444c:	000d892c 	.word	0x000d892c
   d4450:	000d895d 	.word	0x000d895d

000d4454 <_Z14DetonateActionPKcS0_>:
            millis() - ms < msDelay;  
            Particle.process());
}

//XENON
void DetonateAction(const char *event, const char *data){
   d4454:	b530      	push	{r4, r5, lr}
   d4456:	460d      	mov	r5, r1
   d4458:	b085      	sub	sp, #20
    
   if (strcmp (data, "Boom")==0){ 
   d445a:	4925      	ldr	r1, [pc, #148]	; (d44f0 <_Z14DetonateActionPKcS0_+0x9c>)
   d445c:	4628      	mov	r0, r5
   d445e:	f004 f9ad 	bl	d87bc <strcmp>
   d4462:	4604      	mov	r4, r0
   d4464:	bb18      	cbnz	r0, d44ae <_Z14DetonateActionPKcS0_+0x5a>
      softDelay(3000);// wait 3 seconds 
   d4466:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d446a:	f7ff febb 	bl	d41e4 <_Z9softDelaym>
      digitalWrite (NCH1, HIGH);//on
   d446e:	2101      	movs	r1, #1
   d4470:	2013      	movs	r0, #19
   d4472:	f003 fb36 	bl	d7ae2 <digitalWrite>
      digitalWrite (PCH1, HIGH);//on
   d4476:	2101      	movs	r1, #1
   d4478:	2012      	movs	r0, #18
   d447a:	f003 fb32 	bl	d7ae2 <digitalWrite>
      delay(500);
   d447e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4482:	f001 fe9f 	bl	d61c4 <delay>
      digitalWrite (NCH1, LOW);//off
   d4486:	4621      	mov	r1, r4
   d4488:	2013      	movs	r0, #19
   d448a:	f003 fb2a 	bl	d7ae2 <digitalWrite>
      digitalWrite (PCH1, LOW);//off
   d448e:	4621      	mov	r1, r4
   d4490:	2012      	movs	r0, #18
   d4492:	f003 fb26 	bl	d7ae2 <digitalWrite>
      DetonateSatus=1; // shows it has detonated
   d4496:	4b17      	ldr	r3, [pc, #92]	; (d44f4 <_Z14DetonateActionPKcS0_+0xa0>)
      //Particle.publish("BOOM!",PRIVATE);
      Mesh.publish ("Detonate_ack","Boom_ack"); // publish to all subscriber to detonate
   d4498:	4917      	ldr	r1, [pc, #92]	; (d44f8 <_Z14DetonateActionPKcS0_+0xa4>)
   d449a:	4818      	ldr	r0, [pc, #96]	; (d44fc <_Z14DetonateActionPKcS0_+0xa8>)
      digitalWrite (NCH1, HIGH);//on
      digitalWrite (PCH1, HIGH);//on
      delay(500);
      digitalWrite (NCH1, LOW);//off
      digitalWrite (PCH1, LOW);//off
      DetonateSatus=1; // shows it has detonated
   d449c:	2201      	movs	r2, #1
   d449e:	701a      	strb	r2, [r3, #0]
      //Particle.publish("BOOM!",PRIVATE);
      Mesh.publish ("Detonate_ack","Boom_ack"); // publish to all subscriber to detonate
   d44a0:	4a17      	ldr	r2, [pc, #92]	; (d4500 <_Z14DetonateActionPKcS0_+0xac>)
   d44a2:	f002 fec1 	bl	d7228 <_ZN5spark11MeshPublish7publishEPKcS2_>
      softDelay(3000);
   d44a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d44aa:	f7ff fe9b 	bl	d41e4 <_Z9softDelaym>
    }
   //Serial.println (data);
    if (strcmp (data, "Boom_reset")==0){  // turn led off as well as detonator voltage
   d44ae:	4915      	ldr	r1, [pc, #84]	; (d4504 <_Z14DetonateActionPKcS0_+0xb0>)
   d44b0:	4628      	mov	r0, r5
   d44b2:	f004 f983 	bl	d87bc <strcmp>
   d44b6:	4604      	mov	r4, r0
   d44b8:	b9b8      	cbnz	r0, d44ea <_Z14DetonateActionPKcS0_+0x96>
      digitalWrite (led_red, LOW);
   d44ba:	4601      	mov	r1, r0
   d44bc:	2006      	movs	r0, #6
   d44be:	f003 fb10 	bl	d7ae2 <digitalWrite>
      DetonateSatus=1; // shows it has detonated
   d44c2:	4b0c      	ldr	r3, [pc, #48]	; (d44f4 <_Z14DetonateActionPKcS0_+0xa0>)
   d44c4:	4910      	ldr	r1, [pc, #64]	; (d4508 <_Z14DetonateActionPKcS0_+0xb4>)
   d44c6:	2201      	movs	r2, #1
   d44c8:	701a      	strb	r2, [r3, #0]
   d44ca:	4b10      	ldr	r3, [pc, #64]	; (d450c <_Z14DetonateActionPKcS0_+0xb8>)
   d44cc:	781b      	ldrb	r3, [r3, #0]
   d44ce:	f88d 3000 	strb.w	r3, [sp]
   d44d2:	4622      	mov	r2, r4
   d44d4:	233c      	movs	r3, #60	; 0x3c
   d44d6:	a802      	add	r0, sp, #8
   d44d8:	f002 f87c 	bl	d65d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d44dc:	a803      	add	r0, sp, #12
   d44de:	f7ff ff2a 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("BOOM_reset",PRIVATE);
      softDelay(2000);
   d44e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d44e6:	f7ff fe7d 	bl	d41e4 <_Z9softDelaym>
    }
} 
   d44ea:	b005      	add	sp, #20
   d44ec:	bd30      	pop	{r4, r5, pc}
   d44ee:	bf00      	nop
   d44f0:	000d8965 	.word	0x000d8965
   d44f4:	2003e258 	.word	0x2003e258
   d44f8:	000d8973 	.word	0x000d8973
   d44fc:	2003e53c 	.word	0x2003e53c
   d4500:	000d896a 	.word	0x000d896a
   d4504:	000d8980 	.word	0x000d8980
   d4508:	000d898b 	.word	0x000d898b
   d450c:	2003e259 	.word	0x2003e259

000d4510 <_Z22timerUbidotInformationv>:
        
void loop() {
  
} // end of main

void timerUbidotInformation(void){
   d4510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4512:	f000 fdcf 	bl	d50b4 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4516:	b1e8      	cbz	r0, d4554 <_Z22timerUbidotInformationv+0x44>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4518:	2400      	movs	r4, #0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d451a:	f000 fdcb 	bl	d50b4 <spark_cloud_flag_connected>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d451e:	4622      	mov	r2, r4
   d4520:	2301      	movs	r3, #1
   d4522:	490e      	ldr	r1, [pc, #56]	; (d455c <_Z22timerUbidotInformationv+0x4c>)
   d4524:	9401      	str	r4, [sp, #4]
   d4526:	9400      	str	r4, [sp, #0]
   d4528:	480d      	ldr	r0, [pc, #52]	; (d4560 <_Z22timerUbidotInformationv+0x50>)
   d452a:	f000 fddb 	bl	d50e4 <spark_subscribe>
  
  waitUntil(Particle.connected);
  Particle.subscribe("particle/device/name", Name_of_Device);
  softDelay(3000);
   d452e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4532:	f7ff fe57 	bl	d41e4 <_Z9softDelaym>
   d4536:	4b0b      	ldr	r3, [pc, #44]	; (d4564 <_Z22timerUbidotInformationv+0x54>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4538:	4909      	ldr	r1, [pc, #36]	; (d4560 <_Z22timerUbidotInformationv+0x50>)
   d453a:	781b      	ldrb	r3, [r3, #0]
   d453c:	f88d 3000 	strb.w	r3, [sp]
   d4540:	4622      	mov	r2, r4
   d4542:	233c      	movs	r3, #60	; 0x3c
   d4544:	a802      	add	r0, sp, #8
   d4546:	f002 f845 	bl	d65d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d454a:	a803      	add	r0, sp, #12
   d454c:	f7ff fef3 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("particle/device/name");  // ask the cloud for the name to be sent to you

   d4550:	b004      	add	sp, #16
   d4552:	bd10      	pop	{r4, pc}
            spark_process();
   d4554:	f000 fda6 	bl	d50a4 <spark_process>
   d4558:	e7db      	b.n	d4512 <_Z22timerUbidotInformationv+0x2>
   d455a:	bf00      	nop
   d455c:	000d4369 	.word	0x000d4369
   d4560:	000d8996 	.word	0x000d8996
   d4564:	2003e2b1 	.word	0x2003e2b1

000d4568 <_GLOBAL__sub_I_buttonLOAD>:
   d4568:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d456a:	4b3a      	ldr	r3, [pc, #232]	; (d4654 <_GLOBAL__sub_I_buttonLOAD+0xec>)
   d456c:	2400      	movs	r4, #0
   d456e:	701c      	strb	r4, [r3, #0]
   d4570:	4b39      	ldr	r3, [pc, #228]	; (d4658 <_GLOBAL__sub_I_buttonLOAD+0xf0>)
   d4572:	b088      	sub	sp, #32
   d4574:	2501      	movs	r5, #1
   d4576:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4578:	f000 fa9a 	bl	d4ab0 <HAL_Pin_Map>
   d457c:	f000 fb18 	bl	d4bb0 <HAL_Timer_Get_Milli_Seconds>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4580:	4b36      	ldr	r3, [pc, #216]	; (d465c <_GLOBAL__sub_I_buttonLOAD+0xf4>)
   d4582:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4586:	809a      	strh	r2, [r3, #4]
   d4588:	701c      	strb	r4, [r3, #0]
   d458a:	805c      	strh	r4, [r3, #2]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d458c:	4628      	mov	r0, r5
   d458e:	f000 fceb 	bl	d4f68 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);

// Ubidots *******************************************************************
//Ubidots ubidots(UBIDOTS_TOKEN, UBI_INDUSTRIAL, UBI_MESH);
const char* WEBHOOK_NAME = "Ubidots";
Ubidots ubidots("webhook", UBI_PARTICLE); //  =================check this
   d4592:	2203      	movs	r2, #3
   d4594:	4932      	ldr	r1, [pc, #200]	; (d4660 <_GLOBAL__sub_I_buttonLOAD+0xf8>)
   d4596:	4833      	ldr	r0, [pc, #204]	; (d4664 <_GLOBAL__sub_I_buttonLOAD+0xfc>)
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4598:	4d33      	ldr	r5, [pc, #204]	; (d4668 <_GLOBAL__sub_I_buttonLOAD+0x100>)
   d459a:	f000 f8d5 	bl	d4748 <_ZN7UbidotsC1EPc11IotProtocol>
   d459e:	4a33      	ldr	r2, [pc, #204]	; (d466c <_GLOBAL__sub_I_buttonLOAD+0x104>)
   d45a0:	4933      	ldr	r1, [pc, #204]	; (d4670 <_GLOBAL__sub_I_buttonLOAD+0x108>)
   d45a2:	4830      	ldr	r0, [pc, #192]	; (d4664 <_GLOBAL__sub_I_buttonLOAD+0xfc>)
   d45a4:	f003 fb10 	bl	d7bc8 <__aeabi_atexit>

//ubidots wigets variables
float value = analogRead(A0); // variable
   d45a8:	2013      	movs	r0, #19
   d45aa:	f003 fab3 	bl	d7b14 <analogRead>
   d45ae:	ee07 0a90 	vmov	s15, r0
   d45b2:	4b30      	ldr	r3, [pc, #192]	; (d4674 <_GLOBAL__sub_I_buttonLOAD+0x10c>)
   d45b4:	712c      	strb	r4, [r5, #4]
   d45b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d45ba:	ae04      	add	r6, sp, #16
   d45bc:	edc3 7a00 	vstr	s15, [r3]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d45c0:	4b2d      	ldr	r3, [pc, #180]	; (d4678 <_GLOBAL__sub_I_buttonLOAD+0x110>)
   d45c2:	9304      	str	r3, [sp, #16]
   d45c4:	e896 0003 	ldmia.w	r6, {r0, r1}
   d45c8:	4b2c      	ldr	r3, [pc, #176]	; (d467c <_GLOBAL__sub_I_buttonLOAD+0x114>)
   d45ca:	602b      	str	r3, [r5, #0]
   d45cc:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d45ce:	f105 030c 	add.w	r3, r5, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d45d2:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d45d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d45da:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d45de:	e892 0003 	ldmia.w	r2, {r0, r1}
   d45e2:	e883 0003 	stmia.w	r3, {r0, r1}
   d45e6:	4b26      	ldr	r3, [pc, #152]	; (d4680 <_GLOBAL__sub_I_buttonLOAD+0x118>)
   d45e8:	616b      	str	r3, [r5, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d45ea:	69ab      	ldr	r3, [r5, #24]
   d45ec:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d45ee:	4b25      	ldr	r3, [pc, #148]	; (d4684 <_GLOBAL__sub_I_buttonLOAD+0x11c>)
   d45f0:	61ab      	str	r3, [r5, #24]
   d45f2:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d45f4:	462b      	mov	r3, r5
   d45f6:	4a24      	ldr	r2, [pc, #144]	; (d4688 <_GLOBAL__sub_I_buttonLOAD+0x120>)
   d45f8:	4924      	ldr	r1, [pc, #144]	; (d468c <_GLOBAL__sub_I_buttonLOAD+0x124>)
   d45fa:	9401      	str	r4, [sp, #4]
   d45fc:	f105 0008 	add.w	r0, r5, #8
   d4600:	9400      	str	r4, [sp, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4602:	9406      	str	r4, [sp, #24]
   d4604:	f000 fb30 	bl	d4c68 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4608:	4630      	mov	r0, r6
   d460a:	f7ff fd97 	bl	d413c <_ZNSt14_Function_baseD1Ev>
float EM_BEACON1_BATT = 0 ;
float EM_BEACON2_BATT = 0;
Timer timer(3600000, timerUbidotInformation);// 5min timer to send info to ubidots
   d460e:	4628      	mov	r0, r5
   d4610:	4a16      	ldr	r2, [pc, #88]	; (d466c <_GLOBAL__sub_I_buttonLOAD+0x104>)
   d4612:	491f      	ldr	r1, [pc, #124]	; (d4690 <_GLOBAL__sub_I_buttonLOAD+0x128>)
//*******************************************************************
//BLE 
#define SCAN_RESULT_COUNT 30
BleScanResult results[SCAN_RESULT_COUNT];
   d4614:	4e1f      	ldr	r6, [pc, #124]	; (d4694 <_GLOBAL__sub_I_buttonLOAD+0x12c>)

//ubidots wigets variables
float value = analogRead(A0); // variable
float EM_BEACON1_BATT = 0 ;
float EM_BEACON2_BATT = 0;
Timer timer(3600000, timerUbidotInformation);// 5min timer to send info to ubidots
   d4616:	f003 fad7 	bl	d7bc8 <__aeabi_atexit>
//*******************************************************************
//BLE 
#define SCAN_RESULT_COUNT 30
BleScanResult results[SCAN_RESULT_COUNT];
   d461a:	f640 15d8 	movw	r5, #2520	; 0x9d8
   d461e:	1930      	adds	r0, r6, r4
   d4620:	3454      	adds	r4, #84	; 0x54
   d4622:	f7ff fdd1 	bl	d41c8 <_ZN8particle13BleScanResultC1Ev>
   d4626:	42ac      	cmp	r4, r5
   d4628:	d1f9      	bne.n	d461e <_GLOBAL__sub_I_buttonLOAD+0xb6>
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d462a:	4e1b      	ldr	r6, [pc, #108]	; (d4698 <_GLOBAL__sub_I_buttonLOAD+0x130>)
float EM_BEACON2_BATT = 0;
Timer timer(3600000, timerUbidotInformation);// 5min timer to send info to ubidots
//*******************************************************************
//BLE 
#define SCAN_RESULT_COUNT 30
BleScanResult results[SCAN_RESULT_COUNT];
   d462c:	2400      	movs	r4, #0
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d462e:	f640 15d8 	movw	r5, #2520	; 0x9d8
   d4632:	1930      	adds	r0, r6, r4
   d4634:	3454      	adds	r4, #84	; 0x54
   d4636:	f7ff fdc7 	bl	d41c8 <_ZN8particle13BleScanResultC1Ev>
   d463a:	42ac      	cmp	r4, r5
   d463c:	d1f9      	bne.n	d4632 <_GLOBAL__sub_I_buttonLOAD+0xca>
   d463e:	f000 fab7 	bl	d4bb0 <HAL_Timer_Get_Milli_Seconds>

//*******************************************************************
//setup remote cloud reset
#define DELAY_BEFORE_REBOOT 2000
unsigned int rebootDelayMillis = DELAY_BEFORE_REBOOT;
unsigned long rebootSync = millis();
   d4642:	4b16      	ldr	r3, [pc, #88]	; (d469c <_GLOBAL__sub_I_buttonLOAD+0x134>)
/********************************************************************************************
*********************************************************************************************
*********************************************************************************************/
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
   d4644:	2100      	movs	r1, #0

//*******************************************************************
//setup remote cloud reset
#define DELAY_BEFORE_REBOOT 2000
unsigned int rebootDelayMillis = DELAY_BEFORE_REBOOT;
unsigned long rebootSync = millis();
   d4646:	6018      	str	r0, [r3, #0]
/********************************************************************************************
*********************************************************************************************
*********************************************************************************************/
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
   d4648:	2001      	movs	r0, #1
   d464a:	f000 fc9d 	bl	d4f88 <system_thread_set_state>
  waitUntil(Particle.connected);
  Particle.subscribe("particle/device/name", Name_of_Device);
  softDelay(3000);
  Particle.publish("particle/device/name");  // ask the cloud for the name to be sent to you

   d464e:	b008      	add	sp, #32
   d4650:	bd70      	pop	{r4, r5, r6, pc}
   d4652:	bf00      	nop
   d4654:	2003e2b1 	.word	0x2003e2b1
   d4658:	2003e259 	.word	0x2003e259
   d465c:	2003e230 	.word	0x2003e230
   d4660:	000d89ab 	.word	0x000d89ab
   d4664:	2003e260 	.word	0x2003e260
   d4668:	2003e23c 	.word	0x2003e23c
   d466c:	2003ce7c 	.word	0x2003ce7c
   d4670:	000d4765 	.word	0x000d4765
   d4674:	2003e238 	.word	0x2003e238
   d4678:	000d4511 	.word	0x000d4511
   d467c:	000d88ac 	.word	0x000d88ac
   d4680:	000d40bf 	.word	0x000d40bf
   d4684:	000d40bb 	.word	0x000d40bb
   d4688:	000d4101 	.word	0x000d4101
   d468c:	0036ee80 	.word	0x0036ee80
   d4690:	000d416d 	.word	0x000d416d
   d4694:	2003d858 	.word	0x2003d858
   d4698:	2003ce80 	.word	0x2003ce80
   d469c:	2003e25c 	.word	0x2003e25c

000d46a0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d46a0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d46a2:	6984      	ldr	r4, [r0, #24]
   d46a4:	4b0a      	ldr	r3, [pc, #40]	; (d46d0 <_ZN9TCPClientD1Ev+0x30>)
   d46a6:	6003      	str	r3, [r0, #0]
   d46a8:	4605      	mov	r5, r0
   d46aa:	b17c      	cbz	r4, d46cc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d46ac:	6863      	ldr	r3, [r4, #4]
   d46ae:	3b01      	subs	r3, #1
   d46b0:	6063      	str	r3, [r4, #4]
   d46b2:	b95b      	cbnz	r3, d46cc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d46b4:	6823      	ldr	r3, [r4, #0]
   d46b6:	4620      	mov	r0, r4
   d46b8:	689b      	ldr	r3, [r3, #8]
   d46ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46bc:	68a3      	ldr	r3, [r4, #8]
   d46be:	3b01      	subs	r3, #1
   d46c0:	60a3      	str	r3, [r4, #8]
   d46c2:	b91b      	cbnz	r3, d46cc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d46c4:	6823      	ldr	r3, [r4, #0]
   d46c6:	4620      	mov	r0, r4
   d46c8:	68db      	ldr	r3, [r3, #12]
   d46ca:	4798      	blx	r3
   d46cc:	4628      	mov	r0, r5
   d46ce:	bd38      	pop	{r3, r4, r5, pc}
   d46d0:	000d9114 	.word	0x000d9114

000d46d4 <_ZN9TCPClientD0Ev>:
   d46d4:	b510      	push	{r4, lr}
   d46d6:	4604      	mov	r4, r0
   d46d8:	f7ff ffe2 	bl	d46a0 <_ZN9TCPClientD1Ev>
   d46dc:	4620      	mov	r0, r4
   d46de:	211c      	movs	r1, #28
   d46e0:	f003 fa80 	bl	d7be4 <_ZdlPvj>
   d46e4:	4620      	mov	r0, r4
   d46e6:	bd10      	pop	{r4, pc}

000d46e8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d46e8:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d46ea:	4c06      	ldr	r4, [pc, #24]	; (d4704 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d46ec:	f000 f9e0 	bl	d4ab0 <HAL_Pin_Map>
   d46f0:	4620      	mov	r0, r4
   d46f2:	f003 f8ff 	bl	d78f4 <_ZN9TCPClientC1Ev>
   d46f6:	4620      	mov	r0, r4
   d46f8:	4a03      	ldr	r2, [pc, #12]	; (d4708 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d46fa:	4904      	ldr	r1, [pc, #16]	; (d470c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
   d46fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4700:	f003 ba62 	b.w	d7bc8 <__aeabi_atexit>
   d4704:	2003e2b4 	.word	0x2003e2b4
   d4708:	2003ce7c 	.word	0x2003ce7c
   d470c:	000d46a1 	.word	0x000d46a1

000d4710 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
   d4710:	4b02      	ldr	r3, [pc, #8]	; (d471c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
   d4712:	2200      	movs	r2, #0
   d4714:	701a      	strb	r2, [r3, #0]
   d4716:	f000 b9cb 	b.w	d4ab0 <HAL_Pin_Map>
   d471a:	bf00      	nop
   d471c:	2003e2d0 	.word	0x2003e2d0

000d4720 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d4720:	b570      	push	{r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d4722:	7303      	strb	r3, [r0, #12]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d4724:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d4726:	2050      	movs	r0, #80	; 0x50

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d4728:	460e      	mov	r6, r1
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d472a:	f000 fcf3 	bl	d5114 <malloc>
   d472e:	60a0      	str	r0, [r4, #8]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d4730:	f44f 7082 	mov.w	r0, #260	; 0x104
   d4734:	f7ff fcb1 	bl	d409a <_Znwj>
   d4738:	4605      	mov	r5, r0
   d473a:	b110      	cbz	r0, d4742 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x22>
   d473c:	4631      	mov	r1, r6
   d473e:	f000 f89e 	bl	d487e <_ZN7UbiMeshC1EPc>
   d4742:	6025      	str	r5, [r4, #0]
   d4744:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4748 <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
   d4748:	b510      	push	{r4, lr}
   d474a:	2300      	movs	r3, #0
   d474c:	4604      	mov	r4, r0
   d474e:	7343      	strb	r3, [r0, #13]
   d4750:	7383      	strb	r3, [r0, #14]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
   d4752:	4613      	mov	r3, r2
   d4754:	4a02      	ldr	r2, [pc, #8]	; (d4760 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d4756:	f7ff ffe3 	bl	d4720 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
   d475a:	4620      	mov	r0, r4
   d475c:	bd10      	pop	{r4, pc}
   d475e:	bf00      	nop
   d4760:	000d89be 	.word	0x000d89be

000d4764 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d4764:	b538      	push	{r3, r4, r5, lr}
   d4766:	4604      	mov	r4, r0
  free(_context);
   d4768:	6880      	ldr	r0, [r0, #8]
   d476a:	f000 fcdb 	bl	d5124 <free>
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  delete _protocolMesh;
   d476e:	6825      	ldr	r5, [r4, #0]
   d4770:	b13d      	cbz	r5, d4782 <_ZN7UbidotsD1Ev+0x1e>
   d4772:	4628      	mov	r0, r5
   d4774:	f000 f896 	bl	d48a4 <_ZN7UbiMeshD1Ev>
   d4778:	f44f 7182 	mov.w	r1, #260	; 0x104
   d477c:	4628      	mov	r0, r5
   d477e:	f003 fa31 	bl	d7be4 <_ZdlPvj>
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
#endif
}
   d4782:	4620      	mov	r0, r4
   d4784:	bd38      	pop	{r3, r4, r5, pc}

000d4786 <_ZN7Ubidots3addEPcfS0_mj>:
        "Ubidots constructor");
  }
// Xenon only supports Mesh cloud protocol
#elif PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
   d4786:	6800      	ldr	r0, [r0, #0]
   d4788:	f000 b894 	b.w	d48b4 <_ZN7UbiMesh3addEPKcfS1_mj>

000d478c <_ZN7Ubidots3addEPcf>:
 * datalogger. Default NULL
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void Ubidots::add(char* variable_label, float value) {
   d478c:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
   d478e:	2300      	movs	r3, #0
   d4790:	9300      	str	r3, [sp, #0]
   d4792:	461a      	mov	r2, r3
   d4794:	f7ff fff7 	bl	d4786 <_ZN7Ubidots3addEPcfS0_mj>
}
   d4798:	b003      	add	sp, #12
   d479a:	f85d fb04 	ldr.w	pc, [sp], #4

000d479e <_ZN7Ubidots20meshPublishToUbidotsEPKc>:
}

bool Ubidots::meshPublishToUbidots(const char* device_label) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  return _protocolMesh->meshPublishToUbidots(device_label);
   d479e:	6800      	ldr	r0, [r0, #0]
   d47a0:	f000 b94e 	b.w	d4a40 <_ZN7UbiMesh20meshPublishToUbidotsEPKc>

000d47a4 <_ZN7Ubidots8setDebugEb>:
  return ERROR_VALUE;
#endif
}

void Ubidots::setDebug(bool debug) {
  _debug = debug;
   d47a4:	7381      	strb	r1, [r0, #14]
#elif PLATFORM_ID == PLATFORM_PHOTON_DEV ||      \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION || \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  _cloudProtocol->setDebug(debug);
#elif PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  _protocolMesh->setDebug(debug);
   d47a6:	6800      	ldr	r0, [r0, #0]
   d47a8:	f000 b94e 	b.w	d4a48 <_ZN7UbiMesh8setDebugEb>

000d47ac <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
      }
    }
  }
   d47ac:	b508      	push	{r3, lr}
   d47ae:	f000 f97f 	bl	d4ab0 <HAL_Pin_Map>
   d47b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d47b6:	f000 b9fb 	b.w	d4bb0 <HAL_Timer_Get_Milli_Seconds>
	...

000d47bc <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d47bc:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d47be:	4c06      	ldr	r4, [pc, #24]	; (d47d8 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d47c0:	f000 f976 	bl	d4ab0 <HAL_Pin_Map>
   d47c4:	4620      	mov	r0, r4
   d47c6:	f003 f895 	bl	d78f4 <_ZN9TCPClientC1Ev>
   d47ca:	4620      	mov	r0, r4
   d47cc:	4a03      	ldr	r2, [pc, #12]	; (d47dc <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d47ce:	4904      	ldr	r1, [pc, #16]	; (d47e0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
   d47d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d47d4:	f003 b9f8 	b.w	d7bc8 <__aeabi_atexit>
   d47d8:	2003e2d4 	.word	0x2003e2d4
   d47dc:	2003ce7c 	.word	0x2003ce7c
   d47e0:	000d46a1 	.word	0x000d46a1

000d47e4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d47e4:	b510      	push	{r4, lr}
   d47e6:	4b06      	ldr	r3, [pc, #24]	; (d4800 <_ZN3UDPD1Ev+0x1c>)
   d47e8:	6003      	str	r3, [r0, #0]
   d47ea:	3364      	adds	r3, #100	; 0x64
   d47ec:	4604      	mov	r4, r0
   d47ee:	6103      	str	r3, [r0, #16]
   d47f0:	f000 fdd1 	bl	d5396 <_ZN3UDP4stopEv>
   d47f4:	4620      	mov	r0, r4
   d47f6:	f000 fff7 	bl	d57e8 <_ZN3UDP13releaseBufferEv>
   d47fa:	4620      	mov	r0, r4
   d47fc:	bd10      	pop	{r4, pc}
   d47fe:	bf00      	nop
   d4800:	000d8ca8 	.word	0x000d8ca8

000d4804 <_ZN3UDPD0Ev>:
   d4804:	b510      	push	{r4, lr}
   d4806:	4604      	mov	r4, r0
   d4808:	f7ff ffec 	bl	d47e4 <_ZN3UDPD1Ev>
   d480c:	4620      	mov	r0, r4
   d480e:	214c      	movs	r1, #76	; 0x4c
   d4810:	f003 f9e8 	bl	d7be4 <_ZdlPvj>
   d4814:	4620      	mov	r0, r4
   d4816:	bd10      	pop	{r4, pc}

000d4818 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
   d4818:	b570      	push	{r4, r5, r6, lr}
   d481a:	4d10      	ldr	r5, [pc, #64]	; (d485c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d481c:	4c10      	ldr	r4, [pc, #64]	; (d4860 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d481e:	4e11      	ldr	r6, [pc, #68]	; (d4864 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d4820:	f000 f946 	bl	d4ab0 <HAL_Pin_Map>
   d4824:	4628      	mov	r0, r5
   d4826:	f003 f865 	bl	d78f4 <_ZN9TCPClientC1Ev>
   d482a:	4628      	mov	r0, r5
   d482c:	4d0e      	ldr	r5, [pc, #56]	; (d4868 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d482e:	4622      	mov	r2, r4
   d4830:	4631      	mov	r1, r6
   d4832:	f003 f9c9 	bl	d7bc8 <__aeabi_atexit>
   d4836:	4628      	mov	r0, r5
   d4838:	f003 f85c 	bl	d78f4 <_ZN9TCPClientC1Ev>
   d483c:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d483e:	4d0b      	ldr	r5, [pc, #44]	; (d486c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
   d4840:	4622      	mov	r2, r4
   d4842:	4631      	mov	r1, r6
   d4844:	f003 f9c0 	bl	d7bc8 <__aeabi_atexit>
   d4848:	4628      	mov	r0, r5
   d484a:	f000 ffaf 	bl	d57ac <_ZN3UDPC1Ev>
   d484e:	4622      	mov	r2, r4
   d4850:	4628      	mov	r0, r5
   d4852:	4907      	ldr	r1, [pc, #28]	; (d4870 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
   d4854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4858:	f003 b9b6 	b.w	d7bc8 <__aeabi_atexit>
   d485c:	2003e30c 	.word	0x2003e30c
   d4860:	2003ce7c 	.word	0x2003ce7c
   d4864:	000d46a1 	.word	0x000d46a1
   d4868:	2003e2f0 	.word	0x2003e2f0
   d486c:	2003e328 	.word	0x2003e328
   d4870:	000d47e5 	.word	0x000d47e5

000d4874 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4874:	2200      	movs	r2, #0
   d4876:	4611      	mov	r1, r2
   d4878:	6840      	ldr	r0, [r0, #4]
   d487a:	f000 bbd3 	b.w	d5024 <network_ready>

000d487e <_ZN7UbiMeshC1EPc>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d487e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4880:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4882:	4668      	mov	r0, sp
   d4884:	f000 fc1e 	bl	d50c4 <spark_deviceID>
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d4888:	9802      	ldr	r0, [sp, #8]
   d488a:	3001      	adds	r0, #1
   d488c:	f7ff fc07 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d4890:	9900      	ldr	r1, [sp, #0]
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d4892:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d4894:	f003 ff9c 	bl	d87d0 <strcpy>
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
   d4898:	4668      	mov	r0, sp
   d489a:	f001 f812 	bl	d58c2 <_ZN6StringD1Ev>
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
};
   d489e:	4620      	mov	r0, r4
   d48a0:	b004      	add	sp, #16
   d48a2:	bd10      	pop	{r4, pc}

000d48a4 <_ZN7UbiMeshD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

UbiMesh::~UbiMesh() { delete[] _default_device_label; }
   d48a4:	b510      	push	{r4, lr}
   d48a6:	4604      	mov	r4, r0
   d48a8:	6800      	ldr	r0, [r0, #0]
   d48aa:	b108      	cbz	r0, d48b0 <_ZN7UbiMeshD1Ev+0xc>
   d48ac:	f7ff fbfb 	bl	d40a6 <_ZdaPv>
   d48b0:	4620      	mov	r0, r4
   d48b2:	bd10      	pop	{r4, pc}

000d48b4 <_ZN7UbiMesh3addEPKcfS1_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void UbiMesh::add(const char* variable_label, float value, const char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d48b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d48b8:	b0a4      	sub	sp, #144	; 0x90
   d48ba:	4606      	mov	r6, r0
   d48bc:	4689      	mov	r9, r1
   d48be:	ee10 aa10 	vmov	sl, s0
   d48c2:	461f      	mov	r7, r3
   d48c4:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
  char _context[100];
  char _dot_timestamp_seconds[11];
  char _dot_timestamp_millis[4];

  if (context != NULL && strlen(context) > 100) {
   d48c8:	4615      	mov	r5, r2
   d48ca:	ac0b      	add	r4, sp, #44	; 0x2c
   d48cc:	b152      	cbz	r2, d48e4 <_ZN7UbiMesh3addEPKcfS1_mj+0x30>
   d48ce:	4610      	mov	r0, r2
   d48d0:	f003 ffa1 	bl	d8816 <strlen>
   d48d4:	2864      	cmp	r0, #100	; 0x64
   d48d6:	d907      	bls.n	d48e8 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
    Serial.println("[WARNING] Your Mesh context length must be lower than 100");
   d48d8:	f002 f8e8 	bl	d6aac <_Z16_fetch_usbserialv>
   d48dc:	491a      	ldr	r1, [pc, #104]	; (d4948 <_ZN7UbiMesh3addEPKcfS1_mj+0x94>)
   d48de:	f001 fbe8 	bl	d60b2 <_ZN5Print7printlnEPKc>
   d48e2:	e001      	b.n	d48e8 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
  }

  context != NULL ? sprintf(_context, "%s", context)
                  : sprintf(_context, "%s", " ");
   d48e4:	4919      	ldr	r1, [pc, #100]	; (d494c <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d48e6:	e000      	b.n	d48ea <_ZN7UbiMesh3addEPKcfS1_mj+0x36>
   d48e8:	4629      	mov	r1, r5
   d48ea:	4620      	mov	r0, r4
   d48ec:	f003 ff70 	bl	d87d0 <strcpy>
   d48f0:	ad08      	add	r5, sp, #32

  dot_timestamp_seconds != NULL
      ? sprintf(_dot_timestamp_seconds, "%lu", dot_timestamp_seconds)
      : sprintf(_dot_timestamp_seconds, "%s", " ");
   d48f2:	b12f      	cbz	r7, d4900 <_ZN7UbiMesh3addEPKcfS1_mj+0x4c>
   d48f4:	463a      	mov	r2, r7
   d48f6:	4916      	ldr	r1, [pc, #88]	; (d4950 <_ZN7UbiMesh3addEPKcfS1_mj+0x9c>)
   d48f8:	4628      	mov	r0, r5
   d48fa:	f000 fc23 	bl	d5144 <sprintf>
   d48fe:	e003      	b.n	d4908 <_ZN7UbiMesh3addEPKcfS1_mj+0x54>
   d4900:	4912      	ldr	r1, [pc, #72]	; (d494c <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d4902:	4628      	mov	r0, r5
   d4904:	f003 ff64 	bl	d87d0 <strcpy>
   d4908:	af07      	add	r7, sp, #28

  dot_timestamp_millis != NULL
      ? sprintf(_dot_timestamp_millis, "%d", dot_timestamp_millis)
      : sprintf(_dot_timestamp_millis, "%s", " ");
   d490a:	f1b8 0f00 	cmp.w	r8, #0
   d490e:	d005      	beq.n	d491c <_ZN7UbiMesh3addEPKcfS1_mj+0x68>
   d4910:	4642      	mov	r2, r8
   d4912:	4910      	ldr	r1, [pc, #64]	; (d4954 <_ZN7UbiMesh3addEPKcfS1_mj+0xa0>)
   d4914:	4638      	mov	r0, r7
   d4916:	f000 fc15 	bl	d5144 <sprintf>
   d491a:	e003      	b.n	d4924 <_ZN7UbiMesh3addEPKcfS1_mj+0x70>
   d491c:	490b      	ldr	r1, [pc, #44]	; (d494c <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d491e:	4638      	mov	r0, r7
   d4920:	f003 ff56 	bl	d87d0 <strcpy>

  sprintf(_meshPayload, "%s|%f|%s|%s|%s", variable_label, value, _context,
          _dot_timestamp_seconds, _dot_timestamp_millis);
   d4924:	4650      	mov	r0, sl
   d4926:	9704      	str	r7, [sp, #16]
   d4928:	9503      	str	r5, [sp, #12]
   d492a:	9402      	str	r4, [sp, #8]
   d492c:	f003 fc1c 	bl	d8168 <__aeabi_f2d>
   d4930:	3604      	adds	r6, #4
   d4932:	e9cd 0100 	strd	r0, r1, [sp]
   d4936:	464a      	mov	r2, r9
   d4938:	4907      	ldr	r1, [pc, #28]	; (d4958 <_ZN7UbiMesh3addEPKcfS1_mj+0xa4>)
   d493a:	4630      	mov	r0, r6
   d493c:	f000 fc02 	bl	d5144 <sprintf>
}
   d4940:	b024      	add	sp, #144	; 0x90
   d4942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4946:	bf00      	nop
   d4948:	000d8b29 	.word	0x000d8b29
   d494c:	000d8f4e 	.word	0x000d8f4e
   d4950:	000d8b63 	.word	0x000d8b63
   d4954:	000d9165 	.word	0x000d9165
   d4958:	000d8b67 	.word	0x000d8b67

000d495c <_ZN7UbiMesh14_MeshReconnectEi>:

/*
  Checks Mesh network connection status
*/

bool UbiMesh::_MeshReconnect(int timeout) {
   d495c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  int _timeout = 0;

  // Waits up to the set timeout to begin a socket exchange
  while (!Mesh.ready() && _timeout < 5000) {
   d495e:	4d11      	ldr	r5, [pc, #68]	; (d49a4 <_ZN7UbiMesh14_MeshReconnectEi+0x48>)

/*
  Checks Mesh network connection status
*/

bool UbiMesh::_MeshReconnect(int timeout) {
   d4960:	f241 3489 	movw	r4, #5001	; 0x1389
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  int _timeout = 0;

  // Waits up to the set timeout to begin a socket exchange
  while (!Mesh.ready() && _timeout < 5000) {
   d4964:	480f      	ldr	r0, [pc, #60]	; (d49a4 <_ZN7UbiMesh14_MeshReconnectEi+0x48>)
   d4966:	f7ff ff85 	bl	d4874 <_ZN5spark9MeshClass5readyEv>
   d496a:	4603      	mov	r3, r0
   d496c:	b950      	cbnz	r0, d4984 <_ZN7UbiMesh14_MeshReconnectEi+0x28>
   d496e:	3c01      	subs	r4, #1
   d4970:	d008      	beq.n	d4984 <_ZN7UbiMesh14_MeshReconnectEi+0x28>
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4972:	4602      	mov	r2, r0
   d4974:	4601      	mov	r1, r0
   d4976:	6868      	ldr	r0, [r5, #4]
   d4978:	f000 fb3c 	bl	d4ff4 <network_connect>
    Mesh.connect();
    _timeout++;
    delay(1);
   d497c:	2001      	movs	r0, #1
   d497e:	f001 fc21 	bl	d61c4 <delay>
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  int _timeout = 0;

  // Waits up to the set timeout to begin a socket exchange
  while (!Mesh.ready() && _timeout < 5000) {
   d4982:	e7ef      	b.n	d4964 <_ZN7UbiMesh14_MeshReconnectEi+0x8>
    Mesh.connect();
    _timeout++;
    delay(1);
  }

  if (!Mesh.ready()) {
   d4984:	4807      	ldr	r0, [pc, #28]	; (d49a4 <_ZN7UbiMesh14_MeshReconnectEi+0x48>)
   d4986:	f7ff ff75 	bl	d4874 <_ZN5spark9MeshClass5readyEv>
   d498a:	4604      	mov	r4, r0
   d498c:	b938      	cbnz	r0, d499e <_ZN7UbiMesh14_MeshReconnectEi+0x42>
    if (_debugMesh) {
   d498e:	4b06      	ldr	r3, [pc, #24]	; (d49a8 <_ZN7UbiMesh14_MeshReconnectEi+0x4c>)
   d4990:	781b      	ldrb	r3, [r3, #0]
   d4992:	b123      	cbz	r3, d499e <_ZN7UbiMesh14_MeshReconnectEi+0x42>
      Serial.println(
   d4994:	f002 f88a 	bl	d6aac <_Z16_fetch_usbserialv>
          "A problem has raised with the device trying to open a Mesh"
          "socket");
   d4998:	4904      	ldr	r1, [pc, #16]	; (d49ac <_ZN7UbiMesh14_MeshReconnectEi+0x50>)
   d499a:	f001 fb8a 	bl	d60b2 <_ZN5Print7printlnEPKc>

  return true;
#else
  return false;
#endif
}
   d499e:	4620      	mov	r0, r4
   d49a0:	bd38      	pop	{r3, r4, r5, pc}
   d49a2:	bf00      	nop
   d49a4:	2003e534 	.word	0x2003e534
   d49a8:	2003e374 	.word	0x2003e374
   d49ac:	000d8bc4 	.word	0x000d8bc4

000d49b0 <_ZN7UbiMesh11meshPublishEPKcS1_i>:

bool UbiMesh::meshPublish(const char* channel, const char* data) {
  return meshPublish(channel, data, 5000);
}

bool UbiMesh::meshPublish(const char* channel, const char* data, int timeout) {
   d49b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49b2:	4606      	mov	r6, r0
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (!Mesh.ready()) {
   d49b4:	480b      	ldr	r0, [pc, #44]	; (d49e4 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x34>)

bool UbiMesh::meshPublish(const char* channel, const char* data) {
  return meshPublish(channel, data, 5000);
}

bool UbiMesh::meshPublish(const char* channel, const char* data, int timeout) {
   d49b6:	460c      	mov	r4, r1
   d49b8:	4615      	mov	r5, r2
   d49ba:	461f      	mov	r7, r3
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (!Mesh.ready()) {
   d49bc:	f7ff ff5a 	bl	d4874 <_ZN5spark9MeshClass5readyEv>
   d49c0:	b918      	cbnz	r0, d49ca <_ZN7UbiMesh11meshPublishEPKcS1_i+0x1a>
    _MeshReconnect(timeout);
   d49c2:	4639      	mov	r1, r7
   d49c4:	4630      	mov	r0, r6
   d49c6:	f7ff ffc9 	bl	d495c <_ZN7UbiMesh14_MeshReconnectEi>
  }
  if (!Mesh.ready()) {
   d49ca:	4806      	ldr	r0, [pc, #24]	; (d49e4 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x34>)
   d49cc:	f7ff ff52 	bl	d4874 <_ZN5spark9MeshClass5readyEv>
   d49d0:	b138      	cbz	r0, d49e2 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x32>
    return false;
  }

  bool result = Mesh.publish(channel, data);
   d49d2:	462a      	mov	r2, r5
   d49d4:	4621      	mov	r1, r4
   d49d6:	4804      	ldr	r0, [pc, #16]	; (d49e8 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x38>)
   d49d8:	f002 fc26 	bl	d7228 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d49dc:	3000      	adds	r0, #0
   d49de:	bf18      	it	ne
   d49e0:	2001      	movne	r0, #1
  return result;
#else
  return false;
#endif
}
   d49e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d49e4:	2003e534 	.word	0x2003e534
   d49e8:	2003e53c 	.word	0x2003e53c

000d49ec <_ZN7UbiMesh11meshPublishEPKcS1_>:
/**************************************************************************
 * Mesh handler functions
 ***************************************************************************/

bool UbiMesh::meshPublish(const char* channel, const char* data) {
  return meshPublish(channel, data, 5000);
   d49ec:	f241 3388 	movw	r3, #5000	; 0x1388
   d49f0:	f7ff bfde 	b.w	d49b0 <_ZN7UbiMesh11meshPublishEPKcS1_i>

000d49f4 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_>:
bool UbiMesh::meshPublishToUbidots(const char* device_label) {
  return meshPublishToUbidots(device_label, device_label);
}

bool UbiMesh::meshPublishToUbidots(const char* device_label,
                                   const char* device_name) {
   d49f4:	b530      	push	{r4, r5, lr}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (strlen(_meshPayload) <= 0) {
   d49f6:	7905      	ldrb	r5, [r0, #4]
bool UbiMesh::meshPublishToUbidots(const char* device_label) {
  return meshPublishToUbidots(device_label, device_label);
}

bool UbiMesh::meshPublishToUbidots(const char* device_label,
                                   const char* device_name) {
   d49f8:	b0c3      	sub	sp, #268	; 0x10c
   d49fa:	4604      	mov	r4, r0
   d49fc:	4613      	mov	r3, r2
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (strlen(_meshPayload) <= 0) {
   d49fe:	b94d      	cbnz	r5, d4a14 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x20>
    if (_debugMesh) {
   d4a00:	4b0b      	ldr	r3, [pc, #44]	; (d4a30 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x3c>)
   d4a02:	7818      	ldrb	r0, [r3, #0]
   d4a04:	b190      	cbz	r0, d4a2c <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x38>
      Serial.println(
   d4a06:	f002 f851 	bl	d6aac <_Z16_fetch_usbserialv>
          "You have not added any variable value, please call the add()"
          "method first");
   d4a0a:	490a      	ldr	r1, [pc, #40]	; (d4a34 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x40>)
   d4a0c:	f001 fb51 	bl	d60b2 <_ZN5Print7printlnEPKc>
   d4a10:	4628      	mov	r0, r5
   d4a12:	e00b      	b.n	d4a2c <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x38>
    }
    return false;
  }
  char payload[256];
  sprintf(payload, "%s|%s|%s", device_label, device_name, _meshPayload);
   d4a14:	1d02      	adds	r2, r0, #4
   d4a16:	9200      	str	r2, [sp, #0]
   d4a18:	a802      	add	r0, sp, #8
   d4a1a:	460a      	mov	r2, r1
   d4a1c:	4906      	ldr	r1, [pc, #24]	; (d4a38 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x44>)
   d4a1e:	f000 fb91 	bl	d5144 <sprintf>
  return meshPublish(UBIDOTS_MESH_CHANNEL, payload);
   d4a22:	aa02      	add	r2, sp, #8
   d4a24:	4905      	ldr	r1, [pc, #20]	; (d4a3c <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x48>)
   d4a26:	4620      	mov	r0, r4
   d4a28:	f7ff ffe0 	bl	d49ec <_ZN7UbiMesh11meshPublishEPKcS1_>
#else
  Serial.println(
      "[WARNING] Your device does not support to publish using Mesh");
#endif
}
   d4a2c:	b043      	add	sp, #268	; 0x10c
   d4a2e:	bd30      	pop	{r4, r5, pc}
   d4a30:	2003e374 	.word	0x2003e374
   d4a34:	000d8c05 	.word	0x000d8c05
   d4a38:	000d8b6d 	.word	0x000d8b6d
   d4a3c:	000d8c4e 	.word	0x000d8c4e

000d4a40 <_ZN7UbiMesh20meshPublishToUbidotsEPKc>:
bool UbiMesh::meshPublishToUbidots() {
  return meshPublishToUbidots(_default_device_label);
}

bool UbiMesh::meshPublishToUbidots(const char* device_label) {
  return meshPublishToUbidots(device_label, device_label);
   d4a40:	460a      	mov	r2, r1
   d4a42:	f7ff bfd7 	b.w	d49f4 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_>
	...

000d4a48 <_ZN7UbiMesh8setDebugEb>:

/*
  Makes debug messages available
*/

void UbiMesh::setDebug(bool debug) { _debugMesh = debug; }
   d4a48:	4b01      	ldr	r3, [pc, #4]	; (d4a50 <_ZN7UbiMesh8setDebugEb+0x8>)
   d4a4a:	7019      	strb	r1, [r3, #0]
   d4a4c:	4770      	bx	lr
   d4a4e:	bf00      	nop
   d4a50:	2003e374 	.word	0x2003e374

000d4a54 <_GLOBAL__sub_I__ZN7UbiMeshC2EPc>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
   d4a54:	b508      	push	{r3, lr}
   d4a56:	f000 f82b 	bl	d4ab0 <HAL_Pin_Map>
   d4a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4a5e:	f000 b8a7 	b.w	d4bb0 <HAL_Timer_Get_Milli_Seconds>
	...

000d4a64 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d4a64:	b510      	push	{r4, lr}
   d4a66:	4c06      	ldr	r4, [pc, #24]	; (d4a80 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d4a68:	f000 f822 	bl	d4ab0 <HAL_Pin_Map>
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	f000 fe9d 	bl	d57ac <_ZN3UDPC1Ev>
   d4a72:	4620      	mov	r0, r4
   d4a74:	4a03      	ldr	r2, [pc, #12]	; (d4a84 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d4a76:	4904      	ldr	r1, [pc, #16]	; (d4a88 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
   d4a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4a7c:	f003 b8a4 	b.w	d7bc8 <__aeabi_atexit>
   d4a80:	2003e378 	.word	0x2003e378
   d4a84:	2003ce7c 	.word	0x2003ce7c
   d4a88:	000d47e5 	.word	0x000d47e5

000d4a8c <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
   d4a8c:	f000 b810 	b.w	d4ab0 <HAL_Pin_Map>

000d4a90 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <netdb_freeaddrinfo+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	689b      	ldr	r3, [r3, #8]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030268 	.word	0x00030268

000d4aa0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <netdb_getaddrinfo+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	68db      	ldr	r3, [r3, #12]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030268 	.word	0x00030268

000d4ab0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_Pin_Map+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	681b      	ldr	r3, [r3, #0]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003022c 	.word	0x0003022c

000d4ac0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_Validate_Pin_Function+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	685b      	ldr	r3, [r3, #4]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003022c 	.word	0x0003022c

000d4ad0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_Pin_Mode+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	689b      	ldr	r3, [r3, #8]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003022c 	.word	0x0003022c

000d4ae0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_Get_Pin_Mode+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	68db      	ldr	r3, [r3, #12]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003022c 	.word	0x0003022c

000d4af0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_GPIO_Write+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	691b      	ldr	r3, [r3, #16]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003022c 	.word	0x0003022c

000d4b00 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_ADC_Read+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003022c 	.word	0x0003022c

000d4b10 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_SPI_Init+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	69db      	ldr	r3, [r3, #28]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030230 	.word	0x00030230

000d4b20 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <HAL_SPI_Is_Enabled+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6a1b      	ldr	r3, [r3, #32]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030230 	.word	0x00030230

000d4b30 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <if_name_to_index+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	691b      	ldr	r3, [r3, #16]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003026c 	.word	0x0003026c

000d4b40 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <if_index_to_name+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	695b      	ldr	r3, [r3, #20]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	0003026c 	.word	0x0003026c

000d4b50 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <if_get_by_index+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	699b      	ldr	r3, [r3, #24]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	0003026c 	.word	0x0003026c

000d4b60 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <if_get_addrs+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003026c 	.word	0x0003026c

000d4b70 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <if_free_if_addrs+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	0003026c 	.word	0x0003026c

000d4b80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <HAL_RNG_GetRandomNumber+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	685b      	ldr	r3, [r3, #4]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030218 	.word	0x00030218

000d4b90 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <HAL_Delay_Milliseconds+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	689b      	ldr	r3, [r3, #8]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030218 	.word	0x00030218

000d4ba0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <HAL_Delay_Microseconds+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	68db      	ldr	r3, [r3, #12]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030218 	.word	0x00030218

000d4bb0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	695b      	ldr	r3, [r3, #20]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030218 	.word	0x00030218

000d4bc0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <hal_ble_stack_init+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	689b      	ldr	r3, [r3, #8]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030274 	.word	0x00030274

000d4bd0 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <hal_ble_gap_set_tx_power+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030274 	.word	0x00030274

000d4be0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b03      	ldr	r3, [pc, #12]	; (d4bf0 <hal_ble_gap_disconnect+0x10>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4bea:	9301      	str	r3, [sp, #4]
   d4bec:	bd08      	pop	{r3, pc}
   d4bee:	0000      	.short	0x0000
   d4bf0:	00030274 	.word	0x00030274

000d4bf4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b03      	ldr	r3, [pc, #12]	; (d4c04 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4bfe:	9301      	str	r3, [sp, #4]
   d4c00:	bd08      	pop	{r3, pc}
   d4c02:	0000      	.short	0x0000
   d4c04:	00030274 	.word	0x00030274

000d4c08 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <os_thread_create+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	685b      	ldr	r3, [r3, #4]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030248 	.word	0x00030248

000d4c18 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <os_thread_is_current+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	689b      	ldr	r3, [r3, #8]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030248 	.word	0x00030248

000d4c28 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <os_thread_yield+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	68db      	ldr	r3, [r3, #12]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030248 	.word	0x00030248

000d4c38 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <os_thread_join+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	691b      	ldr	r3, [r3, #16]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030248 	.word	0x00030248

000d4c48 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <os_thread_cleanup+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	695b      	ldr	r3, [r3, #20]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030248 	.word	0x00030248

000d4c58 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <os_thread_scheduling+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	69db      	ldr	r3, [r3, #28]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030248 	.word	0x00030248

000d4c68 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <os_timer_create+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	6a1b      	ldr	r3, [r3, #32]
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030248 	.word	0x00030248

000d4c78 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <os_timer_destroy+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030248 	.word	0x00030248

000d4c88 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <os_timer_get_id+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030248 	.word	0x00030248

000d4c98 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <os_timer_change+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030248 	.word	0x00030248

000d4ca8 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <os_mutex_create+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030248 	.word	0x00030248

000d4cb8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <os_mutex_recursive_create+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	00030248 	.word	0x00030248

000d4cc8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <os_mutex_recursive_lock+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	00030248 	.word	0x00030248

000d4cd8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <os_mutex_recursive_unlock+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	00030248 	.word	0x00030248

000d4ce8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <os_thread_exit+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	00030248 	.word	0x00030248

000d4cf8 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <os_timer_set_id+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	00030248 	.word	0x00030248

000d4d08 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <inet_inet_ntop+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	695b      	ldr	r3, [r3, #20]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	00030264 	.word	0x00030264

000d4d18 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <inet_inet_pton+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	699b      	ldr	r3, [r3, #24]
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	00030264 	.word	0x00030264

000d4d28 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <inet_htonl+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	6a1b      	ldr	r3, [r3, #32]
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030264 	.word	0x00030264

000d4d38 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <inet_ntohs+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030264 	.word	0x00030264

000d4d48 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <inet_htons+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030264 	.word	0x00030264

000d4d58 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <HAL_USART_Init+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	681b      	ldr	r3, [r3, #0]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	0003023c 	.word	0x0003023c

000d4d68 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <HAL_USART_Write_Data+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	68db      	ldr	r3, [r3, #12]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	0003023c 	.word	0x0003023c

000d4d78 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <HAL_USART_Available_Data+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	691b      	ldr	r3, [r3, #16]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	0003023c 	.word	0x0003023c

000d4d88 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <HAL_USART_Read_Data+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	695b      	ldr	r3, [r3, #20]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	0003023c 	.word	0x0003023c

000d4d98 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <HAL_USART_Peek_Data+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	699b      	ldr	r3, [r3, #24]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	0003023c 	.word	0x0003023c

000d4da8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <HAL_USART_Flush_Data+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	69db      	ldr	r3, [r3, #28]
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	0003023c 	.word	0x0003023c

000d4db8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <HAL_USART_Is_Enabled+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	6a1b      	ldr	r3, [r3, #32]
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	0003023c 	.word	0x0003023c

000d4dc8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <HAL_USART_Available_Data_For_Write+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	0003023c 	.word	0x0003023c

000d4dd8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <HAL_I2C_Write_Data+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	6a1b      	ldr	r3, [r3, #32]
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	00030228 	.word	0x00030228

000d4de8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <HAL_I2C_Available_Data+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	00030228 	.word	0x00030228

000d4df8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <HAL_I2C_Read_Data+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	00030228 	.word	0x00030228

000d4e08 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <HAL_I2C_Peek_Data+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	00030228 	.word	0x00030228

000d4e18 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <HAL_I2C_Flush_Data+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	00030228 	.word	0x00030228

000d4e28 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <HAL_I2C_Is_Enabled+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	00030228 	.word	0x00030228

000d4e38 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <HAL_I2C_Init+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	00030228 	.word	0x00030228

000d4e48 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <sock_bind+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	685b      	ldr	r3, [r3, #4]
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	00030238 	.word	0x00030238

000d4e58 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <sock_setsockopt+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	699b      	ldr	r3, [r3, #24]
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	00030238 	.word	0x00030238

000d4e68 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <sock_close+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	69db      	ldr	r3, [r3, #28]
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	00030238 	.word	0x00030238

000d4e78 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <sock_connect+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	6a1b      	ldr	r3, [r3, #32]
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	00030238 	.word	0x00030238

000d4e88 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <sock_recv+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	00030238 	.word	0x00030238

000d4e98 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <sock_recvfrom+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	00030238 	.word	0x00030238

000d4ea8 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <sock_send+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	00030238 	.word	0x00030238

000d4eb8 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <sock_sendto+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	00030238 	.word	0x00030238

000d4ec8 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <sock_socket+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	00030238 	.word	0x00030238

000d4ed8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <HAL_USB_USART_Init+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	681b      	ldr	r3, [r3, #0]
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	0003024c 	.word	0x0003024c

000d4ee8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <HAL_USB_USART_Begin+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	685b      	ldr	r3, [r3, #4]
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	0003024c 	.word	0x0003024c

000d4ef8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <HAL_USB_USART_Available_Data+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	691b      	ldr	r3, [r3, #16]
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	0003024c 	.word	0x0003024c

000d4f08 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	695b      	ldr	r3, [r3, #20]
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	0003024c 	.word	0x0003024c

000d4f18 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <HAL_USB_USART_Receive_Data+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	699b      	ldr	r3, [r3, #24]
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	0003024c 	.word	0x0003024c

000d4f28 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <HAL_USB_USART_Send_Data+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	69db      	ldr	r3, [r3, #28]
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	0003024c 	.word	0x0003024c

000d4f38 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <HAL_USB_USART_Flush_Data+0xc>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	6a1b      	ldr	r3, [r3, #32]
   d4f40:	9301      	str	r3, [sp, #4]
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	0003024c 	.word	0x0003024c

000d4f48 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <panic_+0xc>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f50:	9301      	str	r3, [sp, #4]
   d4f52:	bd08      	pop	{r3, pc}
   d4f54:	00030260 	.word	0x00030260

000d4f58 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4f58:	b508      	push	{r3, lr}
   d4f5a:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <log_message+0xc>)
   d4f5c:	681b      	ldr	r3, [r3, #0]
   d4f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4f60:	9301      	str	r3, [sp, #4]
   d4f62:	bd08      	pop	{r3, pc}
   d4f64:	00030260 	.word	0x00030260

000d4f68 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b02      	ldr	r3, [pc, #8]	; (d4f74 <set_system_mode+0xc>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	685b      	ldr	r3, [r3, #4]
   d4f70:	9301      	str	r3, [sp, #4]
   d4f72:	bd08      	pop	{r3, pc}
   d4f74:	00030220 	.word	0x00030220

000d4f78 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f78:	b508      	push	{r3, lr}
   d4f7a:	4b02      	ldr	r3, [pc, #8]	; (d4f84 <system_delay_ms+0xc>)
   d4f7c:	681b      	ldr	r3, [r3, #0]
   d4f7e:	695b      	ldr	r3, [r3, #20]
   d4f80:	9301      	str	r3, [sp, #4]
   d4f82:	bd08      	pop	{r3, pc}
   d4f84:	00030220 	.word	0x00030220

000d4f88 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4f88:	b508      	push	{r3, lr}
   d4f8a:	4b02      	ldr	r3, [pc, #8]	; (d4f94 <system_thread_set_state+0xc>)
   d4f8c:	681b      	ldr	r3, [r3, #0]
   d4f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f90:	9301      	str	r3, [sp, #4]
   d4f92:	bd08      	pop	{r3, pc}
   d4f94:	00030220 	.word	0x00030220

000d4f98 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4f98:	b508      	push	{r3, lr}
   d4f9a:	4b02      	ldr	r3, [pc, #8]	; (d4fa4 <application_thread_current+0xc>)
   d4f9c:	681b      	ldr	r3, [r3, #0]
   d4f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4fa0:	9301      	str	r3, [sp, #4]
   d4fa2:	bd08      	pop	{r3, pc}
   d4fa4:	00030220 	.word	0x00030220

000d4fa8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4fa8:	b508      	push	{r3, lr}
   d4faa:	4b02      	ldr	r3, [pc, #8]	; (d4fb4 <application_thread_invoke+0xc>)
   d4fac:	681b      	ldr	r3, [r3, #0]
   d4fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4fb0:	9301      	str	r3, [sp, #4]
   d4fb2:	bd08      	pop	{r3, pc}
   d4fb4:	00030220 	.word	0x00030220

000d4fb8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4fb8:	b508      	push	{r3, lr}
   d4fba:	4b03      	ldr	r3, [pc, #12]	; (d4fc8 <system_ctrl_set_app_request_handler+0x10>)
   d4fbc:	681b      	ldr	r3, [r3, #0]
   d4fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4fc2:	9301      	str	r3, [sp, #4]
   d4fc4:	bd08      	pop	{r3, pc}
   d4fc6:	0000      	.short	0x0000
   d4fc8:	00030220 	.word	0x00030220

000d4fcc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b03      	ldr	r3, [pc, #12]	; (d4fdc <system_ctrl_set_result+0x10>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4fd6:	9301      	str	r3, [sp, #4]
   d4fd8:	bd08      	pop	{r3, pc}
   d4fda:	0000      	.short	0x0000
   d4fdc:	00030220 	.word	0x00030220

000d4fe0 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b03      	ldr	r3, [pc, #12]	; (d4ff0 <system_invoke_event_handler+0x10>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4fea:	9301      	str	r3, [sp, #4]
   d4fec:	bd08      	pop	{r3, pc}
   d4fee:	0000      	.short	0x0000
   d4ff0:	00030220 	.word	0x00030220

000d4ff4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <network_connect+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	685b      	ldr	r3, [r3, #4]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030240 	.word	0x00030240

000d5004 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <network_connecting+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	689b      	ldr	r3, [r3, #8]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030240 	.word	0x00030240

000d5014 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <network_disconnect+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	68db      	ldr	r3, [r3, #12]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030240 	.word	0x00030240

000d5024 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <network_ready+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	691b      	ldr	r3, [r3, #16]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030240 	.word	0x00030240

000d5034 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <network_on+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	695b      	ldr	r3, [r3, #20]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030240 	.word	0x00030240

000d5044 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <network_off+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	699b      	ldr	r3, [r3, #24]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030240 	.word	0x00030240

000d5054 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <network_listen+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	69db      	ldr	r3, [r3, #28]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030240 	.word	0x00030240

000d5064 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <network_listening+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6a1b      	ldr	r3, [r3, #32]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030240 	.word	0x00030240

000d5074 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <network_set_listen_timeout+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030240 	.word	0x00030240

000d5084 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <network_get_listen_timeout+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030240 	.word	0x00030240

000d5094 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <spark_function+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	685b      	ldr	r3, [r3, #4]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030244 	.word	0x00030244

000d50a4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <spark_process+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	689b      	ldr	r3, [r3, #8]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030244 	.word	0x00030244

000d50b4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <spark_cloud_flag_connected+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	695b      	ldr	r3, [r3, #20]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030244 	.word	0x00030244

000d50c4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <spark_deviceID+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	69db      	ldr	r3, [r3, #28]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030244 	.word	0x00030244

000d50d4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <spark_send_event+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6a1b      	ldr	r3, [r3, #32]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030244 	.word	0x00030244

000d50e4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <spark_subscribe+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030244 	.word	0x00030244

000d50f4 <spark_set_connection_property>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <spark_set_connection_property+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030244 	.word	0x00030244

000d5104 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030244 	.word	0x00030244

000d5114 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <malloc+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	681b      	ldr	r3, [r3, #0]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003021c 	.word	0x0003021c

000d5124 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <free+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	685b      	ldr	r3, [r3, #4]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003021c 	.word	0x0003021c

000d5134 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <realloc+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	689b      	ldr	r3, [r3, #8]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003021c 	.word	0x0003021c

000d5144 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <sprintf+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	68db      	ldr	r3, [r3, #12]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003021c 	.word	0x0003021c

000d5154 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <vsnprintf+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003021c 	.word	0x0003021c

000d5164 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <abort+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	0003021c 	.word	0x0003021c

000d5174 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <_malloc_r+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003021c 	.word	0x0003021c

000d5184 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <__errno+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	0003021c 	.word	0x0003021c

000d5194 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5194:	2200      	movs	r2, #0
   d5196:	4611      	mov	r1, r2
   d5198:	6840      	ldr	r0, [r0, #4]
   d519a:	f7ff bf63 	b.w	d5064 <network_listening>

000d519e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d519e:	2200      	movs	r2, #0
   d51a0:	4611      	mov	r1, r2
   d51a2:	6840      	ldr	r0, [r0, #4]
   d51a4:	f7ff bf6e 	b.w	d5084 <network_get_listen_timeout>

000d51a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d51a8:	2200      	movs	r2, #0
   d51aa:	6840      	ldr	r0, [r0, #4]
   d51ac:	f7ff bf62 	b.w	d5074 <network_set_listen_timeout>

000d51b0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d51b0:	2200      	movs	r2, #0
   d51b2:	f081 0101 	eor.w	r1, r1, #1
   d51b6:	6840      	ldr	r0, [r0, #4]
   d51b8:	f7ff bf4c 	b.w	d5054 <network_listen>

000d51bc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d51bc:	2300      	movs	r3, #0
   d51be:	461a      	mov	r2, r3
   d51c0:	4619      	mov	r1, r3
   d51c2:	6840      	ldr	r0, [r0, #4]
   d51c4:	f7ff bf3e 	b.w	d5044 <network_off>

000d51c8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d51c8:	2300      	movs	r3, #0
   d51ca:	461a      	mov	r2, r3
   d51cc:	4619      	mov	r1, r3
   d51ce:	6840      	ldr	r0, [r0, #4]
   d51d0:	f7ff bf30 	b.w	d5034 <network_on>

000d51d4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d51d4:	2200      	movs	r2, #0
   d51d6:	4611      	mov	r1, r2
   d51d8:	6840      	ldr	r0, [r0, #4]
   d51da:	f7ff bf23 	b.w	d5024 <network_ready>

000d51de <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d51de:	2200      	movs	r2, #0
   d51e0:	4611      	mov	r1, r2
   d51e2:	6840      	ldr	r0, [r0, #4]
   d51e4:	f7ff bf0e 	b.w	d5004 <network_connecting>

000d51e8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51e8:	2200      	movs	r2, #0
   d51ea:	2102      	movs	r1, #2
   d51ec:	6840      	ldr	r0, [r0, #4]
   d51ee:	f7ff bf11 	b.w	d5014 <network_disconnect>

000d51f2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51f2:	2300      	movs	r3, #0
   d51f4:	461a      	mov	r2, r3
   d51f6:	6840      	ldr	r0, [r0, #4]
   d51f8:	f7ff befc 	b.w	d4ff4 <network_connect>

000d51fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d51fc:	4b02      	ldr	r3, [pc, #8]	; (d5208 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d51fe:	2203      	movs	r2, #3
   d5200:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5202:	4a02      	ldr	r2, [pc, #8]	; (d520c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5204:	601a      	str	r2, [r3, #0]
   d5206:	4770      	bx	lr
   d5208:	2003e3c4 	.word	0x2003e3c4
   d520c:	000d8c64 	.word	0x000d8c64

000d5210 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5210:	4770      	bx	lr

000d5212 <_ZN8SPIClassD0Ev>:
   d5212:	b510      	push	{r4, lr}
   d5214:	2110      	movs	r1, #16
   d5216:	4604      	mov	r4, r0
   d5218:	f002 fce4 	bl	d7be4 <_ZdlPvj>
   d521c:	4620      	mov	r0, r4
   d521e:	bd10      	pop	{r4, pc}

000d5220 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5220:	b570      	push	{r4, r5, r6, lr}
   d5222:	4b08      	ldr	r3, [pc, #32]	; (d5244 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5224:	6003      	str	r3, [r0, #0]
   d5226:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5228:	2500      	movs	r5, #0
   d522a:	460e      	mov	r6, r1
   d522c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5230:	f7ff fd3a 	bl	d4ca8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5234:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5236:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5238:	f7ff fc6a 	bl	d4b10 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d523c:	60a5      	str	r5, [r4, #8]
}
   d523e:	4620      	mov	r0, r4
   d5240:	bd70      	pop	{r4, r5, r6, pc}
   d5242:	bf00      	nop
   d5244:	000d8c98 	.word	0x000d8c98

000d5248 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5248:	7900      	ldrb	r0, [r0, #4]
   d524a:	f7ff bc69 	b.w	d4b20 <HAL_SPI_Is_Enabled>
	...

000d5250 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5250:	4b04      	ldr	r3, [pc, #16]	; (d5264 <_GLOBAL__sub_I_System+0x14>)
   d5252:	2000      	movs	r0, #0
   d5254:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5258:	7018      	strb	r0, [r3, #0]
   d525a:	8058      	strh	r0, [r3, #2]
   d525c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d525e:	f7ff be83 	b.w	d4f68 <set_system_mode>
   d5262:	bf00      	nop
   d5264:	2003e3cc 	.word	0x2003e3cc

000d5268 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5268:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d526a:	6804      	ldr	r4, [r0, #0]
   d526c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d526e:	46a4      	mov	ip, r4
    }
   d5270:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5274:	4760      	bx	ip

000d5276 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5276:	6803      	ldr	r3, [r0, #0]
   d5278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d527a:	4718      	bx	r3

000d527c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d527c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d527e:	4770      	bx	lr

000d5280 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5280:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d5282:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5284:	1a10      	subs	r0, r2, r0
   d5286:	4770      	bx	lr

000d5288 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5288:	b513      	push	{r0, r1, r4, lr}
   d528a:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d528c:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d528e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d5292:	68d4      	ldr	r4, [r2, #12]
   d5294:	4619      	mov	r1, r3
   d5296:	2201      	movs	r2, #1
   d5298:	47a0      	blx	r4
}
   d529a:	b002      	add	sp, #8
   d529c:	bd10      	pop	{r4, pc}

000d529e <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d529e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d52a0:	6803      	ldr	r3, [r0, #0]
   d52a2:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d52a4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d52a6:	4798      	blx	r3
   d52a8:	b128      	cbz	r0, d52b6 <_ZN3UDP4readEv+0x18>
   d52aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d52ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d52ae:	1c59      	adds	r1, r3, #1
   d52b0:	86e1      	strh	r1, [r4, #54]	; 0x36
   d52b2:	5cd0      	ldrb	r0, [r2, r3]
   d52b4:	bd10      	pop	{r4, pc}
   d52b6:	f04f 30ff 	mov.w	r0, #4294967295
}
   d52ba:	bd10      	pop	{r4, pc}

000d52bc <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d52bc:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d52be:	6803      	ldr	r3, [r0, #0]
   d52c0:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d52c2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d52c4:	4798      	blx	r3
   d52c6:	b118      	cbz	r0, d52d0 <_ZN3UDP4peekEv+0x14>
   d52c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d52ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d52cc:	5cd0      	ldrb	r0, [r2, r3]
   d52ce:	bd10      	pop	{r4, pc}
   d52d0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d52d4:	bd10      	pop	{r4, pc}

000d52d6 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d52d6:	4770      	bx	lr

000d52d8 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d52d8:	b410      	push	{r4}
   d52da:	4603      	mov	r3, r0
   d52dc:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d52de:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d52e0:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d52e2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d52e4:	6803      	ldr	r3, [r0, #0]
   d52e6:	1a52      	subs	r2, r2, r1
   d52e8:	68db      	ldr	r3, [r3, #12]
   d52ea:	4421      	add	r1, r4
}
   d52ec:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d52f0:	4718      	bx	r3

000d52f2 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d52f2:	f1a0 0010 	sub.w	r0, r0, #16
   d52f6:	f7ff bfef 	b.w	d52d8 <_ZNK3UDP7printToER5Print>

000d52fa <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d52fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d52fc:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d52fe:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5300:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d5302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5304:	4604      	mov	r4, r0
   d5306:	460f      	mov	r7, r1
   d5308:	4615      	mov	r5, r2
    stop();
   d530a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d530c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d530e:	4632      	mov	r2, r6
   d5310:	2100      	movs	r1, #0
   d5312:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5314:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5316:	f003 fa20 	bl	d875a <memset>
    saddr.sin6_len = sizeof(saddr);
   d531a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d531e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5320:	260a      	movs	r6, #10
   d5322:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5326:	f7ff fd0f 	bl	d4d48 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d532a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d532c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5330:	2102      	movs	r1, #2
   d5332:	4630      	mov	r0, r6
   d5334:	f7ff fdc8 	bl	d4ec8 <sock_socket>

    if (_sock < 0) {
   d5338:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d533a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d533c:	db24      	blt.n	d5388 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d533e:	2204      	movs	r2, #4
   d5340:	9200      	str	r2, [sp, #0]
   d5342:	ab02      	add	r3, sp, #8
   d5344:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5348:	f7ff fd86 	bl	d4e58 <sock_setsockopt>
   d534c:	b9e0      	cbnz	r0, d5388 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d534e:	b195      	cbz	r5, d5376 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d5350:	9003      	str	r0, [sp, #12]
   d5352:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5356:	a903      	add	r1, sp, #12
   d5358:	b2e8      	uxtb	r0, r5
   d535a:	f7ff fbf1 	bl	d4b40 <if_index_to_name>
   d535e:	b998      	cbnz	r0, d5388 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d5360:	2306      	movs	r3, #6
   d5362:	9300      	str	r3, [sp, #0]
   d5364:	f241 020b 	movw	r2, #4107	; 0x100b
   d5368:	ab03      	add	r3, sp, #12
   d536a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d536e:	6960      	ldr	r0, [r4, #20]
   d5370:	f7ff fd72 	bl	d4e58 <sock_setsockopt>
   d5374:	b940      	cbnz	r0, d5388 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5376:	221c      	movs	r2, #28
   d5378:	a905      	add	r1, sp, #20
   d537a:	6960      	ldr	r0, [r4, #20]
   d537c:	f7ff fd64 	bl	d4e48 <sock_bind>
   d5380:	b910      	cbnz	r0, d5388 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d5382:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d5384:	2001      	movs	r0, #1
   d5386:	e004      	b.n	d5392 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5388:	6823      	ldr	r3, [r4, #0]
   d538a:	4620      	mov	r0, r4
   d538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d538e:	4798      	blx	r3
   d5390:	2000      	movs	r0, #0
    }
    return bound;
}
   d5392:	b00d      	add	sp, #52	; 0x34
   d5394:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5396 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d5396:	b510      	push	{r4, lr}
   d5398:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d539a:	6940      	ldr	r0, [r0, #20]
   d539c:	2800      	cmp	r0, #0
   d539e:	db01      	blt.n	d53a4 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d53a0:	f7ff fd62 	bl	d4e68 <sock_close>
    }

    _sock = -1;
   d53a4:	f04f 33ff 	mov.w	r3, #4294967295
   d53a8:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d53aa:	2300      	movs	r3, #0
   d53ac:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d53ae:	8723      	strh	r3, [r4, #56]	; 0x38
   d53b0:	bd10      	pop	{r4, pc}

000d53b2 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d53b2:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d53b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d53b6:	4605      	mov	r5, r0
   d53b8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d53ba:	b113      	cbz	r3, d53c2 <_ZN3UDP5writeEPKhj+0x10>
   d53bc:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d53be:	1a24      	subs	r4, r4, r0
   d53c0:	e000      	b.n	d53c4 <_ZN3UDP5writeEPKhj+0x12>
   d53c2:	461c      	mov	r4, r3
   d53c4:	4294      	cmp	r4, r2
   d53c6:	bf28      	it	cs
   d53c8:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d53ca:	4622      	mov	r2, r4
   d53cc:	4418      	add	r0, r3
   d53ce:	f003 f99e 	bl	d870e <memcpy>
    _offset += size;
   d53d2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d53d4:	4423      	add	r3, r4
   d53d6:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d53d8:	4620      	mov	r0, r4
   d53da:	bd38      	pop	{r3, r4, r5, pc}

000d53dc <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d53dc:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d53de:	6803      	ldr	r3, [r0, #0]
   d53e0:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d53e2:	4604      	mov	r4, r0
   d53e4:	460e      	mov	r6, r1
   d53e6:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d53e8:	4798      	blx	r3
   d53ea:	b188      	cbz	r0, d5410 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d53ec:	6823      	ldr	r3, [r4, #0]
   d53ee:	4620      	mov	r0, r4
   d53f0:	691b      	ldr	r3, [r3, #16]
   d53f2:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d53f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d53f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d53f8:	4285      	cmp	r5, r0
   d53fa:	bfa8      	it	ge
   d53fc:	4605      	movge	r5, r0
   d53fe:	4419      	add	r1, r3
   d5400:	462a      	mov	r2, r5
   d5402:	4630      	mov	r0, r6
   d5404:	f003 f983 	bl	d870e <memcpy>
        _offset += read;
   d5408:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d540a:	442b      	add	r3, r5
   d540c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d540e:	e001      	b.n	d5414 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d5410:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d5414:	4628      	mov	r0, r5
   d5416:	bd70      	pop	{r4, r5, r6, pc}

000d5418 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5418:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d541a:	4604      	mov	r4, r0
   d541c:	4b05      	ldr	r3, [pc, #20]	; (d5434 <_ZN3UDP8remoteIPEv+0x1c>)
   d541e:	f844 3b04 	str.w	r3, [r4], #4
   d5422:	f101 0520 	add.w	r5, r1, #32
   d5426:	4606      	mov	r6, r0
   d5428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d542a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d542c:	682b      	ldr	r3, [r5, #0]
   d542e:	7023      	strb	r3, [r4, #0]
   d5430:	4630      	mov	r0, r6
   d5432:	bd70      	pop	{r4, r5, r6, pc}
   d5434:	000d8ff8 	.word	0x000d8ff8

000d5438 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5438:	b5f0      	push	{r4, r5, r6, r7, lr}
   d543a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d543c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d543e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5440:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d5442:	4a0a      	ldr	r2, [pc, #40]	; (d546c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5444:	9202      	str	r2, [sp, #8]
   d5446:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5448:	468e      	mov	lr, r1
   d544a:	4606      	mov	r6, r0
   d544c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d544e:	ac03      	add	r4, sp, #12
   d5450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5452:	682b      	ldr	r3, [r5, #0]
   d5454:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5456:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d545a:	9300      	str	r3, [sp, #0]
   d545c:	4662      	mov	r2, ip
   d545e:	ab02      	add	r3, sp, #8
   d5460:	4671      	mov	r1, lr
   d5462:	4630      	mov	r0, r6
   d5464:	47b8      	blx	r7
    }
   d5466:	b009      	add	sp, #36	; 0x24
   d5468:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d546a:	bf00      	nop
   d546c:	000d8ff8 	.word	0x000d8ff8

000d5470 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5470:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5472:	6803      	ldr	r3, [r0, #0]
   d5474:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5478:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d547a:	4b0d      	ldr	r3, [pc, #52]	; (d54b0 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d547c:	b089      	sub	sp, #36	; 0x24
   d547e:	f100 0620 	add.w	r6, r0, #32
   d5482:	4604      	mov	r4, r0
   d5484:	9302      	str	r3, [sp, #8]
   d5486:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5488:	ad03      	add	r5, sp, #12
   d548a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d548c:	6833      	ldr	r3, [r6, #0]
   d548e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5490:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d5492:	9300      	str	r3, [sp, #0]
   d5494:	4672      	mov	r2, lr
   d5496:	ab02      	add	r3, sp, #8
   d5498:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d549a:	4620      	mov	r0, r4
   d549c:	47b8      	blx	r7
    flush(); // wait for send to complete
   d549e:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d54a0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d54a2:	69db      	ldr	r3, [r3, #28]
   d54a4:	4620      	mov	r0, r4
   d54a6:	4798      	blx	r3
    return result;
}
   d54a8:	4628      	mov	r0, r5
   d54aa:	b009      	add	sp, #36	; 0x24
   d54ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d54ae:	bf00      	nop
   d54b0:	000d8ff8 	.word	0x000d8ff8

000d54b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d54b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d54b6:	7843      	ldrb	r3, [r0, #1]
   d54b8:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d54ba:	b08d      	sub	sp, #52	; 0x34
   d54bc:	4605      	mov	r5, r0
   d54be:	460c      	mov	r4, r1
   d54c0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d54c2:	d101      	bne.n	d54c8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d54c4:	1d01      	adds	r1, r0, #4
   d54c6:	e033      	b.n	d5530 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d54c8:	2b0a      	cmp	r3, #10
   d54ca:	d135      	bne.n	d5538 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d54cc:	2211      	movs	r2, #17
   d54ce:	2100      	movs	r1, #0
   d54d0:	a801      	add	r0, sp, #4
   d54d2:	f003 f942 	bl	d875a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d54d6:	68ab      	ldr	r3, [r5, #8]
   d54d8:	b943      	cbnz	r3, d54ec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d54da:	68eb      	ldr	r3, [r5, #12]
   d54dc:	b933      	cbnz	r3, d54ec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d54de:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d54e2:	692e      	ldr	r6, [r5, #16]
   d54e4:	f7ff fc20 	bl	d4d28 <inet_htonl>
   d54e8:	4286      	cmp	r6, r0
   d54ea:	d01f      	beq.n	d552c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d54ec:	f105 0308 	add.w	r3, r5, #8
   d54f0:	ae01      	add	r6, sp, #4
   d54f2:	f105 0e18 	add.w	lr, r5, #24
   d54f6:	6818      	ldr	r0, [r3, #0]
   d54f8:	6859      	ldr	r1, [r3, #4]
   d54fa:	4632      	mov	r2, r6
   d54fc:	c203      	stmia	r2!, {r0, r1}
   d54fe:	3308      	adds	r3, #8
   d5500:	4573      	cmp	r3, lr
   d5502:	4616      	mov	r6, r2
   d5504:	d1f7      	bne.n	d54f6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5506:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5508:	a901      	add	r1, sp, #4
   d550a:	a806      	add	r0, sp, #24
   d550c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d550e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5512:	f001 fa29 	bl	d6968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5516:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5518:	3404      	adds	r4, #4
   d551a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d551c:	6833      	ldr	r3, [r6, #0]
   d551e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d5520:	b157      	cbz	r7, d5538 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d5522:	8868      	ldrh	r0, [r5, #2]
   d5524:	f7ff fc08 	bl	d4d38 <inet_ntohs>
   d5528:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d552a:	e005      	b.n	d5538 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d552c:	f105 0114 	add.w	r1, r5, #20
   d5530:	4620      	mov	r0, r4
   d5532:	f001 fa4e 	bl	d69d2 <_ZN9IPAddressaSEPKh>
   d5536:	e7f3      	b.n	d5520 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5538:	b00d      	add	sp, #52	; 0x34
   d553a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d553c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5540:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5542:	ab0e      	add	r3, sp, #56	; 0x38
   d5544:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5546:	4606      	mov	r6, r0
   d5548:	4617      	mov	r7, r2
   d554a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d554c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5550:	462a      	mov	r2, r5
   d5552:	4629      	mov	r1, r5
   d5554:	f7ff faa4 	bl	d4aa0 <netdb_getaddrinfo>
   d5558:	2800      	cmp	r0, #0
   d555a:	db1f      	blt.n	d559c <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d555c:	9b01      	ldr	r3, [sp, #4]
   d555e:	b1fb      	cbz	r3, d55a0 <_ZN3UDP11beginPacketEPKct+0x64>
   d5560:	695b      	ldr	r3, [r3, #20]
   d5562:	b1eb      	cbz	r3, d55a0 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d5564:	a802      	add	r0, sp, #8
   d5566:	f001 f9f1 	bl	d694c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d556a:	9b01      	ldr	r3, [sp, #4]
   d556c:	462a      	mov	r2, r5
   d556e:	6958      	ldr	r0, [r3, #20]
   d5570:	a902      	add	r1, sp, #8
   d5572:	f7ff ff9f 	bl	d54b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5576:	a802      	add	r0, sp, #8
   d5578:	f001 fa08 	bl	d698c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d557c:	b180      	cbz	r0, d55a0 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d557e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5580:	ad03      	add	r5, sp, #12
   d5582:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5586:	4b0b      	ldr	r3, [pc, #44]	; (d55b4 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5588:	9308      	str	r3, [sp, #32]
   d558a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d558c:	ac09      	add	r4, sp, #36	; 0x24
   d558e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5590:	682b      	ldr	r3, [r5, #0]
   d5592:	7023      	strb	r3, [r4, #0]
   d5594:	463a      	mov	r2, r7
   d5596:	a908      	add	r1, sp, #32
   d5598:	4630      	mov	r0, r6
   d559a:	47c0      	blx	r8
   d559c:	4604      	mov	r4, r0
   d559e:	e001      	b.n	d55a4 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d55a0:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d55a4:	9801      	ldr	r0, [sp, #4]
   d55a6:	f7ff fa73 	bl	d4a90 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d55aa:	4620      	mov	r0, r4
   d55ac:	b00e      	add	sp, #56	; 0x38
   d55ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d55b2:	bf00      	nop
   d55b4:	000d8ff8 	.word	0x000d8ff8

000d55b8 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d55b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d55bc:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d55c0:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d55c4:	b08c      	sub	sp, #48	; 0x30
   d55c6:	4605      	mov	r5, r0
   d55c8:	460c      	mov	r4, r1
   d55ca:	4617      	mov	r7, r2
   d55cc:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d55ce:	db00      	blt.n	d55d2 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d55d0:	b911      	cbnz	r1, d55d8 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d55d2:	f04f 30ff 	mov.w	r0, #4294967295
   d55d6:	e035      	b.n	d5644 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d55d8:	f04f 0a1c 	mov.w	sl, #28
   d55dc:	ae05      	add	r6, sp, #20
   d55de:	4652      	mov	r2, sl
   d55e0:	2100      	movs	r1, #0
   d55e2:	4630      	mov	r0, r6
   d55e4:	f003 f8b9 	bl	d875a <memset>
        socklen_t slen = sizeof(saddr);
   d55e8:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d55ec:	f1b9 0f00 	cmp.w	r9, #0
   d55f0:	d014      	beq.n	d561c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d55f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55f6:	fbb9 f1f2 	udiv	r1, r9, r2
   d55fa:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d55fc:	fb02 9111 	mls	r1, r2, r1, r9
   d5600:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5602:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5604:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5606:	9300      	str	r3, [sp, #0]
   d5608:	f241 0206 	movw	r2, #4102	; 0x1006
   d560c:	ab03      	add	r3, sp, #12
   d560e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5612:	4640      	mov	r0, r8
   d5614:	f7ff fc20 	bl	d4e58 <sock_setsockopt>
            if (ret) {
   d5618:	b108      	cbz	r0, d561e <_ZN3UDP13receivePacketEPhjm+0x66>
   d561a:	e013      	b.n	d5644 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d561c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d561e:	ab02      	add	r3, sp, #8
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	4621      	mov	r1, r4
   d5624:	4603      	mov	r3, r0
   d5626:	9600      	str	r6, [sp, #0]
   d5628:	463a      	mov	r2, r7
   d562a:	6968      	ldr	r0, [r5, #20]
   d562c:	f7ff fc34 	bl	d4e98 <sock_recvfrom>
        if (ret >= 0) {
   d5630:	1e04      	subs	r4, r0, #0
   d5632:	db06      	blt.n	d5642 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5634:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5638:	f105 011c 	add.w	r1, r5, #28
   d563c:	4630      	mov	r0, r6
   d563e:	f7ff ff39 	bl	d54b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5642:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5644:	b00c      	add	sp, #48	; 0x30
   d5646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d564a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d564a:	b538      	push	{r3, r4, r5, lr}
   d564c:	4605      	mov	r5, r0
   d564e:	4614      	mov	r4, r2
   d5650:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d5652:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5654:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5656:	d111      	bne.n	d567c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5658:	231c      	movs	r3, #28
   d565a:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d565c:	230a      	movs	r3, #10
   d565e:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5660:	f7ff fb72 	bl	d4d48 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5664:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5666:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d566a:	1d2b      	adds	r3, r5, #4
   d566c:	3514      	adds	r5, #20
   d566e:	f853 2b04 	ldr.w	r2, [r3], #4
   d5672:	f844 2b04 	str.w	r2, [r4], #4
   d5676:	42ab      	cmp	r3, r5
   d5678:	d1f9      	bne.n	d566e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d567a:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d567c:	2b04      	cmp	r3, #4
   d567e:	d10a      	bne.n	d5696 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5680:	2310      	movs	r3, #16
   d5682:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5684:	2302      	movs	r3, #2
   d5686:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5688:	f7ff fb5e 	bl	d4d48 <inet_htons>
   d568c:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d568e:	6868      	ldr	r0, [r5, #4]
   d5690:	f7ff fb4a 	bl	d4d28 <inet_htonl>
   d5694:	6060      	str	r0, [r4, #4]
   d5696:	bd38      	pop	{r3, r4, r5, pc}

000d5698 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d569c:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d569e:	ac03      	add	r4, sp, #12
   d56a0:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d56a2:	4699      	mov	r9, r3
   d56a4:	4606      	mov	r6, r0
   d56a6:	460f      	mov	r7, r1
   d56a8:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d56aa:	2100      	movs	r1, #0
   d56ac:	462a      	mov	r2, r5
   d56ae:	4620      	mov	r0, r4
   d56b0:	f003 f853 	bl	d875a <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d56b4:	4622      	mov	r2, r4
   d56b6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d56ba:	4648      	mov	r0, r9
   d56bc:	f7ff ffc5 	bl	d564a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d56c0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d56c4:	b143      	cbz	r3, d56d8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d56c6:	e88d 0030 	stmia.w	sp, {r4, r5}
   d56ca:	2300      	movs	r3, #0
   d56cc:	4642      	mov	r2, r8
   d56ce:	4639      	mov	r1, r7
   d56d0:	6970      	ldr	r0, [r6, #20]
   d56d2:	f7ff fbf1 	bl	d4eb8 <sock_sendto>
   d56d6:	e001      	b.n	d56dc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d56d8:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d56dc:	b00b      	add	sp, #44	; 0x2c
   d56de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d56e2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d56e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56e4:	b091      	sub	sp, #68	; 0x44
   d56e6:	460c      	mov	r4, r1
   d56e8:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d56ea:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d56ec:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d56ee:	a809      	add	r0, sp, #36	; 0x24
   d56f0:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d56f2:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d56f4:	f003 f831 	bl	d875a <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d56f8:	aa09      	add	r2, sp, #36	; 0x24
   d56fa:	2100      	movs	r1, #0
   d56fc:	4620      	mov	r0, r4
   d56fe:	f7ff ffa4 	bl	d564a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d5702:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5706:	2b02      	cmp	r3, #2
   d5708:	d12e      	bne.n	d5768 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d570a:	2300      	movs	r3, #0
   d570c:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d570e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5710:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5712:	b1dd      	cbz	r5, d574c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5714:	a902      	add	r1, sp, #8
   d5716:	4628      	mov	r0, r5
   d5718:	f7ff fa1a 	bl	d4b50 <if_get_by_index>
   d571c:	b9b0      	cbnz	r0, d574c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d571e:	a910      	add	r1, sp, #64	; 0x40
   d5720:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5724:	9802      	ldr	r0, [sp, #8]
   d5726:	f7ff fa1b 	bl	d4b60 <if_get_addrs>
   d572a:	b960      	cbnz	r0, d5746 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d572c:	9b03      	ldr	r3, [sp, #12]
   d572e:	b153      	cbz	r3, d5746 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5730:	68da      	ldr	r2, [r3, #12]
   d5732:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5734:	7851      	ldrb	r1, [r2, #1]
   d5736:	2902      	cmp	r1, #2
   d5738:	d103      	bne.n	d5742 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d573a:	6852      	ldr	r2, [r2, #4]
   d573c:	b10a      	cbz	r2, d5742 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d573e:	9205      	str	r2, [sp, #20]
   d5740:	e001      	b.n	d5746 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5742:	681b      	ldr	r3, [r3, #0]
   d5744:	e7f3      	b.n	d572e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5746:	9803      	ldr	r0, [sp, #12]
   d5748:	f7ff fa12 	bl	d4b70 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d574c:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d574e:	f04f 0308 	mov.w	r3, #8
   d5752:	9300      	str	r3, [sp, #0]
   d5754:	bf18      	it	ne
   d5756:	2203      	movne	r2, #3
   d5758:	ab04      	add	r3, sp, #16
   d575a:	bf08      	it	eq
   d575c:	2204      	moveq	r2, #4
   d575e:	2100      	movs	r1, #0
   d5760:	4630      	mov	r0, r6
   d5762:	f7ff fb79 	bl	d4e58 <sock_setsockopt>
   d5766:	e01e      	b.n	d57a6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5768:	2b0a      	cmp	r3, #10
   d576a:	d11a      	bne.n	d57a2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d576c:	ac04      	add	r4, sp, #16
   d576e:	2214      	movs	r2, #20
   d5770:	2100      	movs	r1, #0
   d5772:	4620      	mov	r0, r4
   d5774:	f002 fff1 	bl	d875a <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5778:	ab0b      	add	r3, sp, #44	; 0x2c
   d577a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d577c:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d577e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5782:	f04f 0314 	mov.w	r3, #20
   d5786:	9300      	str	r3, [sp, #0]
   d5788:	bf18      	it	ne
   d578a:	220c      	movne	r2, #12
   d578c:	4623      	mov	r3, r4
   d578e:	bf08      	it	eq
   d5790:	220d      	moveq	r2, #13
   d5792:	2129      	movs	r1, #41	; 0x29
   d5794:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5796:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5798:	f7ff fb5e 	bl	d4e58 <sock_setsockopt>
   d579c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d57a0:	e001      	b.n	d57a6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d57a2:	f04f 30ff 	mov.w	r0, #4294967295
}
   d57a6:	b011      	add	sp, #68	; 0x44
   d57a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d57ac <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d57ac:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57b2:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d57b4:	4b0b      	ldr	r3, [pc, #44]	; (d57e4 <_ZN3UDPC1Ev+0x38>)
   d57b6:	f103 0208 	add.w	r2, r3, #8
   d57ba:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57bc:	2500      	movs	r5, #0
   d57be:	6103      	str	r3, [r0, #16]
   d57c0:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d57c4:	4604      	mov	r4, r0
   d57c6:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d57c8:	6002      	str	r2, [r0, #0]
   d57ca:	6143      	str	r3, [r0, #20]
   d57cc:	301c      	adds	r0, #28
   d57ce:	f001 f8bd 	bl	d694c <_ZN9IPAddressC1Ev>
   d57d2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d57d6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d57d8:	8725      	strh	r5, [r4, #56]	; 0x38
   d57da:	63e5      	str	r5, [r4, #60]	; 0x3c
   d57dc:	6423      	str	r3, [r4, #64]	; 0x40
   d57de:	6465      	str	r5, [r4, #68]	; 0x44
}
   d57e0:	4620      	mov	r0, r4
   d57e2:	bd38      	pop	{r3, r4, r5, pc}
   d57e4:	000d8ca0 	.word	0x000d8ca0

000d57e8 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d57e8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d57ea:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d57ee:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d57f0:	b123      	cbz	r3, d57fc <_ZN3UDP13releaseBufferEv+0x14>
   d57f2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d57f4:	b110      	cbz	r0, d57fc <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d57f6:	2101      	movs	r1, #1
   d57f8:	f002 f9f4 	bl	d7be4 <_ZdlPvj>
    }
    _buffer = NULL;
   d57fc:	2300      	movs	r3, #0
   d57fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5800:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5804:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5806:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5808:	8723      	strh	r3, [r4, #56]	; 0x38
   d580a:	bd10      	pop	{r4, pc}

000d580c <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d580c:	b570      	push	{r4, r5, r6, lr}
   d580e:	4604      	mov	r4, r0
   d5810:	4616      	mov	r6, r2
   d5812:	460d      	mov	r5, r1
    releaseBuffer();
   d5814:	f7ff ffe8 	bl	d57e8 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5818:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d581a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d581c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d581e:	b93e      	cbnz	r6, d5830 <_ZN3UDP9setBufferEjPh+0x24>
   d5820:	b135      	cbz	r5, d5830 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5822:	4628      	mov	r0, r5
   d5824:	f7fe fc3b 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   d5828:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d582a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d582c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5830:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5832:	b103      	cbz	r3, d5836 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5834:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5836:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5838:	3000      	adds	r0, #0
   d583a:	bf18      	it	ne
   d583c:	2001      	movne	r0, #1
   d583e:	bd70      	pop	{r4, r5, r6, pc}

000d5840 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5842:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5844:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5846:	4605      	mov	r5, r0
   d5848:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d584a:	b91a      	cbnz	r2, d5854 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d584c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d584e:	b109      	cbz	r1, d5854 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d5850:	f7ff ffdc 	bl	d580c <_ZN3UDP9setBufferEjPh>
   d5854:	3404      	adds	r4, #4
   d5856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5858:	f105 0620 	add.w	r6, r5, #32
   d585c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d585e:	6823      	ldr	r3, [r4, #0]
   d5860:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5862:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d5864:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5866:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5868:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d586a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d586c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d586e <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d586e:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5870:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5872:	4604      	mov	r4, r0
   d5874:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d5876:	b91a      	cbnz	r2, d5880 <_ZN3UDP11parsePacketEm+0x12>
   d5878:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d587a:	b109      	cbz	r1, d5880 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d587c:	f7ff ffc6 	bl	d580c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5880:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5882:	2200      	movs	r2, #0
   d5884:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d5886:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5888:	b149      	cbz	r1, d589e <_ZN3UDP11parsePacketEm+0x30>
   d588a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d588c:	b13a      	cbz	r2, d589e <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d588e:	6823      	ldr	r3, [r4, #0]
   d5890:	4620      	mov	r0, r4
   d5892:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d5894:	4633      	mov	r3, r6
   d5896:	47a8      	blx	r5
        if (result > 0) {
   d5898:	2800      	cmp	r0, #0
            _total = result;
   d589a:	bfc8      	it	gt
   d589c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d589e:	6823      	ldr	r3, [r4, #0]
   d58a0:	4620      	mov	r0, r4
   d58a2:	691b      	ldr	r3, [r3, #16]
}
   d58a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d58a8:	4718      	bx	r3

000d58aa <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d58aa:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d58ac:	6940      	ldr	r0, [r0, #20]
   d58ae:	2800      	cmp	r0, #0
   d58b0:	db04      	blt.n	d58bc <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d58b2:	2301      	movs	r3, #1
   d58b4:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d58b8:	f7ff bf13 	b.w	d56e2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d58bc:	f04f 30ff 	mov.w	r0, #4294967295
   d58c0:	4770      	bx	lr

000d58c2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d58c2:	b510      	push	{r4, lr}
   d58c4:	4604      	mov	r4, r0
{
	free(buffer);
   d58c6:	6800      	ldr	r0, [r0, #0]
   d58c8:	f7ff fc2c 	bl	d5124 <free>
}
   d58cc:	4620      	mov	r0, r4
   d58ce:	bd10      	pop	{r4, pc}

000d58d0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d58d0:	b510      	push	{r4, lr}
   d58d2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d58d4:	6800      	ldr	r0, [r0, #0]
   d58d6:	b108      	cbz	r0, d58dc <_ZN6String10invalidateEv+0xc>
   d58d8:	f7ff fc24 	bl	d5124 <free>
	buffer = NULL;
   d58dc:	2300      	movs	r3, #0
   d58de:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d58e0:	60a3      	str	r3, [r4, #8]
   d58e2:	6063      	str	r3, [r4, #4]
   d58e4:	bd10      	pop	{r4, pc}

000d58e6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d58e6:	b538      	push	{r3, r4, r5, lr}
   d58e8:	4604      	mov	r4, r0
   d58ea:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d58ec:	6800      	ldr	r0, [r0, #0]
   d58ee:	3101      	adds	r1, #1
   d58f0:	f7ff fc20 	bl	d5134 <realloc>
	if (newbuffer) {
   d58f4:	b110      	cbz	r0, d58fc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d58f6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d58fa:	2001      	movs	r0, #1
	}
	return 0;
}
   d58fc:	bd38      	pop	{r3, r4, r5, pc}

000d58fe <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d58fe:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5900:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5902:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5904:	b113      	cbz	r3, d590c <_ZN6String7reserveEj+0xe>
   d5906:	6843      	ldr	r3, [r0, #4]
   d5908:	428b      	cmp	r3, r1
   d590a:	d207      	bcs.n	d591c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d590c:	4620      	mov	r0, r4
   d590e:	f7ff ffea 	bl	d58e6 <_ZN6String12changeBufferEj>
   d5912:	b120      	cbz	r0, d591e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5914:	68a3      	ldr	r3, [r4, #8]
   d5916:	b90b      	cbnz	r3, d591c <_ZN6String7reserveEj+0x1e>
   d5918:	6822      	ldr	r2, [r4, #0]
   d591a:	7013      	strb	r3, [r2, #0]
   d591c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d591e:	bd10      	pop	{r4, pc}

000d5920 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5920:	b570      	push	{r4, r5, r6, lr}
   d5922:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5924:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5926:	4604      	mov	r4, r0
   d5928:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d592a:	f7ff ffe8 	bl	d58fe <_ZN6String7reserveEj>
   d592e:	b918      	cbnz	r0, d5938 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5930:	4620      	mov	r0, r4
   d5932:	f7ff ffcd 	bl	d58d0 <_ZN6String10invalidateEv>
		return *this;
   d5936:	e009      	b.n	d594c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5938:	462a      	mov	r2, r5
   d593a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d593c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d593e:	6820      	ldr	r0, [r4, #0]
   d5940:	f002 fee5 	bl	d870e <memcpy>
	buffer[len] = 0;
   d5944:	6822      	ldr	r2, [r4, #0]
   d5946:	68a3      	ldr	r3, [r4, #8]
   d5948:	2100      	movs	r1, #0
   d594a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d594c:	4620      	mov	r0, r4
   d594e:	bd70      	pop	{r4, r5, r6, pc}

000d5950 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5950:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5952:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5954:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5956:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5958:	6043      	str	r3, [r0, #4]
	len = 0;
   d595a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d595c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d595e:	460d      	mov	r5, r1
   d5960:	b139      	cbz	r1, d5972 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5962:	4608      	mov	r0, r1
   d5964:	f002 ff57 	bl	d8816 <strlen>
   d5968:	4629      	mov	r1, r5
   d596a:	4602      	mov	r2, r0
   d596c:	4620      	mov	r0, r4
   d596e:	f7ff ffd7 	bl	d5920 <_ZN6String4copyEPKcj>
}
   d5972:	4620      	mov	r0, r4
   d5974:	bd38      	pop	{r3, r4, r5, pc}

000d5976 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5976:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5978:	b510      	push	{r4, lr}
   d597a:	460b      	mov	r3, r1
   d597c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d597e:	d007      	beq.n	d5990 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5980:	6809      	ldr	r1, [r1, #0]
   d5982:	b119      	cbz	r1, d598c <_ZN6StringaSERKS_+0x16>
   d5984:	689a      	ldr	r2, [r3, #8]
   d5986:	f7ff ffcb 	bl	d5920 <_ZN6String4copyEPKcj>
   d598a:	e001      	b.n	d5990 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d598c:	f7ff ffa0 	bl	d58d0 <_ZN6String10invalidateEv>

	return *this;
}
   d5990:	4620      	mov	r0, r4
   d5992:	bd10      	pop	{r4, pc}

000d5994 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5994:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5996:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5998:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d599a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d599c:	6043      	str	r3, [r0, #4]
	len = 0;
   d599e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d59a0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d59a2:	f7ff ffe8 	bl	d5976 <_ZN6StringaSERKS_>
}
   d59a6:	4620      	mov	r0, r4
   d59a8:	bd10      	pop	{r4, pc}
	...

000d59ac <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d59ac:	b40e      	push	{r1, r2, r3}
   d59ae:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d59b0:	ac09      	add	r4, sp, #36	; 0x24
   d59b2:	4605      	mov	r5, r0
   d59b4:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d59b8:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d59ba:	4623      	mov	r3, r4
   d59bc:	463a      	mov	r2, r7
   d59be:	2105      	movs	r1, #5
   d59c0:	a802      	add	r0, sp, #8
   d59c2:	f7ff fbc7 	bl	d5154 <vsnprintf>
    va_end(marker);

    String result;
   d59c6:	490c      	ldr	r1, [pc, #48]	; (d59f8 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d59c8:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d59ca:	4628      	mov	r0, r5
   d59cc:	f7ff ffc0 	bl	d5950 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d59d0:	4631      	mov	r1, r6
   d59d2:	4628      	mov	r0, r5
   d59d4:	f7ff ff93 	bl	d58fe <_ZN6String7reserveEj>
    if (result.buffer) {
   d59d8:	6828      	ldr	r0, [r5, #0]
   d59da:	b130      	cbz	r0, d59ea <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d59dc:	4623      	mov	r3, r4
   d59de:	463a      	mov	r2, r7
   d59e0:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d59e2:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d59e4:	f7ff fbb6 	bl	d5154 <vsnprintf>
        va_end(marker);
        result.len = n;
   d59e8:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d59ea:	4628      	mov	r0, r5
   d59ec:	b004      	add	sp, #16
   d59ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d59f2:	b003      	add	sp, #12
   d59f4:	4770      	bx	lr
   d59f6:	bf00      	nop
   d59f8:	000d8f70 	.word	0x000d8f70

000d59fc <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d59fc:	4770      	bx	lr

000d59fe <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d59fe:	2000      	movs	r0, #0
   d5a00:	4770      	bx	lr

000d5a02 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5a02:	b510      	push	{r4, lr}
   d5a04:	2114      	movs	r1, #20
   d5a06:	4604      	mov	r4, r0
   d5a08:	f002 f8ec 	bl	d7be4 <_ZdlPvj>
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	bd10      	pop	{r4, pc}

000d5a10 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5a10:	f7fe bb47 	b.w	d40a2 <_ZdlPv>

000d5a14 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5a14:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d5a16:	200a      	movs	r0, #10
   d5a18:	4a02      	ldr	r2, [pc, #8]	; (d5a24 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100+0x10>)
   d5a1a:	2100      	movs	r1, #0
   d5a1c:	f7ff fa94 	bl	d4f48 <panic_>
    }
}
   d5a20:	bd08      	pop	{r3, pc}
   d5a22:	bf00      	nop
   d5a24:	000d4ba1 	.word	0x000d4ba1

000d5a28 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5a28:	b510      	push	{r4, lr}
            locked_(false) {
   d5a2a:	2300      	movs	r3, #0
   d5a2c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5a2e:	4b04      	ldr	r3, [pc, #16]	; (d5a40 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5a30:	4604      	mov	r4, r0
   d5a32:	6818      	ldr	r0, [r3, #0]
   d5a34:	f7ff f948 	bl	d4cc8 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5a38:	2301      	movs	r3, #1
   d5a3a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5a3c:	4620      	mov	r0, r4
   d5a3e:	bd10      	pop	{r4, pc}
   d5a40:	2003e3dc 	.word	0x2003e3dc

000d5a44 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5a44:	b510      	push	{r4, lr}
        if (locked_) {
   d5a46:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5a48:	4604      	mov	r4, r0
        if (locked_) {
   d5a4a:	b11b      	cbz	r3, d5a54 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5a4c:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5a4e:	6818      	ldr	r0, [r3, #0]
   d5a50:	f7ff f942 	bl	d4cd8 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5a54:	4620      	mov	r0, r4
   d5a56:	bd10      	pop	{r4, pc}
   d5a58:	2003e3dc 	.word	0x2003e3dc

000d5a5c <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5a5c:	2200      	movs	r2, #0
   d5a5e:	6002      	str	r2, [r0, #0]
   d5a60:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d5a62:	4770      	bx	lr

000d5a64 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5a64:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5a66:	7982      	ldrb	r2, [r0, #6]
   d5a68:	798b      	ldrb	r3, [r1, #6]
   d5a6a:	429a      	cmp	r2, r3
   d5a6c:	d106      	bne.n	d5a7c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5a6e:	2206      	movs	r2, #6
   d5a70:	f002 fe3e 	bl	d86f0 <memcmp>
   d5a74:	fab0 f080 	clz	r0, r0
   d5a78:	0940      	lsrs	r0, r0, #5
   d5a7a:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5a7c:	2000      	movs	r0, #0
}
   d5a7e:	bd08      	pop	{r3, pc}

000d5a80 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5a82:	b18b      	cbz	r3, d5aa8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5a84:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5a86:	1ce5      	adds	r5, r4, #3
   d5a88:	428d      	cmp	r5, r1
   d5a8a:	d80f      	bhi.n	d5aac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5a8c:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5a8e:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5a90:	5d87      	ldrb	r7, [r0, r6]
   d5a92:	4297      	cmp	r7, r2
   d5a94:	d105      	bne.n	d5aa2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5a96:	442e      	add	r6, r5
   d5a98:	42b1      	cmp	r1, r6
   d5a9a:	d307      	bcc.n	d5aac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5a9c:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5a9e:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5aa2:	3501      	adds	r5, #1
   d5aa4:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5aa6:	e7ee      	b.n	d5a86 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5aa8:	4618      	mov	r0, r3
   d5aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5aac:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ab0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5ab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5ab4:	4604      	mov	r4, r0
   d5ab6:	460e      	mov	r6, r1
   d5ab8:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5aba:	4617      	mov	r7, r2
   d5abc:	2a00      	cmp	r2, #0
   d5abe:	d03a      	beq.n	d5b36 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5ac0:	460a      	mov	r2, r1
   d5ac2:	ab01      	add	r3, sp, #4
   d5ac4:	6a01      	ldr	r1, [r0, #32]
   d5ac6:	f7ff ffdb 	bl	d5a80 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5aca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5ace:	6a22      	ldr	r2, [r4, #32]
   d5ad0:	bb03      	cbnz	r3, d5b14 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5ad2:	b1f8      	cbz	r0, d5b14 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5ad4:	1c96      	adds	r6, r2, #2
   d5ad6:	442e      	add	r6, r5
   d5ad8:	1a36      	subs	r6, r6, r0
   d5ada:	2e1f      	cmp	r6, #31
   d5adc:	d82b      	bhi.n	d5b36 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5ade:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5ae2:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5ae6:	ebc8 0202 	rsb	r2, r8, r2
   d5aea:	1a12      	subs	r2, r2, r0
   d5aec:	eb00 0108 	add.w	r1, r0, r8
   d5af0:	eb05 0009 	add.w	r0, r5, r9
   d5af4:	b292      	uxth	r2, r2
   d5af6:	4421      	add	r1, r4
   d5af8:	4420      	add	r0, r4
   d5afa:	f002 fe13 	bl	d8724 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5afe:	1c6b      	adds	r3, r5, #1
   d5b00:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5b04:	462a      	mov	r2, r5
   d5b06:	4639      	mov	r1, r7
   d5b08:	eb04 0009 	add.w	r0, r4, r9
   d5b0c:	f002 fdff 	bl	d870e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5b10:	6226      	str	r6, [r4, #32]
   d5b12:	e010      	b.n	d5b36 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5b14:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5b16:	182b      	adds	r3, r5, r0
   d5b18:	2b1f      	cmp	r3, #31
   d5b1a:	d80c      	bhi.n	d5b36 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5b1c:	1c6b      	adds	r3, r5, #1
   d5b1e:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5b20:	4422      	add	r2, r4
   d5b22:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5b24:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5b26:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5b28:	4420      	add	r0, r4
   d5b2a:	462a      	mov	r2, r5
   d5b2c:	f002 fdef 	bl	d870e <memcpy>
        selfLen_ += len;
   d5b30:	6a22      	ldr	r2, [r4, #32]
   d5b32:	442a      	add	r2, r5
   d5b34:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5b36:	6a20      	ldr	r0, [r4, #32]
}
   d5b38:	b003      	add	sp, #12
   d5b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5b3e <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5b3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5b40:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5b42:	4603      	mov	r3, r0
   d5b44:	f100 021f 	add.w	r2, r0, #31
   d5b48:	2000      	movs	r0, #0
   d5b4a:	f803 0b01 	strb.w	r0, [r3], #1
   d5b4e:	4293      	cmp	r3, r2
   d5b50:	f04f 0100 	mov.w	r1, #0
   d5b54:	d1f9      	bne.n	d5b4a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5b56:	aa04      	add	r2, sp, #16
   d5b58:	2306      	movs	r3, #6
   d5b5a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b5e:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5b60:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b62:	9100      	str	r1, [sp, #0]
   d5b64:	4620      	mov	r0, r4
   d5b66:	4619      	mov	r1, r3
   d5b68:	f7ff ffa2 	bl	d5ab0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5b6c:	4620      	mov	r0, r4
   d5b6e:	b004      	add	sp, #16
   d5b70:	bd10      	pop	{r4, pc}

000d5b72 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5b72:	b510      	push	{r4, lr}
   d5b74:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5b76:	69c2      	ldr	r2, [r0, #28]
   d5b78:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5b7c:	4293      	cmp	r3, r2
   d5b7e:	4618      	mov	r0, r3
   d5b80:	d006      	beq.n	d5b90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5b82:	6804      	ldr	r4, [r0, #0]
   d5b84:	8824      	ldrh	r4, [r4, #0]
   d5b86:	428c      	cmp	r4, r1
   d5b88:	f103 0308 	add.w	r3, r3, #8
   d5b8c:	d1f6      	bne.n	d5b7c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5b8e:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5b90:	2000      	movs	r0, #0
    }
   d5b92:	bd10      	pop	{r4, pc}

000d5b94 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5b94:	b510      	push	{r4, lr}
    return impl()->address();
   d5b96:	680a      	ldr	r2, [r1, #0]
   d5b98:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5b9c:	6003      	str	r3, [r0, #0]
   d5b9e:	6853      	ldr	r3, [r2, #4]
   d5ba0:	6043      	str	r3, [r0, #4]
}
   d5ba2:	bd10      	pop	{r4, pc}

000d5ba4 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5ba6:	6802      	ldr	r2, [r0, #0]
   d5ba8:	680b      	ldr	r3, [r1, #0]
   d5baa:	8812      	ldrh	r2, [r2, #0]
   d5bac:	881b      	ldrh	r3, [r3, #0]
   d5bae:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5bb0:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5bb2:	d10c      	bne.n	d5bce <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5bb4:	4601      	mov	r1, r0
   d5bb6:	4668      	mov	r0, sp
   d5bb8:	f7ff ffec 	bl	d5b94 <_ZNK8particle13BlePeerDevice7addressEv>
   d5bbc:	4621      	mov	r1, r4
   d5bbe:	a802      	add	r0, sp, #8
   d5bc0:	f7ff ffe8 	bl	d5b94 <_ZNK8particle13BlePeerDevice7addressEv>
   d5bc4:	a902      	add	r1, sp, #8
   d5bc6:	4668      	mov	r0, sp
   d5bc8:	f7ff ff4c 	bl	d5a64 <_ZNK8particle10BleAddresseqERKS0_>
   d5bcc:	b900      	cbnz	r0, d5bd0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5bce:	2000      	movs	r0, #0
}
   d5bd0:	b004      	add	sp, #16
   d5bd2:	bd10      	pop	{r4, pc}

000d5bd4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5bd4:	b510      	push	{r4, lr}
   d5bd6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5bd8:	2034      	movs	r0, #52	; 0x34
   d5bda:	f7fe fa5e 	bl	d409a <_Znwj>
   d5bde:	4601      	mov	r1, r0
   d5be0:	b168      	cbz	r0, d5bfe <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5be2:	2300      	movs	r3, #0
   d5be4:	6003      	str	r3, [r0, #0]
   d5be6:	6043      	str	r3, [r0, #4]
   d5be8:	6083      	str	r3, [r0, #8]
   d5bea:	60c3      	str	r3, [r0, #12]
   d5bec:	6103      	str	r3, [r0, #16]
   d5bee:	6143      	str	r3, [r0, #20]
   d5bf0:	6183      	str	r3, [r0, #24]
   d5bf2:	61c3      	str	r3, [r0, #28]
   d5bf4:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5bf6:	6243      	str	r3, [r0, #36]	; 0x24
   d5bf8:	6283      	str	r3, [r0, #40]	; 0x28
   d5bfa:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5bfc:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5bfe:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5c00:	b919      	cbnz	r1, d5c0a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5c02:	4a0a      	ldr	r2, [pc, #40]	; (d5c2c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5c04:	200a      	movs	r0, #10
   d5c06:	f7ff f99f 	bl	d4f48 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5c0a:	2000      	movs	r0, #0
   d5c0c:	f7fe ffd8 	bl	d4bc0 <hal_ble_stack_init>
   d5c10:	b120      	cbz	r0, d5c1c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5c12:	4a06      	ldr	r2, [pc, #24]	; (d5c2c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5c14:	2100      	movs	r1, #0
   d5c16:	200a      	movs	r0, #10
   d5c18:	f7ff f996 	bl	d4f48 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5c1c:	2200      	movs	r2, #0
   d5c1e:	6821      	ldr	r1, [r4, #0]
   d5c20:	4803      	ldr	r0, [pc, #12]	; (d5c30 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5c22:	f7fe ffe7 	bl	d4bf4 <hal_ble_set_callback_on_periph_link_events>
}
   d5c26:	4620      	mov	r0, r4
   d5c28:	bd10      	pop	{r4, pc}
   d5c2a:	bf00      	nop
   d5c2c:	000d4ba1 	.word	0x000d4ba1
   d5c30:	000d5ef1 	.word	0x000d5ef1

000d5c34 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5c34:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5c36:	4c0a      	ldr	r4, [pc, #40]	; (d5c60 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5c38:	6823      	ldr	r3, [r4, #0]
   d5c3a:	07db      	lsls	r3, r3, #31
   d5c3c:	d40e      	bmi.n	d5c5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5c3e:	4620      	mov	r0, r4
   d5c40:	f7fe fa33 	bl	d40aa <__cxa_guard_acquire>
   d5c44:	b150      	cbz	r0, d5c5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5c46:	4807      	ldr	r0, [pc, #28]	; (d5c64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5c48:	f7ff ffc4 	bl	d5bd4 <_ZN8particle14BleLocalDeviceC1Ev>
   d5c4c:	4620      	mov	r0, r4
   d5c4e:	f7fe fa31 	bl	d40b4 <__cxa_guard_release>
   d5c52:	4a05      	ldr	r2, [pc, #20]	; (d5c68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5c54:	4905      	ldr	r1, [pc, #20]	; (d5c6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5c56:	4803      	ldr	r0, [pc, #12]	; (d5c64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5c58:	f001 ffb6 	bl	d7bc8 <__aeabi_atexit>
    return instance;
}
   d5c5c:	4801      	ldr	r0, [pc, #4]	; (d5c64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5c5e:	bd10      	pop	{r4, pc}
   d5c60:	2003e3d8 	.word	0x2003e3d8
   d5c64:	2003e3d4 	.word	0x2003e3d4
   d5c68:	2003ce7c 	.word	0x2003ce7c
   d5c6c:	000d5d05 	.word	0x000d5d05

000d5c70 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   d5c70:	b513      	push	{r0, r1, r4, lr}
   d5c72:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5c74:	a801      	add	r0, sp, #4
   d5c76:	f7ff fed7 	bl	d5a28 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   d5c7a:	2100      	movs	r1, #0
   d5c7c:	4620      	mov	r0, r4
   d5c7e:	f7fe ffa7 	bl	d4bd0 <hal_ble_gap_set_tx_power>
   d5c82:	4604      	mov	r4, r0
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
   d5c84:	a801      	add	r0, sp, #4
   d5c86:	f7ff fedd 	bl	d5a44 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}
   d5c8a:	4620      	mov	r0, r4
   d5c8c:	b002      	add	sp, #8
   d5c8e:	bd10      	pop	{r4, pc}

000d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5c90:	680b      	ldr	r3, [r1, #0]
   d5c92:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5c94:	b113      	cbz	r3, d5c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5c96:	685a      	ldr	r2, [r3, #4]
   d5c98:	3201      	adds	r2, #1
   d5c9a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5c9c:	4770      	bx	lr

000d5c9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5c9e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ca0:	6804      	ldr	r4, [r0, #0]
   d5ca2:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ca4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5ca6:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5caa:	42a6      	cmp	r6, r4
   d5cac:	d004      	beq.n	d5cb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5cae:	1d20      	adds	r0, r4, #4
   d5cb0:	f7fe fb41 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cb4:	3408      	adds	r4, #8
   d5cb6:	e7f8      	b.n	d5caa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5cb8:	6828      	ldr	r0, [r5, #0]
   d5cba:	f7ff fa33 	bl	d5124 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5cbe:	4628      	mov	r0, r5
   d5cc0:	bd70      	pop	{r4, r5, r6, pc}

000d5cc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5cc2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5cc4:	6804      	ldr	r4, [r0, #0]
   d5cc6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5cc8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5cca:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5cce:	42a6      	cmp	r6, r4
   d5cd0:	d004      	beq.n	d5cdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5cd2:	1d20      	adds	r0, r4, #4
   d5cd4:	f7fe fb2f 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cd8:	3408      	adds	r4, #8
   d5cda:	e7f8      	b.n	d5cce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5cdc:	6828      	ldr	r0, [r5, #0]
   d5cde:	f7ff fa21 	bl	d5124 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5ce2:	4628      	mov	r0, r5
   d5ce4:	bd70      	pop	{r4, r5, r6, pc}

000d5ce6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5ce6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5ce8:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5cea:	f104 0018 	add.w	r0, r4, #24
   d5cee:	f7ff ffe8 	bl	d5cc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5cf2:	f104 000c 	add.w	r0, r4, #12
   d5cf6:	f7ff ffd2 	bl	d5c9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5d00:	f7fe b9cf 	b.w	d40a2 <_ZdlPv>

000d5d04 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d06:	6804      	ldr	r4, [r0, #0]
   d5d08:	4607      	mov	r7, r0
   d5d0a:	b1c4      	cbz	r4, d5d3e <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5d0c:	69a5      	ldr	r5, [r4, #24]
   d5d0e:	69e3      	ldr	r3, [r4, #28]
   d5d10:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5d14:	42ae      	cmp	r6, r5
   d5d16:	d004      	beq.n	d5d22 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d18:	1d28      	adds	r0, r5, #4
   d5d1a:	f7fe fb0c 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d1e:	3508      	adds	r5, #8
   d5d20:	e7f8      	b.n	d5d14 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5d22:	69a0      	ldr	r0, [r4, #24]
   d5d24:	f7ff f9fe 	bl	d5124 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5d28:	f104 000c 	add.w	r0, r4, #12
   d5d2c:	f7ff ffc9 	bl	d5cc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5d30:	4620      	mov	r0, r4
   d5d32:	f7ff ffb4 	bl	d5c9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d36:	2134      	movs	r1, #52	; 0x34
   d5d38:	4620      	mov	r0, r4
   d5d3a:	f001 ff53 	bl	d7be4 <_ZdlPvj>
   d5d3e:	4638      	mov	r0, r7
   d5d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5d44 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5d44:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5d46:	2500      	movs	r5, #0
   d5d48:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d4a:	6045      	str	r5, [r0, #4]
   d5d4c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5d4e:	2024      	movs	r0, #36	; 0x24
   d5d50:	f7fe f9a3 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5d54:	4604      	mov	r4, r0
   d5d56:	b178      	cbz	r0, d5d78 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5d58:	4603      	mov	r3, r0
   d5d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5d5e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5d62:	f8c0 5002 	str.w	r5, [r0, #2]
   d5d66:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5d68:	7285      	strb	r5, [r0, #10]
   d5d6a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5d6c:	60c5      	str	r5, [r0, #12]
   d5d6e:	6105      	str	r5, [r0, #16]
   d5d70:	6145      	str	r5, [r0, #20]
   d5d72:	6185      	str	r5, [r0, #24]
   d5d74:	61c5      	str	r5, [r0, #28]
   d5d76:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5d78:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5d7a:	2014      	movs	r0, #20
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	f7fe f98c 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5d82:	4603      	mov	r3, r0
   d5d84:	b128      	cbz	r0, d5d92 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5d86:	2201      	movs	r2, #1
   d5d88:	6042      	str	r2, [r0, #4]
   d5d8a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5d8c:	4a08      	ldr	r2, [pc, #32]	; (d5db0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5d8e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5d90:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5d92:	a802      	add	r0, sp, #8
   d5d94:	6872      	ldr	r2, [r6, #4]
   d5d96:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5d9a:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5d9c:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5d9e:	f7fe faca 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5da2:	6833      	ldr	r3, [r6, #0]
   d5da4:	b90b      	cbnz	r3, d5daa <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5da6:	f7ff fe35 	bl	d5a14 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.100>
        SPARK_ASSERT(false);
    }
}
   d5daa:	4630      	mov	r0, r6
   d5dac:	b002      	add	sp, #8
   d5dae:	bd70      	pop	{r4, r5, r6, pc}
   d5db0:	000d8d18 	.word	0x000d8d18

000d5db4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5db4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5db6:	b570      	push	{r4, r5, r6, lr}
   d5db8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5dba:	d91a      	bls.n	d5df2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5dbc:	4290      	cmp	r0, r2
   d5dbe:	d219      	bcs.n	d5df4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5dc0:	f1a1 0608 	sub.w	r6, r1, #8
   d5dc4:	1a51      	subs	r1, r2, r1
   d5dc6:	3904      	subs	r1, #4
   d5dc8:	1f15      	subs	r5, r2, #4
   d5dca:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5dcc:	1f2b      	subs	r3, r5, #4
   d5dce:	429e      	cmp	r6, r3
   d5dd0:	d025      	beq.n	d5e1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5dd2:	2c04      	cmp	r4, #4
   d5dd4:	d007      	beq.n	d5de6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5dd6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5dda:	f844 3c04 	str.w	r3, [r4, #-4]
   d5dde:	4629      	mov	r1, r5
   d5de0:	4620      	mov	r0, r4
   d5de2:	f7ff ff55 	bl	d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5de6:	4628      	mov	r0, r5
   d5de8:	f7fe faa5 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dec:	3d08      	subs	r5, #8
   d5dee:	3c08      	subs	r4, #8
   d5df0:	e7ec      	b.n	d5dcc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5df2:	d014      	beq.n	d5e1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5df4:	1d0c      	adds	r4, r1, #4
   d5df6:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5df8:	1f23      	subs	r3, r4, #4
   d5dfa:	429d      	cmp	r5, r3
   d5dfc:	d00f      	beq.n	d5e1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5dfe:	2e04      	cmp	r6, #4
   d5e00:	d007      	beq.n	d5e12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e02:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5e06:	f846 3c04 	str.w	r3, [r6, #-4]
   d5e0a:	4621      	mov	r1, r4
   d5e0c:	4630      	mov	r0, r6
   d5e0e:	f7ff ff3f 	bl	d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e12:	4620      	mov	r0, r4
   d5e14:	f7fe fa8f 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e18:	3408      	adds	r4, #8
   d5e1a:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5e1c:	e7ec      	b.n	d5df8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5e1e:	bd70      	pop	{r4, r5, r6, pc}

000d5e20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5e24:	6804      	ldr	r4, [r0, #0]
   d5e26:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5e28:	4605      	mov	r5, r0
   d5e2a:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5e2c:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5e30:	42a7      	cmp	r7, r4
   d5e32:	d018      	beq.n	d5e66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5e34:	4641      	mov	r1, r8
   d5e36:	4620      	mov	r0, r4
   d5e38:	f7ff feb4 	bl	d5ba4 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5e3c:	4606      	mov	r6, r0
   d5e3e:	b908      	cbnz	r0, d5e44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5e40:	3408      	adds	r4, #8
   d5e42:	e7f5      	b.n	d5e30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5e44:	b18c      	cbz	r4, d5e6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5e46:	1d20      	adds	r0, r4, #4
   d5e48:	f7fe fa75 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5e4c:	682b      	ldr	r3, [r5, #0]
   d5e4e:	686a      	ldr	r2, [r5, #4]
   d5e50:	f104 0108 	add.w	r1, r4, #8
   d5e54:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5e58:	4620      	mov	r0, r4
   d5e5a:	f7ff ffab 	bl	d5db4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5e5e:	686b      	ldr	r3, [r5, #4]
   d5e60:	3b01      	subs	r3, #1
   d5e62:	606b      	str	r3, [r5, #4]
    return true;
   d5e64:	e002      	b.n	d5e6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5e66:	2600      	movs	r6, #0
   d5e68:	e000      	b.n	d5e6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5e6a:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5e6c:	4630      	mov	r0, r6
   d5e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5e74:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e76:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5e7a:	6847      	ldr	r7, [r0, #4]
   d5e7c:	9300      	str	r3, [sp, #0]
   d5e7e:	a801      	add	r0, sp, #4
   d5e80:	f7ff ff06 	bl	d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e84:	6866      	ldr	r6, [r4, #4]
   d5e86:	68a3      	ldr	r3, [r4, #8]
   d5e88:	429e      	cmp	r6, r3
   d5e8a:	db14      	blt.n	d5eb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5e8c:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5e8e:	2e00      	cmp	r6, #0
   d5e90:	dd0b      	ble.n	d5eaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5e92:	00f0      	lsls	r0, r6, #3
   d5e94:	f7ff f93e 	bl	d5114 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5e98:	4605      	mov	r5, r0
   d5e9a:	b318      	cbz	r0, d5ee4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5e9c:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5ea0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5ea4:	f7ff ff86 	bl	d5db4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5ea8:	e000      	b.n	d5eac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5eaa:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5eac:	6820      	ldr	r0, [r4, #0]
   d5eae:	f7ff f939 	bl	d5124 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5eb2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5eb4:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5eb6:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5eb8:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5eba:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5ebe:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5ec2:	4629      	mov	r1, r5
   d5ec4:	f105 0008 	add.w	r0, r5, #8
   d5ec8:	f7ff ff74 	bl	d5db4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5ecc:	b135      	cbz	r5, d5edc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5ece:	9b00      	ldr	r3, [sp, #0]
   d5ed0:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5ed4:	a901      	add	r1, sp, #4
   d5ed6:	1d28      	adds	r0, r5, #4
   d5ed8:	f7ff feda 	bl	d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5edc:	6863      	ldr	r3, [r4, #4]
   d5ede:	3301      	adds	r3, #1
   d5ee0:	6063      	str	r3, [r4, #4]
   d5ee2:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ee4:	a801      	add	r0, sp, #4
   d5ee6:	f7fe fa26 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5eea:	4628      	mov	r0, r5
   d5eec:	b003      	add	sp, #12
   d5eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ef0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ef4:	4604      	mov	r4, r0
   d5ef6:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5ef8:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5efa:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5efc:	f7ff fd94 	bl	d5a28 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5f00:	6823      	ldr	r3, [r4, #0]
   d5f02:	2b03      	cmp	r3, #3
   d5f04:	d002      	beq.n	d5f0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5f06:	2b04      	cmp	r3, #4
   d5f08:	d042      	beq.n	d5f90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5f0a:	e087      	b.n	d601c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5f0c:	a804      	add	r0, sp, #16
   d5f0e:	f7ff ff19 	bl	d5d44 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5f12:	9b04      	ldr	r3, [sp, #16]
   d5f14:	8922      	ldrh	r2, [r4, #8]
   d5f16:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5f18:	6862      	ldr	r2, [r4, #4]
   d5f1a:	9904      	ldr	r1, [sp, #16]
   d5f1c:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5f20:	f8c1 3002 	str.w	r3, [r1, #2]
   d5f24:	6853      	ldr	r3, [r2, #4]
   d5f26:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f2a:	a807      	add	r0, sp, #28
   d5f2c:	9b04      	ldr	r3, [sp, #16]
   d5f2e:	9306      	str	r3, [sp, #24]
   d5f30:	a905      	add	r1, sp, #20
   d5f32:	f7ff fead 	bl	d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5f36:	a906      	add	r1, sp, #24
   d5f38:	f105 0018 	add.w	r0, r5, #24
   d5f3c:	f7ff ff99 	bl	d5e72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5f40:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f42:	a807      	add	r0, sp, #28
   d5f44:	f7fe f9f7 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f48:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5f4a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5f4c:	b974      	cbnz	r4, d5f6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5f4e:	4b36      	ldr	r3, [pc, #216]	; (d6028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5f50:	9300      	str	r3, [sp, #0]
   d5f52:	aa06      	add	r2, sp, #24
   d5f54:	4623      	mov	r3, r4
   d5f56:	4935      	ldr	r1, [pc, #212]	; (d602c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5f58:	9407      	str	r4, [sp, #28]
   d5f5a:	2032      	movs	r0, #50	; 0x32
   d5f5c:	f7fe fffc 	bl	d4f58 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5f60:	9b04      	ldr	r3, [sp, #16]
   d5f62:	4621      	mov	r1, r4
   d5f64:	8818      	ldrh	r0, [r3, #0]
   d5f66:	f7fe fe3b 	bl	d4be0 <hal_ble_gap_disconnect>
   d5f6a:	e00d      	b.n	d5f88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5f6c:	4a30      	ldr	r2, [pc, #192]	; (d6030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5f6e:	9200      	str	r2, [sp, #0]
   d5f70:	2300      	movs	r3, #0
   d5f72:	aa06      	add	r2, sp, #24
   d5f74:	492d      	ldr	r1, [pc, #180]	; (d602c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5f76:	9307      	str	r3, [sp, #28]
   d5f78:	2001      	movs	r0, #1
   d5f7a:	f7fe ffed 	bl	d4f58 <log_message>
                if (impl->connectedCb_) {
   d5f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5f80:	b113      	cbz	r3, d5f88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5f82:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5f84:	a804      	add	r0, sp, #16
   d5f86:	4798      	blx	r3
   d5f88:	a805      	add	r0, sp, #20
   d5f8a:	f7fe f9d4 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f8e:	e045      	b.n	d601c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5f90:	8921      	ldrh	r1, [r4, #8]
   d5f92:	4628      	mov	r0, r5
   d5f94:	f7ff fded 	bl	d5b72 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5f98:	4607      	mov	r7, r0
   d5f9a:	2800      	cmp	r0, #0
   d5f9c:	d03e      	beq.n	d601c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5f9e:	6804      	ldr	r4, [r0, #0]
   d5fa0:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5fa2:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5fa8:	8022      	strh	r2, [r4, #0]
   d5faa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5fae:	4299      	cmp	r1, r3
   d5fb0:	d003      	beq.n	d5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5fb2:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5fb6:	8042      	strh	r2, [r0, #2]
   d5fb8:	e7f9      	b.n	d5fae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5fba:	68e6      	ldr	r6, [r4, #12]
   d5fbc:	6923      	ldr	r3, [r4, #16]
   d5fbe:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5fc2:	45b0      	cmp	r8, r6
   d5fc4:	d004      	beq.n	d5fd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5fc6:	1d30      	adds	r0, r6, #4
   d5fc8:	f7fe f9b5 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fcc:	3608      	adds	r6, #8
   d5fce:	e7f8      	b.n	d5fc2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5fd0:	2300      	movs	r3, #0
   d5fd2:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5fd4:	69a6      	ldr	r6, [r4, #24]
   d5fd6:	69e3      	ldr	r3, [r4, #28]
   d5fd8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5fdc:	45b0      	cmp	r8, r6
   d5fde:	d004      	beq.n	d5fea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5fe0:	1d30      	adds	r0, r6, #4
   d5fe2:	f7fe f9a8 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fe6:	3608      	adds	r6, #8
   d5fe8:	e7f8      	b.n	d5fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5fea:	2300      	movs	r3, #0
   d5fec:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5fee:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5ff0:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5ff2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5ff4:	b113      	cbz	r3, d5ffc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5ff6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5ff8:	4638      	mov	r0, r7
   d5ffa:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5ffc:	2320      	movs	r3, #32
   d5ffe:	4a0d      	ldr	r2, [pc, #52]	; (d6034 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d6000:	9306      	str	r3, [sp, #24]
   d6002:	9200      	str	r2, [sp, #0]
   d6004:	2300      	movs	r3, #0
   d6006:	4909      	ldr	r1, [pc, #36]	; (d602c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6008:	9307      	str	r3, [sp, #28]
   d600a:	2001      	movs	r0, #1
   d600c:	aa06      	add	r2, sp, #24
   d600e:	f7fe ffa3 	bl	d4f58 <log_message>
                    impl->peers_.removeOne(*peer);
   d6012:	4639      	mov	r1, r7
   d6014:	f105 0018 	add.w	r0, r5, #24
   d6018:	f7ff ff02 	bl	d5e20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d601c:	a803      	add	r0, sp, #12
   d601e:	f7ff fd11 	bl	d5a44 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d6022:	b00e      	add	sp, #56	; 0x38
   d6024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6028:	000d8d8e 	.word	0x000d8d8e
   d602c:	000d8d2c 	.word	0x000d8d2c
   d6030:	000d8db4 	.word	0x000d8db4
   d6034:	000d8dd1 	.word	0x000d8dd1

000d6038 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6038:	4802      	ldr	r0, [pc, #8]	; (d6044 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d603a:	2300      	movs	r3, #0
   d603c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d603e:	f7fe be3b 	b.w	d4cb8 <os_mutex_recursive_create>
   d6042:	bf00      	nop
   d6044:	2003e3dc 	.word	0x2003e3dc

000d6048 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d604a:	4606      	mov	r6, r0
   d604c:	460d      	mov	r5, r1
   d604e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6050:	2400      	movs	r4, #0
  while (size--) {
   d6052:	42bd      	cmp	r5, r7
   d6054:	d00c      	beq.n	d6070 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6056:	6833      	ldr	r3, [r6, #0]
   d6058:	f815 1b01 	ldrb.w	r1, [r5], #1
   d605c:	689b      	ldr	r3, [r3, #8]
   d605e:	4630      	mov	r0, r6
   d6060:	4798      	blx	r3
     if (chunk>=0)
   d6062:	2800      	cmp	r0, #0
   d6064:	db01      	blt.n	d606a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6066:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6068:	e7f3      	b.n	d6052 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d606a:	2c00      	cmp	r4, #0
   d606c:	bf08      	it	eq
   d606e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6070:	4620      	mov	r0, r4
   d6072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6074 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6074:	b570      	push	{r4, r5, r6, lr}
   d6076:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6078:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d607a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d607c:	b149      	cbz	r1, d6092 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d607e:	f002 fbca 	bl	d8816 <strlen>
   d6082:	682b      	ldr	r3, [r5, #0]
   d6084:	4602      	mov	r2, r0
   d6086:	4621      	mov	r1, r4
   d6088:	4628      	mov	r0, r5
   d608a:	68db      	ldr	r3, [r3, #12]
    }
   d608c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6090:	4718      	bx	r3
    }
   d6092:	bd70      	pop	{r4, r5, r6, pc}

000d6094 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6094:	6803      	ldr	r3, [r0, #0]
   d6096:	689b      	ldr	r3, [r3, #8]
   d6098:	4718      	bx	r3

000d609a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d609a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d609c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d609e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d60a0:	f7ff fff8 	bl	d6094 <_ZN5Print5printEc>
  n += print('\n');
   d60a4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d60a6:	4604      	mov	r4, r0
  n += print('\n');
   d60a8:	4628      	mov	r0, r5
   d60aa:	f7ff fff3 	bl	d6094 <_ZN5Print5printEc>
  return n;
}
   d60ae:	4420      	add	r0, r4
   d60b0:	bd38      	pop	{r3, r4, r5, pc}

000d60b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d60b2:	b538      	push	{r3, r4, r5, lr}
   d60b4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60b6:	f7ff ffdd 	bl	d6074 <_ZN5Print5writeEPKc>
   d60ba:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d60bc:	4628      	mov	r0, r5
   d60be:	f7ff ffec 	bl	d609a <_ZN5Print7printlnEv>
  return n;
}
   d60c2:	4420      	add	r0, r4
   d60c4:	bd38      	pop	{r3, r4, r5, pc}

000d60c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d60c6:	b530      	push	{r4, r5, lr}
   d60c8:	b08b      	sub	sp, #44	; 0x2c
   d60ca:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d60cc:	2100      	movs	r1, #0
   d60ce:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d60d2:	2a01      	cmp	r2, #1
   d60d4:	bf98      	it	ls
   d60d6:	220a      	movls	r2, #10
   d60d8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d60dc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d60e0:	fb05 3312 	mls	r3, r5, r2, r3
   d60e4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d60e8:	2b09      	cmp	r3, #9
   d60ea:	bf94      	ite	ls
   d60ec:	3330      	addls	r3, #48	; 0x30
   d60ee:	3337      	addhi	r3, #55	; 0x37
   d60f0:	b2db      	uxtb	r3, r3
   d60f2:	4621      	mov	r1, r4
   d60f4:	f804 3901 	strb.w	r3, [r4], #-1
   d60f8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d60fa:	2d00      	cmp	r5, #0
   d60fc:	d1ee      	bne.n	d60dc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d60fe:	f7ff ffb9 	bl	d6074 <_ZN5Print5writeEPKc>
}
   d6102:	b00b      	add	sp, #44	; 0x2c
   d6104:	bd30      	pop	{r4, r5, pc}

000d6106 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6106:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6108:	b92a      	cbnz	r2, d6116 <_ZN5Print5printEmi+0x10>
   d610a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d610c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6110:	689b      	ldr	r3, [r3, #8]
   d6112:	b2c9      	uxtb	r1, r1
   d6114:	4718      	bx	r3
  else return printNumber(n, base);
   d6116:	b2d2      	uxtb	r2, r2
}
   d6118:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d611c:	f7ff bfd3 	b.w	d60c6 <_ZN5Print11printNumberEmh>

000d6120 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6120:	f7ff bff1 	b.w	d6106 <_ZN5Print5printEmi>

000d6124 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6124:	b40c      	push	{r2, r3}
   d6126:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d612a:	b087      	sub	sp, #28
   d612c:	af00      	add	r7, sp, #0
   d612e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6132:	4605      	mov	r5, r0
   d6134:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6138:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d613a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d613c:	4623      	mov	r3, r4
   d613e:	464a      	mov	r2, r9
   d6140:	2114      	movs	r1, #20
   d6142:	1d38      	adds	r0, r7, #4
   d6144:	f7ff f806 	bl	d5154 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6148:	2813      	cmp	r0, #19
   d614a:	d805      	bhi.n	d6158 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d614c:	1d39      	adds	r1, r7, #4
   d614e:	4628      	mov	r0, r5
   d6150:	f7ff ff90 	bl	d6074 <_ZN5Print5writeEPKc>
   d6154:	4604      	mov	r4, r0
   d6156:	e013      	b.n	d6180 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6158:	f100 0308 	add.w	r3, r0, #8
   d615c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6160:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6162:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6166:	1c41      	adds	r1, r0, #1
   d6168:	4623      	mov	r3, r4
   d616a:	464a      	mov	r2, r9
   d616c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d616e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6170:	f7fe fff0 	bl	d5154 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6174:	4669      	mov	r1, sp
   d6176:	4628      	mov	r0, r5
   d6178:	f7ff ff7c 	bl	d6074 <_ZN5Print5writeEPKc>
   d617c:	4604      	mov	r4, r0
   d617e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6180:	b11e      	cbz	r6, d618a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6182:	4628      	mov	r0, r5
   d6184:	f7ff ff89 	bl	d609a <_ZN5Print7printlnEv>
   d6188:	4404      	add	r4, r0
    return n;
}
   d618a:	4620      	mov	r0, r4
   d618c:	371c      	adds	r7, #28
   d618e:	46bd      	mov	sp, r7
   d6190:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6194:	b002      	add	sp, #8
   d6196:	4770      	bx	lr

000d6198 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6198:	6800      	ldr	r0, [r0, #0]
   d619a:	f7fe bd95 	b.w	d4cc8 <os_mutex_recursive_lock>
	...

000d61a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d61a0:	4b01      	ldr	r3, [pc, #4]	; (d61a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d61a2:	4a02      	ldr	r2, [pc, #8]	; (d61ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d61a4:	601a      	str	r2, [r3, #0]
   d61a6:	4770      	bx	lr
   d61a8:	2003e3e0 	.word	0x2003e3e0
   d61ac:	000d8f3f 	.word	0x000d8f3f

000d61b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d61b0:	4b02      	ldr	r3, [pc, #8]	; (d61bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	4b02      	ldr	r3, [pc, #8]	; (d61c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d61b6:	601a      	str	r2, [r3, #0]
   d61b8:	4770      	bx	lr
   d61ba:	bf00      	nop
   d61bc:	2003ce14 	.word	0x2003ce14
   d61c0:	2003e3e4 	.word	0x2003e3e4

000d61c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d61c4:	2100      	movs	r1, #0
   d61c6:	f7fe bed7 	b.w	d4f78 <system_delay_ms>

000d61ca <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d61ca:	b510      	push	{r4, lr}
   d61cc:	4604      	mov	r4, r0
   d61ce:	f7fd ffb5 	bl	d413c <_ZNSt14_Function_baseD1Ev>
   d61d2:	4620      	mov	r0, r4
   d61d4:	bd10      	pop	{r4, pc}

000d61d6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d61d6:	b513      	push	{r0, r1, r4, lr}
   d61d8:	460b      	mov	r3, r1
   d61da:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61dc:	c803      	ldmia	r0, {r0, r1}
   d61de:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d61e2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d61e6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d61ea:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d61ee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d61f2:	b002      	add	sp, #8
   d61f4:	bd10      	pop	{r4, pc}
	...

000d61f8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61f8:	4803      	ldr	r0, [pc, #12]	; (d6208 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d61fa:	4a04      	ldr	r2, [pc, #16]	; (d620c <_GLOBAL__sub_I_RGB+0x14>)
   d61fc:	4904      	ldr	r1, [pc, #16]	; (d6210 <_GLOBAL__sub_I_RGB+0x18>)
   d61fe:	2300      	movs	r3, #0
   d6200:	6083      	str	r3, [r0, #8]
   d6202:	f001 bce1 	b.w	d7bc8 <__aeabi_atexit>
   d6206:	bf00      	nop
   d6208:	2003e3e8 	.word	0x2003e3e8
   d620c:	2003ce7c 	.word	0x2003ce7c
   d6210:	000d61cb 	.word	0x000d61cb

000d6214 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6214:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6216:	4b0f      	ldr	r3, [pc, #60]	; (d6254 <serialEventRun+0x40>)
   d6218:	b133      	cbz	r3, d6228 <serialEventRun+0x14>
   d621a:	f000 fc47 	bl	d6aac <_Z16_fetch_usbserialv>
   d621e:	6803      	ldr	r3, [r0, #0]
   d6220:	691b      	ldr	r3, [r3, #16]
   d6222:	4798      	blx	r3
   d6224:	2800      	cmp	r0, #0
   d6226:	dc0d      	bgt.n	d6244 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6228:	4b0b      	ldr	r3, [pc, #44]	; (d6258 <serialEventRun+0x44>)
   d622a:	b133      	cbz	r3, d623a <serialEventRun+0x26>
   d622c:	f000 fcc0 	bl	d6bb0 <_Z22__fetch_global_Serial1v>
   d6230:	6803      	ldr	r3, [r0, #0]
   d6232:	691b      	ldr	r3, [r3, #16]
   d6234:	4798      	blx	r3
   d6236:	2800      	cmp	r0, #0
   d6238:	dc07      	bgt.n	d624a <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d623a:	4b08      	ldr	r3, [pc, #32]	; (d625c <serialEventRun+0x48>)
   d623c:	b143      	cbz	r3, d6250 <serialEventRun+0x3c>
   d623e:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d6242:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6244:	f3af 8000 	nop.w
   d6248:	e7ee      	b.n	d6228 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d624a:	f3af 8000 	nop.w
   d624e:	e7f4      	b.n	d623a <serialEventRun+0x26>
   d6250:	bd08      	pop	{r3, pc}
   d6252:	bf00      	nop
	...

000d6260 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6260:	b508      	push	{r3, lr}
	serialEventRun();
   d6262:	f7ff ffd7 	bl	d6214 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6266:	f7fe fca3 	bl	d4bb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d626a:	4b01      	ldr	r3, [pc, #4]	; (d6270 <_post_loop+0x10>)
   d626c:	6018      	str	r0, [r3, #0]
   d626e:	bd08      	pop	{r3, pc}
   d6270:	2003e730 	.word	0x2003e730

000d6274 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6274:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6276:	2300      	movs	r3, #0
   d6278:	9300      	str	r3, [sp, #0]
   d627a:	461a      	mov	r2, r3
   d627c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6280:	f7fe fea4 	bl	d4fcc <system_ctrl_set_result>
}
   d6284:	b003      	add	sp, #12
   d6286:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d628c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d628c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d628e:	8843      	ldrh	r3, [r0, #2]
   d6290:	2b0a      	cmp	r3, #10
   d6292:	d008      	beq.n	d62a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6294:	2b50      	cmp	r3, #80	; 0x50
   d6296:	d109      	bne.n	d62ac <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6298:	4b09      	ldr	r3, [pc, #36]	; (d62c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d629a:	681b      	ldr	r3, [r3, #0]
   d629c:	b13b      	cbz	r3, d62ae <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d629e:	b003      	add	sp, #12
   d62a0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d62a4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d62a6:	f7ff ffe5 	bl	d6274 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d62aa:	e006      	b.n	d62ba <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d62ac:	2300      	movs	r3, #0
   d62ae:	9300      	str	r3, [sp, #0]
   d62b0:	461a      	mov	r2, r3
   d62b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d62b6:	f7fe fe89 	bl	d4fcc <system_ctrl_set_result>
        break;
    }
}
   d62ba:	b003      	add	sp, #12
   d62bc:	f85d fb04 	ldr.w	pc, [sp], #4
   d62c0:	2003e3f8 	.word	0x2003e3f8

000d62c4 <module_user_init_hook>:

void module_user_init_hook()
{
   d62c4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d62c6:	f7fe fc5b 	bl	d4b80 <HAL_RNG_GetRandomNumber>
   d62ca:	4604      	mov	r4, r0
    srand(seed);
   d62cc:	f002 fa4e 	bl	d876c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d62d0:	4b07      	ldr	r3, [pc, #28]	; (d62f0 <module_user_init_hook+0x2c>)
   d62d2:	b113      	cbz	r3, d62da <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d62d4:	4620      	mov	r0, r4
   d62d6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d62da:	2100      	movs	r1, #0
   d62dc:	4804      	ldr	r0, [pc, #16]	; (d62f0 <module_user_init_hook+0x2c>)
   d62de:	f7fe ff11 	bl	d5104 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d62e2:	2100      	movs	r1, #0
   d62e4:	4803      	ldr	r0, [pc, #12]	; (d62f4 <module_user_init_hook+0x30>)
}
   d62e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d62ea:	f7fe be65 	b.w	d4fb8 <system_ctrl_set_app_request_handler>
   d62ee:	bf00      	nop
   d62f0:	00000000 	.word	0x00000000
   d62f4:	000d628d 	.word	0x000d628d

000d62f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d62f8:	4770      	bx	lr

000d62fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d62fa:	2000      	movs	r0, #0
   d62fc:	4770      	bx	lr

000d62fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d62fe:	b510      	push	{r4, lr}
   d6300:	2110      	movs	r1, #16
   d6302:	4604      	mov	r4, r0
   d6304:	f001 fc6e 	bl	d7be4 <_ZdlPvj>
   d6308:	4620      	mov	r0, r4
   d630a:	bd10      	pop	{r4, pc}

000d630c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d630c:	b508      	push	{r3, lr}
      { delete this; }
   d630e:	b108      	cbz	r0, d6314 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6310:	f7ff fff5 	bl	d62fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6314:	bd08      	pop	{r3, pc}

000d6316 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6316:	2200      	movs	r2, #0
   d6318:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d631a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d631c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6320:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6322:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6326:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6328:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d632a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d632c:	680c      	ldr	r4, [r1, #0]
   d632e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6330:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6332:	bd10      	pop	{r4, pc}

000d6334 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6334:	b510      	push	{r4, lr}
   d6336:	4604      	mov	r4, r0
    free((void*)msg_);
   d6338:	6800      	ldr	r0, [r0, #0]
   d633a:	f7fe fef3 	bl	d5124 <free>
}
   d633e:	4620      	mov	r0, r4
   d6340:	bd10      	pop	{r4, pc}

000d6342 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6342:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6344:	68c4      	ldr	r4, [r0, #12]
   d6346:	b1f4      	cbz	r4, d6386 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6348:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d634a:	2b02      	cmp	r3, #2
   d634c:	d103      	bne.n	d6356 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d634e:	f104 000c 	add.w	r0, r4, #12
   d6352:	f7ff ffef 	bl	d6334 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6356:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6358:	b135      	cbz	r5, d6368 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d635a:	4628      	mov	r0, r5
   d635c:	f7fd feee 	bl	d413c <_ZNSt14_Function_baseD1Ev>
   d6360:	2110      	movs	r1, #16
   d6362:	4628      	mov	r0, r5
   d6364:	f001 fc3e 	bl	d7be4 <_ZdlPvj>
   d6368:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d636a:	b135      	cbz	r5, d637a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d636c:	4628      	mov	r0, r5
   d636e:	f7fd fee5 	bl	d413c <_ZNSt14_Function_baseD1Ev>
   d6372:	2110      	movs	r1, #16
   d6374:	4628      	mov	r0, r5
   d6376:	f001 fc35 	bl	d7be4 <_ZdlPvj>
   d637a:	4620      	mov	r0, r4
   d637c:	2114      	movs	r1, #20
   d637e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6382:	f001 bc2f 	b.w	d7be4 <_ZdlPvj>
   d6386:	bd38      	pop	{r3, r4, r5, pc}

000d6388 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6388:	b510      	push	{r4, lr}
   d638a:	b088      	sub	sp, #32
   d638c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d638e:	4668      	mov	r0, sp
   d6390:	f7ff fade 	bl	d5950 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d6394:	4669      	mov	r1, sp
   d6396:	a804      	add	r0, sp, #16
   d6398:	f7ff fafc 	bl	d5994 <_ZN6StringC1ERKS_>
   d639c:	a804      	add	r0, sp, #16
   d639e:	47a0      	blx	r4
   d63a0:	4604      	mov	r4, r0
   d63a2:	a804      	add	r0, sp, #16
   d63a4:	f7ff fa8d 	bl	d58c2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d63a8:	4668      	mov	r0, sp
   d63aa:	f7ff fa8a 	bl	d58c2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d63ae:	4620      	mov	r0, r4
   d63b0:	b008      	add	sp, #32
   d63b2:	bd10      	pop	{r4, pc}

000d63b4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d63b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d63b6:	2410      	movs	r4, #16
   d63b8:	b085      	sub	sp, #20
   d63ba:	4607      	mov	r7, r0
   d63bc:	460e      	mov	r6, r1
   d63be:	4615      	mov	r5, r2
   d63c0:	2100      	movs	r1, #0
   d63c2:	4622      	mov	r2, r4
   d63c4:	4668      	mov	r0, sp
   d63c6:	f002 f9c8 	bl	d875a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d63ca:	2200      	movs	r2, #0
   d63cc:	4669      	mov	r1, sp
   d63ce:	4610      	mov	r0, r2
         size = sizeof(*this);
   d63d0:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d63d4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d63d6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d63d8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d63da:	f7fe fe5b 	bl	d5094 <spark_function>
}
   d63de:	b005      	add	sp, #20
   d63e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d63e2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d63e2:	b513      	push	{r0, r1, r4, lr}
   d63e4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d63e6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d63ea:	2300      	movs	r3, #0
   d63ec:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d63ee:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d63f0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d63f2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63f4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d63f6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d63f8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63fa:	f7fd ff9c 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63fe:	4620      	mov	r0, r4
   d6400:	b002      	add	sp, #8
   d6402:	bd10      	pop	{r4, pc}

000d6404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6406:	460c      	mov	r4, r1
   d6408:	ad02      	add	r5, sp, #8
   d640a:	f854 3b04 	ldr.w	r3, [r4], #4
   d640e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6412:	4606      	mov	r6, r0
   d6414:	460f      	mov	r7, r1
   d6416:	a801      	add	r0, sp, #4
   d6418:	4621      	mov	r1, r4
   d641a:	f7ff fc39 	bl	d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d641e:	4629      	mov	r1, r5
   d6420:	4630      	mov	r0, r6
   d6422:	f7ff ffde 	bl	d63e2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6426:	a801      	add	r0, sp, #4
   d6428:	f7fd ff85 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d642c:	4620      	mov	r0, r4
   d642e:	f7fd ff82 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6432:	4638      	mov	r0, r7
   d6434:	2108      	movs	r1, #8
   d6436:	f001 fbd5 	bl	d7be4 <_ZdlPvj>
        return p;
    }
   d643a:	4630      	mov	r0, r6
   d643c:	b003      	add	sp, #12
   d643e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6440:	b538      	push	{r3, r4, r5, lr}
   d6442:	2300      	movs	r3, #0
   d6444:	4604      	mov	r4, r0
   d6446:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6448:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d644a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d644c:	f7fd fe25 	bl	d409a <_Znwj>
   d6450:	b128      	cbz	r0, d645e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6452:	2301      	movs	r3, #1
   d6454:	6043      	str	r3, [r0, #4]
   d6456:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6458:	4b02      	ldr	r3, [pc, #8]	; (d6464 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d645a:	6003      	str	r3, [r0, #0]
   d645c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d645e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6460:	4620      	mov	r0, r4
   d6462:	bd38      	pop	{r3, r4, r5, pc}
   d6464:	000d8fdc 	.word	0x000d8fdc

000d6468 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6468:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d646a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d646c:	b90a      	cbnz	r2, d6472 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d646e:	f001 fbcc 	bl	d7c0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6472:	68c3      	ldr	r3, [r0, #12]
    }
   d6474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6478:	4718      	bx	r3

000d647a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d647a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d647c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d647e:	f100 0110 	add.w	r1, r0, #16
   d6482:	f7ff fff1 	bl	d6468 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6486:	bd08      	pop	{r3, pc}

000d6488 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6488:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d648a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d648c:	b90a      	cbnz	r2, d6492 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d648e:	f001 fbbc 	bl	d7c0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6492:	68c3      	ldr	r3, [r0, #12]
    }
   d6494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6498:	4718      	bx	r3

000d649a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d649a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d649c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d649e:	f100 0110 	add.w	r1, r0, #16
   d64a2:	f7ff fff1 	bl	d6488 <_ZNKSt8functionIFvRKbEEclES1_>
   d64a6:	bd08      	pop	{r3, pc}

000d64a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d64a8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d64aa:	2300      	movs	r3, #0
   d64ac:	6083      	str	r3, [r0, #8]
   d64ae:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d64b0:	4604      	mov	r4, r0
   d64b2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d64b4:	b12b      	cbz	r3, d64c2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d64b6:	2202      	movs	r2, #2
   d64b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d64ba:	68eb      	ldr	r3, [r5, #12]
   d64bc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d64be:	68ab      	ldr	r3, [r5, #8]
   d64c0:	60a3      	str	r3, [r4, #8]
	}
    }
   d64c2:	4620      	mov	r0, r4
   d64c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d64c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d64c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64ca:	b089      	sub	sp, #36	; 0x24
   d64cc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d64ce:	4668      	mov	r0, sp
   d64d0:	f7ff ff21 	bl	d6316 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d64d4:	2300      	movs	r3, #0
   d64d6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d64da:	f04f 0202 	mov.w	r2, #2
   d64de:	e8d4 3f4f 	ldrexb	r3, [r4]
   d64e2:	2b00      	cmp	r3, #0
   d64e4:	d103      	bne.n	d64ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d64e6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d64ea:	2900      	cmp	r1, #0
   d64ec:	d1f7      	bne.n	d64de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d64ee:	d002      	beq.n	d64f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d64f0:	f88d 3008 	strb.w	r3, [sp, #8]
   d64f4:	e063      	b.n	d65be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d64f6:	f114 050c 	adds.w	r5, r4, #12
   d64fa:	d003      	beq.n	d6504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d64fc:	4669      	mov	r1, sp
   d64fe:	4628      	mov	r0, r5
   d6500:	f7ff ff09 	bl	d6316 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6504:	f3bf 8f5f 	dmb	sy
   d6508:	2301      	movs	r3, #1
   d650a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d650c:	2000      	movs	r0, #0
   d650e:	f104 0308 	add.w	r3, r4, #8
   d6512:	f3bf 8f5f 	dmb	sy
   d6516:	e853 6f00 	ldrex	r6, [r3]
   d651a:	e843 0200 	strex	r2, r0, [r3]
   d651e:	2a00      	cmp	r2, #0
   d6520:	d1f9      	bne.n	d6516 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6522:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6526:	2e00      	cmp	r6, #0
   d6528:	d049      	beq.n	d65be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d652a:	f7fe fd35 	bl	d4f98 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d652e:	b120      	cbz	r0, d653a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6530:	4629      	mov	r1, r5
   d6532:	4630      	mov	r0, r6
   d6534:	f7ff ff98 	bl	d6468 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6538:	e03a      	b.n	d65b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d653a:	4631      	mov	r1, r6
   d653c:	a802      	add	r0, sp, #8
   d653e:	f7ff ffb3 	bl	d64a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6542:	68e0      	ldr	r0, [r4, #12]
   d6544:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6548:	b108      	cbz	r0, d654e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d654a:	f002 f949 	bl	d87e0 <strdup>
   d654e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6550:	2010      	movs	r0, #16
   d6552:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6556:	f7fd fda0 	bl	d409a <_Znwj>
   d655a:	4605      	mov	r5, r0
   d655c:	b1e8      	cbz	r0, d659a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d655e:	2700      	movs	r7, #0
   d6560:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6562:	2018      	movs	r0, #24
   d6564:	f7fd fd99 	bl	d409a <_Znwj>
   d6568:	4604      	mov	r4, r0
   d656a:	b188      	cbz	r0, d6590 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d656c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d656e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6570:	a802      	add	r0, sp, #8
   d6572:	f7ff fe30 	bl	d61d6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6576:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6578:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d657a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d657c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d657e:	9204      	str	r2, [sp, #16]
   d6580:	a906      	add	r1, sp, #24
   d6582:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6584:	60e3      	str	r3, [r4, #12]
   d6586:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d658a:	9205      	str	r2, [sp, #20]
   d658c:	f7ff fec3 	bl	d6316 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6590:	4b0d      	ldr	r3, [pc, #52]	; (d65c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6592:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6594:	4b0d      	ldr	r3, [pc, #52]	; (d65cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6596:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6598:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d659a:	a806      	add	r0, sp, #24
   d659c:	f7ff feca 	bl	d6334 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65a0:	a802      	add	r0, sp, #8
   d65a2:	f7fd fdcb 	bl	d413c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d65a6:	2200      	movs	r2, #0
   d65a8:	4629      	mov	r1, r5
   d65aa:	4809      	ldr	r0, [pc, #36]	; (d65d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d65ac:	f7fe fcfc 	bl	d4fa8 <application_thread_invoke>
   d65b0:	4630      	mov	r0, r6
   d65b2:	f7fd fdc3 	bl	d413c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d65b6:	2110      	movs	r1, #16
   d65b8:	4630      	mov	r0, r6
   d65ba:	f001 fb13 	bl	d7be4 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d65be:	4668      	mov	r0, sp
   d65c0:	f7ff feb8 	bl	d6334 <_ZN8particle5ErrorD1Ev>
    }
   d65c4:	b009      	add	sp, #36	; 0x24
   d65c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d65c8:	000d647b 	.word	0x000d647b
   d65cc:	000d66f1 	.word	0x000d66f1
   d65d0:	000d6bfd 	.word	0x000d6bfd

000d65d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d65d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65d8:	b08b      	sub	sp, #44	; 0x2c
   d65da:	4606      	mov	r6, r0
   d65dc:	460f      	mov	r7, r1
   d65de:	4690      	mov	r8, r2
   d65e0:	4699      	mov	r9, r3
   d65e2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d65e6:	f7fe fd65 	bl	d50b4 <spark_cloud_flag_connected>
   d65ea:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d65ec:	4683      	mov	fp, r0
   d65ee:	bb30      	cbnz	r0, d663e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d65f0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d65f4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d65f6:	a905      	add	r1, sp, #20
   d65f8:	4628      	mov	r0, r5
   d65fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d65fe:	f7ff fe8a 	bl	d6316 <_ZN8particle5ErrorC1EOS0_>
   d6602:	2014      	movs	r0, #20
   d6604:	f7fd fd49 	bl	d409a <_Znwj>
   d6608:	4604      	mov	r4, r0
   d660a:	b158      	cbz	r0, d6624 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d660c:	2302      	movs	r3, #2
   d660e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6610:	2301      	movs	r3, #1
   d6612:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6614:	f8c0 b004 	str.w	fp, [r0, #4]
   d6618:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d661c:	4629      	mov	r1, r5
   d661e:	300c      	adds	r0, #12
   d6620:	f7ff fe79 	bl	d6316 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6624:	4630      	mov	r0, r6
   d6626:	4621      	mov	r1, r4
   d6628:	f840 4b04 	str.w	r4, [r0], #4
   d662c:	f7ff ff08 	bl	d6440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6630:	4628      	mov	r0, r5
   d6632:	f7ff fe7f 	bl	d6334 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6636:	a805      	add	r0, sp, #20
   d6638:	f7ff fe7c 	bl	d6334 <_ZN8particle5ErrorD1Ev>
   d663c:	e052      	b.n	d66e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d663e:	2400      	movs	r4, #0
   d6640:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6642:	2014      	movs	r0, #20
   d6644:	606c      	str	r4, [r5, #4]
   d6646:	60ac      	str	r4, [r5, #8]
   d6648:	9307      	str	r3, [sp, #28]
   d664a:	f7fd fd26 	bl	d409a <_Znwj>
   d664e:	4601      	mov	r1, r0
   d6650:	b118      	cbz	r0, d665a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6652:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6654:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6656:	6044      	str	r4, [r0, #4]
   d6658:	6084      	str	r4, [r0, #8]
   d665a:	a804      	add	r0, sp, #16
   d665c:	9103      	str	r1, [sp, #12]
   d665e:	f7ff feef 	bl	d6440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6662:	4b22      	ldr	r3, [pc, #136]	; (d66ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6664:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6666:	2008      	movs	r0, #8
   d6668:	f7fd fd17 	bl	d409a <_Znwj>
   d666c:	4604      	mov	r4, r0
   d666e:	b128      	cbz	r0, d667c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6670:	9b03      	ldr	r3, [sp, #12]
   d6672:	f840 3b04 	str.w	r3, [r0], #4
   d6676:	a904      	add	r1, sp, #16
   d6678:	f7ff fb0a 	bl	d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d667c:	9500      	str	r5, [sp, #0]
   d667e:	fa5f f38a 	uxtb.w	r3, sl
   d6682:	464a      	mov	r2, r9
   d6684:	4641      	mov	r1, r8
   d6686:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6688:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d668a:	f7fe fd23 	bl	d50d4 <spark_send_event>
   d668e:	b920      	cbnz	r0, d669a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6690:	9b03      	ldr	r3, [sp, #12]
   d6692:	785b      	ldrb	r3, [r3, #1]
   d6694:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6698:	b183      	cbz	r3, d66bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d669a:	9b03      	ldr	r3, [sp, #12]
   d669c:	9305      	str	r3, [sp, #20]
   d669e:	a904      	add	r1, sp, #16
   d66a0:	a806      	add	r0, sp, #24
   d66a2:	f7ff faf5 	bl	d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d66a6:	a905      	add	r1, sp, #20
   d66a8:	4630      	mov	r0, r6
   d66aa:	f7ff fe9a 	bl	d63e2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d66ae:	a806      	add	r0, sp, #24
   d66b0:	f7fd fe41 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66b4:	a804      	add	r0, sp, #16
   d66b6:	f7fd fe3e 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66ba:	e013      	b.n	d66e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d66bc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d66c0:	a905      	add	r1, sp, #20
   d66c2:	a803      	add	r0, sp, #12
   d66c4:	9205      	str	r2, [sp, #20]
   d66c6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d66ca:	f7ff fefd 	bl	d64c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d66ce:	a805      	add	r0, sp, #20
   d66d0:	f7ff fe30 	bl	d6334 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d66d4:	a805      	add	r0, sp, #20
   d66d6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d66d8:	f7ff fe94 	bl	d6404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d66dc:	a806      	add	r0, sp, #24
   d66de:	f7fd fe2a 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66e2:	e7da      	b.n	d669a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d66e4:	4630      	mov	r0, r6
   d66e6:	b00b      	add	sp, #44	; 0x2c
   d66e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66ec:	000d6861 	.word	0x000d6861

000d66f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d66f0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d66f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66f4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d66f6:	d006      	beq.n	d6706 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d66f8:	2a03      	cmp	r2, #3
   d66fa:	d017      	beq.n	d672c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d66fc:	2a01      	cmp	r2, #1
   d66fe:	d122      	bne.n	d6746 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6700:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6702:	6003      	str	r3, [r0, #0]
	      break;
   d6704:	e01f      	b.n	d6746 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6706:	2018      	movs	r0, #24
   d6708:	680e      	ldr	r6, [r1, #0]
   d670a:	f7fd fcc6 	bl	d409a <_Znwj>
   d670e:	4605      	mov	r5, r0
   d6710:	b150      	cbz	r0, d6728 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6712:	4631      	mov	r1, r6
   d6714:	f7ff fec8 	bl	d64a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6718:	6930      	ldr	r0, [r6, #16]
   d671a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d671e:	b108      	cbz	r0, d6724 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6720:	f002 f85e 	bl	d87e0 <strdup>
   d6724:	6128      	str	r0, [r5, #16]
   d6726:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6728:	6025      	str	r5, [r4, #0]
   d672a:	e00c      	b.n	d6746 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d672c:	6804      	ldr	r4, [r0, #0]
   d672e:	b154      	cbz	r4, d6746 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6730:	f104 0010 	add.w	r0, r4, #16
   d6734:	f7ff fdfe 	bl	d6334 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6738:	4620      	mov	r0, r4
   d673a:	f7fd fcff 	bl	d413c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d673e:	2118      	movs	r1, #24
   d6740:	4620      	mov	r0, r4
   d6742:	f001 fa4f 	bl	d7be4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6746:	2000      	movs	r0, #0
   d6748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d674a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d674a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d674c:	2300      	movs	r3, #0
   d674e:	6083      	str	r3, [r0, #8]
   d6750:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6752:	4604      	mov	r4, r0
   d6754:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6756:	b12b      	cbz	r3, d6764 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6758:	2202      	movs	r2, #2
   d675a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d675c:	68eb      	ldr	r3, [r5, #12]
   d675e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6760:	68ab      	ldr	r3, [r5, #8]
   d6762:	60a3      	str	r3, [r4, #8]
	}
    }
   d6764:	4620      	mov	r0, r4
   d6766:	bd38      	pop	{r3, r4, r5, pc}

000d6768 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6768:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d676a:	b570      	push	{r4, r5, r6, lr}
   d676c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d676e:	d006      	beq.n	d677e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6770:	2a03      	cmp	r2, #3
   d6772:	d011      	beq.n	d6798 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6774:	2a01      	cmp	r2, #1
   d6776:	d118      	bne.n	d67aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6778:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d677a:	6003      	str	r3, [r0, #0]
	      break;
   d677c:	e015      	b.n	d67aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d677e:	2014      	movs	r0, #20
   d6780:	680e      	ldr	r6, [r1, #0]
   d6782:	f7fd fc8a 	bl	d409a <_Znwj>
   d6786:	4605      	mov	r5, r0
   d6788:	b120      	cbz	r0, d6794 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d678a:	4631      	mov	r1, r6
   d678c:	f7ff ffdd 	bl	d674a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6790:	7c33      	ldrb	r3, [r6, #16]
   d6792:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6794:	6025      	str	r5, [r4, #0]
   d6796:	e008      	b.n	d67aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6798:	6804      	ldr	r4, [r0, #0]
   d679a:	b134      	cbz	r4, d67aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d679c:	4620      	mov	r0, r4
   d679e:	f7fd fccd 	bl	d413c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d67a2:	2114      	movs	r1, #20
   d67a4:	4620      	mov	r0, r4
   d67a6:	f001 fa1d 	bl	d7be4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d67aa:	2000      	movs	r0, #0
   d67ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d67b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d67b0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d67b2:	2300      	movs	r3, #0
   d67b4:	b087      	sub	sp, #28
   d67b6:	460c      	mov	r4, r1
   d67b8:	f3bf 8f5f 	dmb	sy
   d67bc:	e850 6f00 	ldrex	r6, [r0]
   d67c0:	e840 3200 	strex	r2, r3, [r0]
   d67c4:	2a00      	cmp	r2, #0
   d67c6:	d1f9      	bne.n	d67bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d67c8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d67cc:	2e00      	cmp	r6, #0
   d67ce:	d03f      	beq.n	d6850 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d67d0:	4618      	mov	r0, r3
   d67d2:	f7fe fbe1 	bl	d4f98 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d67d6:	4607      	mov	r7, r0
   d67d8:	b120      	cbz	r0, d67e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d67da:	4621      	mov	r1, r4
   d67dc:	4630      	mov	r0, r6
   d67de:	f7ff fe53 	bl	d6488 <_ZNKSt8functionIFvRKbEEclES1_>
   d67e2:	e02e      	b.n	d6842 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d67e4:	4631      	mov	r1, r6
   d67e6:	a801      	add	r0, sp, #4
   d67e8:	f7ff ffaf 	bl	d674a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d67ec:	7823      	ldrb	r3, [r4, #0]
   d67ee:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d67f2:	2010      	movs	r0, #16
   d67f4:	f7fd fc51 	bl	d409a <_Znwj>
   d67f8:	4605      	mov	r5, r0
   d67fa:	b1d0      	cbz	r0, d6832 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67fc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d67fe:	2014      	movs	r0, #20
   d6800:	f7fd fc4b 	bl	d409a <_Znwj>
   d6804:	4604      	mov	r4, r0
   d6806:	b178      	cbz	r0, d6828 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6808:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d680a:	4601      	mov	r1, r0
   d680c:	a801      	add	r0, sp, #4
   d680e:	f7ff fce2 	bl	d61d6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6812:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6814:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6816:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6818:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d681a:	9203      	str	r2, [sp, #12]
   d681c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d681e:	60e3      	str	r3, [r4, #12]
   d6820:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6824:	9204      	str	r2, [sp, #16]
   d6826:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6828:	4b0a      	ldr	r3, [pc, #40]	; (d6854 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d682a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d682c:	4b0a      	ldr	r3, [pc, #40]	; (d6858 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d682e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6830:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6832:	a801      	add	r0, sp, #4
   d6834:	f7fd fc82 	bl	d413c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6838:	2200      	movs	r2, #0
   d683a:	4629      	mov	r1, r5
   d683c:	4807      	ldr	r0, [pc, #28]	; (d685c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d683e:	f7fe fbb3 	bl	d4fa8 <application_thread_invoke>
   d6842:	4630      	mov	r0, r6
   d6844:	f7fd fc7a 	bl	d413c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6848:	2110      	movs	r1, #16
   d684a:	4630      	mov	r0, r6
   d684c:	f001 f9ca 	bl	d7be4 <_ZdlPvj>
        }
    }
   d6850:	b007      	add	sp, #28
   d6852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6854:	000d649b 	.word	0x000d649b
   d6858:	000d6769 	.word	0x000d6769
   d685c:	000d6bfd 	.word	0x000d6bfd

000d6860 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6860:	b530      	push	{r4, r5, lr}
   d6862:	b085      	sub	sp, #20
   d6864:	4604      	mov	r4, r0
   d6866:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6868:	4668      	mov	r0, sp
   d686a:	4611      	mov	r1, r2
   d686c:	f7ff fdca 	bl	d6404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6870:	b17c      	cbz	r4, d6892 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6872:	b224      	sxth	r4, r4
   d6874:	4628      	mov	r0, r5
   d6876:	b10d      	cbz	r5, d687c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6878:	f001 ffb2 	bl	d87e0 <strdup>
   d687c:	9002      	str	r0, [sp, #8]
   d687e:	a902      	add	r1, sp, #8
   d6880:	4668      	mov	r0, sp
   d6882:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6886:	f7ff fe1f 	bl	d64c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d688a:	a802      	add	r0, sp, #8
   d688c:	f7ff fd52 	bl	d6334 <_ZN8particle5ErrorD1Ev>
   d6890:	e01d      	b.n	d68ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6892:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6894:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6898:	f04f 0201 	mov.w	r2, #1
   d689c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d68a0:	42a3      	cmp	r3, r4
   d68a2:	d103      	bne.n	d68ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d68a4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d68a8:	2900      	cmp	r1, #0
   d68aa:	d1f7      	bne.n	d689c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d68ac:	d002      	beq.n	d68b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d68ae:	f88d 3008 	strb.w	r3, [sp, #8]
   d68b2:	e00c      	b.n	d68ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d68b4:	f110 010c 	adds.w	r1, r0, #12
   d68b8:	f04f 0301 	mov.w	r3, #1
   d68bc:	bf18      	it	ne
   d68be:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d68c0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d68c4:	3004      	adds	r0, #4
   d68c6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d68ca:	f7ff ff71 	bl	d67b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d68ce:	a801      	add	r0, sp, #4
   d68d0:	f7fd fd31 	bl	d4336 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d68d4:	b005      	add	sp, #20
   d68d6:	bd30      	pop	{r4, r5, pc}

000d68d8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d68d8:	4770      	bx	lr

000d68da <_ZN9IPAddressD0Ev>:
   d68da:	b510      	push	{r4, lr}
   d68dc:	2118      	movs	r1, #24
   d68de:	4604      	mov	r4, r0
   d68e0:	f001 f980 	bl	d7be4 <_ZdlPvj>
   d68e4:	4620      	mov	r0, r4
   d68e6:	bd10      	pop	{r4, pc}

000d68e8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d68e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d68ea:	7d03      	ldrb	r3, [r0, #20]
   d68ec:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d68ee:	b08d      	sub	sp, #52	; 0x34
   d68f0:	460e      	mov	r6, r1
   d68f2:	f100 0704 	add.w	r7, r0, #4
   d68f6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d68fa:	d002      	beq.n	d6902 <_ZNK9IPAddress7printToER5Print+0x1a>
   d68fc:	f100 0508 	add.w	r5, r0, #8
   d6900:	e018      	b.n	d6934 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6902:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6904:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6906:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d690a:	232f      	movs	r3, #47	; 0x2f
   d690c:	462a      	mov	r2, r5
   d690e:	200a      	movs	r0, #10
   d6910:	f7fe f9fa 	bl	d4d08 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6914:	4628      	mov	r0, r5
   d6916:	f001 ff7e 	bl	d8816 <strlen>
   d691a:	6833      	ldr	r3, [r6, #0]
   d691c:	4602      	mov	r2, r0
   d691e:	68db      	ldr	r3, [r3, #12]
   d6920:	4629      	mov	r1, r5
   d6922:	4630      	mov	r0, r6
   d6924:	4798      	blx	r3
   d6926:	e00f      	b.n	d6948 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6928:	b124      	cbz	r4, d6934 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d692a:	212e      	movs	r1, #46	; 0x2e
   d692c:	4630      	mov	r0, r6
   d692e:	f7ff fbb1 	bl	d6094 <_ZN5Print5printEc>
   d6932:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6934:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6938:	220a      	movs	r2, #10
   d693a:	4630      	mov	r0, r6
   d693c:	f7ff fbf0 	bl	d6120 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6940:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6942:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6944:	d1f0      	bne.n	d6928 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6946:	4620      	mov	r0, r4
    }
    return n;
}
   d6948:	b00d      	add	sp, #52	; 0x34
   d694a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d694c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d694c:	b510      	push	{r4, lr}
   d694e:	4b05      	ldr	r3, [pc, #20]	; (d6964 <_ZN9IPAddressC1Ev+0x18>)
   d6950:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6952:	2211      	movs	r2, #17
   d6954:	f840 3b04 	str.w	r3, [r0], #4
   d6958:	2100      	movs	r1, #0
   d695a:	f001 fefe 	bl	d875a <memset>
{
    clear();
}
   d695e:	4620      	mov	r0, r4
   d6960:	bd10      	pop	{r4, pc}
   d6962:	bf00      	nop
   d6964:	000d8ff8 	.word	0x000d8ff8

000d6968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6968:	4603      	mov	r3, r0
   d696a:	4a07      	ldr	r2, [pc, #28]	; (d6988 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d696c:	b510      	push	{r4, lr}
   d696e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6972:	f101 0210 	add.w	r2, r1, #16
   d6976:	f851 4b04 	ldr.w	r4, [r1], #4
   d697a:	f843 4b04 	str.w	r4, [r3], #4
   d697e:	4291      	cmp	r1, r2
   d6980:	d1f9      	bne.n	d6976 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6982:	780a      	ldrb	r2, [r1, #0]
   d6984:	701a      	strb	r2, [r3, #0]
}
   d6986:	bd10      	pop	{r4, pc}
   d6988:	000d8ff8 	.word	0x000d8ff8

000d698c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d698c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d698e:	2b04      	cmp	r3, #4
   d6990:	d101      	bne.n	d6996 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6992:	6840      	ldr	r0, [r0, #4]
   d6994:	e008      	b.n	d69a8 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6996:	2b06      	cmp	r3, #6
   d6998:	d10a      	bne.n	d69b0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d699a:	6843      	ldr	r3, [r0, #4]
   d699c:	b953      	cbnz	r3, d69b4 <_ZNK9IPAddresscvbEv+0x28>
   d699e:	6883      	ldr	r3, [r0, #8]
   d69a0:	b943      	cbnz	r3, d69b4 <_ZNK9IPAddresscvbEv+0x28>
   d69a2:	68c3      	ldr	r3, [r0, #12]
   d69a4:	b933      	cbnz	r3, d69b4 <_ZNK9IPAddresscvbEv+0x28>
   d69a6:	6900      	ldr	r0, [r0, #16]
   d69a8:	3000      	adds	r0, #0
   d69aa:	bf18      	it	ne
   d69ac:	2001      	movne	r0, #1
   d69ae:	4770      	bx	lr
    } else {
        return false;
   d69b0:	2000      	movs	r0, #0
   d69b2:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d69b4:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d69b6:	4770      	bx	lr

000d69b8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d69b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d69ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d69be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d69c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d69c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d69ca:	2304      	movs	r3, #4
   d69cc:	6041      	str	r1, [r0, #4]
   d69ce:	7503      	strb	r3, [r0, #20]
   d69d0:	bd10      	pop	{r4, pc}

000d69d2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d69d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d69d4:	780d      	ldrb	r5, [r1, #0]
   d69d6:	788b      	ldrb	r3, [r1, #2]
   d69d8:	784a      	ldrb	r2, [r1, #1]
   d69da:	78c9      	ldrb	r1, [r1, #3]
   d69dc:	9100      	str	r1, [sp, #0]
   d69de:	4629      	mov	r1, r5
   d69e0:	f7ff ffea 	bl	d69b8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d69e4:	b003      	add	sp, #12
   d69e6:	bd30      	pop	{r4, r5, pc}

000d69e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69e8:	7441      	strb	r1, [r0, #17]
   d69ea:	4770      	bx	lr

000d69ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d69ec:	4770      	bx	lr

000d69ee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d69ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d69f0:	2100      	movs	r1, #0
   d69f2:	7c00      	ldrb	r0, [r0, #16]
   d69f4:	f7fe fa90 	bl	d4f18 <HAL_USB_USART_Receive_Data>
}
   d69f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69fc:	bf28      	it	cs
   d69fe:	f04f 30ff 	movcs.w	r0, #4294967295
   d6a02:	bd08      	pop	{r3, pc}

000d6a04 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6a04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6a06:	2101      	movs	r1, #1
   d6a08:	7c00      	ldrb	r0, [r0, #16]
   d6a0a:	f7fe fa85 	bl	d4f18 <HAL_USB_USART_Receive_Data>
}
   d6a0e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a12:	bf28      	it	cs
   d6a14:	f04f 30ff 	movcs.w	r0, #4294967295
   d6a18:	bd08      	pop	{r3, pc}

000d6a1a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6a1a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6a1c:	7c00      	ldrb	r0, [r0, #16]
   d6a1e:	f7fe fa73 	bl	d4f08 <HAL_USB_USART_Available_Data_For_Write>
}
   d6a22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a26:	bd08      	pop	{r3, pc}

000d6a28 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6a28:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6a2a:	7c00      	ldrb	r0, [r0, #16]
   d6a2c:	f7fe fa64 	bl	d4ef8 <HAL_USB_USART_Available_Data>
}
   d6a30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a34:	bd08      	pop	{r3, pc}

000d6a36 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6a36:	7c00      	ldrb	r0, [r0, #16]
   d6a38:	f7fe ba7e 	b.w	d4f38 <HAL_USB_USART_Flush_Data>

000d6a3c <_ZN9USBSerialD0Ev>:
   d6a3c:	b510      	push	{r4, lr}
   d6a3e:	2114      	movs	r1, #20
   d6a40:	4604      	mov	r4, r0
   d6a42:	f001 f8cf 	bl	d7be4 <_ZdlPvj>
   d6a46:	4620      	mov	r0, r4
   d6a48:	bd10      	pop	{r4, pc}

000d6a4a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6a4a:	b538      	push	{r3, r4, r5, lr}
   d6a4c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a4e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6a50:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a52:	f7fe fa59 	bl	d4f08 <HAL_USB_USART_Available_Data_For_Write>
   d6a56:	2800      	cmp	r0, #0
   d6a58:	dc01      	bgt.n	d6a5e <_ZN9USBSerial5writeEh+0x14>
   d6a5a:	7c60      	ldrb	r0, [r4, #17]
   d6a5c:	b128      	cbz	r0, d6a6a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6a5e:	4629      	mov	r1, r5
   d6a60:	7c20      	ldrb	r0, [r4, #16]
   d6a62:	f7fe fa61 	bl	d4f28 <HAL_USB_USART_Send_Data>
   d6a66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6a6a:	bd38      	pop	{r3, r4, r5, pc}

000d6a6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a6c:	b510      	push	{r4, lr}
   d6a6e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a70:	2300      	movs	r3, #0
   d6a72:	6063      	str	r3, [r4, #4]
   d6a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a78:	60a3      	str	r3, [r4, #8]
   d6a7a:	4b05      	ldr	r3, [pc, #20]	; (d6a90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a7c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6a7e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a80:	4608      	mov	r0, r1
{
  _serial = serial;
   d6a82:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6a84:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6a86:	4611      	mov	r1, r2
   d6a88:	f7fe fa26 	bl	d4ed8 <HAL_USB_USART_Init>
}
   d6a8c:	4620      	mov	r0, r4
   d6a8e:	bd10      	pop	{r4, pc}
   d6a90:	000d900c 	.word	0x000d900c

000d6a94 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6a94:	2200      	movs	r2, #0
   d6a96:	7c00      	ldrb	r0, [r0, #16]
   d6a98:	f7fe ba26 	b.w	d4ee8 <HAL_USB_USART_Begin>

000d6a9c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a9c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a9e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6aa0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6aa2:	2100      	movs	r1, #0
   d6aa4:	f001 fe59 	bl	d875a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6aa8:	4620      	mov	r0, r4
   d6aaa:	bd10      	pop	{r4, pc}

000d6aac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6aac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6aae:	4d0e      	ldr	r5, [pc, #56]	; (d6ae8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6ab0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6ab2:	a801      	add	r0, sp, #4
   d6ab4:	f7ff fff2 	bl	d6a9c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6ab8:	6829      	ldr	r1, [r5, #0]
   d6aba:	f011 0401 	ands.w	r4, r1, #1
   d6abe:	d110      	bne.n	d6ae2 <_Z16_fetch_usbserialv+0x36>
   d6ac0:	4628      	mov	r0, r5
   d6ac2:	f7fd faf2 	bl	d40aa <__cxa_guard_acquire>
   d6ac6:	b160      	cbz	r0, d6ae2 <_Z16_fetch_usbserialv+0x36>
   d6ac8:	aa01      	add	r2, sp, #4
   d6aca:	4621      	mov	r1, r4
   d6acc:	4807      	ldr	r0, [pc, #28]	; (d6aec <_Z16_fetch_usbserialv+0x40>)
   d6ace:	f7ff ffcd 	bl	d6a6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6ad2:	4628      	mov	r0, r5
   d6ad4:	f7fd faee 	bl	d40b4 <__cxa_guard_release>
   d6ad8:	4a05      	ldr	r2, [pc, #20]	; (d6af0 <_Z16_fetch_usbserialv+0x44>)
   d6ada:	4906      	ldr	r1, [pc, #24]	; (d6af4 <_Z16_fetch_usbserialv+0x48>)
   d6adc:	4803      	ldr	r0, [pc, #12]	; (d6aec <_Z16_fetch_usbserialv+0x40>)
   d6ade:	f001 f873 	bl	d7bc8 <__aeabi_atexit>
	return _usbserial;
}
   d6ae2:	4802      	ldr	r0, [pc, #8]	; (d6aec <_Z16_fetch_usbserialv+0x40>)
   d6ae4:	b007      	add	sp, #28
   d6ae6:	bd30      	pop	{r4, r5, pc}
   d6ae8:	2003e3fc 	.word	0x2003e3fc
   d6aec:	2003e400 	.word	0x2003e400
   d6af0:	2003ce7c 	.word	0x2003ce7c
   d6af4:	000d69ed 	.word	0x000d69ed

000d6af8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6af8:	4770      	bx	lr

000d6afa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6afa:	7441      	strb	r1, [r0, #17]
   d6afc:	4770      	bx	lr

000d6afe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6afe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6b00:	7c00      	ldrb	r0, [r0, #16]
   d6b02:	f7fe f961 	bl	d4dc8 <HAL_USART_Available_Data_For_Write>
}
   d6b06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b0a:	bd08      	pop	{r3, pc}

000d6b0c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6b0c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6b0e:	7c00      	ldrb	r0, [r0, #16]
   d6b10:	f7fe f932 	bl	d4d78 <HAL_USART_Available_Data>
}
   d6b14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b18:	bd08      	pop	{r3, pc}

000d6b1a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6b1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6b1c:	7c00      	ldrb	r0, [r0, #16]
   d6b1e:	f7fe f93b 	bl	d4d98 <HAL_USART_Peek_Data>
}
   d6b22:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b26:	bf28      	it	cs
   d6b28:	f04f 30ff 	movcs.w	r0, #4294967295
   d6b2c:	bd08      	pop	{r3, pc}

000d6b2e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6b2e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6b30:	7c00      	ldrb	r0, [r0, #16]
   d6b32:	f7fe f929 	bl	d4d88 <HAL_USART_Read_Data>
}
   d6b36:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b3a:	bf28      	it	cs
   d6b3c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6b40:	bd08      	pop	{r3, pc}

000d6b42 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6b42:	7c00      	ldrb	r0, [r0, #16]
   d6b44:	f7fe b930 	b.w	d4da8 <HAL_USART_Flush_Data>

000d6b48 <_ZN11USARTSerialD0Ev>:
   d6b48:	b510      	push	{r4, lr}
   d6b4a:	2114      	movs	r1, #20
   d6b4c:	4604      	mov	r4, r0
   d6b4e:	f001 f849 	bl	d7be4 <_ZdlPvj>
   d6b52:	4620      	mov	r0, r4
   d6b54:	bd10      	pop	{r4, pc}

000d6b56 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6b56:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b58:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6b5a:	4604      	mov	r4, r0
   d6b5c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b5e:	b925      	cbnz	r5, d6b6a <_ZN11USARTSerial5writeEh+0x14>
   d6b60:	7c00      	ldrb	r0, [r0, #16]
   d6b62:	f7fe f931 	bl	d4dc8 <HAL_USART_Available_Data_For_Write>
   d6b66:	2800      	cmp	r0, #0
   d6b68:	dd05      	ble.n	d6b76 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b6a:	4631      	mov	r1, r6
   d6b6c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b72:	f7fe b8f9 	b.w	d4d68 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6b76:	4628      	mov	r0, r5
   d6b78:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6b7c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6b7c:	b510      	push	{r4, lr}
   d6b7e:	4604      	mov	r4, r0
   d6b80:	4608      	mov	r0, r1
   d6b82:	4611      	mov	r1, r2
   d6b84:	2200      	movs	r2, #0
   d6b86:	6062      	str	r2, [r4, #4]
   d6b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b8c:	60a2      	str	r2, [r4, #8]
   d6b8e:	4a05      	ldr	r2, [pc, #20]	; (d6ba4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6b90:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6b92:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6b94:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6b96:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6b98:	461a      	mov	r2, r3
   d6b9a:	f7fe f8dd 	bl	d4d58 <HAL_USART_Init>
}
   d6b9e:	4620      	mov	r0, r4
   d6ba0:	bd10      	pop	{r4, pc}
   d6ba2:	bf00      	nop
   d6ba4:	000d903c 	.word	0x000d903c

000d6ba8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6ba8:	7c00      	ldrb	r0, [r0, #16]
   d6baa:	f7fe b905 	b.w	d4db8 <HAL_USART_Is_Enabled>
	...

000d6bb0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6bb0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6bb2:	4d0c      	ldr	r5, [pc, #48]	; (d6be4 <_Z22__fetch_global_Serial1v+0x34>)
   d6bb4:	6829      	ldr	r1, [r5, #0]
   d6bb6:	f011 0401 	ands.w	r4, r1, #1
   d6bba:	d111      	bne.n	d6be0 <_Z22__fetch_global_Serial1v+0x30>
   d6bbc:	4628      	mov	r0, r5
   d6bbe:	f7fd fa74 	bl	d40aa <__cxa_guard_acquire>
   d6bc2:	b168      	cbz	r0, d6be0 <_Z22__fetch_global_Serial1v+0x30>
   d6bc4:	4a08      	ldr	r2, [pc, #32]	; (d6be8 <_Z22__fetch_global_Serial1v+0x38>)
   d6bc6:	4b09      	ldr	r3, [pc, #36]	; (d6bec <_Z22__fetch_global_Serial1v+0x3c>)
   d6bc8:	4809      	ldr	r0, [pc, #36]	; (d6bf0 <_Z22__fetch_global_Serial1v+0x40>)
   d6bca:	4621      	mov	r1, r4
   d6bcc:	f7ff ffd6 	bl	d6b7c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6bd0:	4628      	mov	r0, r5
   d6bd2:	f7fd fa6f 	bl	d40b4 <__cxa_guard_release>
   d6bd6:	4a07      	ldr	r2, [pc, #28]	; (d6bf4 <_Z22__fetch_global_Serial1v+0x44>)
   d6bd8:	4907      	ldr	r1, [pc, #28]	; (d6bf8 <_Z22__fetch_global_Serial1v+0x48>)
   d6bda:	4805      	ldr	r0, [pc, #20]	; (d6bf0 <_Z22__fetch_global_Serial1v+0x40>)
   d6bdc:	f000 fff4 	bl	d7bc8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6be0:	4803      	ldr	r0, [pc, #12]	; (d6bf0 <_Z22__fetch_global_Serial1v+0x40>)
   d6be2:	bd38      	pop	{r3, r4, r5, pc}
   d6be4:	2003e4ac 	.word	0x2003e4ac
   d6be8:	2003e4b0 	.word	0x2003e4b0
   d6bec:	2003e428 	.word	0x2003e428
   d6bf0:	2003e414 	.word	0x2003e414
   d6bf4:	2003ce7c 	.word	0x2003ce7c
   d6bf8:	000d6af9 	.word	0x000d6af9

000d6bfc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6bfc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6bfe:	6883      	ldr	r3, [r0, #8]
   d6c00:	4604      	mov	r4, r0
   d6c02:	b90b      	cbnz	r3, d6c08 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6c04:	f001 f801 	bl	d7c0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c08:	68c3      	ldr	r3, [r0, #12]
   d6c0a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6c0c:	68a3      	ldr	r3, [r4, #8]
   d6c0e:	b11b      	cbz	r3, d6c18 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6c10:	2203      	movs	r2, #3
   d6c12:	4621      	mov	r1, r4
   d6c14:	4620      	mov	r0, r4
   d6c16:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6c18:	4620      	mov	r0, r4
   d6c1a:	2110      	movs	r1, #16
}
   d6c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6c20:	f000 bfe0 	b.w	d7be4 <_ZdlPvj>

000d6c24 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6c24:	4770      	bx	lr

000d6c26 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c28:	4606      	mov	r6, r0
   d6c2a:	4615      	mov	r5, r2
   d6c2c:	460c      	mov	r4, r1
   d6c2e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6c30:	42bc      	cmp	r4, r7
   d6c32:	d006      	beq.n	d6c42 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6c34:	6833      	ldr	r3, [r6, #0]
   d6c36:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6c3a:	689b      	ldr	r3, [r3, #8]
   d6c3c:	4630      	mov	r0, r6
   d6c3e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6c40:	e7f6      	b.n	d6c30 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6c42:	4628      	mov	r0, r5
   d6c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c46 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6c46:	2200      	movs	r2, #0
   d6c48:	7c00      	ldrb	r0, [r0, #16]
   d6c4a:	f7fe b8c5 	b.w	d4dd8 <HAL_I2C_Write_Data>

000d6c4e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6c4e:	2100      	movs	r1, #0
   d6c50:	7c00      	ldrb	r0, [r0, #16]
   d6c52:	f7fe b8c9 	b.w	d4de8 <HAL_I2C_Available_Data>

000d6c56 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6c56:	2100      	movs	r1, #0
   d6c58:	7c00      	ldrb	r0, [r0, #16]
   d6c5a:	f7fe b8cd 	b.w	d4df8 <HAL_I2C_Read_Data>

000d6c5e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6c5e:	2100      	movs	r1, #0
   d6c60:	7c00      	ldrb	r0, [r0, #16]
   d6c62:	f7fe b8d1 	b.w	d4e08 <HAL_I2C_Peek_Data>

000d6c66 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6c66:	2100      	movs	r1, #0
   d6c68:	7c00      	ldrb	r0, [r0, #16]
   d6c6a:	f7fe b8d5 	b.w	d4e18 <HAL_I2C_Flush_Data>

000d6c6e <_ZN7TwoWireD0Ev>:
   d6c6e:	b510      	push	{r4, lr}
   d6c70:	2114      	movs	r1, #20
   d6c72:	4604      	mov	r4, r0
   d6c74:	f000 ffb6 	bl	d7be4 <_ZdlPvj>
   d6c78:	4620      	mov	r0, r4
   d6c7a:	bd10      	pop	{r4, pc}

000d6c7c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6c7c:	b510      	push	{r4, lr}
   d6c7e:	4604      	mov	r4, r0
   d6c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c84:	4608      	mov	r0, r1
   d6c86:	60a3      	str	r3, [r4, #8]
   d6c88:	2100      	movs	r1, #0
   d6c8a:	4b04      	ldr	r3, [pc, #16]	; (d6c9c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6c8c:	7420      	strb	r0, [r4, #16]
   d6c8e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6c90:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6c92:	f7fe f8d1 	bl	d4e38 <HAL_I2C_Init>

}
   d6c96:	4620      	mov	r0, r4
   d6c98:	bd10      	pop	{r4, pc}
   d6c9a:	bf00      	nop
   d6c9c:	000d906c 	.word	0x000d906c

000d6ca0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6ca0:	2100      	movs	r1, #0
   d6ca2:	7c00      	ldrb	r0, [r0, #16]
   d6ca4:	f7fe b8c0 	b.w	d4e28 <HAL_I2C_Is_Enabled>

000d6ca8 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6ca8:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6caa:	2301      	movs	r3, #1
   d6cac:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6cae:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6cb0:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d6cb2:	b10b      	cbz	r3, d6cb8 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d6cb4:	68c0      	ldr	r0, [r0, #12]
   d6cb6:	e006      	b.n	d6cc6 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6cb8:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6cba:	b128      	cbz	r0, d6cc8 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6cbc:	6883      	ldr	r3, [r0, #8]
   d6cbe:	b90b      	cbnz	r3, d6cc4 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d6cc0:	f000 ffa3 	bl	d7c0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cc4:	68c3      	ldr	r3, [r0, #12]
   d6cc6:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d6cc8:	2301      	movs	r3, #1
   d6cca:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6ccc:	2000      	movs	r0, #0
    }
   d6cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d6cd2:	f7fe b809 	b.w	d4ce8 <os_thread_exit>

000d6cd6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6cd6:	2200      	movs	r2, #0
   d6cd8:	4611      	mov	r1, r2
   d6cda:	6840      	ldr	r0, [r0, #4]
   d6cdc:	f7fe b9c2 	b.w	d5064 <network_listening>

000d6ce0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ce0:	2200      	movs	r2, #0
   d6ce2:	4611      	mov	r1, r2
   d6ce4:	6840      	ldr	r0, [r0, #4]
   d6ce6:	f7fe b9cd 	b.w	d5084 <network_get_listen_timeout>

000d6cea <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6cea:	2200      	movs	r2, #0
   d6cec:	6840      	ldr	r0, [r0, #4]
   d6cee:	f7fe b9c1 	b.w	d5074 <network_set_listen_timeout>

000d6cf2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6cf2:	2200      	movs	r2, #0
   d6cf4:	f081 0101 	eor.w	r1, r1, #1
   d6cf8:	6840      	ldr	r0, [r0, #4]
   d6cfa:	f7fe b9ab 	b.w	d5054 <network_listen>

000d6cfe <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6cfe:	2300      	movs	r3, #0
   d6d00:	461a      	mov	r2, r3
   d6d02:	2101      	movs	r1, #1
   d6d04:	6840      	ldr	r0, [r0, #4]
   d6d06:	f7fe b99d 	b.w	d5044 <network_off>

000d6d0a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6d0a:	2300      	movs	r3, #0
   d6d0c:	461a      	mov	r2, r3
   d6d0e:	4619      	mov	r1, r3
   d6d10:	6840      	ldr	r0, [r0, #4]
   d6d12:	f7fe b98f 	b.w	d5034 <network_on>

000d6d16 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6d16:	2200      	movs	r2, #0
   d6d18:	4611      	mov	r1, r2
   d6d1a:	6840      	ldr	r0, [r0, #4]
   d6d1c:	f7fe b972 	b.w	d5004 <network_connecting>

000d6d20 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d20:	2200      	movs	r2, #0
   d6d22:	2102      	movs	r1, #2
   d6d24:	6840      	ldr	r0, [r0, #4]
   d6d26:	f7fe b975 	b.w	d5014 <network_disconnect>

000d6d2a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6d2a:	2300      	movs	r3, #0
   d6d2c:	461a      	mov	r2, r3
   d6d2e:	6840      	ldr	r0, [r0, #4]
   d6d30:	f7fe b960 	b.w	d4ff4 <network_connect>

000d6d34 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6d34:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d36:	4605      	mov	r5, r0
   d6d38:	b188      	cbz	r0, d6d5e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d3a:	6804      	ldr	r4, [r0, #0]
   d6d3c:	b14c      	cbz	r4, d6d52 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6d3e:	68a3      	ldr	r3, [r4, #8]
   d6d40:	b11b      	cbz	r3, d6d4a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d42:	2203      	movs	r2, #3
   d6d44:	4621      	mov	r1, r4
   d6d46:	4620      	mov	r0, r4
   d6d48:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d4a:	2110      	movs	r1, #16
   d6d4c:	4620      	mov	r0, r4
   d6d4e:	f000 ff49 	bl	d7be4 <_ZdlPvj>
   d6d52:	4628      	mov	r0, r5
   d6d54:	2114      	movs	r1, #20
      }
   d6d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d5a:	f000 bf43 	b.w	d7be4 <_ZdlPvj>
   d6d5e:	bd38      	pop	{r3, r4, r5, pc}

000d6d60 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6d60:	b110      	cbz	r0, d6d68 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6d62:	6803      	ldr	r3, [r0, #0]
   d6d64:	685b      	ldr	r3, [r3, #4]
   d6d66:	4718      	bx	r3
   d6d68:	4770      	bx	lr

000d6d6a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6d6a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6d6c:	6803      	ldr	r3, [r0, #0]
   d6d6e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6d70:	b1bb      	cbz	r3, d6da2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6d72:	6858      	ldr	r0, [r3, #4]
   d6d74:	f7fd ff50 	bl	d4c18 <os_thread_is_current>
   d6d78:	b978      	cbnz	r0, d6d9a <_ZN6ThreadD1Ev+0x30>
   d6d7a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6d7c:	7c5a      	ldrb	r2, [r3, #17]
   d6d7e:	b912      	cbnz	r2, d6d86 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6d80:	6858      	ldr	r0, [r3, #4]
   d6d82:	f7fd ff59 	bl	d4c38 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6d86:	6823      	ldr	r3, [r4, #0]
   d6d88:	6858      	ldr	r0, [r3, #4]
   d6d8a:	f7fd ff5d 	bl	d4c48 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d8e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6d90:	2300      	movs	r3, #0
   d6d92:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6d94:	b128      	cbz	r0, d6da2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6d96:	f7ff ffcd 	bl	d6d34 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d9a:	6820      	ldr	r0, [r4, #0]
   d6d9c:	b108      	cbz	r0, d6da2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6d9e:	f7ff ffc9 	bl	d6d34 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6da2:	4620      	mov	r0, r4
   d6da4:	bd10      	pop	{r4, pc}
	...

000d6da8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6da8:	b538      	push	{r3, r4, r5, lr}
   d6daa:	4b0c      	ldr	r3, [pc, #48]	; (d6ddc <_ZN5spark9MeshClassD1Ev+0x34>)
   d6dac:	6003      	str	r3, [r0, #0]
   d6dae:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6db0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6db4:	b108      	cbz	r0, d6dba <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6db6:	f7fd f976 	bl	d40a6 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6dba:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6dbe:	b135      	cbz	r5, d6dce <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6dc0:	4628      	mov	r0, r5
   d6dc2:	f7ff ffd2 	bl	d6d6a <_ZN6ThreadD1Ev>
   d6dc6:	2104      	movs	r1, #4
   d6dc8:	4628      	mov	r0, r5
   d6dca:	f000 ff0b 	bl	d7be4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6dce:	68a0      	ldr	r0, [r4, #8]
   d6dd0:	b108      	cbz	r0, d6dd6 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6dd2:	f7ff ffc5 	bl	d6d60 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6dd6:	4620      	mov	r0, r4
   d6dd8:	bd38      	pop	{r3, r4, r5, pc}
   d6dda:	bf00      	nop
   d6ddc:	000d9094 	.word	0x000d9094

000d6de0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6de4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d6de6:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d6dea:	4606      	mov	r6, r0
   d6dec:	4688      	mov	r8, r1
   d6dee:	4691      	mov	r9, r2
   d6df0:	469a      	mov	sl, r3
   d6df2:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6df4:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d6df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6df8:	454b      	cmp	r3, r9
   d6dfa:	d129      	bne.n	d6e50 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d6dfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d6dfe:	4553      	cmp	r3, sl
   d6e00:	d126      	bne.n	d6e50 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d6e02:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d6e06:	455b      	cmp	r3, fp
   d6e08:	d122      	bne.n	d6e50 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6e0a:	2140      	movs	r1, #64	; 0x40
   d6e0c:	4640      	mov	r0, r8
   d6e0e:	f001 fd32 	bl	d8876 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d6e12:	4641      	mov	r1, r8
   d6e14:	4602      	mov	r2, r0
   d6e16:	4620      	mov	r0, r4
   d6e18:	f001 fd05 	bl	d8826 <strncmp>
   d6e1c:	b9c0      	cbnz	r0, d6e50 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d6e1e:	b16f      	cbz	r7, d6e3c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d6e20:	210c      	movs	r1, #12
   d6e22:	4638      	mov	r0, r7
   d6e24:	f001 fd27 	bl	d8876 <strnlen>
                if (id_len)
   d6e28:	4602      	mov	r2, r0
   d6e2a:	b138      	cbz	r0, d6e3c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d6e2c:	2358      	movs	r3, #88	; 0x58
   d6e2e:	fb03 6005 	mla	r0, r3, r5, r6
   d6e32:	4639      	mov	r1, r7
   d6e34:	3049      	adds	r0, #73	; 0x49
   d6e36:	f001 fcf6 	bl	d8826 <strncmp>
   d6e3a:	e004      	b.n	d6e46 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d6e3c:	2058      	movs	r0, #88	; 0x58
   d6e3e:	fb00 6505 	mla	r5, r0, r5, r6
   d6e42:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d6e46:	fab0 f080 	clz	r0, r0
   d6e4a:	0940      	lsrs	r0, r0, #5
   d6e4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6e50:	3501      	adds	r5, #1
   d6e52:	2d05      	cmp	r5, #5
   d6e54:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d6e58:	d1cd      	bne.n	d6df6 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d6e5a:	2000      	movs	r0, #0
}
   d6e5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6e60 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e64:	b085      	sub	sp, #20
   d6e66:	4607      	mov	r7, r0
   d6e68:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6e6c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d6e6e:	9601      	str	r6, [sp, #4]
   d6e70:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6e74:	4689      	mov	r9, r1
   d6e76:	9202      	str	r2, [sp, #8]
   d6e78:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d6e7a:	f7ff ffb1 	bl	d6de0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d6e7e:	2800      	cmp	r0, #0
   d6e80:	d13c      	bne.n	d6efc <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d6e82:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d6e84:	2358      	movs	r3, #88	; 0x58
   d6e86:	fb03 7504 	mla	r5, r3, r4, r7
   d6e8a:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d6e8e:	f1b8 0f00 	cmp.w	r8, #0
   d6e92:	d12e      	bne.n	d6ef2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6e94:	2140      	movs	r1, #64	; 0x40
   d6e96:	4648      	mov	r0, r9
   d6e98:	f001 fced 	bl	d8876 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d6e9c:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6e9e:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d6ea0:	4602      	mov	r2, r0
   d6ea2:	4628      	mov	r0, r5
   d6ea4:	f001 fc33 	bl	d870e <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d6ea8:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d6eac:	4641      	mov	r1, r8
   d6eae:	eb05 000b 	add.w	r0, r5, fp
   d6eb2:	f001 fc52 	bl	d875a <memset>
            event_handlers[i].handler = handler;
   d6eb6:	9b02      	ldr	r3, [sp, #8]
   d6eb8:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d6eba:	9b03      	ldr	r3, [sp, #12]
   d6ebc:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d6ebe:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d6ec2:	b12e      	cbz	r6, d6ed0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d6ec4:	210c      	movs	r1, #12
   d6ec6:	4630      	mov	r0, r6
   d6ec8:	f001 fcd5 	bl	d8876 <strnlen>
   d6ecc:	4605      	mov	r5, r0
   d6ece:	e000      	b.n	d6ed2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d6ed0:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d6ed2:	2058      	movs	r0, #88	; 0x58
   d6ed4:	4344      	muls	r4, r0
   d6ed6:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d6ed8:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d6eda:	462a      	mov	r2, r5
   d6edc:	4631      	mov	r1, r6
   d6ede:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d6ee0:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d6ee2:	f001 fc14 	bl	d870e <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d6ee6:	2000      	movs	r0, #0
   d6ee8:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d6eec:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d6ef0:	e005      	b.n	d6efe <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6ef2:	3401      	adds	r4, #1
   d6ef4:	2c05      	cmp	r4, #5
   d6ef6:	d1c6      	bne.n	d6e86 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d6ef8:	4802      	ldr	r0, [pc, #8]	; (d6f04 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d6efa:	e000      	b.n	d6efe <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d6efc:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d6efe:	b005      	add	sp, #20
   d6f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f04:	fffffefc 	.word	0xfffffefc

000d6f08 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d6f08:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d6f0a:	2300      	movs	r3, #0
   d6f0c:	9301      	str	r3, [sp, #4]
   d6f0e:	9300      	str	r3, [sp, #0]
   d6f10:	f7ff ffa6 	bl	d6e60 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d6f14:	b003      	add	sp, #12
   d6f16:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f1a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6f1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6f1e:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d6f20:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6f22:	460d      	mov	r5, r1
   d6f24:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d6f26:	f001 fc76 	bl	d8816 <strlen>
   d6f2a:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d6f2e:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d6f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6f32:	b1ab      	cbz	r3, d6f60 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6f34:	2140      	movs	r1, #64	; 0x40
   d6f36:	4620      	mov	r0, r4
   d6f38:	f001 fc9d 	bl	d8876 <strnlen>

        if (event_name_length < filter_length)
   d6f3c:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6f3e:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d6f40:	d30b      	bcc.n	d6f5a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d6f42:	4629      	mov	r1, r5
   d6f44:	4620      	mov	r0, r4
   d6f46:	f001 fbd3 	bl	d86f0 <memcmp>
        if (0 == cmp)
   d6f4a:	b930      	cbnz	r0, d6f5a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d6f4c:	9000      	str	r0, [sp, #0]
   d6f4e:	4643      	mov	r3, r8
   d6f50:	462a      	mov	r2, r5
   d6f52:	4621      	mov	r1, r4
   d6f54:	2058      	movs	r0, #88	; 0x58
   d6f56:	f7fe f843 	bl	d4fe0 <system_invoke_event_handler>
   d6f5a:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6f5c:	42b4      	cmp	r4, r6
   d6f5e:	d1e7      	bne.n	d6f30 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d6f60:	b002      	add	sp, #8
   d6f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6f68 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d6f68:	b530      	push	{r4, r5, lr}
   d6f6a:	b08d      	sub	sp, #52	; 0x34
   d6f6c:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d6f6e:	2211      	movs	r2, #17
   d6f70:	2100      	movs	r1, #0
   d6f72:	a801      	add	r0, sp, #4
   d6f74:	f001 fbf1 	bl	d875a <memset>
    addr.v = 6;
   d6f78:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6f7a:	aa01      	add	r2, sp, #4
   d6f7c:	4909      	ldr	r1, [pc, #36]	; (d6fa4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d6f7e:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6f82:	200a      	movs	r0, #10
   d6f84:	f7fd fec8 	bl	d4d18 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6f88:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d6f8a:	a901      	add	r1, sp, #4
   d6f8c:	a806      	add	r0, sp, #24
   d6f8e:	f7ff fceb 	bl	d6968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f94:	3404      	adds	r4, #4
   d6f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f98:	682b      	ldr	r3, [r5, #0]
   d6f9a:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d6f9c:	2000      	movs	r0, #0
   d6f9e:	b00d      	add	sp, #52	; 0x34
   d6fa0:	bd30      	pop	{r4, r5, pc}
   d6fa2:	bf00      	nop
   d6fa4:	000d90c0 	.word	0x000d90c0

000d6fa8 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6fac:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d6fae:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6fb2:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6fb4:	4630      	mov	r0, r6
   d6fb6:	f7ff f8ef 	bl	d6198 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6fba:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6fbc:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6fc0:	f7fd fe8a 	bl	d4cd8 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d6fc4:	2c00      	cmp	r4, #0
   d6fc6:	d063      	beq.n	d7090 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d6fc8:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d6fcc:	b163      	cbz	r3, d6fe8 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d6fce:	6823      	ldr	r3, [r4, #0]
   d6fd0:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d6fd4:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d6fd6:	4620      	mov	r0, r4
   d6fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6fdc:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d6fe0:	47b8      	blx	r7
        if (len > 0) {
   d6fe2:	1e04      	subs	r4, r0, #0
   d6fe4:	dc13      	bgt.n	d700e <_ZN5spark11MeshPublish4pollEv+0x66>
   d6fe6:	e056      	b.n	d7096 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d6fe8:	492d      	ldr	r1, [pc, #180]	; (d70a0 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d6fea:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d6fee:	f000 fdfb 	bl	d7be8 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ff2:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d6ff6:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d6ffa:	b113      	cbz	r3, d7002 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6ffc:	4618      	mov	r0, r3
   d6ffe:	f7fd f852 	bl	d40a6 <_ZdaPv>
            if (!buffer_) {
   d7002:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d7006:	2b00      	cmp	r3, #0
   d7008:	d1e1      	bne.n	d6fce <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d700a:	4826      	ldr	r0, [pc, #152]	; (d70a4 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d700c:	e044      	b.n	d7098 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d700e:	2320      	movs	r3, #32
   d7010:	4a25      	ldr	r2, [pc, #148]	; (d70a8 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d7012:	9302      	str	r3, [sp, #8]
   d7014:	9200      	str	r2, [sp, #0]
   d7016:	2300      	movs	r3, #0
   d7018:	9401      	str	r4, [sp, #4]
   d701a:	aa02      	add	r2, sp, #8
   d701c:	4923      	ldr	r1, [pc, #140]	; (d70ac <_ZN5spark11MeshPublish4pollEv+0x104>)
   d701e:	9303      	str	r3, [sp, #12]
   d7020:	2001      	movs	r0, #1
   d7022:	f7fd ff99 	bl	d4f58 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7026:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d702a:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d702c:	781b      	ldrb	r3, [r3, #0]
   d702e:	bb6b      	cbnz	r3, d708c <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d7030:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d7032:	4621      	mov	r1, r4
   d7034:	4638      	mov	r0, r7
   d7036:	f001 fc1e 	bl	d8876 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d703a:	b338      	cbz	r0, d708c <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d703c:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d703e:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d7040:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d7044:	dd22      	ble.n	d708c <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d7046:	5c3b      	ldrb	r3, [r7, r0]
   d7048:	bb03      	cbnz	r3, d708c <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d704a:	3c01      	subs	r4, #1
   d704c:	d00e      	beq.n	d706c <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d704e:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d7052:	4621      	mov	r1, r4
   d7054:	4640      	mov	r0, r8
   d7056:	f001 fc0e 	bl	d8876 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d705a:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d705c:	2c00      	cmp	r4, #0
   d705e:	dd15      	ble.n	d708c <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d7060:	f818 3000 	ldrb.w	r3, [r8, r0]
   d7064:	b993      	cbnz	r3, d708c <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d7066:	2c01      	cmp	r4, #1
   d7068:	d002      	beq.n	d7070 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d706a:	e00f      	b.n	d708c <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d706c:	f8df 8044 	ldr.w	r8, [pc, #68]	; d70b4 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d7070:	4630      	mov	r0, r6
   d7072:	f7ff f891 	bl	d6198 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d7076:	4642      	mov	r2, r8
   d7078:	4639      	mov	r1, r7
   d707a:	1d28      	adds	r0, r5, #4
   d707c:	f7ff ff4d 	bl	d6f1a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d7080:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d7084:	f7fd fe28 	bl	d4cd8 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d7088:	2000      	movs	r0, #0
   d708a:	e005      	b.n	d7098 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d708c:	4808      	ldr	r0, [pc, #32]	; (d70b0 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d708e:	e003      	b.n	d7098 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d7090:	2064      	movs	r0, #100	; 0x64
   d7092:	f7fd fd7d 	bl	d4b90 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d7096:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d7098:	b00a      	add	sp, #40	; 0x28
   d709a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d709e:	bf00      	nop
   d70a0:	000d919c 	.word	0x000d919c
   d70a4:	fffffefc 	.word	0xfffffefc
   d70a8:	000d90d4 	.word	0x000d90d4
   d70ac:	000d90cd 	.word	0x000d90cd
   d70b0:	fffffee8 	.word	0xfffffee8
   d70b4:	000d8f70 	.word	0x000d8f70

000d70b8 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d70b8:	b510      	push	{r4, lr}
   d70ba:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d70bc:	f3bf 8f5f 	dmb	sy
   d70c0:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d70c4:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d70c8:	b91b      	cbnz	r3, d70d2 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d70ca:	4620      	mov	r0, r4
   d70cc:	f7ff ff6c 	bl	d6fa8 <_ZN5spark11MeshPublish4pollEv>
   d70d0:	e7f4      	b.n	d70bc <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d70d2:	bd10      	pop	{r4, pc}

000d70d4 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d70d4:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70d6:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d70d8:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d70da:	b144      	cbz	r4, d70ee <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d70dc:	4620      	mov	r0, r4
   d70de:	f7ff fe44 	bl	d6d6a <_ZN6ThreadD1Ev>
   d70e2:	4620      	mov	r0, r4
   d70e4:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d70e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d70ea:	f000 bd7b 	b.w	d7be4 <_ZdlPvj>
   d70ee:	bd10      	pop	{r4, pc}

000d70f0 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d70f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d70f4:	4605      	mov	r5, r0
   d70f6:	b08a      	sub	sp, #40	; 0x28
   d70f8:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d70fc:	f7ff f84c 	bl	d6198 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d7100:	682c      	ldr	r4, [r5, #0]
   d7102:	2c00      	cmp	r4, #0
   d7104:	d17b      	bne.n	d71fe <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d7106:	204c      	movs	r0, #76	; 0x4c
   d7108:	f7fc ffc7 	bl	d409a <_Znwj>
   d710c:	4606      	mov	r6, r0
   d710e:	2800      	cmp	r0, #0
   d7110:	d073      	beq.n	d71fa <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d7112:	f7fe fb4b 	bl	d57ac <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d7116:	4622      	mov	r2, r4
   d7118:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d711c:	4630      	mov	r0, r6
   d711e:	f7fe fb75 	bl	d580c <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d7122:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d7124:	483a      	ldr	r0, [pc, #232]	; (d7210 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d7126:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d712a:	f7fd fd01 	bl	d4b30 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d712e:	6833      	ldr	r3, [r6, #0]
   d7130:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7134:	6a1b      	ldr	r3, [r3, #32]
   d7136:	f249 0169 	movw	r1, #36969	; 0x9069
   d713a:	4630      	mov	r0, r6
   d713c:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d713e:	a804      	add	r0, sp, #16
   d7140:	f7ff fc04 	bl	d694c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d7144:	a804      	add	r0, sp, #16
   d7146:	f7ff ff0f 	bl	d6f68 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d714a:	2800      	cmp	r0, #0
   d714c:	db4a      	blt.n	d71e4 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d714e:	a904      	add	r1, sp, #16
   d7150:	4630      	mov	r0, r6
   d7152:	f7fe fbaa 	bl	d58aa <_ZN3UDP13joinMulticastERK9IPAddress>
   d7156:	2800      	cmp	r0, #0
   d7158:	db44      	blt.n	d71e4 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d715a:	f3bf 8f5f 	dmb	sy
   d715e:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d7162:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d7166:	492b      	ldr	r1, [pc, #172]	; (d7214 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d7168:	2004      	movs	r0, #4
   d716a:	f000 fd3f 	bl	d7bec <_ZnwjRKSt9nothrow_t>
   d716e:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d7172:	4607      	mov	r7, r0
   d7174:	b348      	cbz	r0, d71ca <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d7176:	4927      	ldr	r1, [pc, #156]	; (d7214 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d7178:	2014      	movs	r0, #20
   d717a:	f000 fd37 	bl	d7bec <_ZnwjRKSt9nothrow_t>
   d717e:	b128      	cbz	r0, d718c <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d7180:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7182:	6004      	str	r4, [r0, #0]
   d7184:	6044      	str	r4, [r0, #4]
   d7186:	6084      	str	r4, [r0, #8]
   d7188:	60c4      	str	r4, [r0, #12]
   d718a:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d718c:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d718e:	b1b0      	cbz	r0, d71be <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d7190:	4b21      	ldr	r3, [pc, #132]	; (d7218 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d7192:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7194:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7196:	4921      	ldr	r1, [pc, #132]	; (d721c <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d7198:	60dd      	str	r5, [r3, #12]
   d719a:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d719c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d71a0:	e88d 0009 	stmia.w	sp, {r0, r3}
   d71a4:	2203      	movs	r2, #3
   d71a6:	4b1e      	ldr	r3, [pc, #120]	; (d7220 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d71a8:	3004      	adds	r0, #4
   d71aa:	f7fd fd2d 	bl	d4c08 <os_thread_create>
   d71ae:	b930      	cbnz	r0, d71be <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d71b0:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d71b2:	7c1b      	ldrb	r3, [r3, #16]
   d71b4:	b94b      	cbnz	r3, d71ca <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d71b6:	2001      	movs	r0, #1
   d71b8:	f7fd fcea 	bl	d4b90 <HAL_Delay_Milliseconds>
   d71bc:	e7f8      	b.n	d71b0 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71be:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71c0:	2300      	movs	r3, #0
   d71c2:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d71c4:	b108      	cbz	r0, d71ca <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d71c6:	f7ff fdb5 	bl	d6d34 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d71ca:	4639      	mov	r1, r7
   d71cc:	4640      	mov	r0, r8
   d71ce:	f7ff ff81 	bl	d70d4 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d71d2:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d71d6:	b13b      	cbz	r3, d71e8 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71d8:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71da:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d71dc:	b130      	cbz	r0, d71ec <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d71de:	f7ff fdbf 	bl	d6d60 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d71e2:	e00c      	b.n	d71fe <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d71e4:	4604      	mov	r4, r0
   d71e6:	e003      	b.n	d71f0 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d71e8:	4c0e      	ldr	r4, [pc, #56]	; (d7224 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d71ea:	e001      	b.n	d71f0 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d71ec:	4604      	mov	r4, r0
   d71ee:	e007      	b.n	d7200 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71f0:	b136      	cbz	r6, d7200 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d71f2:	4630      	mov	r0, r6
   d71f4:	f7ff fdb4 	bl	d6d60 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d71f8:	e002      	b.n	d7200 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d71fa:	4c0a      	ldr	r4, [pc, #40]	; (d7224 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d71fc:	e000      	b.n	d7200 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d71fe:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7200:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d7204:	f7fd fd68 	bl	d4cd8 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d7208:	4620      	mov	r0, r4
   d720a:	b00a      	add	sp, #40	; 0x28
   d720c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7210:	000d90e4 	.word	0x000d90e4
   d7214:	000d919c 	.word	0x000d919c
   d7218:	000d70b9 	.word	0x000d70b9
   d721c:	000d90e8 	.word	0x000d90e8
   d7220:	000d6ca9 	.word	0x000d6ca9
   d7224:	fffffefc 	.word	0xfffffefc

000d7228 <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d7228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d722c:	4605      	mov	r5, r0
   d722e:	b08c      	sub	sp, #48	; 0x30
   d7230:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d7232:	460f      	mov	r7, r1
   d7234:	b109      	cbz	r1, d723a <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d7236:	780b      	ldrb	r3, [r1, #0]
   d7238:	b90b      	cbnz	r3, d723e <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d723a:	4c35      	ldr	r4, [pc, #212]	; (d7310 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d723c:	e064      	b.n	d7308 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d723e:	4608      	mov	r0, r1
   d7240:	f001 fae9 	bl	d8816 <strlen>
   d7244:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d7246:	2e00      	cmp	r6, #0
   d7248:	d05c      	beq.n	d7304 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d724a:	4630      	mov	r0, r6
   d724c:	f001 fae3 	bl	d8816 <strlen>
   d7250:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d7252:	f108 0302 	add.w	r3, r8, #2
   d7256:	4423      	add	r3, r4
   d7258:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d725c:	d84f      	bhi.n	d72fe <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d725e:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d7262:	f7fe ff99 	bl	d6198 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d7266:	4628      	mov	r0, r5
   d7268:	f7ff ff42 	bl	d70f0 <_ZN5spark11MeshPublish13initializeUdpEv>
   d726c:	2800      	cmp	r0, #0
   d726e:	db40      	blt.n	d72f2 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d7270:	4668      	mov	r0, sp
   d7272:	f7ff fb6b 	bl	d694c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d7276:	4668      	mov	r0, sp
   d7278:	f7ff fe76 	bl	d6f68 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d727c:	2800      	cmp	r0, #0
   d727e:	db38      	blt.n	d72f2 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7280:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d7284:	f8da 3000 	ldr.w	r3, [sl]
   d7288:	f10d 0c04 	add.w	ip, sp, #4
   d728c:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d7290:	4b20      	ldr	r3, [pc, #128]	; (d7314 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d7292:	9306      	str	r3, [sp, #24]
   d7294:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7298:	f10d 0e1c 	add.w	lr, sp, #28
   d729c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d72a0:	f8dc 3000 	ldr.w	r3, [ip]
   d72a4:	f88e 3000 	strb.w	r3, [lr]
   d72a8:	f249 0269 	movw	r2, #36969	; 0x9069
   d72ac:	a906      	add	r1, sp, #24
   d72ae:	4650      	mov	r0, sl
   d72b0:	47c8      	blx	r9
   d72b2:	2800      	cmp	r0, #0
   d72b4:	db1d      	blt.n	d72f2 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d72b6:	2300      	movs	r3, #0
   d72b8:	6828      	ldr	r0, [r5, #0]
   d72ba:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d72be:	6803      	ldr	r3, [r0, #0]
   d72c0:	2201      	movs	r2, #1
   d72c2:	68db      	ldr	r3, [r3, #12]
   d72c4:	a906      	add	r1, sp, #24
   d72c6:	4798      	blx	r3
   d72c8:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d72ca:	6803      	ldr	r3, [r0, #0]
   d72cc:	f108 0201 	add.w	r2, r8, #1
   d72d0:	68db      	ldr	r3, [r3, #12]
   d72d2:	4639      	mov	r1, r7
   d72d4:	4798      	blx	r3
    if (dataLen > 0) {
   d72d6:	b12c      	cbz	r4, d72e4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d72d8:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d72da:	6803      	ldr	r3, [r0, #0]
   d72dc:	4622      	mov	r2, r4
   d72de:	68db      	ldr	r3, [r3, #12]
   d72e0:	4631      	mov	r1, r6
   d72e2:	4798      	blx	r3
   d72e4:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d72e6:	6803      	ldr	r3, [r0, #0]
   d72e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d72ea:	4798      	blx	r3
   d72ec:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d72f0:	e000      	b.n	d72f4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d72f2:	4604      	mov	r4, r0
   d72f4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d72f8:	f7fd fcee 	bl	d4cd8 <os_mutex_recursive_unlock>
   d72fc:	e004      	b.n	d7308 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d72fe:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d7302:	e001      	b.n	d7308 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d7304:	4634      	mov	r4, r6
   d7306:	e7a4      	b.n	d7252 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d7308:	4620      	mov	r0, r4
   d730a:	b00c      	add	sp, #48	; 0x30
   d730c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7310:	fffffef2 	.word	0xfffffef2
   d7314:	000d8ff8 	.word	0x000d8ff8

000d7318 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d7318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d731a:	4605      	mov	r5, r0
   d731c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d7320:	460e      	mov	r6, r1
   d7322:	4617      	mov	r7, r2
   d7324:	f7fe ff38 	bl	d6198 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d7328:	4628      	mov	r0, r5
   d732a:	f7ff fee1 	bl	d70f0 <_ZN5spark11MeshPublish13initializeUdpEv>
   d732e:	2800      	cmp	r0, #0
   d7330:	db07      	blt.n	d7342 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   d7332:	463a      	mov	r2, r7
   d7334:	4631      	mov	r1, r6
   d7336:	1d28      	adds	r0, r5, #4
   d7338:	f7ff fde6 	bl	d6f08 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d733c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d7340:	e000      	b.n	d7344 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   d7342:	4604      	mov	r4, r0
   d7344:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d7348:	f7fd fcc6 	bl	d4cd8 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d734c:	4620      	mov	r0, r4
   d734e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7350 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7350:	b538      	push	{r3, r4, r5, lr}
   d7352:	4c0e      	ldr	r4, [pc, #56]	; (d738c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7354:	4b0e      	ldr	r3, [pc, #56]	; (d7390 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7356:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7358:	2500      	movs	r5, #0
   d735a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d735c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7360:	6063      	str	r3, [r4, #4]
   d7362:	60a5      	str	r5, [r4, #8]
   d7364:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7368:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d736c:	f7fd fca4 	bl	d4cb8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7370:	4b08      	ldr	r3, [pc, #32]	; (d7394 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7372:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7376:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d737a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d737c:	4620      	mov	r0, r4
   d737e:	4a06      	ldr	r2, [pc, #24]	; (d7398 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7380:	4906      	ldr	r1, [pc, #24]	; (d739c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7386:	f000 bc1f 	b.w	d7bc8 <__aeabi_atexit>
   d738a:	bf00      	nop
   d738c:	2003e534 	.word	0x2003e534
   d7390:	000d9170 	.word	0x000d9170
   d7394:	000d9094 	.word	0x000d9094
   d7398:	2003ce7c 	.word	0x2003ce7c
   d739c:	000d6da9 	.word	0x000d6da9

000d73a0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73a2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73a4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73a6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73aa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d73ac:	2201      	movs	r2, #1
   d73ae:	f04f 33ff 	mov.w	r3, #4294967295
   d73b2:	4621      	mov	r1, r4
   d73b4:	47a8      	blx	r5
}
   d73b6:	b003      	add	sp, #12
   d73b8:	bd30      	pop	{r4, r5, pc}

000d73ba <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d73ba:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d73bc:	6803      	ldr	r3, [r0, #0]
   d73be:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d73c0:	f04f 33ff 	mov.w	r3, #4294967295
   d73c4:	46a4      	mov	ip, r4
}
   d73c6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d73ca:	4760      	bx	ip

000d73cc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d73cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73ce:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d73d0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d73d2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d73d6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d73d8:	4621      	mov	r1, r4
   d73da:	4613      	mov	r3, r2
   d73dc:	2201      	movs	r2, #1
   d73de:	47a8      	blx	r5
}
   d73e0:	b003      	add	sp, #12
   d73e2:	bd30      	pop	{r4, r5, pc}

000d73e4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d73e4:	4770      	bx	lr

000d73e6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d73e6:	b538      	push	{r3, r4, r5, lr}
   d73e8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d73ea:	681a      	ldr	r2, [r3, #0]
   d73ec:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d73ee:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d73f0:	da05      	bge.n	d73fe <_ZN9TCPClient9connectedEv+0x18>
   d73f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d73f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d73fa:	429a      	cmp	r2, r3
   d73fc:	d001      	beq.n	d7402 <_ZN9TCPClient9connectedEv+0x1c>
   d73fe:	2501      	movs	r5, #1
   d7400:	e00b      	b.n	d741a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7402:	6803      	ldr	r3, [r0, #0]
   d7404:	691b      	ldr	r3, [r3, #16]
   d7406:	4798      	blx	r3
   d7408:	2800      	cmp	r0, #0
   d740a:	bf14      	ite	ne
   d740c:	2501      	movne	r5, #1
   d740e:	2500      	moveq	r5, #0
        if (!rv) {
   d7410:	d103      	bne.n	d741a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7412:	6823      	ldr	r3, [r4, #0]
   d7414:	4620      	mov	r0, r4
   d7416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7418:	4798      	blx	r3
        }
    }
    return rv;
}
   d741a:	4628      	mov	r0, r5
   d741c:	bd38      	pop	{r3, r4, r5, pc}

000d741e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d741e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7420:	6818      	ldr	r0, [r3, #0]
}
   d7422:	43c0      	mvns	r0, r0
   d7424:	0fc0      	lsrs	r0, r0, #31
   d7426:	4770      	bx	lr

000d7428 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7428:	4770      	bx	lr

000d742a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d742a:	2000      	movs	r0, #0
   d742c:	4770      	bx	lr

000d742e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d742e:	b510      	push	{r4, lr}
   d7430:	2114      	movs	r1, #20
   d7432:	4604      	mov	r4, r0
   d7434:	f000 fbd6 	bl	d7be4 <_ZdlPvj>
   d7438:	4620      	mov	r0, r4
   d743a:	bd10      	pop	{r4, pc}

000d743c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d743c:	f7fc be31 	b.w	d40a2 <_ZdlPv>

000d7440 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7442:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7444:	2200      	movs	r2, #0
   d7446:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7448:	9202      	str	r2, [sp, #8]
   d744a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d744c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d744e:	4604      	mov	r4, r0
   d7450:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7452:	d008      	beq.n	d7466 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7458:	fbb3 f1f2 	udiv	r1, r3, r2
   d745c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d745e:	fb02 3111 	mls	r1, r2, r1, r3
   d7462:	434a      	muls	r2, r1
   d7464:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7466:	6960      	ldr	r0, [r4, #20]
   d7468:	2308      	movs	r3, #8
   d746a:	9300      	str	r3, [sp, #0]
   d746c:	f241 0205 	movw	r2, #4101	; 0x1005
   d7470:	446b      	add	r3, sp
   d7472:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7476:	6800      	ldr	r0, [r0, #0]
   d7478:	f7fd fcee 	bl	d4e58 <sock_setsockopt>
    if (ret < 0) {
   d747c:	2800      	cmp	r0, #0
   d747e:	db08      	blt.n	d7492 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7480:	6960      	ldr	r0, [r4, #20]
   d7482:	2300      	movs	r3, #0
   d7484:	4632      	mov	r2, r6
   d7486:	4629      	mov	r1, r5
   d7488:	6800      	ldr	r0, [r0, #0]
   d748a:	f7fd fd0d 	bl	d4ea8 <sock_send>
    if (ret < 0) {
   d748e:	2800      	cmp	r0, #0
   d7490:	da04      	bge.n	d749c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7492:	f7fd fe77 	bl	d5184 <__errno>
   d7496:	6803      	ldr	r3, [r0, #0]
   d7498:	6063      	str	r3, [r4, #4]
   d749a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d749c:	b004      	add	sp, #16
   d749e:	bd70      	pop	{r4, r5, r6, pc}

000d74a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74a0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74a2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74a4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74a6:	689b      	ldr	r3, [r3, #8]
   d74a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d74aa:	68a3      	ldr	r3, [r4, #8]
   d74ac:	3b01      	subs	r3, #1
   d74ae:	60a3      	str	r3, [r4, #8]
   d74b0:	b92b      	cbnz	r3, d74be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d74b2:	6823      	ldr	r3, [r4, #0]
   d74b4:	4620      	mov	r0, r4
   d74b6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d74b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d74bc:	4718      	bx	r3
   d74be:	bd10      	pop	{r4, pc}

000d74c0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d74c0:	b570      	push	{r4, r5, r6, lr}
   d74c2:	4604      	mov	r4, r0
   d74c4:	694d      	ldr	r5, [r1, #20]
   d74c6:	4b05      	ldr	r3, [pc, #20]	; (d74dc <_ZN9TCPClient8remoteIPEv+0x1c>)
   d74c8:	f844 3b04 	str.w	r3, [r4], #4
   d74cc:	358c      	adds	r5, #140	; 0x8c
   d74ce:	4606      	mov	r6, r0
   d74d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74d4:	682b      	ldr	r3, [r5, #0]
   d74d6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d74d8:	4630      	mov	r0, r6
   d74da:	bd70      	pop	{r4, r5, r6, pc}
   d74dc:	000d8ff8 	.word	0x000d8ff8

000d74e0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d74e0:	b510      	push	{r4, lr}
   d74e2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d74e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d74e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d74ec:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d74ee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d74f0:	d005      	beq.n	d74fe <_ZN9TCPClient4peekEv+0x1e>
   d74f2:	6962      	ldr	r2, [r4, #20]
   d74f4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d74f8:	4413      	add	r3, r2
   d74fa:	7918      	ldrb	r0, [r3, #4]
   d74fc:	bd10      	pop	{r4, pc}
   d74fe:	6803      	ldr	r3, [r0, #0]
   d7500:	691b      	ldr	r3, [r3, #16]
   d7502:	4798      	blx	r3
   d7504:	2800      	cmp	r0, #0
   d7506:	d1f4      	bne.n	d74f2 <_ZN9TCPClient4peekEv+0x12>
   d7508:	f04f 30ff 	mov.w	r0, #4294967295
}
   d750c:	bd10      	pop	{r4, pc}

000d750e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d750e:	b510      	push	{r4, lr}
   d7510:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7512:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7516:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d751a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d751c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d751e:	d008      	beq.n	d7532 <_ZN9TCPClient4readEv+0x24>
   d7520:	6962      	ldr	r2, [r4, #20]
   d7522:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7526:	1c59      	adds	r1, r3, #1
   d7528:	4413      	add	r3, r2
   d752a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d752e:	7918      	ldrb	r0, [r3, #4]
   d7530:	bd10      	pop	{r4, pc}
   d7532:	6803      	ldr	r3, [r0, #0]
   d7534:	691b      	ldr	r3, [r3, #16]
   d7536:	4798      	blx	r3
   d7538:	2800      	cmp	r0, #0
   d753a:	d1f1      	bne.n	d7520 <_ZN9TCPClient4readEv+0x12>
   d753c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7540:	bd10      	pop	{r4, pc}

000d7542 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7544:	6943      	ldr	r3, [r0, #20]
   d7546:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7548:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d754c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7550:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7552:	4605      	mov	r5, r0
   d7554:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7556:	d106      	bne.n	d7566 <_ZN9TCPClient4readEPhj+0x24>
   d7558:	6803      	ldr	r3, [r0, #0]
   d755a:	691b      	ldr	r3, [r3, #16]
   d755c:	4798      	blx	r3
   d755e:	b910      	cbnz	r0, d7566 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7560:	f04f 34ff 	mov.w	r4, #4294967295
   d7564:	e014      	b.n	d7590 <_ZN9TCPClient4readEPhj+0x4e>
   d7566:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7568:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d756c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7570:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7572:	42bc      	cmp	r4, r7
   d7574:	bf28      	it	cs
   d7576:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7578:	4419      	add	r1, r3
   d757a:	4622      	mov	r2, r4
   d757c:	3104      	adds	r1, #4
   d757e:	4630      	mov	r0, r6
   d7580:	f001 f8c5 	bl	d870e <memcpy>
   d7584:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7586:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d758a:	4423      	add	r3, r4
   d758c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7590:	4620      	mov	r0, r4
   d7592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7594 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7598:	4698      	mov	r8, r3
    stop();
   d759a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d759c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75a0:	460d      	mov	r5, r1
   d75a2:	4606      	mov	r6, r0
   d75a4:	4617      	mov	r7, r2
    stop();
   d75a6:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d75a8:	ab12      	add	r3, sp, #72	; 0x48
   d75aa:	2400      	movs	r4, #0
   d75ac:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d75b0:	4622      	mov	r2, r4
   d75b2:	4621      	mov	r1, r4
   d75b4:	4628      	mov	r0, r5
   d75b6:	f7fd fa73 	bl	d4aa0 <netdb_getaddrinfo>
   d75ba:	4681      	mov	r9, r0
   d75bc:	2800      	cmp	r0, #0
   d75be:	d13d      	bne.n	d763c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d75c0:	9b00      	ldr	r3, [sp, #0]
   d75c2:	2b00      	cmp	r3, #0
   d75c4:	d056      	beq.n	d7674 <_ZN9TCPClient7connectEPKctm+0xe0>
   d75c6:	695b      	ldr	r3, [r3, #20]
   d75c8:	2b00      	cmp	r3, #0
   d75ca:	d053      	beq.n	d7674 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d75cc:	a806      	add	r0, sp, #24
   d75ce:	f7ff f9bd 	bl	d694c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d75d2:	9b00      	ldr	r3, [sp, #0]
   d75d4:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d75d6:	7863      	ldrb	r3, [r4, #1]
   d75d8:	2b02      	cmp	r3, #2
   d75da:	d101      	bne.n	d75e0 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d75dc:	1d21      	adds	r1, r4, #4
   d75de:	e013      	b.n	d7608 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d75e0:	2b0a      	cmp	r3, #10
   d75e2:	d114      	bne.n	d760e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d75e4:	2211      	movs	r2, #17
   d75e6:	4649      	mov	r1, r9
   d75e8:	a801      	add	r0, sp, #4
   d75ea:	f001 f8b6 	bl	d875a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d75ee:	68a3      	ldr	r3, [r4, #8]
   d75f0:	bb33      	cbnz	r3, d7640 <_ZN9TCPClient7connectEPKctm+0xac>
   d75f2:	68e3      	ldr	r3, [r4, #12]
   d75f4:	bb23      	cbnz	r3, d7640 <_ZN9TCPClient7connectEPKctm+0xac>
   d75f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d75fa:	6925      	ldr	r5, [r4, #16]
   d75fc:	f7fd fb94 	bl	d4d28 <inet_htonl>
   d7600:	4285      	cmp	r5, r0
   d7602:	d11d      	bne.n	d7640 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7604:	f104 0114 	add.w	r1, r4, #20
   d7608:	a806      	add	r0, sp, #24
   d760a:	f7ff f9e2 	bl	d69d2 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d760e:	a806      	add	r0, sp, #24
   d7610:	f7ff f9bc 	bl	d698c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7614:	2800      	cmp	r0, #0
   d7616:	d02d      	beq.n	d7674 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7618:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d761a:	ad07      	add	r5, sp, #28
   d761c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7620:	4b18      	ldr	r3, [pc, #96]	; (d7684 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7622:	930c      	str	r3, [sp, #48]	; 0x30
   d7624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7626:	ac0d      	add	r4, sp, #52	; 0x34
   d7628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d762a:	682b      	ldr	r3, [r5, #0]
   d762c:	7023      	strb	r3, [r4, #0]
   d762e:	463a      	mov	r2, r7
   d7630:	4643      	mov	r3, r8
   d7632:	a90c      	add	r1, sp, #48	; 0x30
   d7634:	4630      	mov	r0, r6
   d7636:	47c8      	blx	r9
   d7638:	4681      	mov	r9, r0
   d763a:	e01b      	b.n	d7674 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d763c:	46a1      	mov	r9, r4
   d763e:	e019      	b.n	d7674 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7640:	f104 0308 	add.w	r3, r4, #8
   d7644:	ad01      	add	r5, sp, #4
   d7646:	3418      	adds	r4, #24
   d7648:	6818      	ldr	r0, [r3, #0]
   d764a:	6859      	ldr	r1, [r3, #4]
   d764c:	462a      	mov	r2, r5
   d764e:	c203      	stmia	r2!, {r0, r1}
   d7650:	3308      	adds	r3, #8
   d7652:	42a3      	cmp	r3, r4
   d7654:	4615      	mov	r5, r2
   d7656:	d1f7      	bne.n	d7648 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7658:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d765a:	a901      	add	r1, sp, #4
   d765c:	a80c      	add	r0, sp, #48	; 0x30
   d765e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7660:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7664:	f7ff f980 	bl	d6968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d766a:	ac07      	add	r4, sp, #28
   d766c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d766e:	682b      	ldr	r3, [r5, #0]
   d7670:	7023      	strb	r3, [r4, #0]
   d7672:	e7cc      	b.n	d760e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7674:	9800      	ldr	r0, [sp, #0]
   d7676:	f7fd fa0b 	bl	d4a90 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d767a:	4648      	mov	r0, r9
   d767c:	b013      	add	sp, #76	; 0x4c
   d767e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7682:	bf00      	nop
   d7684:	000d8ff8 	.word	0x000d8ff8

000d7688 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7688:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d768a:	2300      	movs	r3, #0
   d768c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7690:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7692:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7696:	4770      	bx	lr

000d7698 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d769c:	461e      	mov	r6, r3
    stop();
   d769e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76a0:	460c      	mov	r4, r1
   d76a2:	b08a      	sub	sp, #40	; 0x28
    stop();
   d76a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76a6:	4605      	mov	r5, r0
   d76a8:	4617      	mov	r7, r2
    stop();
   d76aa:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d76ac:	7d23      	ldrb	r3, [r4, #20]
   d76ae:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d76b2:	2b04      	cmp	r3, #4
   d76b4:	bf0c      	ite	eq
   d76b6:	2002      	moveq	r0, #2
   d76b8:	200a      	movne	r0, #10
   d76ba:	2206      	movs	r2, #6
   d76bc:	2101      	movs	r1, #1
   d76be:	f7fd fc03 	bl	d4ec8 <sock_socket>
   d76c2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d76c6:	696b      	ldr	r3, [r5, #20]
   d76c8:	681b      	ldr	r3, [r3, #0]
   d76ca:	2b00      	cmp	r3, #0
   d76cc:	db18      	blt.n	d7700 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d76ce:	4628      	mov	r0, r5
   d76d0:	f7ff ffda 	bl	d7688 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d76d4:	b1d6      	cbz	r6, d770c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d76d6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d76d8:	a903      	add	r1, sp, #12
   d76da:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d76dc:	9303      	str	r3, [sp, #12]
   d76de:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d76e2:	f7fd fa2d 	bl	d4b40 <if_index_to_name>
   d76e6:	b958      	cbnz	r0, d7700 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d76e8:	6968      	ldr	r0, [r5, #20]
   d76ea:	2306      	movs	r3, #6
   d76ec:	9300      	str	r3, [sp, #0]
   d76ee:	f241 020b 	movw	r2, #4107	; 0x100b
   d76f2:	ab03      	add	r3, sp, #12
   d76f4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d76f8:	6800      	ldr	r0, [r0, #0]
   d76fa:	f7fd fbad 	bl	d4e58 <sock_setsockopt>
   d76fe:	b128      	cbz	r0, d770c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7700:	682b      	ldr	r3, [r5, #0]
   d7702:	4628      	mov	r0, r5
   d7704:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7706:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7708:	4798      	blx	r3
   d770a:	e03b      	b.n	d7784 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d770c:	261c      	movs	r6, #28
   d770e:	4632      	mov	r2, r6
   d7710:	2100      	movs	r1, #0
   d7712:	a803      	add	r0, sp, #12
   d7714:	f001 f821 	bl	d875a <memset>
    if (ip.version() == 4) {
   d7718:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d771a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d771e:	2b04      	cmp	r3, #4
   d7720:	d10c      	bne.n	d773c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7722:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7724:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7726:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d772a:	f7fd fb0d 	bl	d4d48 <inet_htons>
   d772e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7732:	6860      	ldr	r0, [r4, #4]
   d7734:	f7fd faf8 	bl	d4d28 <inet_htonl>
   d7738:	9004      	str	r0, [sp, #16]
   d773a:	e013      	b.n	d7764 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d773c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d773e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7740:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7744:	f7fd fb00 	bl	d4d48 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7748:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d774a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d774e:	1d23      	adds	r3, r4, #4
   d7750:	f104 0714 	add.w	r7, r4, #20
   d7754:	6818      	ldr	r0, [r3, #0]
   d7756:	6859      	ldr	r1, [r3, #4]
   d7758:	4632      	mov	r2, r6
   d775a:	c203      	stmia	r2!, {r0, r1}
   d775c:	3308      	adds	r3, #8
   d775e:	42bb      	cmp	r3, r7
   d7760:	4616      	mov	r6, r2
   d7762:	d1f7      	bne.n	d7754 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7764:	696b      	ldr	r3, [r5, #20]
   d7766:	221c      	movs	r2, #28
   d7768:	a903      	add	r1, sp, #12
   d776a:	6818      	ldr	r0, [r3, #0]
   d776c:	f7fd fb84 	bl	d4e78 <sock_connect>
   d7770:	2800      	cmp	r0, #0
   d7772:	d1c5      	bne.n	d7700 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7774:	3404      	adds	r4, #4
   d7776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7778:	696d      	ldr	r5, [r5, #20]
   d777a:	358c      	adds	r5, #140	; 0x8c
   d777c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d777e:	6823      	ldr	r3, [r4, #0]
   d7780:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7782:	2401      	movs	r4, #1
}
   d7784:	4620      	mov	r0, r4
   d7786:	b00a      	add	sp, #40	; 0x28
   d7788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d778c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d778c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d778e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7790:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7792:	6818      	ldr	r0, [r3, #0]
   d7794:	2800      	cmp	r0, #0
   d7796:	db01      	blt.n	d779c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7798:	f7fd fb66 	bl	d4e68 <sock_close>
   d779c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d779e:	f04f 32ff 	mov.w	r2, #4294967295
   d77a2:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d77a4:	6960      	ldr	r0, [r4, #20]
   d77a6:	2211      	movs	r2, #17
   d77a8:	2100      	movs	r1, #0
   d77aa:	308c      	adds	r0, #140	; 0x8c
   d77ac:	f000 ffd5 	bl	d875a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d77b0:	4620      	mov	r0, r4
}
   d77b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d77b6:	f7ff bf67 	b.w	d7688 <_ZN9TCPClient12flush_bufferEv>
	...

000d77bc <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d77bc:	b530      	push	{r4, r5, lr}
   d77be:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d77c0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d77c4:	b08b      	sub	sp, #44	; 0x2c
   d77c6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d77c8:	b11b      	cbz	r3, d77d2 <_ZN9TCPClient9availableEv+0x16>
   d77ca:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d77ce:	429a      	cmp	r2, r3
   d77d0:	d040      	beq.n	d7854 <_ZN9TCPClient9availableEv+0x98>
   d77d2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d77d4:	6818      	ldr	r0, [r3, #0]
   d77d6:	2800      	cmp	r0, #0
   d77d8:	db3f      	blt.n	d785a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d77da:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d77de:	2d7f      	cmp	r5, #127	; 0x7f
   d77e0:	d83b      	bhi.n	d785a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d77e2:	1d19      	adds	r1, r3, #4
   d77e4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d77e8:	2308      	movs	r3, #8
   d77ea:	4429      	add	r1, r5
   d77ec:	f7fd fb4c 	bl	d4e88 <sock_recv>
            if (ret > 0) {
   d77f0:	2800      	cmp	r0, #0
   d77f2:	dd0c      	ble.n	d780e <_ZN9TCPClient9availableEv+0x52>
   d77f4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d77f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d77fa:	b90a      	cbnz	r2, d7800 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d77fc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7800:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7802:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7806:	4418      	add	r0, r3
   d7808:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d780c:	e025      	b.n	d785a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d780e:	f7fd fcb9 	bl	d5184 <__errno>
   d7812:	6803      	ldr	r3, [r0, #0]
   d7814:	2b0b      	cmp	r3, #11
   d7816:	d020      	beq.n	d785a <_ZN9TCPClient9availableEv+0x9e>
   d7818:	f7fd fcb4 	bl	d5184 <__errno>
   d781c:	6803      	ldr	r3, [r0, #0]
   d781e:	2b0b      	cmp	r3, #11
   d7820:	d01b      	beq.n	d785a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7822:	2320      	movs	r3, #32
   d7824:	2500      	movs	r5, #0
   d7826:	9302      	str	r3, [sp, #8]
   d7828:	9503      	str	r5, [sp, #12]
   d782a:	f7fd fcab 	bl	d5184 <__errno>
   d782e:	6803      	ldr	r3, [r0, #0]
   d7830:	9301      	str	r3, [sp, #4]
   d7832:	4b0e      	ldr	r3, [pc, #56]	; (d786c <_ZN9TCPClient9availableEv+0xb0>)
   d7834:	9300      	str	r3, [sp, #0]
   d7836:	aa02      	add	r2, sp, #8
   d7838:	462b      	mov	r3, r5
   d783a:	490d      	ldr	r1, [pc, #52]	; (d7870 <_ZN9TCPClient9availableEv+0xb4>)
   d783c:	2032      	movs	r0, #50	; 0x32
   d783e:	f7fd fb8b 	bl	d4f58 <log_message>
                    sock_close(d_->sock);
   d7842:	6963      	ldr	r3, [r4, #20]
   d7844:	6818      	ldr	r0, [r3, #0]
   d7846:	f7fd fb0f 	bl	d4e68 <sock_close>
   d784a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d784c:	f04f 32ff 	mov.w	r2, #4294967295
   d7850:	601a      	str	r2, [r3, #0]
   d7852:	e002      	b.n	d785a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7854:	f7ff ff18 	bl	d7688 <_ZN9TCPClient12flush_bufferEv>
   d7858:	e7bb      	b.n	d77d2 <_ZN9TCPClient9availableEv+0x16>
   d785a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d785c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7860:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7864:	1a18      	subs	r0, r3, r0
}
   d7866:	b00b      	add	sp, #44	; 0x2c
   d7868:	bd30      	pop	{r4, r5, pc}
   d786a:	bf00      	nop
   d786c:	000d9158 	.word	0x000d9158
   d7870:	000d90cd 	.word	0x000d90cd

000d7874 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7874:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7876:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7878:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d787a:	6001      	str	r1, [r0, #0]
   d787c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7880:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7884:	3088      	adds	r0, #136	; 0x88
   d7886:	f7ff f861 	bl	d694c <_ZN9IPAddressC1Ev>
}
   d788a:	4620      	mov	r0, r4
   d788c:	bd10      	pop	{r4, pc}
	...

000d7890 <_ZN9TCPClientC1Ei>:
   d7890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7894:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7896:	2300      	movs	r3, #0
   d7898:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d789a:	4a14      	ldr	r2, [pc, #80]	; (d78ec <_ZN9TCPClientC1Ei+0x5c>)
   d789c:	6043      	str	r3, [r0, #4]
   d789e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d78a0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d78a2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d78a4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78a6:	20a0      	movs	r0, #160	; 0xa0
   d78a8:	460e      	mov	r6, r1
   d78aa:	f7fc fbf6 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78ae:	4605      	mov	r5, r0
   d78b0:	b110      	cbz	r0, d78b8 <_ZN9TCPClientC1Ei+0x28>
   d78b2:	4631      	mov	r1, r6
   d78b4:	f7ff ffde 	bl	d7874 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78b8:	2014      	movs	r0, #20
   d78ba:	f7fc fbee 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d78be:	4603      	mov	r3, r0
   d78c0:	b128      	cbz	r0, d78ce <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d78c2:	2201      	movs	r2, #1
   d78c4:	6042      	str	r2, [r0, #4]
   d78c6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d78c8:	4a09      	ldr	r2, [pc, #36]	; (d78f0 <_ZN9TCPClientC1Ei+0x60>)
   d78ca:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d78cc:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d78ce:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d78d0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d78d2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d78d4:	b128      	cbz	r0, d78e2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d78d6:	6843      	ldr	r3, [r0, #4]
   d78d8:	3b01      	subs	r3, #1
   d78da:	6043      	str	r3, [r0, #4]
   d78dc:	b90b      	cbnz	r3, d78e2 <_ZN9TCPClientC1Ei+0x52>
   d78de:	f7ff fddf 	bl	d74a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d78e2:	4620      	mov	r0, r4
   d78e4:	f7ff fed0 	bl	d7688 <_ZN9TCPClient12flush_bufferEv>
}
   d78e8:	4620      	mov	r0, r4
   d78ea:	bd70      	pop	{r4, r5, r6, pc}
   d78ec:	000d9114 	.word	0x000d9114
   d78f0:	000d90f8 	.word	0x000d90f8

000d78f4 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d78f4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d78f6:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d78fa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d78fc:	f7ff ffc8 	bl	d7890 <_ZN9TCPClientC1Ei>
}
   d7900:	4620      	mov	r0, r4
   d7902:	bd10      	pop	{r4, pc}

000d7904 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7904:	b510      	push	{r4, lr}
   d7906:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7908:	6800      	ldr	r0, [r0, #0]
   d790a:	2800      	cmp	r0, #0
   d790c:	db01      	blt.n	d7912 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d790e:	f7fd faab 	bl	d4e68 <sock_close>
    }
}
   d7912:	4620      	mov	r0, r4
   d7914:	bd10      	pop	{r4, pc}

000d7916 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7916:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7918:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d791a:	4620      	mov	r0, r4
   d791c:	f7ff fff2 	bl	d7904 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7920:	b124      	cbz	r4, d792c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7922:	4620      	mov	r0, r4
   d7924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7928:	f7fc bbbb 	b.w	d40a2 <_ZdlPv>
   d792c:	bd10      	pop	{r4, pc}

000d792e <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d792e:	2300      	movs	r3, #0
   d7930:	461a      	mov	r2, r3
   d7932:	6840      	ldr	r0, [r0, #4]
   d7934:	f7fd bb5e 	b.w	d4ff4 <network_connect>

000d7938 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7938:	2200      	movs	r2, #0
   d793a:	2102      	movs	r1, #2
   d793c:	6840      	ldr	r0, [r0, #4]
   d793e:	f7fd bb69 	b.w	d5014 <network_disconnect>

000d7942 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7942:	2200      	movs	r2, #0
   d7944:	4611      	mov	r1, r2
   d7946:	6840      	ldr	r0, [r0, #4]
   d7948:	f7fd bb5c 	b.w	d5004 <network_connecting>

000d794c <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d794c:	2200      	movs	r2, #0
   d794e:	4611      	mov	r1, r2
   d7950:	6840      	ldr	r0, [r0, #4]
   d7952:	f7fd bb67 	b.w	d5024 <network_ready>

000d7956 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7956:	2300      	movs	r3, #0
   d7958:	461a      	mov	r2, r3
   d795a:	4619      	mov	r1, r3
   d795c:	6840      	ldr	r0, [r0, #4]
   d795e:	f7fd bb69 	b.w	d5034 <network_on>

000d7962 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7962:	2300      	movs	r3, #0
   d7964:	461a      	mov	r2, r3
   d7966:	4619      	mov	r1, r3
   d7968:	6840      	ldr	r0, [r0, #4]
   d796a:	f7fd bb6b 	b.w	d5044 <network_off>

000d796e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d796e:	2200      	movs	r2, #0
   d7970:	f081 0101 	eor.w	r1, r1, #1
   d7974:	6840      	ldr	r0, [r0, #4]
   d7976:	f7fd bb6d 	b.w	d5054 <network_listen>

000d797a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d797a:	2200      	movs	r2, #0
   d797c:	6840      	ldr	r0, [r0, #4]
   d797e:	f7fd bb79 	b.w	d5074 <network_set_listen_timeout>

000d7982 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7982:	2200      	movs	r2, #0
   d7984:	4611      	mov	r1, r2
   d7986:	6840      	ldr	r0, [r0, #4]
   d7988:	f7fd bb7c 	b.w	d5084 <network_get_listen_timeout>

000d798c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d798c:	2200      	movs	r2, #0
   d798e:	4611      	mov	r1, r2
   d7990:	6840      	ldr	r0, [r0, #4]
   d7992:	f7fd bb67 	b.w	d5064 <network_listening>

000d7996 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7996:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d799a:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d799c:	b095      	sub	sp, #84	; 0x54
   d799e:	4616      	mov	r6, r2
   d79a0:	460d      	mov	r5, r1
   d79a2:	4607      	mov	r7, r0
    IPAddress addr;
   d79a4:	f7fe ffd2 	bl	d694c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d79a8:	4621      	mov	r1, r4
   d79aa:	2220      	movs	r2, #32
   d79ac:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d79ae:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d79b0:	f000 fed3 	bl	d875a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d79b4:	2340      	movs	r3, #64	; 0x40
   d79b6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d79b8:	4621      	mov	r1, r4
   d79ba:	466b      	mov	r3, sp
   d79bc:	aa0c      	add	r2, sp, #48	; 0x30
   d79be:	4630      	mov	r0, r6
   d79c0:	f7fd f86e 	bl	d4aa0 <netdb_getaddrinfo>
    if (!r) {
   d79c4:	4604      	mov	r4, r0
   d79c6:	2800      	cmp	r0, #0
   d79c8:	d144      	bne.n	d7a54 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d79ca:	4602      	mov	r2, r0
   d79cc:	2101      	movs	r1, #1
   d79ce:	6868      	ldr	r0, [r5, #4]
   d79d0:	f7fd fb28 	bl	d5024 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d79d4:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d79d6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d79d8:	4622      	mov	r2, r4
   d79da:	6868      	ldr	r0, [r5, #4]
   d79dc:	f7fd fb22 	bl	d5024 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d79e0:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d79e2:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d79e4:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d79e6:	2e00      	cmp	r6, #0
   d79e8:	d034      	beq.n	d7a54 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d79ea:	2900      	cmp	r1, #0
   d79ec:	d132      	bne.n	d7a54 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d79ee:	6873      	ldr	r3, [r6, #4]
   d79f0:	2b02      	cmp	r3, #2
   d79f2:	d002      	beq.n	d79fa <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d79f4:	2b0a      	cmp	r3, #10
   d79f6:	d009      	beq.n	d7a0c <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d79f8:	e02a      	b.n	d7a50 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d79fa:	f1b8 0f00 	cmp.w	r8, #0
   d79fe:	d027      	beq.n	d7a50 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7a00:	6971      	ldr	r1, [r6, #20]
   d7a02:	4638      	mov	r0, r7
   d7a04:	3104      	adds	r1, #4
   d7a06:	f7fe ffe4 	bl	d69d2 <_ZN9IPAddressaSEPKh>
   d7a0a:	e020      	b.n	d7a4e <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7a0c:	f1b9 0f00 	cmp.w	r9, #0
   d7a10:	d01e      	beq.n	d7a50 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7a12:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7a14:	2211      	movs	r2, #17
   d7a16:	a801      	add	r0, sp, #4
   d7a18:	f000 fe9f 	bl	d875a <memset>
                    a.v = 6;
   d7a1c:	2306      	movs	r3, #6
   d7a1e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7a22:	ad01      	add	r5, sp, #4
   d7a24:	f104 0308 	add.w	r3, r4, #8
   d7a28:	3418      	adds	r4, #24
   d7a2a:	6818      	ldr	r0, [r3, #0]
   d7a2c:	6859      	ldr	r1, [r3, #4]
   d7a2e:	462a      	mov	r2, r5
   d7a30:	c203      	stmia	r2!, {r0, r1}
   d7a32:	3308      	adds	r3, #8
   d7a34:	42a3      	cmp	r3, r4
   d7a36:	4615      	mov	r5, r2
   d7a38:	d1f7      	bne.n	d7a2a <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7a3a:	a901      	add	r1, sp, #4
   d7a3c:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7a3e:	ad07      	add	r5, sp, #28
   d7a40:	f7fe ff92 	bl	d6968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a46:	1d3c      	adds	r4, r7, #4
   d7a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a4a:	682b      	ldr	r3, [r5, #0]
   d7a4c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7a4e:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a50:	69f6      	ldr	r6, [r6, #28]
   d7a52:	e7c8      	b.n	d79e6 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7a54:	9800      	ldr	r0, [sp, #0]
   d7a56:	f7fd f81b 	bl	d4a90 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7a5a:	4638      	mov	r0, r7
   d7a5c:	b015      	add	sp, #84	; 0x54
   d7a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7a64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7a64:	4b02      	ldr	r3, [pc, #8]	; (d7a70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7a66:	4a03      	ldr	r2, [pc, #12]	; (d7a74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7a68:	601a      	str	r2, [r3, #0]
   d7a6a:	2200      	movs	r2, #0
   d7a6c:	605a      	str	r2, [r3, #4]
   d7a6e:	4770      	bx	lr
   d7a70:	2003e708 	.word	0x2003e708
   d7a74:	000d9170 	.word	0x000d9170

000d7a78 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7a78:	b510      	push	{r4, lr}
   d7a7a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7a7c:	480f      	ldr	r0, [pc, #60]	; (d7abc <pinAvailable+0x44>)
   d7a7e:	f7fd fbe3 	bl	d5248 <_ZN8SPIClass9isEnabledEv>
   d7a82:	b128      	cbz	r0, d7a90 <pinAvailable+0x18>
   d7a84:	f1a4 030b 	sub.w	r3, r4, #11
   d7a88:	2b02      	cmp	r3, #2
   d7a8a:	d801      	bhi.n	d7a90 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7a8c:	2000      	movs	r0, #0
   d7a8e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7a90:	f000 f87a 	bl	d7b88 <_Z19__fetch_global_Wirev>
   d7a94:	f7ff f904 	bl	d6ca0 <_ZN7TwoWire9isEnabledEv>
   d7a98:	b108      	cbz	r0, d7a9e <pinAvailable+0x26>
   d7a9a:	2c01      	cmp	r4, #1
   d7a9c:	d9f6      	bls.n	d7a8c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7a9e:	f7ff f887 	bl	d6bb0 <_Z22__fetch_global_Serial1v>
   d7aa2:	f7ff f881 	bl	d6ba8 <_ZN11USARTSerial9isEnabledEv>
   d7aa6:	b118      	cbz	r0, d7ab0 <pinAvailable+0x38>
   d7aa8:	f1a4 0309 	sub.w	r3, r4, #9
   d7aac:	2b01      	cmp	r3, #1
   d7aae:	d9ed      	bls.n	d7a8c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7ab0:	2c1e      	cmp	r4, #30
   d7ab2:	bf8c      	ite	hi
   d7ab4:	2000      	movhi	r0, #0
   d7ab6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7ab8:	bd10      	pop	{r4, pc}
   d7aba:	bf00      	nop
   d7abc:	2003e710 	.word	0x2003e710

000d7ac0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ac0:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7ac2:	b538      	push	{r3, r4, r5, lr}
   d7ac4:	4604      	mov	r4, r0
   d7ac6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ac8:	d80a      	bhi.n	d7ae0 <pinMode+0x20>
   d7aca:	29ff      	cmp	r1, #255	; 0xff
   d7acc:	d008      	beq.n	d7ae0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7ace:	f7ff ffd3 	bl	d7a78 <pinAvailable>
   d7ad2:	b128      	cbz	r0, d7ae0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7ad4:	4629      	mov	r1, r5
   d7ad6:	4620      	mov	r0, r4
}
   d7ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7adc:	f7fc bff8 	b.w	d4ad0 <HAL_Pin_Mode>
   d7ae0:	bd38      	pop	{r3, r4, r5, pc}

000d7ae2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7ae2:	b538      	push	{r3, r4, r5, lr}
   d7ae4:	4604      	mov	r4, r0
   d7ae6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7ae8:	f7fc fffa 	bl	d4ae0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7aec:	28ff      	cmp	r0, #255	; 0xff
   d7aee:	d010      	beq.n	d7b12 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7af0:	2806      	cmp	r0, #6
   d7af2:	d804      	bhi.n	d7afe <digitalWrite+0x1c>
   d7af4:	234d      	movs	r3, #77	; 0x4d
   d7af6:	fa23 f000 	lsr.w	r0, r3, r0
   d7afa:	07c3      	lsls	r3, r0, #31
   d7afc:	d409      	bmi.n	d7b12 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7afe:	4620      	mov	r0, r4
   d7b00:	f7ff ffba 	bl	d7a78 <pinAvailable>
   d7b04:	b128      	cbz	r0, d7b12 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7b06:	4629      	mov	r1, r5
   d7b08:	4620      	mov	r0, r4
}
   d7b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7b0e:	f7fc bfef 	b.w	d4af0 <HAL_GPIO_Write>
   d7b12:	bd38      	pop	{r3, r4, r5, pc}

000d7b14 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7b14:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7b16:	b510      	push	{r4, lr}
   d7b18:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7b1a:	bf9c      	itt	ls
   d7b1c:	340e      	addls	r4, #14
   d7b1e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7b20:	4620      	mov	r0, r4
   d7b22:	f7ff ffa9 	bl	d7a78 <pinAvailable>
   d7b26:	b150      	cbz	r0, d7b3e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7b28:	2103      	movs	r1, #3
   d7b2a:	4620      	mov	r0, r4
   d7b2c:	f7fc ffc8 	bl	d4ac0 <HAL_Validate_Pin_Function>
   d7b30:	2803      	cmp	r0, #3
   d7b32:	d104      	bne.n	d7b3e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7b34:	4620      	mov	r0, r4
}
   d7b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7b3a:	f7fc bfe1 	b.w	d4b00 <HAL_ADC_Read>
}
   d7b3e:	2000      	movs	r0, #0
   d7b40:	bd10      	pop	{r4, pc}
	...

000d7b44 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7b44:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7b46:	4c0c      	ldr	r4, [pc, #48]	; (d7b78 <_GLOBAL__sub_I_SPI+0x34>)
   d7b48:	4e0c      	ldr	r6, [pc, #48]	; (d7b7c <_GLOBAL__sub_I_SPI+0x38>)
   d7b4a:	4d0d      	ldr	r5, [pc, #52]	; (d7b80 <_GLOBAL__sub_I_SPI+0x3c>)
   d7b4c:	2100      	movs	r1, #0
   d7b4e:	4620      	mov	r0, r4
   d7b50:	f7fd fb66 	bl	d5220 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7b54:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7b56:	4c0b      	ldr	r4, [pc, #44]	; (d7b84 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7b58:	4632      	mov	r2, r6
   d7b5a:	4629      	mov	r1, r5
   d7b5c:	f000 f834 	bl	d7bc8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7b60:	2101      	movs	r1, #1
   d7b62:	4620      	mov	r0, r4
   d7b64:	f7fd fb5c 	bl	d5220 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7b68:	4632      	mov	r2, r6
   d7b6a:	4629      	mov	r1, r5
   d7b6c:	4620      	mov	r0, r4
   d7b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7b72:	f000 b829 	b.w	d7bc8 <__aeabi_atexit>
   d7b76:	bf00      	nop
   d7b78:	2003e710 	.word	0x2003e710
   d7b7c:	2003ce7c 	.word	0x2003ce7c
   d7b80:	000d5211 	.word	0x000d5211
   d7b84:	2003e720 	.word	0x2003e720

000d7b88 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7b88:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7b8a:	4d0b      	ldr	r5, [pc, #44]	; (d7bb8 <_Z19__fetch_global_Wirev+0x30>)
   d7b8c:	6829      	ldr	r1, [r5, #0]
   d7b8e:	f011 0401 	ands.w	r4, r1, #1
   d7b92:	d10f      	bne.n	d7bb4 <_Z19__fetch_global_Wirev+0x2c>
   d7b94:	4628      	mov	r0, r5
   d7b96:	f7fc fa88 	bl	d40aa <__cxa_guard_acquire>
   d7b9a:	b158      	cbz	r0, d7bb4 <_Z19__fetch_global_Wirev+0x2c>
   d7b9c:	4621      	mov	r1, r4
   d7b9e:	4807      	ldr	r0, [pc, #28]	; (d7bbc <_Z19__fetch_global_Wirev+0x34>)
   d7ba0:	f7ff f86c 	bl	d6c7c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7ba4:	4628      	mov	r0, r5
   d7ba6:	f7fc fa85 	bl	d40b4 <__cxa_guard_release>
   d7baa:	4a05      	ldr	r2, [pc, #20]	; (d7bc0 <_Z19__fetch_global_Wirev+0x38>)
   d7bac:	4905      	ldr	r1, [pc, #20]	; (d7bc4 <_Z19__fetch_global_Wirev+0x3c>)
   d7bae:	4803      	ldr	r0, [pc, #12]	; (d7bbc <_Z19__fetch_global_Wirev+0x34>)
   d7bb0:	f000 f80a 	bl	d7bc8 <__aeabi_atexit>
	return wire;
}
   d7bb4:	4801      	ldr	r0, [pc, #4]	; (d7bbc <_Z19__fetch_global_Wirev+0x34>)
   d7bb6:	bd38      	pop	{r3, r4, r5, pc}
   d7bb8:	2003e734 	.word	0x2003e734
   d7bbc:	2003e738 	.word	0x2003e738
   d7bc0:	2003ce7c 	.word	0x2003ce7c
   d7bc4:	000d6c25 	.word	0x000d6c25

000d7bc8 <__aeabi_atexit>:
   d7bc8:	460b      	mov	r3, r1
   d7bca:	4601      	mov	r1, r0
   d7bcc:	4618      	mov	r0, r3
   d7bce:	f000 bd81 	b.w	d86d4 <__cxa_atexit>
	...

000d7bd4 <_ZSt15get_new_handlerv>:
   d7bd4:	4b02      	ldr	r3, [pc, #8]	; (d7be0 <_ZSt15get_new_handlerv+0xc>)
   d7bd6:	6818      	ldr	r0, [r3, #0]
   d7bd8:	f3bf 8f5f 	dmb	sy
   d7bdc:	4770      	bx	lr
   d7bde:	bf00      	nop
   d7be0:	2003e74c 	.word	0x2003e74c

000d7be4 <_ZdlPvj>:
   d7be4:	f7fc ba5d 	b.w	d40a2 <_ZdlPv>

000d7be8 <_ZnajRKSt9nothrow_t>:
   d7be8:	f000 b800 	b.w	d7bec <_ZnwjRKSt9nothrow_t>

000d7bec <_ZnwjRKSt9nothrow_t>:
   d7bec:	b510      	push	{r4, lr}
   d7bee:	2800      	cmp	r0, #0
   d7bf0:	bf14      	ite	ne
   d7bf2:	4604      	movne	r4, r0
   d7bf4:	2401      	moveq	r4, #1
   d7bf6:	4620      	mov	r0, r4
   d7bf8:	f7fd fa8c 	bl	d5114 <malloc>
   d7bfc:	b920      	cbnz	r0, d7c08 <_ZnwjRKSt9nothrow_t+0x1c>
   d7bfe:	f7ff ffe9 	bl	d7bd4 <_ZSt15get_new_handlerv>
   d7c02:	b108      	cbz	r0, d7c08 <_ZnwjRKSt9nothrow_t+0x1c>
   d7c04:	4780      	blx	r0
   d7c06:	e7f6      	b.n	d7bf6 <_ZnwjRKSt9nothrow_t+0xa>
   d7c08:	bd10      	pop	{r4, pc}

000d7c0a <_ZSt25__throw_bad_function_callv>:
   d7c0a:	b508      	push	{r3, lr}
   d7c0c:	f7fd faaa 	bl	d5164 <abort>

000d7c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7c10:	4b18      	ldr	r3, [pc, #96]	; (d7c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7c12:	681a      	ldr	r2, [r3, #0]
   d7c14:	07d1      	lsls	r1, r2, #31
   d7c16:	bf5c      	itt	pl
   d7c18:	2201      	movpl	r2, #1
   d7c1a:	601a      	strpl	r2, [r3, #0]
   d7c1c:	4b16      	ldr	r3, [pc, #88]	; (d7c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7c1e:	681a      	ldr	r2, [r3, #0]
   d7c20:	07d2      	lsls	r2, r2, #31
   d7c22:	bf5c      	itt	pl
   d7c24:	2201      	movpl	r2, #1
   d7c26:	601a      	strpl	r2, [r3, #0]
   d7c28:	4b14      	ldr	r3, [pc, #80]	; (d7c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7c2a:	681a      	ldr	r2, [r3, #0]
   d7c2c:	07d0      	lsls	r0, r2, #31
   d7c2e:	bf5c      	itt	pl
   d7c30:	2201      	movpl	r2, #1
   d7c32:	601a      	strpl	r2, [r3, #0]
   d7c34:	4b12      	ldr	r3, [pc, #72]	; (d7c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7c36:	681a      	ldr	r2, [r3, #0]
   d7c38:	07d1      	lsls	r1, r2, #31
   d7c3a:	bf5c      	itt	pl
   d7c3c:	2201      	movpl	r2, #1
   d7c3e:	601a      	strpl	r2, [r3, #0]
   d7c40:	4b10      	ldr	r3, [pc, #64]	; (d7c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7c42:	681a      	ldr	r2, [r3, #0]
   d7c44:	07d2      	lsls	r2, r2, #31
   d7c46:	bf5c      	itt	pl
   d7c48:	2201      	movpl	r2, #1
   d7c4a:	601a      	strpl	r2, [r3, #0]
   d7c4c:	4b0e      	ldr	r3, [pc, #56]	; (d7c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7c4e:	681a      	ldr	r2, [r3, #0]
   d7c50:	07d0      	lsls	r0, r2, #31
   d7c52:	bf5c      	itt	pl
   d7c54:	2201      	movpl	r2, #1
   d7c56:	601a      	strpl	r2, [r3, #0]
   d7c58:	4b0c      	ldr	r3, [pc, #48]	; (d7c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7c5a:	681a      	ldr	r2, [r3, #0]
   d7c5c:	07d1      	lsls	r1, r2, #31
   d7c5e:	bf5c      	itt	pl
   d7c60:	2201      	movpl	r2, #1
   d7c62:	601a      	strpl	r2, [r3, #0]
   d7c64:	4b0a      	ldr	r3, [pc, #40]	; (d7c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7c66:	681a      	ldr	r2, [r3, #0]
   d7c68:	07d2      	lsls	r2, r2, #31
   d7c6a:	bf5c      	itt	pl
   d7c6c:	2201      	movpl	r2, #1
   d7c6e:	601a      	strpl	r2, [r3, #0]
   d7c70:	4770      	bx	lr
   d7c72:	bf00      	nop
   d7c74:	2003e76c 	.word	0x2003e76c
   d7c78:	2003e768 	.word	0x2003e768
   d7c7c:	2003e764 	.word	0x2003e764
   d7c80:	2003e760 	.word	0x2003e760
   d7c84:	2003e75c 	.word	0x2003e75c
   d7c88:	2003e758 	.word	0x2003e758
   d7c8c:	2003e754 	.word	0x2003e754
   d7c90:	2003e750 	.word	0x2003e750

000d7c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7c94:	4b24      	ldr	r3, [pc, #144]	; (d7d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7c96:	681a      	ldr	r2, [r3, #0]
   d7c98:	07d0      	lsls	r0, r2, #31
   d7c9a:	bf5c      	itt	pl
   d7c9c:	2201      	movpl	r2, #1
   d7c9e:	601a      	strpl	r2, [r3, #0]
   d7ca0:	4b22      	ldr	r3, [pc, #136]	; (d7d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7ca2:	681a      	ldr	r2, [r3, #0]
   d7ca4:	07d1      	lsls	r1, r2, #31
   d7ca6:	bf5c      	itt	pl
   d7ca8:	2201      	movpl	r2, #1
   d7caa:	601a      	strpl	r2, [r3, #0]
   d7cac:	4b20      	ldr	r3, [pc, #128]	; (d7d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7cae:	681a      	ldr	r2, [r3, #0]
   d7cb0:	07d2      	lsls	r2, r2, #31
   d7cb2:	bf5c      	itt	pl
   d7cb4:	2201      	movpl	r2, #1
   d7cb6:	601a      	strpl	r2, [r3, #0]
   d7cb8:	4b1e      	ldr	r3, [pc, #120]	; (d7d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7cba:	681a      	ldr	r2, [r3, #0]
   d7cbc:	07d0      	lsls	r0, r2, #31
   d7cbe:	bf5c      	itt	pl
   d7cc0:	2201      	movpl	r2, #1
   d7cc2:	601a      	strpl	r2, [r3, #0]
   d7cc4:	4b1c      	ldr	r3, [pc, #112]	; (d7d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7cc6:	681a      	ldr	r2, [r3, #0]
   d7cc8:	07d1      	lsls	r1, r2, #31
   d7cca:	bf5c      	itt	pl
   d7ccc:	2201      	movpl	r2, #1
   d7cce:	601a      	strpl	r2, [r3, #0]
   d7cd0:	4b1a      	ldr	r3, [pc, #104]	; (d7d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7cd2:	681a      	ldr	r2, [r3, #0]
   d7cd4:	07d2      	lsls	r2, r2, #31
   d7cd6:	bf5c      	itt	pl
   d7cd8:	2201      	movpl	r2, #1
   d7cda:	601a      	strpl	r2, [r3, #0]
   d7cdc:	4b18      	ldr	r3, [pc, #96]	; (d7d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7cde:	681a      	ldr	r2, [r3, #0]
   d7ce0:	07d0      	lsls	r0, r2, #31
   d7ce2:	bf5c      	itt	pl
   d7ce4:	2201      	movpl	r2, #1
   d7ce6:	601a      	strpl	r2, [r3, #0]
   d7ce8:	4b16      	ldr	r3, [pc, #88]	; (d7d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7cea:	681a      	ldr	r2, [r3, #0]
   d7cec:	07d1      	lsls	r1, r2, #31
   d7cee:	bf5c      	itt	pl
   d7cf0:	2201      	movpl	r2, #1
   d7cf2:	601a      	strpl	r2, [r3, #0]
   d7cf4:	4b14      	ldr	r3, [pc, #80]	; (d7d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7cf6:	681a      	ldr	r2, [r3, #0]
   d7cf8:	07d2      	lsls	r2, r2, #31
   d7cfa:	bf5c      	itt	pl
   d7cfc:	2201      	movpl	r2, #1
   d7cfe:	601a      	strpl	r2, [r3, #0]
   d7d00:	4b12      	ldr	r3, [pc, #72]	; (d7d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7d02:	681a      	ldr	r2, [r3, #0]
   d7d04:	07d0      	lsls	r0, r2, #31
   d7d06:	bf5c      	itt	pl
   d7d08:	2201      	movpl	r2, #1
   d7d0a:	601a      	strpl	r2, [r3, #0]
   d7d0c:	4b10      	ldr	r3, [pc, #64]	; (d7d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7d0e:	681a      	ldr	r2, [r3, #0]
   d7d10:	07d1      	lsls	r1, r2, #31
   d7d12:	bf5c      	itt	pl
   d7d14:	2201      	movpl	r2, #1
   d7d16:	601a      	strpl	r2, [r3, #0]
   d7d18:	4b0e      	ldr	r3, [pc, #56]	; (d7d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7d1a:	681a      	ldr	r2, [r3, #0]
   d7d1c:	07d2      	lsls	r2, r2, #31
   d7d1e:	bf5c      	itt	pl
   d7d20:	2201      	movpl	r2, #1
   d7d22:	601a      	strpl	r2, [r3, #0]
   d7d24:	4770      	bx	lr
   d7d26:	bf00      	nop
   d7d28:	2003e79c 	.word	0x2003e79c
   d7d2c:	2003e798 	.word	0x2003e798
   d7d30:	2003e794 	.word	0x2003e794
   d7d34:	2003e790 	.word	0x2003e790
   d7d38:	2003e78c 	.word	0x2003e78c
   d7d3c:	2003e788 	.word	0x2003e788
   d7d40:	2003e784 	.word	0x2003e784
   d7d44:	2003e780 	.word	0x2003e780
   d7d48:	2003e77c 	.word	0x2003e77c
   d7d4c:	2003e778 	.word	0x2003e778
   d7d50:	2003e774 	.word	0x2003e774
   d7d54:	2003e770 	.word	0x2003e770

000d7d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7d58:	4b24      	ldr	r3, [pc, #144]	; (d7dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7d5a:	681a      	ldr	r2, [r3, #0]
   d7d5c:	07d0      	lsls	r0, r2, #31
   d7d5e:	bf5c      	itt	pl
   d7d60:	2201      	movpl	r2, #1
   d7d62:	601a      	strpl	r2, [r3, #0]
   d7d64:	4b22      	ldr	r3, [pc, #136]	; (d7df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7d66:	681a      	ldr	r2, [r3, #0]
   d7d68:	07d1      	lsls	r1, r2, #31
   d7d6a:	bf5c      	itt	pl
   d7d6c:	2201      	movpl	r2, #1
   d7d6e:	601a      	strpl	r2, [r3, #0]
   d7d70:	4b20      	ldr	r3, [pc, #128]	; (d7df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7d72:	681a      	ldr	r2, [r3, #0]
   d7d74:	07d2      	lsls	r2, r2, #31
   d7d76:	bf5c      	itt	pl
   d7d78:	2201      	movpl	r2, #1
   d7d7a:	601a      	strpl	r2, [r3, #0]
   d7d7c:	4b1e      	ldr	r3, [pc, #120]	; (d7df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7d7e:	681a      	ldr	r2, [r3, #0]
   d7d80:	07d0      	lsls	r0, r2, #31
   d7d82:	bf5c      	itt	pl
   d7d84:	2201      	movpl	r2, #1
   d7d86:	601a      	strpl	r2, [r3, #0]
   d7d88:	4b1c      	ldr	r3, [pc, #112]	; (d7dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7d8a:	681a      	ldr	r2, [r3, #0]
   d7d8c:	07d1      	lsls	r1, r2, #31
   d7d8e:	bf5c      	itt	pl
   d7d90:	2201      	movpl	r2, #1
   d7d92:	601a      	strpl	r2, [r3, #0]
   d7d94:	4b1a      	ldr	r3, [pc, #104]	; (d7e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7d96:	681a      	ldr	r2, [r3, #0]
   d7d98:	07d2      	lsls	r2, r2, #31
   d7d9a:	bf5c      	itt	pl
   d7d9c:	2201      	movpl	r2, #1
   d7d9e:	601a      	strpl	r2, [r3, #0]
   d7da0:	4b18      	ldr	r3, [pc, #96]	; (d7e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7da2:	681a      	ldr	r2, [r3, #0]
   d7da4:	07d0      	lsls	r0, r2, #31
   d7da6:	bf5c      	itt	pl
   d7da8:	2201      	movpl	r2, #1
   d7daa:	601a      	strpl	r2, [r3, #0]
   d7dac:	4b16      	ldr	r3, [pc, #88]	; (d7e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7dae:	681a      	ldr	r2, [r3, #0]
   d7db0:	07d1      	lsls	r1, r2, #31
   d7db2:	bf5c      	itt	pl
   d7db4:	2201      	movpl	r2, #1
   d7db6:	601a      	strpl	r2, [r3, #0]
   d7db8:	4b14      	ldr	r3, [pc, #80]	; (d7e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7dba:	681a      	ldr	r2, [r3, #0]
   d7dbc:	07d2      	lsls	r2, r2, #31
   d7dbe:	bf5c      	itt	pl
   d7dc0:	2201      	movpl	r2, #1
   d7dc2:	601a      	strpl	r2, [r3, #0]
   d7dc4:	4b12      	ldr	r3, [pc, #72]	; (d7e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7dc6:	681a      	ldr	r2, [r3, #0]
   d7dc8:	07d0      	lsls	r0, r2, #31
   d7dca:	bf5c      	itt	pl
   d7dcc:	2201      	movpl	r2, #1
   d7dce:	601a      	strpl	r2, [r3, #0]
   d7dd0:	4b10      	ldr	r3, [pc, #64]	; (d7e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7dd2:	681a      	ldr	r2, [r3, #0]
   d7dd4:	07d1      	lsls	r1, r2, #31
   d7dd6:	bf5c      	itt	pl
   d7dd8:	2201      	movpl	r2, #1
   d7dda:	601a      	strpl	r2, [r3, #0]
   d7ddc:	4b0e      	ldr	r3, [pc, #56]	; (d7e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7dde:	681a      	ldr	r2, [r3, #0]
   d7de0:	07d2      	lsls	r2, r2, #31
   d7de2:	bf5c      	itt	pl
   d7de4:	2201      	movpl	r2, #1
   d7de6:	601a      	strpl	r2, [r3, #0]
   d7de8:	4770      	bx	lr
   d7dea:	bf00      	nop
   d7dec:	2003e7cc 	.word	0x2003e7cc
   d7df0:	2003e7c8 	.word	0x2003e7c8
   d7df4:	2003e7c4 	.word	0x2003e7c4
   d7df8:	2003e7c0 	.word	0x2003e7c0
   d7dfc:	2003e7bc 	.word	0x2003e7bc
   d7e00:	2003e7b8 	.word	0x2003e7b8
   d7e04:	2003e7b4 	.word	0x2003e7b4
   d7e08:	2003e7b0 	.word	0x2003e7b0
   d7e0c:	2003e7ac 	.word	0x2003e7ac
   d7e10:	2003e7a8 	.word	0x2003e7a8
   d7e14:	2003e7a4 	.word	0x2003e7a4
   d7e18:	2003e7a0 	.word	0x2003e7a0

000d7e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7e1c:	4b18      	ldr	r3, [pc, #96]	; (d7e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7e1e:	681a      	ldr	r2, [r3, #0]
   d7e20:	07d1      	lsls	r1, r2, #31
   d7e22:	bf5c      	itt	pl
   d7e24:	2201      	movpl	r2, #1
   d7e26:	601a      	strpl	r2, [r3, #0]
   d7e28:	4b16      	ldr	r3, [pc, #88]	; (d7e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7e2a:	681a      	ldr	r2, [r3, #0]
   d7e2c:	07d2      	lsls	r2, r2, #31
   d7e2e:	bf5c      	itt	pl
   d7e30:	2201      	movpl	r2, #1
   d7e32:	601a      	strpl	r2, [r3, #0]
   d7e34:	4b14      	ldr	r3, [pc, #80]	; (d7e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7e36:	681a      	ldr	r2, [r3, #0]
   d7e38:	07d0      	lsls	r0, r2, #31
   d7e3a:	bf5c      	itt	pl
   d7e3c:	2201      	movpl	r2, #1
   d7e3e:	601a      	strpl	r2, [r3, #0]
   d7e40:	4b12      	ldr	r3, [pc, #72]	; (d7e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7e42:	681a      	ldr	r2, [r3, #0]
   d7e44:	07d1      	lsls	r1, r2, #31
   d7e46:	bf5c      	itt	pl
   d7e48:	2201      	movpl	r2, #1
   d7e4a:	601a      	strpl	r2, [r3, #0]
   d7e4c:	4b10      	ldr	r3, [pc, #64]	; (d7e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7e4e:	681a      	ldr	r2, [r3, #0]
   d7e50:	07d2      	lsls	r2, r2, #31
   d7e52:	bf5c      	itt	pl
   d7e54:	2201      	movpl	r2, #1
   d7e56:	601a      	strpl	r2, [r3, #0]
   d7e58:	4b0e      	ldr	r3, [pc, #56]	; (d7e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7e5a:	681a      	ldr	r2, [r3, #0]
   d7e5c:	07d0      	lsls	r0, r2, #31
   d7e5e:	bf5c      	itt	pl
   d7e60:	2201      	movpl	r2, #1
   d7e62:	601a      	strpl	r2, [r3, #0]
   d7e64:	4b0c      	ldr	r3, [pc, #48]	; (d7e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7e66:	681a      	ldr	r2, [r3, #0]
   d7e68:	07d1      	lsls	r1, r2, #31
   d7e6a:	bf5c      	itt	pl
   d7e6c:	2201      	movpl	r2, #1
   d7e6e:	601a      	strpl	r2, [r3, #0]
   d7e70:	4b0a      	ldr	r3, [pc, #40]	; (d7e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7e72:	681a      	ldr	r2, [r3, #0]
   d7e74:	07d2      	lsls	r2, r2, #31
   d7e76:	bf5c      	itt	pl
   d7e78:	2201      	movpl	r2, #1
   d7e7a:	601a      	strpl	r2, [r3, #0]
   d7e7c:	4770      	bx	lr
   d7e7e:	bf00      	nop
   d7e80:	2003e7ec 	.word	0x2003e7ec
   d7e84:	2003e7e8 	.word	0x2003e7e8
   d7e88:	2003e7e4 	.word	0x2003e7e4
   d7e8c:	2003e7e0 	.word	0x2003e7e0
   d7e90:	2003e7dc 	.word	0x2003e7dc
   d7e94:	2003e7d8 	.word	0x2003e7d8
   d7e98:	2003e7d4 	.word	0x2003e7d4
   d7e9c:	2003e7d0 	.word	0x2003e7d0

000d7ea0 <__aeabi_drsub>:
   d7ea0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7ea4:	e002      	b.n	d7eac <__adddf3>
   d7ea6:	bf00      	nop

000d7ea8 <__aeabi_dsub>:
   d7ea8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7eac <__adddf3>:
   d7eac:	b530      	push	{r4, r5, lr}
   d7eae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7eb2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7eb6:	ea94 0f05 	teq	r4, r5
   d7eba:	bf08      	it	eq
   d7ebc:	ea90 0f02 	teqeq	r0, r2
   d7ec0:	bf1f      	itttt	ne
   d7ec2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7ec6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7eca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7ece:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7ed2:	f000 80e2 	beq.w	d809a <__adddf3+0x1ee>
   d7ed6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7eda:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7ede:	bfb8      	it	lt
   d7ee0:	426d      	neglt	r5, r5
   d7ee2:	dd0c      	ble.n	d7efe <__adddf3+0x52>
   d7ee4:	442c      	add	r4, r5
   d7ee6:	ea80 0202 	eor.w	r2, r0, r2
   d7eea:	ea81 0303 	eor.w	r3, r1, r3
   d7eee:	ea82 0000 	eor.w	r0, r2, r0
   d7ef2:	ea83 0101 	eor.w	r1, r3, r1
   d7ef6:	ea80 0202 	eor.w	r2, r0, r2
   d7efa:	ea81 0303 	eor.w	r3, r1, r3
   d7efe:	2d36      	cmp	r5, #54	; 0x36
   d7f00:	bf88      	it	hi
   d7f02:	bd30      	pophi	{r4, r5, pc}
   d7f04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7f08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7f0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7f10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7f14:	d002      	beq.n	d7f1c <__adddf3+0x70>
   d7f16:	4240      	negs	r0, r0
   d7f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7f1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7f20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7f24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7f28:	d002      	beq.n	d7f30 <__adddf3+0x84>
   d7f2a:	4252      	negs	r2, r2
   d7f2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7f30:	ea94 0f05 	teq	r4, r5
   d7f34:	f000 80a7 	beq.w	d8086 <__adddf3+0x1da>
   d7f38:	f1a4 0401 	sub.w	r4, r4, #1
   d7f3c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7f40:	db0d      	blt.n	d7f5e <__adddf3+0xb2>
   d7f42:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7f46:	fa22 f205 	lsr.w	r2, r2, r5
   d7f4a:	1880      	adds	r0, r0, r2
   d7f4c:	f141 0100 	adc.w	r1, r1, #0
   d7f50:	fa03 f20e 	lsl.w	r2, r3, lr
   d7f54:	1880      	adds	r0, r0, r2
   d7f56:	fa43 f305 	asr.w	r3, r3, r5
   d7f5a:	4159      	adcs	r1, r3
   d7f5c:	e00e      	b.n	d7f7c <__adddf3+0xd0>
   d7f5e:	f1a5 0520 	sub.w	r5, r5, #32
   d7f62:	f10e 0e20 	add.w	lr, lr, #32
   d7f66:	2a01      	cmp	r2, #1
   d7f68:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7f6c:	bf28      	it	cs
   d7f6e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7f72:	fa43 f305 	asr.w	r3, r3, r5
   d7f76:	18c0      	adds	r0, r0, r3
   d7f78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7f7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7f80:	d507      	bpl.n	d7f92 <__adddf3+0xe6>
   d7f82:	f04f 0e00 	mov.w	lr, #0
   d7f86:	f1dc 0c00 	rsbs	ip, ip, #0
   d7f8a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7f8e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7f92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7f96:	d31b      	bcc.n	d7fd0 <__adddf3+0x124>
   d7f98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7f9c:	d30c      	bcc.n	d7fb8 <__adddf3+0x10c>
   d7f9e:	0849      	lsrs	r1, r1, #1
   d7fa0:	ea5f 0030 	movs.w	r0, r0, rrx
   d7fa4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7fa8:	f104 0401 	add.w	r4, r4, #1
   d7fac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7fb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7fb4:	f080 809a 	bcs.w	d80ec <__adddf3+0x240>
   d7fb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7fbc:	bf08      	it	eq
   d7fbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7fc2:	f150 0000 	adcs.w	r0, r0, #0
   d7fc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7fca:	ea41 0105 	orr.w	r1, r1, r5
   d7fce:	bd30      	pop	{r4, r5, pc}
   d7fd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7fd4:	4140      	adcs	r0, r0
   d7fd6:	eb41 0101 	adc.w	r1, r1, r1
   d7fda:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7fde:	f1a4 0401 	sub.w	r4, r4, #1
   d7fe2:	d1e9      	bne.n	d7fb8 <__adddf3+0x10c>
   d7fe4:	f091 0f00 	teq	r1, #0
   d7fe8:	bf04      	itt	eq
   d7fea:	4601      	moveq	r1, r0
   d7fec:	2000      	moveq	r0, #0
   d7fee:	fab1 f381 	clz	r3, r1
   d7ff2:	bf08      	it	eq
   d7ff4:	3320      	addeq	r3, #32
   d7ff6:	f1a3 030b 	sub.w	r3, r3, #11
   d7ffa:	f1b3 0220 	subs.w	r2, r3, #32
   d7ffe:	da0c      	bge.n	d801a <__adddf3+0x16e>
   d8000:	320c      	adds	r2, #12
   d8002:	dd08      	ble.n	d8016 <__adddf3+0x16a>
   d8004:	f102 0c14 	add.w	ip, r2, #20
   d8008:	f1c2 020c 	rsb	r2, r2, #12
   d800c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8010:	fa21 f102 	lsr.w	r1, r1, r2
   d8014:	e00c      	b.n	d8030 <__adddf3+0x184>
   d8016:	f102 0214 	add.w	r2, r2, #20
   d801a:	bfd8      	it	le
   d801c:	f1c2 0c20 	rsble	ip, r2, #32
   d8020:	fa01 f102 	lsl.w	r1, r1, r2
   d8024:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8028:	bfdc      	itt	le
   d802a:	ea41 010c 	orrle.w	r1, r1, ip
   d802e:	4090      	lslle	r0, r2
   d8030:	1ae4      	subs	r4, r4, r3
   d8032:	bfa2      	ittt	ge
   d8034:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8038:	4329      	orrge	r1, r5
   d803a:	bd30      	popge	{r4, r5, pc}
   d803c:	ea6f 0404 	mvn.w	r4, r4
   d8040:	3c1f      	subs	r4, #31
   d8042:	da1c      	bge.n	d807e <__adddf3+0x1d2>
   d8044:	340c      	adds	r4, #12
   d8046:	dc0e      	bgt.n	d8066 <__adddf3+0x1ba>
   d8048:	f104 0414 	add.w	r4, r4, #20
   d804c:	f1c4 0220 	rsb	r2, r4, #32
   d8050:	fa20 f004 	lsr.w	r0, r0, r4
   d8054:	fa01 f302 	lsl.w	r3, r1, r2
   d8058:	ea40 0003 	orr.w	r0, r0, r3
   d805c:	fa21 f304 	lsr.w	r3, r1, r4
   d8060:	ea45 0103 	orr.w	r1, r5, r3
   d8064:	bd30      	pop	{r4, r5, pc}
   d8066:	f1c4 040c 	rsb	r4, r4, #12
   d806a:	f1c4 0220 	rsb	r2, r4, #32
   d806e:	fa20 f002 	lsr.w	r0, r0, r2
   d8072:	fa01 f304 	lsl.w	r3, r1, r4
   d8076:	ea40 0003 	orr.w	r0, r0, r3
   d807a:	4629      	mov	r1, r5
   d807c:	bd30      	pop	{r4, r5, pc}
   d807e:	fa21 f004 	lsr.w	r0, r1, r4
   d8082:	4629      	mov	r1, r5
   d8084:	bd30      	pop	{r4, r5, pc}
   d8086:	f094 0f00 	teq	r4, #0
   d808a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d808e:	bf06      	itte	eq
   d8090:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8094:	3401      	addeq	r4, #1
   d8096:	3d01      	subne	r5, #1
   d8098:	e74e      	b.n	d7f38 <__adddf3+0x8c>
   d809a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d809e:	bf18      	it	ne
   d80a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d80a4:	d029      	beq.n	d80fa <__adddf3+0x24e>
   d80a6:	ea94 0f05 	teq	r4, r5
   d80aa:	bf08      	it	eq
   d80ac:	ea90 0f02 	teqeq	r0, r2
   d80b0:	d005      	beq.n	d80be <__adddf3+0x212>
   d80b2:	ea54 0c00 	orrs.w	ip, r4, r0
   d80b6:	bf04      	itt	eq
   d80b8:	4619      	moveq	r1, r3
   d80ba:	4610      	moveq	r0, r2
   d80bc:	bd30      	pop	{r4, r5, pc}
   d80be:	ea91 0f03 	teq	r1, r3
   d80c2:	bf1e      	ittt	ne
   d80c4:	2100      	movne	r1, #0
   d80c6:	2000      	movne	r0, #0
   d80c8:	bd30      	popne	{r4, r5, pc}
   d80ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d80ce:	d105      	bne.n	d80dc <__adddf3+0x230>
   d80d0:	0040      	lsls	r0, r0, #1
   d80d2:	4149      	adcs	r1, r1
   d80d4:	bf28      	it	cs
   d80d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d80da:	bd30      	pop	{r4, r5, pc}
   d80dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d80e0:	bf3c      	itt	cc
   d80e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d80e6:	bd30      	popcc	{r4, r5, pc}
   d80e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d80ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d80f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d80f4:	f04f 0000 	mov.w	r0, #0
   d80f8:	bd30      	pop	{r4, r5, pc}
   d80fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d80fe:	bf1a      	itte	ne
   d8100:	4619      	movne	r1, r3
   d8102:	4610      	movne	r0, r2
   d8104:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8108:	bf1c      	itt	ne
   d810a:	460b      	movne	r3, r1
   d810c:	4602      	movne	r2, r0
   d810e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8112:	bf06      	itte	eq
   d8114:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8118:	ea91 0f03 	teqeq	r1, r3
   d811c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8120:	bd30      	pop	{r4, r5, pc}
   d8122:	bf00      	nop

000d8124 <__aeabi_ui2d>:
   d8124:	f090 0f00 	teq	r0, #0
   d8128:	bf04      	itt	eq
   d812a:	2100      	moveq	r1, #0
   d812c:	4770      	bxeq	lr
   d812e:	b530      	push	{r4, r5, lr}
   d8130:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8134:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8138:	f04f 0500 	mov.w	r5, #0
   d813c:	f04f 0100 	mov.w	r1, #0
   d8140:	e750      	b.n	d7fe4 <__adddf3+0x138>
   d8142:	bf00      	nop

000d8144 <__aeabi_i2d>:
   d8144:	f090 0f00 	teq	r0, #0
   d8148:	bf04      	itt	eq
   d814a:	2100      	moveq	r1, #0
   d814c:	4770      	bxeq	lr
   d814e:	b530      	push	{r4, r5, lr}
   d8150:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8154:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8158:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d815c:	bf48      	it	mi
   d815e:	4240      	negmi	r0, r0
   d8160:	f04f 0100 	mov.w	r1, #0
   d8164:	e73e      	b.n	d7fe4 <__adddf3+0x138>
   d8166:	bf00      	nop

000d8168 <__aeabi_f2d>:
   d8168:	0042      	lsls	r2, r0, #1
   d816a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d816e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8172:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8176:	bf1f      	itttt	ne
   d8178:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d817c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8180:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8184:	4770      	bxne	lr
   d8186:	f092 0f00 	teq	r2, #0
   d818a:	bf14      	ite	ne
   d818c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8190:	4770      	bxeq	lr
   d8192:	b530      	push	{r4, r5, lr}
   d8194:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8198:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d819c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d81a0:	e720      	b.n	d7fe4 <__adddf3+0x138>
   d81a2:	bf00      	nop

000d81a4 <__aeabi_ul2d>:
   d81a4:	ea50 0201 	orrs.w	r2, r0, r1
   d81a8:	bf08      	it	eq
   d81aa:	4770      	bxeq	lr
   d81ac:	b530      	push	{r4, r5, lr}
   d81ae:	f04f 0500 	mov.w	r5, #0
   d81b2:	e00a      	b.n	d81ca <__aeabi_l2d+0x16>

000d81b4 <__aeabi_l2d>:
   d81b4:	ea50 0201 	orrs.w	r2, r0, r1
   d81b8:	bf08      	it	eq
   d81ba:	4770      	bxeq	lr
   d81bc:	b530      	push	{r4, r5, lr}
   d81be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d81c2:	d502      	bpl.n	d81ca <__aeabi_l2d+0x16>
   d81c4:	4240      	negs	r0, r0
   d81c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d81ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d81ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d81d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d81d6:	f43f aedc 	beq.w	d7f92 <__adddf3+0xe6>
   d81da:	f04f 0203 	mov.w	r2, #3
   d81de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d81e2:	bf18      	it	ne
   d81e4:	3203      	addne	r2, #3
   d81e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d81ea:	bf18      	it	ne
   d81ec:	3203      	addne	r2, #3
   d81ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d81f2:	f1c2 0320 	rsb	r3, r2, #32
   d81f6:	fa00 fc03 	lsl.w	ip, r0, r3
   d81fa:	fa20 f002 	lsr.w	r0, r0, r2
   d81fe:	fa01 fe03 	lsl.w	lr, r1, r3
   d8202:	ea40 000e 	orr.w	r0, r0, lr
   d8206:	fa21 f102 	lsr.w	r1, r1, r2
   d820a:	4414      	add	r4, r2
   d820c:	e6c1      	b.n	d7f92 <__adddf3+0xe6>
   d820e:	bf00      	nop

000d8210 <__aeabi_dmul>:
   d8210:	b570      	push	{r4, r5, r6, lr}
   d8212:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8216:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d821a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d821e:	bf1d      	ittte	ne
   d8220:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8224:	ea94 0f0c 	teqne	r4, ip
   d8228:	ea95 0f0c 	teqne	r5, ip
   d822c:	f000 f8de 	bleq	d83ec <__aeabi_dmul+0x1dc>
   d8230:	442c      	add	r4, r5
   d8232:	ea81 0603 	eor.w	r6, r1, r3
   d8236:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d823a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d823e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8242:	bf18      	it	ne
   d8244:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d824c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8250:	d038      	beq.n	d82c4 <__aeabi_dmul+0xb4>
   d8252:	fba0 ce02 	umull	ip, lr, r0, r2
   d8256:	f04f 0500 	mov.w	r5, #0
   d825a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d825e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8262:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8266:	f04f 0600 	mov.w	r6, #0
   d826a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d826e:	f09c 0f00 	teq	ip, #0
   d8272:	bf18      	it	ne
   d8274:	f04e 0e01 	orrne.w	lr, lr, #1
   d8278:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d827c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8280:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8284:	d204      	bcs.n	d8290 <__aeabi_dmul+0x80>
   d8286:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d828a:	416d      	adcs	r5, r5
   d828c:	eb46 0606 	adc.w	r6, r6, r6
   d8290:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8294:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8298:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d829c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d82a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d82a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d82a8:	bf88      	it	hi
   d82aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d82ae:	d81e      	bhi.n	d82ee <__aeabi_dmul+0xde>
   d82b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d82b4:	bf08      	it	eq
   d82b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d82ba:	f150 0000 	adcs.w	r0, r0, #0
   d82be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d82c2:	bd70      	pop	{r4, r5, r6, pc}
   d82c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d82c8:	ea46 0101 	orr.w	r1, r6, r1
   d82cc:	ea40 0002 	orr.w	r0, r0, r2
   d82d0:	ea81 0103 	eor.w	r1, r1, r3
   d82d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d82d8:	bfc2      	ittt	gt
   d82da:	ebd4 050c 	rsbsgt	r5, r4, ip
   d82de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d82e2:	bd70      	popgt	{r4, r5, r6, pc}
   d82e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d82e8:	f04f 0e00 	mov.w	lr, #0
   d82ec:	3c01      	subs	r4, #1
   d82ee:	f300 80ab 	bgt.w	d8448 <__aeabi_dmul+0x238>
   d82f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d82f6:	bfde      	ittt	le
   d82f8:	2000      	movle	r0, #0
   d82fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d82fe:	bd70      	pople	{r4, r5, r6, pc}
   d8300:	f1c4 0400 	rsb	r4, r4, #0
   d8304:	3c20      	subs	r4, #32
   d8306:	da35      	bge.n	d8374 <__aeabi_dmul+0x164>
   d8308:	340c      	adds	r4, #12
   d830a:	dc1b      	bgt.n	d8344 <__aeabi_dmul+0x134>
   d830c:	f104 0414 	add.w	r4, r4, #20
   d8310:	f1c4 0520 	rsb	r5, r4, #32
   d8314:	fa00 f305 	lsl.w	r3, r0, r5
   d8318:	fa20 f004 	lsr.w	r0, r0, r4
   d831c:	fa01 f205 	lsl.w	r2, r1, r5
   d8320:	ea40 0002 	orr.w	r0, r0, r2
   d8324:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8328:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d832c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8330:	fa21 f604 	lsr.w	r6, r1, r4
   d8334:	eb42 0106 	adc.w	r1, r2, r6
   d8338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d833c:	bf08      	it	eq
   d833e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8342:	bd70      	pop	{r4, r5, r6, pc}
   d8344:	f1c4 040c 	rsb	r4, r4, #12
   d8348:	f1c4 0520 	rsb	r5, r4, #32
   d834c:	fa00 f304 	lsl.w	r3, r0, r4
   d8350:	fa20 f005 	lsr.w	r0, r0, r5
   d8354:	fa01 f204 	lsl.w	r2, r1, r4
   d8358:	ea40 0002 	orr.w	r0, r0, r2
   d835c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8360:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8364:	f141 0100 	adc.w	r1, r1, #0
   d8368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d836c:	bf08      	it	eq
   d836e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8372:	bd70      	pop	{r4, r5, r6, pc}
   d8374:	f1c4 0520 	rsb	r5, r4, #32
   d8378:	fa00 f205 	lsl.w	r2, r0, r5
   d837c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8380:	fa20 f304 	lsr.w	r3, r0, r4
   d8384:	fa01 f205 	lsl.w	r2, r1, r5
   d8388:	ea43 0302 	orr.w	r3, r3, r2
   d838c:	fa21 f004 	lsr.w	r0, r1, r4
   d8390:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8394:	fa21 f204 	lsr.w	r2, r1, r4
   d8398:	ea20 0002 	bic.w	r0, r0, r2
   d839c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d83a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d83a4:	bf08      	it	eq
   d83a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d83aa:	bd70      	pop	{r4, r5, r6, pc}
   d83ac:	f094 0f00 	teq	r4, #0
   d83b0:	d10f      	bne.n	d83d2 <__aeabi_dmul+0x1c2>
   d83b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d83b6:	0040      	lsls	r0, r0, #1
   d83b8:	eb41 0101 	adc.w	r1, r1, r1
   d83bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d83c0:	bf08      	it	eq
   d83c2:	3c01      	subeq	r4, #1
   d83c4:	d0f7      	beq.n	d83b6 <__aeabi_dmul+0x1a6>
   d83c6:	ea41 0106 	orr.w	r1, r1, r6
   d83ca:	f095 0f00 	teq	r5, #0
   d83ce:	bf18      	it	ne
   d83d0:	4770      	bxne	lr
   d83d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d83d6:	0052      	lsls	r2, r2, #1
   d83d8:	eb43 0303 	adc.w	r3, r3, r3
   d83dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d83e0:	bf08      	it	eq
   d83e2:	3d01      	subeq	r5, #1
   d83e4:	d0f7      	beq.n	d83d6 <__aeabi_dmul+0x1c6>
   d83e6:	ea43 0306 	orr.w	r3, r3, r6
   d83ea:	4770      	bx	lr
   d83ec:	ea94 0f0c 	teq	r4, ip
   d83f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d83f4:	bf18      	it	ne
   d83f6:	ea95 0f0c 	teqne	r5, ip
   d83fa:	d00c      	beq.n	d8416 <__aeabi_dmul+0x206>
   d83fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8400:	bf18      	it	ne
   d8402:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8406:	d1d1      	bne.n	d83ac <__aeabi_dmul+0x19c>
   d8408:	ea81 0103 	eor.w	r1, r1, r3
   d840c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8410:	f04f 0000 	mov.w	r0, #0
   d8414:	bd70      	pop	{r4, r5, r6, pc}
   d8416:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d841a:	bf06      	itte	eq
   d841c:	4610      	moveq	r0, r2
   d841e:	4619      	moveq	r1, r3
   d8420:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8424:	d019      	beq.n	d845a <__aeabi_dmul+0x24a>
   d8426:	ea94 0f0c 	teq	r4, ip
   d842a:	d102      	bne.n	d8432 <__aeabi_dmul+0x222>
   d842c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8430:	d113      	bne.n	d845a <__aeabi_dmul+0x24a>
   d8432:	ea95 0f0c 	teq	r5, ip
   d8436:	d105      	bne.n	d8444 <__aeabi_dmul+0x234>
   d8438:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d843c:	bf1c      	itt	ne
   d843e:	4610      	movne	r0, r2
   d8440:	4619      	movne	r1, r3
   d8442:	d10a      	bne.n	d845a <__aeabi_dmul+0x24a>
   d8444:	ea81 0103 	eor.w	r1, r1, r3
   d8448:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d844c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8454:	f04f 0000 	mov.w	r0, #0
   d8458:	bd70      	pop	{r4, r5, r6, pc}
   d845a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d845e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8462:	bd70      	pop	{r4, r5, r6, pc}

000d8464 <__aeabi_ddiv>:
   d8464:	b570      	push	{r4, r5, r6, lr}
   d8466:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d846a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d846e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8472:	bf1d      	ittte	ne
   d8474:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8478:	ea94 0f0c 	teqne	r4, ip
   d847c:	ea95 0f0c 	teqne	r5, ip
   d8480:	f000 f8a7 	bleq	d85d2 <__aeabi_ddiv+0x16e>
   d8484:	eba4 0405 	sub.w	r4, r4, r5
   d8488:	ea81 0e03 	eor.w	lr, r1, r3
   d848c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8490:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8494:	f000 8088 	beq.w	d85a8 <__aeabi_ddiv+0x144>
   d8498:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d849c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d84a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d84a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d84a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d84ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d84b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d84b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d84b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d84bc:	429d      	cmp	r5, r3
   d84be:	bf08      	it	eq
   d84c0:	4296      	cmpeq	r6, r2
   d84c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d84c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d84ca:	d202      	bcs.n	d84d2 <__aeabi_ddiv+0x6e>
   d84cc:	085b      	lsrs	r3, r3, #1
   d84ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d84d2:	1ab6      	subs	r6, r6, r2
   d84d4:	eb65 0503 	sbc.w	r5, r5, r3
   d84d8:	085b      	lsrs	r3, r3, #1
   d84da:	ea4f 0232 	mov.w	r2, r2, rrx
   d84de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d84e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d84e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d84ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d84ee:	bf22      	ittt	cs
   d84f0:	1ab6      	subcs	r6, r6, r2
   d84f2:	4675      	movcs	r5, lr
   d84f4:	ea40 000c 	orrcs.w	r0, r0, ip
   d84f8:	085b      	lsrs	r3, r3, #1
   d84fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d84fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8502:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8506:	bf22      	ittt	cs
   d8508:	1ab6      	subcs	r6, r6, r2
   d850a:	4675      	movcs	r5, lr
   d850c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8510:	085b      	lsrs	r3, r3, #1
   d8512:	ea4f 0232 	mov.w	r2, r2, rrx
   d8516:	ebb6 0e02 	subs.w	lr, r6, r2
   d851a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d851e:	bf22      	ittt	cs
   d8520:	1ab6      	subcs	r6, r6, r2
   d8522:	4675      	movcs	r5, lr
   d8524:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8528:	085b      	lsrs	r3, r3, #1
   d852a:	ea4f 0232 	mov.w	r2, r2, rrx
   d852e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8532:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8536:	bf22      	ittt	cs
   d8538:	1ab6      	subcs	r6, r6, r2
   d853a:	4675      	movcs	r5, lr
   d853c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8540:	ea55 0e06 	orrs.w	lr, r5, r6
   d8544:	d018      	beq.n	d8578 <__aeabi_ddiv+0x114>
   d8546:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d854a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d854e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8552:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8556:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d855a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d855e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8562:	d1c0      	bne.n	d84e6 <__aeabi_ddiv+0x82>
   d8564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8568:	d10b      	bne.n	d8582 <__aeabi_ddiv+0x11e>
   d856a:	ea41 0100 	orr.w	r1, r1, r0
   d856e:	f04f 0000 	mov.w	r0, #0
   d8572:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8576:	e7b6      	b.n	d84e6 <__aeabi_ddiv+0x82>
   d8578:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d857c:	bf04      	itt	eq
   d857e:	4301      	orreq	r1, r0
   d8580:	2000      	moveq	r0, #0
   d8582:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8586:	bf88      	it	hi
   d8588:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d858c:	f63f aeaf 	bhi.w	d82ee <__aeabi_dmul+0xde>
   d8590:	ebb5 0c03 	subs.w	ip, r5, r3
   d8594:	bf04      	itt	eq
   d8596:	ebb6 0c02 	subseq.w	ip, r6, r2
   d859a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d859e:	f150 0000 	adcs.w	r0, r0, #0
   d85a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d85a6:	bd70      	pop	{r4, r5, r6, pc}
   d85a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d85ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d85b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d85b4:	bfc2      	ittt	gt
   d85b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d85ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d85be:	bd70      	popgt	{r4, r5, r6, pc}
   d85c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85c4:	f04f 0e00 	mov.w	lr, #0
   d85c8:	3c01      	subs	r4, #1
   d85ca:	e690      	b.n	d82ee <__aeabi_dmul+0xde>
   d85cc:	ea45 0e06 	orr.w	lr, r5, r6
   d85d0:	e68d      	b.n	d82ee <__aeabi_dmul+0xde>
   d85d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d85d6:	ea94 0f0c 	teq	r4, ip
   d85da:	bf08      	it	eq
   d85dc:	ea95 0f0c 	teqeq	r5, ip
   d85e0:	f43f af3b 	beq.w	d845a <__aeabi_dmul+0x24a>
   d85e4:	ea94 0f0c 	teq	r4, ip
   d85e8:	d10a      	bne.n	d8600 <__aeabi_ddiv+0x19c>
   d85ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d85ee:	f47f af34 	bne.w	d845a <__aeabi_dmul+0x24a>
   d85f2:	ea95 0f0c 	teq	r5, ip
   d85f6:	f47f af25 	bne.w	d8444 <__aeabi_dmul+0x234>
   d85fa:	4610      	mov	r0, r2
   d85fc:	4619      	mov	r1, r3
   d85fe:	e72c      	b.n	d845a <__aeabi_dmul+0x24a>
   d8600:	ea95 0f0c 	teq	r5, ip
   d8604:	d106      	bne.n	d8614 <__aeabi_ddiv+0x1b0>
   d8606:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d860a:	f43f aefd 	beq.w	d8408 <__aeabi_dmul+0x1f8>
   d860e:	4610      	mov	r0, r2
   d8610:	4619      	mov	r1, r3
   d8612:	e722      	b.n	d845a <__aeabi_dmul+0x24a>
   d8614:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8618:	bf18      	it	ne
   d861a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d861e:	f47f aec5 	bne.w	d83ac <__aeabi_dmul+0x19c>
   d8622:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8626:	f47f af0d 	bne.w	d8444 <__aeabi_dmul+0x234>
   d862a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d862e:	f47f aeeb 	bne.w	d8408 <__aeabi_dmul+0x1f8>
   d8632:	e712      	b.n	d845a <__aeabi_dmul+0x24a>

000d8634 <__aeabi_d2f>:
   d8634:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8638:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d863c:	bf24      	itt	cs
   d863e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8642:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8646:	d90d      	bls.n	d8664 <__aeabi_d2f+0x30>
   d8648:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d864c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8650:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8654:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8658:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d865c:	bf08      	it	eq
   d865e:	f020 0001 	biceq.w	r0, r0, #1
   d8662:	4770      	bx	lr
   d8664:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8668:	d121      	bne.n	d86ae <__aeabi_d2f+0x7a>
   d866a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d866e:	bfbc      	itt	lt
   d8670:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8674:	4770      	bxlt	lr
   d8676:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d867a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d867e:	f1c2 0218 	rsb	r2, r2, #24
   d8682:	f1c2 0c20 	rsb	ip, r2, #32
   d8686:	fa10 f30c 	lsls.w	r3, r0, ip
   d868a:	fa20 f002 	lsr.w	r0, r0, r2
   d868e:	bf18      	it	ne
   d8690:	f040 0001 	orrne.w	r0, r0, #1
   d8694:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8698:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d869c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d86a0:	ea40 000c 	orr.w	r0, r0, ip
   d86a4:	fa23 f302 	lsr.w	r3, r3, r2
   d86a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d86ac:	e7cc      	b.n	d8648 <__aeabi_d2f+0x14>
   d86ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d86b2:	d107      	bne.n	d86c4 <__aeabi_d2f+0x90>
   d86b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d86b8:	bf1e      	ittt	ne
   d86ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d86be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d86c2:	4770      	bxne	lr
   d86c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d86c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d86cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d86d0:	4770      	bx	lr
   d86d2:	bf00      	nop

000d86d4 <__cxa_atexit>:
   d86d4:	b510      	push	{r4, lr}
   d86d6:	4c05      	ldr	r4, [pc, #20]	; (d86ec <__cxa_atexit+0x18>)
   d86d8:	4613      	mov	r3, r2
   d86da:	b12c      	cbz	r4, d86e8 <__cxa_atexit+0x14>
   d86dc:	460a      	mov	r2, r1
   d86de:	4601      	mov	r1, r0
   d86e0:	2002      	movs	r0, #2
   d86e2:	f3af 8000 	nop.w
   d86e6:	bd10      	pop	{r4, pc}
   d86e8:	4620      	mov	r0, r4
   d86ea:	bd10      	pop	{r4, pc}
   d86ec:	00000000 	.word	0x00000000

000d86f0 <memcmp>:
   d86f0:	b510      	push	{r4, lr}
   d86f2:	3901      	subs	r1, #1
   d86f4:	4402      	add	r2, r0
   d86f6:	4290      	cmp	r0, r2
   d86f8:	d007      	beq.n	d870a <memcmp+0x1a>
   d86fa:	f810 3b01 	ldrb.w	r3, [r0], #1
   d86fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8702:	42a3      	cmp	r3, r4
   d8704:	d0f7      	beq.n	d86f6 <memcmp+0x6>
   d8706:	1b18      	subs	r0, r3, r4
   d8708:	bd10      	pop	{r4, pc}
   d870a:	2000      	movs	r0, #0
   d870c:	bd10      	pop	{r4, pc}

000d870e <memcpy>:
   d870e:	b510      	push	{r4, lr}
   d8710:	1e43      	subs	r3, r0, #1
   d8712:	440a      	add	r2, r1
   d8714:	4291      	cmp	r1, r2
   d8716:	d004      	beq.n	d8722 <memcpy+0x14>
   d8718:	f811 4b01 	ldrb.w	r4, [r1], #1
   d871c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8720:	e7f8      	b.n	d8714 <memcpy+0x6>
   d8722:	bd10      	pop	{r4, pc}

000d8724 <memmove>:
   d8724:	4288      	cmp	r0, r1
   d8726:	b510      	push	{r4, lr}
   d8728:	eb01 0302 	add.w	r3, r1, r2
   d872c:	d801      	bhi.n	d8732 <memmove+0xe>
   d872e:	1e42      	subs	r2, r0, #1
   d8730:	e00b      	b.n	d874a <memmove+0x26>
   d8732:	4298      	cmp	r0, r3
   d8734:	d2fb      	bcs.n	d872e <memmove+0xa>
   d8736:	1881      	adds	r1, r0, r2
   d8738:	1ad2      	subs	r2, r2, r3
   d873a:	42d3      	cmn	r3, r2
   d873c:	d004      	beq.n	d8748 <memmove+0x24>
   d873e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8742:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8746:	e7f8      	b.n	d873a <memmove+0x16>
   d8748:	bd10      	pop	{r4, pc}
   d874a:	4299      	cmp	r1, r3
   d874c:	d004      	beq.n	d8758 <memmove+0x34>
   d874e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8752:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8756:	e7f8      	b.n	d874a <memmove+0x26>
   d8758:	bd10      	pop	{r4, pc}

000d875a <memset>:
   d875a:	4402      	add	r2, r0
   d875c:	4603      	mov	r3, r0
   d875e:	4293      	cmp	r3, r2
   d8760:	d002      	beq.n	d8768 <memset+0xe>
   d8762:	f803 1b01 	strb.w	r1, [r3], #1
   d8766:	e7fa      	b.n	d875e <memset+0x4>
   d8768:	4770      	bx	lr
	...

000d876c <srand>:
   d876c:	b538      	push	{r3, r4, r5, lr}
   d876e:	4b12      	ldr	r3, [pc, #72]	; (d87b8 <srand+0x4c>)
   d8770:	681c      	ldr	r4, [r3, #0]
   d8772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8774:	4605      	mov	r5, r0
   d8776:	b9d3      	cbnz	r3, d87ae <srand+0x42>
   d8778:	2018      	movs	r0, #24
   d877a:	f7fc fccb 	bl	d5114 <malloc>
   d877e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8782:	63a0      	str	r0, [r4, #56]	; 0x38
   d8784:	8003      	strh	r3, [r0, #0]
   d8786:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d878a:	8043      	strh	r3, [r0, #2]
   d878c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8790:	8083      	strh	r3, [r0, #4]
   d8792:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8796:	80c3      	strh	r3, [r0, #6]
   d8798:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d879c:	8103      	strh	r3, [r0, #8]
   d879e:	2305      	movs	r3, #5
   d87a0:	8143      	strh	r3, [r0, #10]
   d87a2:	230b      	movs	r3, #11
   d87a4:	8183      	strh	r3, [r0, #12]
   d87a6:	2201      	movs	r2, #1
   d87a8:	2300      	movs	r3, #0
   d87aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d87ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d87b0:	2200      	movs	r2, #0
   d87b2:	611d      	str	r5, [r3, #16]
   d87b4:	615a      	str	r2, [r3, #20]
   d87b6:	bd38      	pop	{r3, r4, r5, pc}
   d87b8:	2003ce78 	.word	0x2003ce78

000d87bc <strcmp>:
   d87bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d87c0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d87c4:	2a01      	cmp	r2, #1
   d87c6:	bf28      	it	cs
   d87c8:	429a      	cmpcs	r2, r3
   d87ca:	d0f7      	beq.n	d87bc <strcmp>
   d87cc:	1ad0      	subs	r0, r2, r3
   d87ce:	4770      	bx	lr

000d87d0 <strcpy>:
   d87d0:	4603      	mov	r3, r0
   d87d2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d87d6:	f803 2b01 	strb.w	r2, [r3], #1
   d87da:	2a00      	cmp	r2, #0
   d87dc:	d1f9      	bne.n	d87d2 <strcpy+0x2>
   d87de:	4770      	bx	lr

000d87e0 <strdup>:
   d87e0:	4b02      	ldr	r3, [pc, #8]	; (d87ec <strdup+0xc>)
   d87e2:	4601      	mov	r1, r0
   d87e4:	6818      	ldr	r0, [r3, #0]
   d87e6:	f000 b803 	b.w	d87f0 <_strdup_r>
   d87ea:	bf00      	nop
   d87ec:	2003ce78 	.word	0x2003ce78

000d87f0 <_strdup_r>:
   d87f0:	b570      	push	{r4, r5, r6, lr}
   d87f2:	4606      	mov	r6, r0
   d87f4:	4608      	mov	r0, r1
   d87f6:	460c      	mov	r4, r1
   d87f8:	f000 f80d 	bl	d8816 <strlen>
   d87fc:	1c45      	adds	r5, r0, #1
   d87fe:	4629      	mov	r1, r5
   d8800:	4630      	mov	r0, r6
   d8802:	f7fc fcb7 	bl	d5174 <_malloc_r>
   d8806:	4606      	mov	r6, r0
   d8808:	b118      	cbz	r0, d8812 <_strdup_r+0x22>
   d880a:	462a      	mov	r2, r5
   d880c:	4621      	mov	r1, r4
   d880e:	f7ff ff7e 	bl	d870e <memcpy>
   d8812:	4630      	mov	r0, r6
   d8814:	bd70      	pop	{r4, r5, r6, pc}

000d8816 <strlen>:
   d8816:	4603      	mov	r3, r0
   d8818:	f813 2b01 	ldrb.w	r2, [r3], #1
   d881c:	2a00      	cmp	r2, #0
   d881e:	d1fb      	bne.n	d8818 <strlen+0x2>
   d8820:	1a18      	subs	r0, r3, r0
   d8822:	3801      	subs	r0, #1
   d8824:	4770      	bx	lr

000d8826 <strncmp>:
   d8826:	b530      	push	{r4, r5, lr}
   d8828:	b182      	cbz	r2, d884c <strncmp+0x26>
   d882a:	1e45      	subs	r5, r0, #1
   d882c:	3901      	subs	r1, #1
   d882e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8832:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8836:	42a3      	cmp	r3, r4
   d8838:	d106      	bne.n	d8848 <strncmp+0x22>
   d883a:	43ec      	mvns	r4, r5
   d883c:	4414      	add	r4, r2
   d883e:	42e0      	cmn	r0, r4
   d8840:	d001      	beq.n	d8846 <strncmp+0x20>
   d8842:	2b00      	cmp	r3, #0
   d8844:	d1f3      	bne.n	d882e <strncmp+0x8>
   d8846:	461c      	mov	r4, r3
   d8848:	1b18      	subs	r0, r3, r4
   d884a:	bd30      	pop	{r4, r5, pc}
   d884c:	4610      	mov	r0, r2
   d884e:	bd30      	pop	{r4, r5, pc}

000d8850 <strncpy>:
   d8850:	b510      	push	{r4, lr}
   d8852:	4603      	mov	r3, r0
   d8854:	b142      	cbz	r2, d8868 <strncpy+0x18>
   d8856:	f811 4b01 	ldrb.w	r4, [r1], #1
   d885a:	f803 4b01 	strb.w	r4, [r3], #1
   d885e:	3a01      	subs	r2, #1
   d8860:	2c00      	cmp	r4, #0
   d8862:	d1f7      	bne.n	d8854 <strncpy+0x4>
   d8864:	441a      	add	r2, r3
   d8866:	e000      	b.n	d886a <strncpy+0x1a>
   d8868:	bd10      	pop	{r4, pc}
   d886a:	4293      	cmp	r3, r2
   d886c:	d002      	beq.n	d8874 <strncpy+0x24>
   d886e:	f803 4b01 	strb.w	r4, [r3], #1
   d8872:	e7fa      	b.n	d886a <strncpy+0x1a>
   d8874:	bd10      	pop	{r4, pc}

000d8876 <strnlen>:
   d8876:	b510      	push	{r4, lr}
   d8878:	4603      	mov	r3, r0
   d887a:	4401      	add	r1, r0
   d887c:	428b      	cmp	r3, r1
   d887e:	d004      	beq.n	d888a <strnlen+0x14>
   d8880:	781a      	ldrb	r2, [r3, #0]
   d8882:	1c5c      	adds	r4, r3, #1
   d8884:	b10a      	cbz	r2, d888a <strnlen+0x14>
   d8886:	4623      	mov	r3, r4
   d8888:	e7f8      	b.n	d887c <strnlen+0x6>
   d888a:	1a18      	subs	r0, r3, r0
   d888c:	bd10      	pop	{r4, pc}

000d888e <link_code_end>:
	...

000d8890 <dynalib_user>:
   d8890:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d88a0:	0000 0000                                   ....

000d88a4 <_ZTV5Timer>:
	...
   d88ac:	416d 000d 41b5 000d 40f5 000d 6544 6f74     mA...A...@..Deto
   d88bc:	616e 6574 7200 6365 6965 6576 2064 6e69     nate.received in
   d88cc:	7320 7075 6373 6972 6562 702f 6275 696c      supscribe/publi
   d88dc:	6873 7220 7165 6575 7473 7325 203a 7325     sh request%s: %s
   d88ec:	7600 7261 6169 6c62 2065 616c 6562 206c     .variable label 
   d88fc:	7420 6168 2074 7369 6320 706f 6569 2064      that is copied 
   d890c:	7266 6d6f 6420 7665 6e5f 6d61 2065 203a     from dev_name : 
   d891c:	7325 2500 322e 0066 6f76 746c 6761 0065     %s.%.2f.voltage.
   d892c:	6176 6972 6261 656c 6c20 6261 6c65 7420     variable label t
   d893c:	6168 2074 7369 7520 6c70 616f 6564 2064     hat is uploaded 
   d894c:	6f74 7520 6962 6f64 7374 3a20 2020 7325     to ubidots :  %s
   d895c:	5500 6962 6f64 7374 4200 6f6f 006d 6f42     .Ubidots.Boom.Bo
   d896c:	6d6f 615f 6b63 4400 7465 6e6f 7461 5f65     om_ack.Detonate_
   d897c:	6361 006b 6f42 6d6f 725f 7365 7465 4200     ack.Boom_reset.B
   d898c:	4f4f 5f4d 6572 6573 0074 6170 7472 6369     OOM_reset.partic
   d899c:	656c 642f 7665 6369 2f65 616e 656d 7700     le/device/name.w
   d89ac:	6265 6f68 6b6f 4200 6165 6f63 206e 414d     ebhook.Beacon MA
   d89bc:	0043 6e69 7564 7473 6972 6c61 612e 6970     C.industrial.api
   d89cc:	752e 6962 6f64 7374 632e 6d6f 5b00 4157     .ubidots.com.[WA
   d89dc:	4e52 4e49 5d47 5920 756f 2072 6f62 7261     RNING] Your boar
   d89ec:	2064 6f64 7365 6e20 746f 7320 7075 6f70     d does not suppo
   d89fc:	7472 7420 6568 6d20 7365 4c68 6f6f 2870     rt the meshLoop(
   d8a0c:	2029 656d 6874 646f 5b00 4157 4e52 4e49     ) method.[WARNIN
   d8a1c:	5d47 5920 756f 2072 6f62 7261 2064 6f64     G] Your board do
   d8a2c:	7365 6e20 746f 7320 7075 6f70 7472 7420     es not support t
   d8a3c:	6568 7320 7465 6c43 756f 5064 6f72 6f74     he setCloudProto
   d8a4c:	6f63 286c 2029 656d 6874 646f 5b00 4157     col() method.[WA
   d8a5c:	4e52 4e49 5d47 5920 756f 2072 6f62 7261     RNING] Your boar
   d8a6c:	2064 6f64 7365 6e20 746f 7320 7075 6f70     d does not suppo
   d8a7c:	7472 7420 6568 7320 6e65 2864 2029 656d     rt the send() me
   d8a8c:	6874 646f 5b00 6157 6e72 6e69 5d67 5920     thod.[Warning] Y
   d8a9c:	756f 2072 6f62 7261 2064 6f64 7365 6e20     our board does n
   d8aac:	746f 7320 7075 6f70 7472 7420 6568 6720     ot support the g
   d8abc:	7465 2928 6d20 7465 6f68 0064 6f59 2075     et() method.You 
   d8acc:	7261 2065 6461 6964 676e 6d20 726f 2065     are adding more 
   d8adc:	6874 6e61 7420 6568 6d20 7861 6d69 6d75     than the maximum
   d8aec:	6f20 2066 6f63 736e 6365 7475 7669 2065      of consecutive 
   d8afc:	656b 2d79 6176 756c 7365 7020 6961 7372     key-values pairs
   d8b0c:	2500 2573 3d73 7325 2500 2473 2500 2273     .%s%s=%s.%s$.%s"
   d8b1c:	7325 3a22 2522 2273 2500 2c73 5b00 4157     %s":"%s".%s,.[WA
   d8b2c:	4e52 4e49 5d47 5920 756f 2072 654d 6873     RNING] Your Mesh
   d8b3c:	6320 6e6f 6574 7478 6c20 6e65 7467 2068      context length 
   d8b4c:	756d 7473 6220 2065 6f6c 6577 2072 6874     must be lower th
   d8b5c:	6e61 3120 3030 2500 756c 2500 7c73 6625     an 100.%lu.%s|%f
   d8b6c:	257c 7c73 7325 257c 0073 575b 7261 696e     |%s|%s|%s.[Warni
   d8b7c:	676e 205d 6854 2065 656d 6873 6f4c 706f     ng] The meshLoop
   d8b8c:	2928 6d20 7465 6f68 2064 6f64 7365 6e20     () method does n
   d8b9c:	746f 6920 706d 656c 656d 746e 6120 796e     ot implement any
   d8bac:	7220 756f 6974 656e 6920 206e 6f79 7275      routine in your
   d8bbc:	6420 7665 6369 0065 2041 7270 626f 656c      device.A proble
   d8bcc:	206d 6168 2073 6172 7369 6465 7720 7469     m has raised wit
   d8bdc:	2068 6874 2065 6564 6976 6563 7420 7972     h the device try
   d8bec:	6e69 2067 6f74 6f20 6570 206e 2061 654d     ing to open a Me
   d8bfc:	6873 6f73 6b63 7465 5900 756f 6820 7661     shsocket.You hav
   d8c0c:	2065 6f6e 2074 6461 6564 2064 6e61 2079     e not added any 
   d8c1c:	6176 6972 6261 656c 7620 6c61 6575 202c     variable value, 
   d8c2c:	6c70 6165 6573 6320 6c61 206c 6874 2065     please call the 
   d8c3c:	6461 2864 6d29 7465 6f68 2064 6966 7372     add()method firs
   d8c4c:	0074 6275 6469 746f 2d73 656d 6873 0000     t.ubidots-mesh..

000d8c5c <_ZTVN5spark13EthernetClassE>:
	...
   d8c64:	51f3 000d 51e9 000d 51df 000d 51d5 000d     .Q...Q...Q...Q..
   d8c74:	51c9 000d 51bd 000d 51b1 000d 51a9 000d     .Q...Q...Q...Q..
   d8c84:	519f 000d 5195 000d 7997 000d               .Q...Q...y..

000d8c90 <_ZTV8SPIClass>:
	...
   d8c98:	5211 000d 5213 000d                         .R...R..

000d8ca0 <_ZTV3UDP>:
	...
   d8ca8:	47e5 000d 4805 000d 5289 000d 53b3 000d     .G...H...R...S..
   d8cb8:	5281 000d 529f 000d 52bd 000d 52d7 000d     .R...R...R...R..
   d8cc8:	52fb 000d 5397 000d 5699 000d 5439 000d     .R...S...V..9T..
   d8cd8:	55b9 000d 5269 000d 5841 000d 553d 000d     .U..iR..AX..=U..
   d8ce8:	5471 000d 586f 000d 53dd 000d 5277 000d     qT..oX...S..wR..
   d8cf8:	5419 000d 527d 000d 52d9 000d fff0 ffff     .T..}R...R......
   d8d08:	0000 0000 52f3 000d                         .....R..

000d8d10 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8d18:	59fd 000d 5a03 000d 5ce7 000d 5a11 000d     .Y...Z...\...Z..
   d8d28:	59ff 000d 6977 6972 676e 622e 656c 5300     .Y..wiring.ble.S
   d8d38:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d8d48:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   d8d58:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   d8d68:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   d8d78:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   d8d88:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   d8d98:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   d8da8:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   d8db8:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   d8dc8:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   d8dd8:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   d8de8:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   d8df8:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   d8e08:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   d8e18:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   d8e28:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   d8e38:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   d8e48:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   d8e58:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d8e68:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   d8e78:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   d8e88:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   d8e98:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   d8ea8:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d8eb8:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d8ec8:	6465 002e 6162 6475 5300 7265 6169 006c     ed..baud.Serial.
   d8ed8:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   d8ee8:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   d8ef8:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   d8f08:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   d8f18:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   d8f28:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   d8f38:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   d8f48:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   d8f58:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   d8f68:	736c 3d20 0020 0a0d 6c00 006e 6e66 6300     ls = ....ln.fn.c
   d8f78:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
   d8f88:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
   d8f98:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
   d8fa8:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d8fb8:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d8fc8:	6100 6373 6974 656d 0000 0000               .asctime....

000d8fd4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8fdc:	62f9 000d 62ff 000d 6343 000d 630d 000d     .b...b..Cc...c..
   d8fec:	62fb 000d                                   .b..

000d8ff0 <_ZTV9IPAddress>:
	...
   d8ff8:	68e9 000d 68d9 000d 68db 000d               .h...h...h..

000d9004 <_ZTV9USBSerial>:
	...
   d900c:	69ed 000d 6a3d 000d 6a4b 000d 6049 000d     .i..=j..Kj..I`..
   d901c:	6a29 000d 69ef 000d 6a05 000d 6a37 000d     )j...i...j..7j..
   d902c:	6a1b 000d 69e9 000d                         .j...i..

000d9034 <_ZTV11USARTSerial>:
	...
   d903c:	6af9 000d 6b49 000d 6b57 000d 6049 000d     .j..Ik..Wk..I`..
   d904c:	6b0d 000d 6b2f 000d 6b1b 000d 6b43 000d     .k../k...k..Ck..
   d905c:	6afb 000d 6aff 000d                         .j...j..

000d9064 <_ZTV7TwoWire>:
	...
   d906c:	6c25 000d 6c6f 000d 6c47 000d 6c27 000d     %l..ol..Gl..'l..
   d907c:	6c4f 000d 6c57 000d 6c5f 000d 6c67 000d     Ol..Wl.._l..gl..

000d908c <_ZTVN5spark9MeshClassE>:
	...
   d9094:	6d2b 000d 6d21 000d 6d17 000d 4875 000d     +m..!m...m..uH..
   d90a4:	6d0b 000d 6cff 000d 6cf3 000d 6ceb 000d     .m...l...l...l..
   d90b4:	6ce1 000d 6cd7 000d 7997 000d 6666 3330     .l...l...y..ff03
   d90c4:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   d90d4:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   d90e4:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000d90f0 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d90f8:	7429 000d 742f 000d 7917 000d 743d 000d     )t../t...y..=t..
   d9108:	742b 000d                                   +t..

000d910c <_ZTV9TCPClient>:
	...
   d9114:	46a1 000d 46d5 000d 73a1 000d 73bb 000d     .F...F...s...s..
   d9124:	77bd 000d 750f 000d 74e1 000d 73e5 000d     .w...u...t...s..
   d9134:	7699 000d 7595 000d 7543 000d 778d 000d     .v...u..Cu...w..
   d9144:	73e7 000d 741f 000d 73cd 000d 7441 000d     .s...t...s..At..
   d9154:	74c1 000d 6572 7663 6520 7272 726f 3d20     .t..recv error =
   d9164:	2520 0064                                    %d.

000d9168 <_ZTVN5spark12NetworkClassE>:
	...
   d9170:	792f 000d 7939 000d 7943 000d 794d 000d     /y..9y..Cy..My..
   d9180:	7957 000d 7963 000d 796f 000d 797b 000d     Wy..cy..oy..{y..
   d9190:	7983 000d 798d 000d 7997 000d               .y...y...y..

000d919c <_ZSt7nothrow>:
   d919c:	0000 0000                                   ....

000d91a0 <__sf_fake_stdin>:
	...

000d91c0 <__sf_fake_stdout>:
	...

000d91e0 <__sf_fake_stderr>:
	...

000d9200 <link_const_variable_data_end>:
   d9200:	000d4569 	.word	0x000d4569
   d9204:	000d46e9 	.word	0x000d46e9
   d9208:	000d4711 	.word	0x000d4711
   d920c:	000d47ad 	.word	0x000d47ad
   d9210:	000d47bd 	.word	0x000d47bd
   d9214:	000d4819 	.word	0x000d4819
   d9218:	000d4a55 	.word	0x000d4a55
   d921c:	000d4a65 	.word	0x000d4a65
   d9220:	000d4a8d 	.word	0x000d4a8d
   d9224:	000d51fd 	.word	0x000d51fd
   d9228:	000d5251 	.word	0x000d5251
   d922c:	000d6039 	.word	0x000d6039
   d9230:	000d61a1 	.word	0x000d61a1
   d9234:	000d61b1 	.word	0x000d61b1
   d9238:	000d61f9 	.word	0x000d61f9
   d923c:	000d7351 	.word	0x000d7351
   d9240:	000d7a65 	.word	0x000d7a65
   d9244:	000d7b45 	.word	0x000d7b45
   d9248:	000d7c11 	.word	0x000d7c11
   d924c:	000d7c95 	.word	0x000d7c95
   d9250:	000d7d59 	.word	0x000d7d59
   d9254:	000d7e1d 	.word	0x000d7e1d

000d9258 <link_constructors_end>:
	...
