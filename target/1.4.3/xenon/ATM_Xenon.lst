
e:/aacrs/02_12/markvisser/git_clone/ATM_XENON/ATM_Xenon/target/1.4.3/xenon/ATM_Xenon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004bc0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00018c78  2**0
                  CONTENTS
  4 .data         0000006c  2003e1d4  000d8be0  0000e1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b0  2003e240  2003e240  0001e240  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8c4c  000d8c4c  00018c4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8c74  000d8c74  00018c74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013f234  00000000  00000000  00018c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000183ee  00000000  00000000  00157eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000263aa  00000000  00000000  0017029a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003070  00000000  00000000  00196644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005ab8  00000000  00000000  001996b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f8cf  00000000  00000000  0019f16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003bbc1  00000000  00000000  001dea3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011660f  00000000  00000000  0021a5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ec78  00000000  00000000  00330c0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 f908 	bl	d8246 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 f90d 	bl	d825c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1d4 	.word	0x2003e1d4
   d404c:	000d8be0 	.word	0x000d8be0
   d4050:	2003e240 	.word	0x2003e240
   d4054:	2003e240 	.word	0x2003e240
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fef9 	bl	d5e54 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8bdc 	.word	0x000d8bdc
   d4084:	000d8b84 	.word	0x000d8b84

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8aa 	b.w	d41e0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f9f7 	bl	d4480 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 beab 	b.w	d5df0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 beaf 	b.w	d4dfc <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f000 bead 	b.w	d4dfc <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f000 beb3 	b.w	d4e0c <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f000 beb1 	b.w	d4e0c <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ba:	6803      	ldr	r3, [r0, #0]
   d40bc:	4718      	bx	r3

000d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40be:	2a01      	cmp	r2, #1
   d40c0:	d002      	beq.n	d40c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40c2:	2a02      	cmp	r2, #2
   d40c4:	d002      	beq.n	d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40c6:	e004      	b.n	d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c8:	6001      	str	r1, [r0, #0]
	      break;
   d40ca:	e002      	b.n	d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40cc:	680b      	ldr	r3, [r1, #0]
   d40ce:	b100      	cbz	r0, d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40d0:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40d2:	2000      	movs	r0, #0
   d40d4:	4770      	bx	lr
	...

000d40d8 <_Z14Name_of_DevicePKcS0_>:
char dev_name[32] = ""; // keeps the device name
bool publishName = false; // to publich the name
bool getDeviceName = 0 ;// set device name as 0 so we can get it
/********************************************************************************************/
// used for getting the device name
void Name_of_Device(const char *topic, const char *data) {
   d40d8:	b537      	push	{r0, r1, r2, r4, r5, lr}

strncpy(dev_name, data, sizeof(dev_name)-1);
   d40da:	4c09      	ldr	r4, [pc, #36]	; (d4100 <_Z14Name_of_DevicePKcS0_+0x28>)
char dev_name[32] = ""; // keeps the device name
bool publishName = false; // to publich the name
bool getDeviceName = 0 ;// set device name as 0 so we can get it
/********************************************************************************************/
// used for getting the device name
void Name_of_Device(const char *topic, const char *data) {
   d40dc:	4605      	mov	r5, r0

strncpy(dev_name, data, sizeof(dev_name)-1);
   d40de:	221f      	movs	r2, #31
   d40e0:	4620      	mov	r0, r4
   d40e2:	f004 f935 	bl	d8350 <strncpy>
Serial.printlnf("received %s: %s", topic, dev_name);
   d40e6:	f002 fa7d 	bl	d65e4 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40ea:	462b      	mov	r3, r5
   d40ec:	9400      	str	r4, [sp, #0]
   d40ee:	4a05      	ldr	r2, [pc, #20]	; (d4104 <_Z14Name_of_DevicePKcS0_+0x2c>)
   d40f0:	2101      	movs	r1, #1
   d40f2:	f001 fde3 	bl	d5cbc <_ZN5Print11printf_implEbPKcz>
publishName = true;
   d40f6:	4b04      	ldr	r3, [pc, #16]	; (d4108 <_Z14Name_of_DevicePKcS0_+0x30>)
   d40f8:	2201      	movs	r2, #1
   d40fa:	701a      	strb	r2, [r3, #0]
}
   d40fc:	b003      	add	sp, #12
   d40fe:	bd30      	pop	{r4, r5, pc}
   d4100:	2003e279 	.word	0x2003e279
   d4104:	000d83b8 	.word	0x000d83b8
   d4108:	2003e244 	.word	0x2003e244

000d410c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d410c:	6943      	ldr	r3, [r0, #20]
   d410e:	b113      	cbz	r3, d4116 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4110:	6983      	ldr	r3, [r0, #24]
   d4112:	300c      	adds	r0, #12
   d4114:	4718      	bx	r3
   d4116:	4770      	bx	lr

000d4118 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4118:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d411a:	2100      	movs	r1, #0
   d411c:	4604      	mov	r4, r0
   d411e:	4608      	mov	r0, r1
   d4120:	f000 fc1e 	bl	d4960 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4124:	a902      	add	r1, sp, #8
   d4126:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4128:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d412a:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d412e:	f000 fc2f 	bl	d4990 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4132:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4134:	b10c      	cbz	r4, d413a <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4136:	2301      	movs	r3, #1
   d4138:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d413a:	2100      	movs	r1, #0
   d413c:	2001      	movs	r0, #1
   d413e:	f000 fc0f 	bl	d4960 <os_thread_scheduling>
            }
        }
        if (t) {
   d4142:	b12c      	cbz	r4, d4150 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4144:	6823      	ldr	r3, [r4, #0]
   d4146:	4620      	mov	r0, r4
   d4148:	689b      	ldr	r3, [r3, #8]
   d414a:	4798      	blx	r3
            t->running = false;
   d414c:	2300      	movs	r3, #0
   d414e:	7123      	strb	r3, [r4, #4]
        }
    }
   d4150:	b002      	add	sp, #8
   d4152:	bd10      	pop	{r4, pc}

000d4154 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4154:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4156:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4158:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d415a:	b113      	cbz	r3, d4162 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d415c:	2203      	movs	r2, #3
   d415e:	4601      	mov	r1, r0
   d4160:	4798      	blx	r3
    }
   d4162:	4620      	mov	r0, r4
   d4164:	bd10      	pop	{r4, pc}

000d4166 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4166:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4168:	6880      	ldr	r0, [r0, #8]
   d416a:	2300      	movs	r3, #0
   d416c:	b138      	cbz	r0, d417e <_ZN5Timer5_stopEjb+0x18>
   d416e:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4172:	2102      	movs	r1, #2
   d4174:	f000 fc14 	bl	d49a0 <os_timer_change>
   d4178:	fab0 f080 	clz	r0, r0
   d417c:	0940      	lsrs	r0, r0, #5
    }
   d417e:	b003      	add	sp, #12
   d4180:	f85d fb04 	ldr.w	pc, [sp], #4

000d4184 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4184:	b538      	push	{r3, r4, r5, lr}
   d4186:	4b10      	ldr	r3, [pc, #64]	; (d41c8 <_ZN5TimerD1Ev+0x44>)
   d4188:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d418a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d418c:	4604      	mov	r4, r0
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d418e:	b1a3      	cbz	r3, d41ba <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4194:	2200      	movs	r2, #0
   d4196:	f7ff ffe6 	bl	d4166 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d419a:	2100      	movs	r1, #0
   d419c:	68a0      	ldr	r0, [r4, #8]
   d419e:	f000 fc2f 	bl	d4a00 <os_timer_set_id>
            while (running) {
   d41a2:	7923      	ldrb	r3, [r4, #4]
   d41a4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d41a8:	b113      	cbz	r3, d41b0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d41aa:	f000 fbc1 	bl	d4930 <os_thread_yield>
   d41ae:	e7f8      	b.n	d41a2 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d41b0:	4629      	mov	r1, r5
   d41b2:	68a0      	ldr	r0, [r4, #8]
   d41b4:	f000 fbe4 	bl	d4980 <os_timer_destroy>
            handle = nullptr;
   d41b8:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d41ba:	f104 000c 	add.w	r0, r4, #12
   d41be:	f7ff ffc9 	bl	d4154 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41c2:	4620      	mov	r0, r4
   d41c4:	bd38      	pop	{r3, r4, r5, pc}
   d41c6:	bf00      	nop
   d41c8:	000d83ac 	.word	0x000d83ac

000d41cc <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d41cc:	b510      	push	{r4, lr}
   d41ce:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41d0:	f7ff ffd8 	bl	d4184 <_ZN5TimerD1Ev>
   d41d4:	4620      	mov	r0, r4
   d41d6:	211c      	movs	r1, #28
   d41d8:	f003 faa0 	bl	d771c <_ZdlPvj>
   d41dc:	4620      	mov	r0, r4
   d41de:	bd10      	pop	{r4, pc}

000d41e0 <setup>:

void setup() {
   d41e0:	b530      	push	{r4, r5, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41e2:	2001      	movs	r0, #1
   d41e4:	b085      	sub	sp, #20
   d41e6:	f000 fd43 	bl	d4c70 <set_system_mode>
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d41ea:	2400      	movs	r4, #0
        conn_prop.size = sizeof(conn_prop);
   d41ec:	2308      	movs	r3, #8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d41ee:	aa02      	add	r2, sp, #8
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d41f0:	2501      	movs	r5, #1
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d41f2:	f644 6120 	movw	r1, #20000	; 0x4e20
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d41f6:	9402      	str	r4, [sp, #8]
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d41f8:	4620      	mov	r0, r4

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d41fa:	f8ad 3008 	strh.w	r3, [sp, #8]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d41fe:	4623      	mov	r3, r4
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4200:	9503      	str	r5, [sp, #12]
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4202:	f000 fdeb 	bl	d4ddc <spark_set_connection_property>

  SYSTEM_MODE(AUTOMATIC);
  Particle.keepAlive(20);
  Serial.begin(115200);
   d4206:	f002 f9ed 	bl	d65e4 <_Z16_fetch_usbserialv>
   d420a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d420e:	f002 f9dd 	bl	d65cc <_ZN9USBSerial5beginEl>
  pinMode(led2, OUTPUT); // output for triggered led
   d4212:	4b13      	ldr	r3, [pc, #76]	; (d4260 <setup+0x80>)
   d4214:	4629      	mov	r1, r5
   d4216:	8818      	ldrh	r0, [r3, #0]
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4218:	4d12      	ldr	r5, [pc, #72]	; (d4264 <setup+0x84>)
   d421a:	f003 f9ed 	bl	d75f8 <pinMode>
  BLE.setTxPower(-8); // Use lower power // Use lower power -20, -16, -12, -8, -4, 0, 4, 8.
   d421e:	f001 fadf 	bl	d57e0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4222:	f06f 0107 	mvn.w	r1, #7
   d4226:	f001 faf9 	bl	d581c <_ZNK8particle14BleLocalDevice10setTxPowerEa>
   d422a:	4622      	mov	r2, r4
   d422c:	4621      	mov	r1, r4
   d422e:	4628      	mov	r0, r5
   d4230:	f7ff ff99 	bl	d4166 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4234:	68a8      	ldr	r0, [r5, #8]
   d4236:	b140      	cbz	r0, d424a <setup+0x6a>
   d4238:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d423c:	9300      	str	r3, [sp, #0]
   d423e:	9401      	str	r4, [sp, #4]
   d4240:	4623      	mov	r3, r4
   d4242:	4622      	mov	r2, r4
   d4244:	4621      	mov	r1, r4
   d4246:	f000 fbab 	bl	d49a0 <os_timer_change>
  //Particle.function("reset", cloudResetFunction);//Remote Reset Particle Function, to reset device from the cloud
  timer.start(); // start timer to send info to ubidots once per hour or whatever its set to
  //ubidots.setDebug(true);  // Uncomment this line for printing debug messages
  Mesh.subscribe("Detonate", DetonateAction);
   d424a:	4a07      	ldr	r2, [pc, #28]	; (d4268 <setup+0x88>)
   d424c:	4907      	ldr	r1, [pc, #28]	; (d426c <setup+0x8c>)
   d424e:	4808      	ldr	r0, [pc, #32]	; (d4270 <setup+0x90>)
   d4250:	f002 fdfe 	bl	d6e50 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  pinMode(BATT, INPUT);
   d4254:	2100      	movs	r1, #0
   d4256:	2018      	movs	r0, #24
   d4258:	f003 f9ce 	bl	d75f8 <pinMode>
   Serial.printf("dev_name: %s\n",dev_name);
  memcpy (VARIABLE_LABEL,dev_name,sizeof(dev_name));

  softDelay(1000);
  Serial.printf("VARIABLE_LABEL: %s\n",VARIABLE_LABEL);*/
}
   d425c:	b005      	add	sp, #20
   d425e:	bd30      	pop	{r4, r5, pc}
   d4260:	2003e1d4 	.word	0x2003e1d4
   d4264:	2003e29c 	.word	0x2003e29c
   d4268:	000d42c9 	.word	0x000d42c9
   d426c:	000d83c8 	.word	0x000d83c8
   d4270:	2003e53c 	.word	0x2003e53c

000d4274 <_Z9softDelaym>:
//rebootSync = millis();
//return 0;
//}

//Softdelay function
inline void softDelay(uint32_t msDelay){
   d4274:	b570      	push	{r4, r5, r6, lr}
   d4276:	4606      	mov	r6, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4278:	f000 fb1e 	bl	d48b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d427c:	4c06      	ldr	r4, [pc, #24]	; (d4298 <_Z9softDelaym+0x24>)
   d427e:	4605      	mov	r5, r0
   d4280:	f000 fb1a 	bl	d48b8 <HAL_Timer_Get_Milli_Seconds>
 for (uint32_t ms = millis(); 
   d4284:	1b40      	subs	r0, r0, r5
   d4286:	42b0      	cmp	r0, r6
   d4288:	d205      	bcs.n	d4296 <_Z9softDelaym+0x22>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d428a:	f000 fb15 	bl	d48b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d428e:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4290:	f000 fd7c 	bl	d4d8c <spark_process>
   d4294:	e7f4      	b.n	d4280 <_Z9softDelaym+0xc>
   d4296:	bd70      	pop	{r4, r5, r6, pc}
   d4298:	2003e730 	.word	0x2003e730

000d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d429c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d429e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42a0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42a2:	b17c      	cbz	r4, d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42a4:	6863      	ldr	r3, [r4, #4]
   d42a6:	3b01      	subs	r3, #1
   d42a8:	6063      	str	r3, [r4, #4]
   d42aa:	b95b      	cbnz	r3, d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42ac:	6823      	ldr	r3, [r4, #0]
   d42ae:	4620      	mov	r0, r4
   d42b0:	689b      	ldr	r3, [r3, #8]
   d42b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42b4:	68a3      	ldr	r3, [r4, #8]
   d42b6:	3b01      	subs	r3, #1
   d42b8:	60a3      	str	r3, [r4, #8]
   d42ba:	b91b      	cbnz	r3, d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42bc:	6823      	ldr	r3, [r4, #0]
   d42be:	4620      	mov	r0, r4
   d42c0:	68db      	ldr	r3, [r3, #12]
   d42c2:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42c4:	4628      	mov	r0, r5
   d42c6:	bd38      	pop	{r3, r4, r5, pc}

000d42c8 <_Z14DetonateActionPKcS0_>:

  softDelay(5000);
}

//Custom Functions
void DetonateAction(const char *event, const char *data){
   d42c8:	b530      	push	{r4, r5, lr}
   d42ca:	460c      	mov	r4, r1
   d42cc:	b085      	sub	sp, #20
    
   if (strcmp (data, "Boom")==0){ 
   d42ce:	4924      	ldr	r1, [pc, #144]	; (d4360 <_Z14DetonateActionPKcS0_+0x98>)
   d42d0:	4620      	mov	r0, r4
   d42d2:	f003 fff3 	bl	d82bc <strcmp>
   d42d6:	4605      	mov	r5, r0
   d42d8:	bb08      	cbnz	r0, d431e <_Z14DetonateActionPKcS0_+0x56>
      softDelay(3000);// wait 3 seconds 
   d42da:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d42de:	f7ff ffc9 	bl	d4274 <_Z9softDelaym>
      digitalWrite (led2, HIGH);
   d42e2:	4b20      	ldr	r3, [pc, #128]	; (d4364 <_Z14DetonateActionPKcS0_+0x9c>)
   d42e4:	2101      	movs	r1, #1
   d42e6:	8818      	ldrh	r0, [r3, #0]
   d42e8:	f003 f997 	bl	d761a <digitalWrite>
      DetonateSatus=1; // shows it has detonated
   d42ec:	4b1e      	ldr	r3, [pc, #120]	; (d4368 <_Z14DetonateActionPKcS0_+0xa0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42ee:	491f      	ldr	r1, [pc, #124]	; (d436c <_Z14DetonateActionPKcS0_+0xa4>)
   d42f0:	2201      	movs	r2, #1
   d42f2:	701a      	strb	r2, [r3, #0]
   d42f4:	4b1e      	ldr	r3, [pc, #120]	; (d4370 <_Z14DetonateActionPKcS0_+0xa8>)
   d42f6:	781b      	ldrb	r3, [r3, #0]
   d42f8:	f88d 3000 	strb.w	r3, [sp]
   d42fc:	462a      	mov	r2, r5
   d42fe:	233c      	movs	r3, #60	; 0x3c
   d4300:	a802      	add	r0, sp, #8
   d4302:	f001 ff03 	bl	d610c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4306:	a803      	add	r0, sp, #12
   d4308:	f7ff ffc8 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     
      Particle.publish("BOOM!",PRIVATE);
      Mesh.publish ("Detonate_ack","Boom_ack"); // publish to all subscriber to detonate
   d430c:	4a19      	ldr	r2, [pc, #100]	; (d4374 <_Z14DetonateActionPKcS0_+0xac>)
   d430e:	491a      	ldr	r1, [pc, #104]	; (d4378 <_Z14DetonateActionPKcS0_+0xb0>)
   d4310:	481a      	ldr	r0, [pc, #104]	; (d437c <_Z14DetonateActionPKcS0_+0xb4>)
   d4312:	f002 fd25 	bl	d6d60 <_ZN5spark11MeshPublish7publishEPKcS2_>
      softDelay(3000);
   d4316:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d431a:	f7ff ffab 	bl	d4274 <_Z9softDelaym>
    }
   //Serial.println (data);
    if (strcmp (data, "Boom_reset")==0){  // turn led off as well as detonator voltage
   d431e:	4620      	mov	r0, r4
   d4320:	4917      	ldr	r1, [pc, #92]	; (d4380 <_Z14DetonateActionPKcS0_+0xb8>)
   d4322:	f003 ffcb 	bl	d82bc <strcmp>
   d4326:	4604      	mov	r4, r0
   d4328:	b9c0      	cbnz	r0, d435c <_Z14DetonateActionPKcS0_+0x94>
      digitalWrite (led2, LOW);
   d432a:	4b0e      	ldr	r3, [pc, #56]	; (d4364 <_Z14DetonateActionPKcS0_+0x9c>)
   d432c:	4601      	mov	r1, r0
   d432e:	8818      	ldrh	r0, [r3, #0]
   d4330:	f003 f973 	bl	d761a <digitalWrite>
      DetonateSatus=1; // shows it has detonated
   d4334:	4b0c      	ldr	r3, [pc, #48]	; (d4368 <_Z14DetonateActionPKcS0_+0xa0>)
   d4336:	4913      	ldr	r1, [pc, #76]	; (d4384 <_Z14DetonateActionPKcS0_+0xbc>)
   d4338:	2201      	movs	r2, #1
   d433a:	701a      	strb	r2, [r3, #0]
   d433c:	4b0c      	ldr	r3, [pc, #48]	; (d4370 <_Z14DetonateActionPKcS0_+0xa8>)
   d433e:	781b      	ldrb	r3, [r3, #0]
   d4340:	f88d 3000 	strb.w	r3, [sp]
   d4344:	4622      	mov	r2, r4
   d4346:	233c      	movs	r3, #60	; 0x3c
   d4348:	a802      	add	r0, sp, #8
   d434a:	f001 fedf 	bl	d610c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d434e:	a803      	add	r0, sp, #12
   d4350:	f7ff ffa4 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("BOOM_reset",PRIVATE);
      softDelay(2000);
   d4354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4358:	f7ff ff8c 	bl	d4274 <_Z9softDelaym>
    }
} 
   d435c:	b005      	add	sp, #20
   d435e:	bd30      	pop	{r4, r5, pc}
   d4360:	000d83d1 	.word	0x000d83d1
   d4364:	2003e1d4 	.word	0x2003e1d4
   d4368:	2003e278 	.word	0x2003e278
   d436c:	000d83d6 	.word	0x000d83d6
   d4370:	2003e266 	.word	0x2003e266
   d4374:	000d83dc 	.word	0x000d83dc
   d4378:	000d83e5 	.word	0x000d83e5
   d437c:	2003e53c 	.word	0x2003e53c
   d4380:	000d83f2 	.word	0x000d83f2
   d4384:	000d83fd 	.word	0x000d83fd

000d4388 <_Z22timerUbidotInformationv>:
     millis() - ms < msDelay;  
     Particle.process());
}

// get called by timer to send batt voltages a up to ubidot
void timerUbidotInformation(void){
   d4388:	b500      	push	{lr}
    
  float voltage = analogRead(BATT) * 0.0011224;
   d438a:	2018      	movs	r0, #24
     millis() - ms < msDelay;  
     Particle.process());
}

// get called by timer to send batt voltages a up to ubidot
void timerUbidotInformation(void){
   d438c:	b089      	sub	sp, #36	; 0x24
    
  float voltage = analogRead(BATT) * 0.0011224;
   d438e:	f003 f95d 	bl	d764c <analogRead>
  Particle.publish("voltage", String::format("%.2f",voltage), PRIVATE);
   d4392:	f003 fc73 	bl	d7c7c <__aeabi_i2d>
   d4396:	a315      	add	r3, pc, #84	; (adr r3, d43ec <_Z22timerUbidotInformationv+0x64>)
   d4398:	e9d3 2300 	ldrd	r2, r3, [r3]
   d439c:	f003 fcd4 	bl	d7d48 <__aeabi_dmul>
   d43a0:	f003 fee4 	bl	d816c <__aeabi_d2f>
   d43a4:	f003 fc7c 	bl	d7ca0 <__aeabi_f2d>
   d43a8:	4602      	mov	r2, r0
   d43aa:	460b      	mov	r3, r1
   d43ac:	a804      	add	r0, sp, #16
   d43ae:	490c      	ldr	r1, [pc, #48]	; (d43e0 <_Z22timerUbidotInformationv+0x58>)
   d43b0:	f001 f94e 	bl	d5650 <_ZN6String6formatEPKcz>
   d43b4:	4b0b      	ldr	r3, [pc, #44]	; (d43e4 <_Z22timerUbidotInformationv+0x5c>)
   d43b6:	9a04      	ldr	r2, [sp, #16]
   d43b8:	781b      	ldrb	r3, [r3, #0]
   d43ba:	490b      	ldr	r1, [pc, #44]	; (d43e8 <_Z22timerUbidotInformationv+0x60>)
   d43bc:	f88d 3000 	strb.w	r3, [sp]
   d43c0:	a802      	add	r0, sp, #8
   d43c2:	233c      	movs	r3, #60	; 0x3c
   d43c4:	f001 fea2 	bl	d610c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43c8:	a803      	add	r0, sp, #12
   d43ca:	f7ff ff67 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ce:	a804      	add	r0, sp, #16
   d43d0:	f001 f8e3 	bl	d559a <_ZN6StringD1Ev>
  //memcpy (VARIABLE_LABEL,dev_name,sizeof(dev_name));
  //Serial.printf("VARIABLE_LABEL is %s\n", VARIABLE_LABEL);
  //ubidots.add(VARIABLE_LABEL, voltage);
 // ubidots.meshPublishToUbidots("Ubidots"); // webhook its publishing to on particle consol
// Serial.printf("data %s", deviceName);
}
   d43d4:	b009      	add	sp, #36	; 0x24
   d43d6:	f85d fb04 	ldr.w	pc, [sp], #4
   d43da:	bf00      	nop
   d43dc:	f3af 8000 	nop.w
   d43e0:	000d8408 	.word	0x000d8408
   d43e4:	2003e266 	.word	0x2003e266
   d43e8:	000d840d 	.word	0x000d840d
   d43ec:	d2c10294 	.word	0xd2c10294
   d43f0:	3f5263af 	.word	0x3f5263af

000d43f4 <_Z15goGetDeviceNamev>:



void goGetDeviceName(void){
   d43f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d43f6:	2400      	movs	r4, #0
   d43f8:	4622      	mov	r2, r4
   d43fa:	9401      	str	r4, [sp, #4]
   d43fc:	9400      	str	r4, [sp, #0]
   d43fe:	2301      	movs	r3, #1
   d4400:	4917      	ldr	r1, [pc, #92]	; (d4460 <_Z15goGetDeviceNamev+0x6c>)
   d4402:	4818      	ldr	r0, [pc, #96]	; (d4464 <_Z15goGetDeviceNamev+0x70>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4404:	4e18      	ldr	r6, [pc, #96]	; (d4468 <_Z15goGetDeviceNamev+0x74>)
  Particle.subscribe("particle/device/name", Name_of_Device);
  //waitUntil(Particle.connected);
  Particle.publish("spark/device/name");
  softDelay(3000);
  Serial.printf("dev_name: %s\n",dev_name);
  strncpy(VARIABLE_LABEL,dev_name,sizeof(dev_name));
   d4406:	4d19      	ldr	r5, [pc, #100]	; (d446c <_Z15goGetDeviceNamev+0x78>)
   d4408:	f000 fce0 	bl	d4dcc <spark_subscribe>
   d440c:	4b18      	ldr	r3, [pc, #96]	; (d4470 <_Z15goGetDeviceNamev+0x7c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d440e:	4919      	ldr	r1, [pc, #100]	; (d4474 <_Z15goGetDeviceNamev+0x80>)
   d4410:	781b      	ldrb	r3, [r3, #0]
   d4412:	f88d 3000 	strb.w	r3, [sp]
   d4416:	4622      	mov	r2, r4
   d4418:	233c      	movs	r3, #60	; 0x3c
   d441a:	a802      	add	r0, sp, #8
   d441c:	f001 fe76 	bl	d610c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4420:	a803      	add	r0, sp, #12
   d4422:	f7ff ff3b 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  
  //waitUntil(Particle.connected);
  Particle.subscribe("particle/device/name", Name_of_Device);
  //waitUntil(Particle.connected);
  Particle.publish("spark/device/name");
  softDelay(3000);
   d4426:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d442a:	f7ff ff23 	bl	d4274 <_Z9softDelaym>
  Serial.printf("dev_name: %s\n",dev_name);
   d442e:	f002 f8d9 	bl	d65e4 <_Z16_fetch_usbserialv>
   d4432:	4633      	mov	r3, r6
   d4434:	4621      	mov	r1, r4
   d4436:	4a10      	ldr	r2, [pc, #64]	; (d4478 <_Z15goGetDeviceNamev+0x84>)
   d4438:	f001 fc40 	bl	d5cbc <_ZN5Print11printf_implEbPKcz>
  strncpy(VARIABLE_LABEL,dev_name,sizeof(dev_name));
   d443c:	4631      	mov	r1, r6
   d443e:	2220      	movs	r2, #32
   d4440:	4628      	mov	r0, r5
   d4442:	f003 ff85 	bl	d8350 <strncpy>

  softDelay(1000);
   d4446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d444a:	f7ff ff13 	bl	d4274 <_Z9softDelaym>
  Serial.printf("VARIABLE_LABEL: %s\n",VARIABLE_LABEL);
   d444e:	f002 f8c9 	bl	d65e4 <_Z16_fetch_usbserialv>
   d4452:	462b      	mov	r3, r5
   d4454:	4a09      	ldr	r2, [pc, #36]	; (d447c <_Z15goGetDeviceNamev+0x88>)
   d4456:	4621      	mov	r1, r4
   d4458:	f001 fc30 	bl	d5cbc <_ZN5Print11printf_implEbPKcz>

}
   d445c:	b004      	add	sp, #16
   d445e:	bd70      	pop	{r4, r5, r6, pc}
   d4460:	000d40d9 	.word	0x000d40d9
   d4464:	000d8415 	.word	0x000d8415
   d4468:	2003e279 	.word	0x2003e279
   d446c:	2003e246 	.word	0x2003e246
   d4470:	2003e245 	.word	0x2003e245
   d4474:	000d842a 	.word	0x000d842a
   d4478:	000d843c 	.word	0x000d843c
   d447c:	000d844a 	.word	0x000d844a

000d4480 <loop>:

  softDelay(1000);
  Serial.printf("VARIABLE_LABEL: %s\n",VARIABLE_LABEL);*/
}

void loop() {
   d4480:	b508      	push	{r3, lr}
 // if ((resetFlag) && (millis() - rebootSync >=  rebootDelayMillis)) {
 // do things here  before reset and then push the button
 //   Particle.publish("Debug", "Remote Reset Initiated", 300, PRIVATE);
 //   System.reset();
 // }
softDelay(20000);
   d4482:	f644 6020 	movw	r0, #20000	; 0x4e20
   d4486:	f7ff fef5 	bl	d4274 <_Z9softDelaym>
//if (getDeviceName==0){
  goGetDeviceName();
   d448a:	f7ff ffb3 	bl	d43f4 <_Z15goGetDeviceNamev>
//}


//Serial.printf("VARIABLE_LABEL: %s\n",VARIABLE_LABEL);

  softDelay(5000);
   d448e:	f241 3088 	movw	r0, #5000	; 0x1388
   d4492:	f7ff feef 	bl	d4274 <_Z9softDelaym>
   d4496:	bd08      	pop	{r3, pc}

000d4498 <_GLOBAL__sub_I_WEBHOOK_NAME>:
  strncpy(VARIABLE_LABEL,dev_name,sizeof(dev_name));

  softDelay(1000);
  Serial.printf("VARIABLE_LABEL: %s\n",VARIABLE_LABEL);

}
   d4498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d449c:	4b27      	ldr	r3, [pc, #156]	; (d453c <_GLOBAL__sub_I_WEBHOOK_NAME+0xa4>)
#define Xenon

/********************************************************************************************/
//Ubidots
const char* WEBHOOK_NAME = "Ubidots";
Ubidots ubidots("webhook", UBI_PARTICLE);
   d449e:	4c28      	ldr	r4, [pc, #160]	; (d4540 <_GLOBAL__sub_I_WEBHOOK_NAME+0xa8>)
   d44a0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; d456c <_GLOBAL__sub_I_WEBHOOK_NAME+0xd4>
   d44a4:	2500      	movs	r5, #0
   d44a6:	701d      	strb	r5, [r3, #0]
   d44a8:	4b26      	ldr	r3, [pc, #152]	; (d4544 <_GLOBAL__sub_I_WEBHOOK_NAME+0xac>)
  strncpy(VARIABLE_LABEL,dev_name,sizeof(dev_name));

  softDelay(1000);
  Serial.printf("VARIABLE_LABEL: %s\n",VARIABLE_LABEL);

}
   d44aa:	b088      	sub	sp, #32
   d44ac:	2701      	movs	r7, #1
   d44ae:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44b0:	f000 f982 	bl	d47b8 <HAL_Pin_Map>
   d44b4:	f000 fa00 	bl	d48b8 <HAL_Timer_Get_Milli_Seconds>
#define Xenon

/********************************************************************************************/
//Ubidots
const char* WEBHOOK_NAME = "Ubidots";
Ubidots ubidots("webhook", UBI_PARTICLE);
   d44b8:	2203      	movs	r2, #3
   d44ba:	4923      	ldr	r1, [pc, #140]	; (d4548 <_GLOBAL__sub_I_WEBHOOK_NAME+0xb0>)
   d44bc:	4620      	mov	r0, r4
   d44be:	f000 f8ab 	bl	d4618 <_ZN7UbidotsC1EPc11IotProtocol>
   d44c2:	4642      	mov	r2, r8
   d44c4:	4921      	ldr	r1, [pc, #132]	; (d454c <_GLOBAL__sub_I_WEBHOOK_NAME+0xb4>)
   d44c6:	4620      	mov	r0, r4
   d44c8:	f003 f91a 	bl	d7700 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d44cc:	4b20      	ldr	r3, [pc, #128]	; (d4550 <_GLOBAL__sub_I_WEBHOOK_NAME+0xb8>)
   d44ce:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d44d0:	ae04      	add	r6, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d44d2:	4c20      	ldr	r4, [pc, #128]	; (d4554 <_GLOBAL__sub_I_WEBHOOK_NAME+0xbc>)
   d44d4:	4b20      	ldr	r3, [pc, #128]	; (d4558 <_GLOBAL__sub_I_WEBHOOK_NAME+0xc0>)
   d44d6:	6023      	str	r3, [r4, #0]
   d44d8:	e896 0003 	ldmia.w	r6, {r0, r1}
   d44dc:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d44de:	f104 030c 	add.w	r3, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d44e2:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d44e6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d44ea:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d44ee:	e892 0003 	ldmia.w	r2, {r0, r1}
   d44f2:	e883 0003 	stmia.w	r3, {r0, r1}
   d44f6:	4b19      	ldr	r3, [pc, #100]	; (d455c <_GLOBAL__sub_I_WEBHOOK_NAME+0xc4>)
   d44f8:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d44fa:	69a3      	ldr	r3, [r4, #24]
   d44fc:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d44fe:	4b18      	ldr	r3, [pc, #96]	; (d4560 <_GLOBAL__sub_I_WEBHOOK_NAME+0xc8>)
   d4500:	61a3      	str	r3, [r4, #24]
   d4502:	7125      	strb	r5, [r4, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4504:	4623      	mov	r3, r4
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4506:	60a5      	str	r5, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4508:	4a16      	ldr	r2, [pc, #88]	; (d4564 <_GLOBAL__sub_I_WEBHOOK_NAME+0xcc>)
   d450a:	9501      	str	r5, [sp, #4]
   d450c:	f241 3188 	movw	r1, #5000	; 0x1388
   d4510:	9500      	str	r5, [sp, #0]
   d4512:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4516:	9506      	str	r5, [sp, #24]
   d4518:	f000 fa2a 	bl	d4970 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d451c:	4630      	mov	r0, r6
   d451e:	f7ff fe19 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
//Ubidots ubidots(UBIDOTS_TOKEN, UBI_INDUSTRIAL, UBI_MESH);
Timer timer(5000, timerUbidotInformation);// 5min timer to send info to ubidots
   d4522:	4642      	mov	r2, r8
   d4524:	4910      	ldr	r1, [pc, #64]	; (d4568 <_GLOBAL__sub_I_WEBHOOK_NAME+0xd0>)
   d4526:	4620      	mov	r0, r4
   d4528:	f003 f8ea 	bl	d7700 <__aeabi_atexit>
/********************************************************************************************
*********************************************************************************************
*********************************************************************************************/
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
   d452c:	4629      	mov	r1, r5
   d452e:	4638      	mov	r0, r7
   d4530:	f000 fba6 	bl	d4c80 <system_thread_set_state>
  strncpy(VARIABLE_LABEL,dev_name,sizeof(dev_name));

  softDelay(1000);
  Serial.printf("VARIABLE_LABEL: %s\n",VARIABLE_LABEL);

}
   d4534:	b008      	add	sp, #32
   d4536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d453a:	bf00      	nop
   d453c:	2003e245 	.word	0x2003e245
   d4540:	2003e268 	.word	0x2003e268
   d4544:	2003e266 	.word	0x2003e266
   d4548:	000d845e 	.word	0x000d845e
   d454c:	000d4635 	.word	0x000d4635
   d4550:	000d4389 	.word	0x000d4389
   d4554:	2003e29c 	.word	0x2003e29c
   d4558:	000d83ac 	.word	0x000d83ac
   d455c:	000d40bf 	.word	0x000d40bf
   d4560:	000d40bb 	.word	0x000d40bb
   d4564:	000d4119 	.word	0x000d4119
   d4568:	000d4185 	.word	0x000d4185
   d456c:	2003e240 	.word	0x2003e240

000d4570 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4570:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4572:	6984      	ldr	r4, [r0, #24]
   d4574:	4b0a      	ldr	r3, [pc, #40]	; (d45a0 <_ZN9TCPClientD1Ev+0x30>)
   d4576:	6003      	str	r3, [r0, #0]
   d4578:	4605      	mov	r5, r0
   d457a:	b17c      	cbz	r4, d459c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d457c:	6863      	ldr	r3, [r4, #4]
   d457e:	3b01      	subs	r3, #1
   d4580:	6063      	str	r3, [r4, #4]
   d4582:	b95b      	cbnz	r3, d459c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4584:	6823      	ldr	r3, [r4, #0]
   d4586:	4620      	mov	r0, r4
   d4588:	689b      	ldr	r3, [r3, #8]
   d458a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d458c:	68a3      	ldr	r3, [r4, #8]
   d458e:	3b01      	subs	r3, #1
   d4590:	60a3      	str	r3, [r4, #8]
   d4592:	b91b      	cbnz	r3, d459c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4594:	6823      	ldr	r3, [r4, #0]
   d4596:	4620      	mov	r0, r4
   d4598:	68db      	ldr	r3, [r3, #12]
   d459a:	4798      	blx	r3
   d459c:	4628      	mov	r0, r5
   d459e:	bd38      	pop	{r3, r4, r5, pc}
   d45a0:	000d8a94 	.word	0x000d8a94

000d45a4 <_ZN9TCPClientD0Ev>:
   d45a4:	b510      	push	{r4, lr}
   d45a6:	4604      	mov	r4, r0
   d45a8:	f7ff ffe2 	bl	d4570 <_ZN9TCPClientD1Ev>
   d45ac:	4620      	mov	r0, r4
   d45ae:	211c      	movs	r1, #28
   d45b0:	f003 f8b4 	bl	d771c <_ZdlPvj>
   d45b4:	4620      	mov	r0, r4
   d45b6:	bd10      	pop	{r4, pc}

000d45b8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d45b8:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d45ba:	4c06      	ldr	r4, [pc, #24]	; (d45d4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d45bc:	f000 f8fc 	bl	d47b8 <HAL_Pin_Map>
   d45c0:	4620      	mov	r0, r4
   d45c2:	f002 ff33 	bl	d742c <_ZN9TCPClientC1Ev>
   d45c6:	4620      	mov	r0, r4
   d45c8:	4a03      	ldr	r2, [pc, #12]	; (d45d8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d45ca:	4904      	ldr	r1, [pc, #16]	; (d45dc <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
   d45cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d45d0:	f003 b896 	b.w	d7700 <__aeabi_atexit>
   d45d4:	2003e2b8 	.word	0x2003e2b8
   d45d8:	2003e240 	.word	0x2003e240
   d45dc:	000d4571 	.word	0x000d4571

000d45e0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
   d45e0:	4b02      	ldr	r3, [pc, #8]	; (d45ec <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
   d45e2:	2200      	movs	r2, #0
   d45e4:	701a      	strb	r2, [r3, #0]
   d45e6:	f000 b8e7 	b.w	d47b8 <HAL_Pin_Map>
   d45ea:	bf00      	nop
   d45ec:	2003e2d4 	.word	0x2003e2d4

000d45f0 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d45f0:	b570      	push	{r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d45f2:	7303      	strb	r3, [r0, #12]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d45f4:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d45f6:	2050      	movs	r0, #80	; 0x50

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d45f8:	460e      	mov	r6, r1
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d45fa:	f000 fbff 	bl	d4dfc <malloc>
   d45fe:	60a0      	str	r0, [r4, #8]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d4600:	f44f 7082 	mov.w	r0, #260	; 0x104
   d4604:	f7ff fd49 	bl	d409a <_Znwj>
   d4608:	4605      	mov	r5, r0
   d460a:	b110      	cbz	r0, d4612 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x22>
   d460c:	4631      	mov	r1, r6
   d460e:	f000 f88a 	bl	d4726 <_ZN7UbiMeshC1EPc>
   d4612:	6025      	str	r5, [r4, #0]
   d4614:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4618 <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
   d4618:	b510      	push	{r4, lr}
   d461a:	2300      	movs	r3, #0
   d461c:	4604      	mov	r4, r0
   d461e:	7343      	strb	r3, [r0, #13]
   d4620:	7383      	strb	r3, [r0, #14]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
   d4622:	4613      	mov	r3, r2
   d4624:	4a02      	ldr	r2, [pc, #8]	; (d4630 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d4626:	f7ff ffe3 	bl	d45f0 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
   d462a:	4620      	mov	r0, r4
   d462c:	bd10      	pop	{r4, pc}
   d462e:	bf00      	nop
   d4630:	000d846e 	.word	0x000d846e

000d4634 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d4634:	b538      	push	{r3, r4, r5, lr}
   d4636:	4604      	mov	r4, r0
  free(_context);
   d4638:	6880      	ldr	r0, [r0, #8]
   d463a:	f000 fbe7 	bl	d4e0c <free>
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  delete _protocolMesh;
   d463e:	6825      	ldr	r5, [r4, #0]
   d4640:	b13d      	cbz	r5, d4652 <_ZN7UbidotsD1Ev+0x1e>
   d4642:	4628      	mov	r0, r5
   d4644:	f000 f882 	bl	d474c <_ZN7UbiMeshD1Ev>
   d4648:	f44f 7182 	mov.w	r1, #260	; 0x104
   d464c:	4628      	mov	r0, r5
   d464e:	f003 f865 	bl	d771c <_ZdlPvj>
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
#endif
}
   d4652:	4620      	mov	r0, r4
   d4654:	bd38      	pop	{r3, r4, r5, pc}

000d4656 <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
      }
    }
  }
   d4656:	b508      	push	{r3, lr}
   d4658:	f000 f8ae 	bl	d47b8 <HAL_Pin_Map>
   d465c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4660:	f000 b92a 	b.w	d48b8 <HAL_Timer_Get_Milli_Seconds>

000d4664 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d4664:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d4666:	4c06      	ldr	r4, [pc, #24]	; (d4680 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d4668:	f000 f8a6 	bl	d47b8 <HAL_Pin_Map>
   d466c:	4620      	mov	r0, r4
   d466e:	f002 fedd 	bl	d742c <_ZN9TCPClientC1Ev>
   d4672:	4620      	mov	r0, r4
   d4674:	4a03      	ldr	r2, [pc, #12]	; (d4684 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d4676:	4904      	ldr	r1, [pc, #16]	; (d4688 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
   d4678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d467c:	f003 b840 	b.w	d7700 <__aeabi_atexit>
   d4680:	2003e2d8 	.word	0x2003e2d8
   d4684:	2003e240 	.word	0x2003e240
   d4688:	000d4571 	.word	0x000d4571

000d468c <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d468c:	b510      	push	{r4, lr}
   d468e:	4b06      	ldr	r3, [pc, #24]	; (d46a8 <_ZN3UDPD1Ev+0x1c>)
   d4690:	6003      	str	r3, [r0, #0]
   d4692:	3364      	adds	r3, #100	; 0x64
   d4694:	4604      	mov	r4, r0
   d4696:	6103      	str	r3, [r0, #16]
   d4698:	f000 fce9 	bl	d506e <_ZN3UDP4stopEv>
   d469c:	4620      	mov	r0, r4
   d469e:	f000 ff0f 	bl	d54c0 <_ZN3UDP13releaseBufferEv>
   d46a2:	4620      	mov	r0, r4
   d46a4:	bd10      	pop	{r4, pc}
   d46a6:	bf00      	nop
   d46a8:	000d8628 	.word	0x000d8628

000d46ac <_ZN3UDPD0Ev>:
   d46ac:	b510      	push	{r4, lr}
   d46ae:	4604      	mov	r4, r0
   d46b0:	f7ff ffec 	bl	d468c <_ZN3UDPD1Ev>
   d46b4:	4620      	mov	r0, r4
   d46b6:	214c      	movs	r1, #76	; 0x4c
   d46b8:	f003 f830 	bl	d771c <_ZdlPvj>
   d46bc:	4620      	mov	r0, r4
   d46be:	bd10      	pop	{r4, pc}

000d46c0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
   d46c0:	b570      	push	{r4, r5, r6, lr}
   d46c2:	4d10      	ldr	r5, [pc, #64]	; (d4704 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d46c4:	4c10      	ldr	r4, [pc, #64]	; (d4708 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d46c6:	4e11      	ldr	r6, [pc, #68]	; (d470c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d46c8:	f000 f876 	bl	d47b8 <HAL_Pin_Map>
   d46cc:	4628      	mov	r0, r5
   d46ce:	f002 fead 	bl	d742c <_ZN9TCPClientC1Ev>
   d46d2:	4628      	mov	r0, r5
   d46d4:	4d0e      	ldr	r5, [pc, #56]	; (d4710 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d46d6:	4622      	mov	r2, r4
   d46d8:	4631      	mov	r1, r6
   d46da:	f003 f811 	bl	d7700 <__aeabi_atexit>
   d46de:	4628      	mov	r0, r5
   d46e0:	f002 fea4 	bl	d742c <_ZN9TCPClientC1Ev>
   d46e4:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d46e6:	4d0b      	ldr	r5, [pc, #44]	; (d4714 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
   d46e8:	4622      	mov	r2, r4
   d46ea:	4631      	mov	r1, r6
   d46ec:	f003 f808 	bl	d7700 <__aeabi_atexit>
   d46f0:	4628      	mov	r0, r5
   d46f2:	f000 fec7 	bl	d5484 <_ZN3UDPC1Ev>
   d46f6:	4622      	mov	r2, r4
   d46f8:	4628      	mov	r0, r5
   d46fa:	4907      	ldr	r1, [pc, #28]	; (d4718 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
   d46fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4700:	f002 bffe 	b.w	d7700 <__aeabi_atexit>
   d4704:	2003e310 	.word	0x2003e310
   d4708:	2003e240 	.word	0x2003e240
   d470c:	000d4571 	.word	0x000d4571
   d4710:	2003e2f4 	.word	0x2003e2f4
   d4714:	2003e32c 	.word	0x2003e32c
   d4718:	000d468d 	.word	0x000d468d

000d471c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d471c:	2200      	movs	r2, #0
   d471e:	4611      	mov	r1, r2
   d4720:	6840      	ldr	r0, [r0, #4]
   d4722:	f000 bafb 	b.w	d4d1c <network_ready>

000d4726 <_ZN7UbiMeshC1EPc>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d4726:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4728:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d472a:	4668      	mov	r0, sp
   d472c:	f000 fb3e 	bl	d4dac <spark_deviceID>
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d4730:	9802      	ldr	r0, [sp, #8]
   d4732:	3001      	adds	r0, #1
   d4734:	f7ff fcb3 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d4738:	9900      	ldr	r1, [sp, #0]
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d473a:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d473c:	f003 fdc8 	bl	d82d0 <strcpy>
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
   d4740:	4668      	mov	r0, sp
   d4742:	f000 ff2a 	bl	d559a <_ZN6StringD1Ev>
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
};
   d4746:	4620      	mov	r0, r4
   d4748:	b004      	add	sp, #16
   d474a:	bd10      	pop	{r4, pc}

000d474c <_ZN7UbiMeshD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

UbiMesh::~UbiMesh() { delete[] _default_device_label; }
   d474c:	b510      	push	{r4, lr}
   d474e:	4604      	mov	r4, r0
   d4750:	6800      	ldr	r0, [r0, #0]
   d4752:	b108      	cbz	r0, d4758 <_ZN7UbiMeshD1Ev+0xc>
   d4754:	f7ff fca7 	bl	d40a6 <_ZdaPv>
   d4758:	4620      	mov	r0, r4
   d475a:	bd10      	pop	{r4, pc}

000d475c <_GLOBAL__sub_I__ZN7UbiMeshC2EPc>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
   d475c:	b508      	push	{r3, lr}
   d475e:	f000 f82b 	bl	d47b8 <HAL_Pin_Map>
   d4762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4766:	f000 b8a7 	b.w	d48b8 <HAL_Timer_Get_Milli_Seconds>
	...

000d476c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d476c:	b510      	push	{r4, lr}
   d476e:	4c06      	ldr	r4, [pc, #24]	; (d4788 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d4770:	f000 f822 	bl	d47b8 <HAL_Pin_Map>
   d4774:	4620      	mov	r0, r4
   d4776:	f000 fe85 	bl	d5484 <_ZN3UDPC1Ev>
   d477a:	4620      	mov	r0, r4
   d477c:	4a03      	ldr	r2, [pc, #12]	; (d478c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d477e:	4904      	ldr	r1, [pc, #16]	; (d4790 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
   d4780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4784:	f002 bfbc 	b.w	d7700 <__aeabi_atexit>
   d4788:	2003e378 	.word	0x2003e378
   d478c:	2003e240 	.word	0x2003e240
   d4790:	000d468d 	.word	0x000d468d

000d4794 <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
   d4794:	f000 b810 	b.w	d47b8 <HAL_Pin_Map>

000d4798 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <netdb_freeaddrinfo+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	689b      	ldr	r3, [r3, #8]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030268 	.word	0x00030268

000d47a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <netdb_getaddrinfo+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	68db      	ldr	r3, [r3, #12]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030268 	.word	0x00030268

000d47b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_Pin_Map+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	681b      	ldr	r3, [r3, #0]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	0003022c 	.word	0x0003022c

000d47c8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_Validate_Pin_Function+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	685b      	ldr	r3, [r3, #4]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	0003022c 	.word	0x0003022c

000d47d8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_Pin_Mode+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	689b      	ldr	r3, [r3, #8]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	0003022c 	.word	0x0003022c

000d47e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <HAL_Get_Pin_Mode+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	68db      	ldr	r3, [r3, #12]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	0003022c 	.word	0x0003022c

000d47f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <HAL_GPIO_Write+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	691b      	ldr	r3, [r3, #16]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	0003022c 	.word	0x0003022c

000d4808 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_ADC_Read+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	0003022c 	.word	0x0003022c

000d4818 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_SPI_Init+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	69db      	ldr	r3, [r3, #28]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030230 	.word	0x00030230

000d4828 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_SPI_Is_Enabled+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6a1b      	ldr	r3, [r3, #32]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030230 	.word	0x00030230

000d4838 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <if_name_to_index+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	691b      	ldr	r3, [r3, #16]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	0003026c 	.word	0x0003026c

000d4848 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <if_index_to_name+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	695b      	ldr	r3, [r3, #20]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003026c 	.word	0x0003026c

000d4858 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <if_get_by_index+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	699b      	ldr	r3, [r3, #24]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003026c 	.word	0x0003026c

000d4868 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <if_get_addrs+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003026c 	.word	0x0003026c

000d4878 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <if_free_if_addrs+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003026c 	.word	0x0003026c

000d4888 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_RNG_GetRandomNumber+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	685b      	ldr	r3, [r3, #4]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030218 	.word	0x00030218

000d4898 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_Delay_Milliseconds+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	689b      	ldr	r3, [r3, #8]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030218 	.word	0x00030218

000d48a8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_Delay_Microseconds+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	68db      	ldr	r3, [r3, #12]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030218 	.word	0x00030218

000d48b8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	695b      	ldr	r3, [r3, #20]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030218 	.word	0x00030218

000d48c8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <hal_ble_stack_init+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	689b      	ldr	r3, [r3, #8]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030274 	.word	0x00030274

000d48d8 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <hal_ble_gap_set_tx_power+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030274 	.word	0x00030274

000d48e8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b03      	ldr	r3, [pc, #12]	; (d48f8 <hal_ble_gap_disconnect+0x10>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d48f2:	9301      	str	r3, [sp, #4]
   d48f4:	bd08      	pop	{r3, pc}
   d48f6:	0000      	.short	0x0000
   d48f8:	00030274 	.word	0x00030274

000d48fc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b03      	ldr	r3, [pc, #12]	; (d490c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4906:	9301      	str	r3, [sp, #4]
   d4908:	bd08      	pop	{r3, pc}
   d490a:	0000      	.short	0x0000
   d490c:	00030274 	.word	0x00030274

000d4910 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <os_thread_create+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	685b      	ldr	r3, [r3, #4]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030248 	.word	0x00030248

000d4920 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <os_thread_is_current+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	689b      	ldr	r3, [r3, #8]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030248 	.word	0x00030248

000d4930 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <os_thread_yield+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	68db      	ldr	r3, [r3, #12]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030248 	.word	0x00030248

000d4940 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <os_thread_join+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	691b      	ldr	r3, [r3, #16]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030248 	.word	0x00030248

000d4950 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <os_thread_cleanup+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	695b      	ldr	r3, [r3, #20]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030248 	.word	0x00030248

000d4960 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <os_thread_scheduling+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	69db      	ldr	r3, [r3, #28]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030248 	.word	0x00030248

000d4970 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <os_timer_create+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	6a1b      	ldr	r3, [r3, #32]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030248 	.word	0x00030248

000d4980 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <os_timer_destroy+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030248 	.word	0x00030248

000d4990 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <os_timer_get_id+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030248 	.word	0x00030248

000d49a0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <os_timer_change+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030248 	.word	0x00030248

000d49b0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <os_mutex_create+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030248 	.word	0x00030248

000d49c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <os_mutex_recursive_create+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030248 	.word	0x00030248

000d49d0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <os_mutex_recursive_lock+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030248 	.word	0x00030248

000d49e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <os_mutex_recursive_unlock+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030248 	.word	0x00030248

000d49f0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <os_thread_exit+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030248 	.word	0x00030248

000d4a00 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <os_timer_set_id+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030248 	.word	0x00030248

000d4a10 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <inet_inet_ntop+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	695b      	ldr	r3, [r3, #20]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030264 	.word	0x00030264

000d4a20 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <inet_inet_pton+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	699b      	ldr	r3, [r3, #24]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030264 	.word	0x00030264

000d4a30 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <inet_htonl+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6a1b      	ldr	r3, [r3, #32]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030264 	.word	0x00030264

000d4a40 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <inet_ntohs+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030264 	.word	0x00030264

000d4a50 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <inet_htons+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030264 	.word	0x00030264

000d4a60 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <HAL_USART_Init+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	681b      	ldr	r3, [r3, #0]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	0003023c 	.word	0x0003023c

000d4a70 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_USART_Write_Data+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	68db      	ldr	r3, [r3, #12]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	0003023c 	.word	0x0003023c

000d4a80 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_USART_Available_Data+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	691b      	ldr	r3, [r3, #16]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003023c 	.word	0x0003023c

000d4a90 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USART_Read_Data+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	695b      	ldr	r3, [r3, #20]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003023c 	.word	0x0003023c

000d4aa0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USART_Peek_Data+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	699b      	ldr	r3, [r3, #24]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003023c 	.word	0x0003023c

000d4ab0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USART_Flush_Data+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	69db      	ldr	r3, [r3, #28]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003023c 	.word	0x0003023c

000d4ac0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USART_Is_Enabled+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6a1b      	ldr	r3, [r3, #32]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003023c 	.word	0x0003023c

000d4ad0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USART_Available_Data_For_Write+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003023c 	.word	0x0003023c

000d4ae0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_I2C_Write_Data+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6a1b      	ldr	r3, [r3, #32]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030228 	.word	0x00030228

000d4af0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_I2C_Available_Data+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030228 	.word	0x00030228

000d4b00 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_I2C_Read_Data+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030228 	.word	0x00030228

000d4b10 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_I2C_Peek_Data+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030228 	.word	0x00030228

000d4b20 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <HAL_I2C_Flush_Data+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030228 	.word	0x00030228

000d4b30 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <HAL_I2C_Is_Enabled+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030228 	.word	0x00030228

000d4b40 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <HAL_I2C_Init+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030228 	.word	0x00030228

000d4b50 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <sock_bind+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	685b      	ldr	r3, [r3, #4]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030238 	.word	0x00030238

000d4b60 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <sock_setsockopt+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	699b      	ldr	r3, [r3, #24]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030238 	.word	0x00030238

000d4b70 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <sock_close+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	69db      	ldr	r3, [r3, #28]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030238 	.word	0x00030238

000d4b80 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <sock_connect+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	6a1b      	ldr	r3, [r3, #32]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030238 	.word	0x00030238

000d4b90 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <sock_recv+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030238 	.word	0x00030238

000d4ba0 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <sock_recvfrom+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030238 	.word	0x00030238

000d4bb0 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <sock_send+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030238 	.word	0x00030238

000d4bc0 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <sock_sendto+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030238 	.word	0x00030238

000d4bd0 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <sock_socket+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030238 	.word	0x00030238

000d4be0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <HAL_USB_USART_Init+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	681b      	ldr	r3, [r3, #0]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	0003024c 	.word	0x0003024c

000d4bf0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <HAL_USB_USART_Begin+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	685b      	ldr	r3, [r3, #4]
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	0003024c 	.word	0x0003024c

000d4c00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <HAL_USB_USART_Available_Data+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	691b      	ldr	r3, [r3, #16]
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	0003024c 	.word	0x0003024c

000d4c10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	695b      	ldr	r3, [r3, #20]
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	0003024c 	.word	0x0003024c

000d4c20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <HAL_USB_USART_Receive_Data+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	699b      	ldr	r3, [r3, #24]
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	0003024c 	.word	0x0003024c

000d4c30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <HAL_USB_USART_Send_Data+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	69db      	ldr	r3, [r3, #28]
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	0003024c 	.word	0x0003024c

000d4c40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <HAL_USB_USART_Flush_Data+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	6a1b      	ldr	r3, [r3, #32]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	0003024c 	.word	0x0003024c

000d4c50 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <panic_+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030260 	.word	0x00030260

000d4c60 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <log_message+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030260 	.word	0x00030260

000d4c70 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <set_system_mode+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	685b      	ldr	r3, [r3, #4]
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030220 	.word	0x00030220

000d4c80 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <system_thread_set_state+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	00030220 	.word	0x00030220

000d4c90 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <application_thread_current+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030220 	.word	0x00030220

000d4ca0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <application_thread_invoke+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030220 	.word	0x00030220

000d4cb0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b03      	ldr	r3, [pc, #12]	; (d4cc0 <system_ctrl_set_app_request_handler+0x10>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4cba:	9301      	str	r3, [sp, #4]
   d4cbc:	bd08      	pop	{r3, pc}
   d4cbe:	0000      	.short	0x0000
   d4cc0:	00030220 	.word	0x00030220

000d4cc4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b03      	ldr	r3, [pc, #12]	; (d4cd4 <system_ctrl_set_result+0x10>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cce:	9301      	str	r3, [sp, #4]
   d4cd0:	bd08      	pop	{r3, pc}
   d4cd2:	0000      	.short	0x0000
   d4cd4:	00030220 	.word	0x00030220

000d4cd8 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b03      	ldr	r3, [pc, #12]	; (d4ce8 <system_invoke_event_handler+0x10>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4ce2:	9301      	str	r3, [sp, #4]
   d4ce4:	bd08      	pop	{r3, pc}
   d4ce6:	0000      	.short	0x0000
   d4ce8:	00030220 	.word	0x00030220

000d4cec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <network_connect+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	685b      	ldr	r3, [r3, #4]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030240 	.word	0x00030240

000d4cfc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <network_connecting+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	689b      	ldr	r3, [r3, #8]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030240 	.word	0x00030240

000d4d0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <network_disconnect+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	68db      	ldr	r3, [r3, #12]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030240 	.word	0x00030240

000d4d1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <network_ready+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	691b      	ldr	r3, [r3, #16]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030240 	.word	0x00030240

000d4d2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <network_on+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	695b      	ldr	r3, [r3, #20]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030240 	.word	0x00030240

000d4d3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <network_off+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	699b      	ldr	r3, [r3, #24]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030240 	.word	0x00030240

000d4d4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <network_listen+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	69db      	ldr	r3, [r3, #28]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030240 	.word	0x00030240

000d4d5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <network_listening+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	6a1b      	ldr	r3, [r3, #32]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030240 	.word	0x00030240

000d4d6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <network_set_listen_timeout+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030240 	.word	0x00030240

000d4d7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <network_get_listen_timeout+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030240 	.word	0x00030240

000d4d8c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <spark_process+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	689b      	ldr	r3, [r3, #8]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030244 	.word	0x00030244

000d4d9c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <spark_cloud_flag_connected+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	695b      	ldr	r3, [r3, #20]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030244 	.word	0x00030244

000d4dac <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <spark_deviceID+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	69db      	ldr	r3, [r3, #28]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030244 	.word	0x00030244

000d4dbc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <spark_send_event+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	6a1b      	ldr	r3, [r3, #32]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030244 	.word	0x00030244

000d4dcc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <spark_subscribe+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030244 	.word	0x00030244

000d4ddc <spark_set_connection_property>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <spark_set_connection_property+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030244 	.word	0x00030244

000d4dec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030244 	.word	0x00030244

000d4dfc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <malloc+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	681b      	ldr	r3, [r3, #0]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003021c 	.word	0x0003021c

000d4e0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <free+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	685b      	ldr	r3, [r3, #4]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003021c 	.word	0x0003021c

000d4e1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <realloc+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	689b      	ldr	r3, [r3, #8]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003021c 	.word	0x0003021c

000d4e2c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <vsnprintf+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003021c 	.word	0x0003021c

000d4e3c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <abort+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003021c 	.word	0x0003021c

000d4e4c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <_malloc_r+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003021c 	.word	0x0003021c

000d4e5c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <__errno+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	0003021c 	.word	0x0003021c

000d4e6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e6c:	2200      	movs	r2, #0
   d4e6e:	4611      	mov	r1, r2
   d4e70:	6840      	ldr	r0, [r0, #4]
   d4e72:	f7ff bf73 	b.w	d4d5c <network_listening>

000d4e76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e76:	2200      	movs	r2, #0
   d4e78:	4611      	mov	r1, r2
   d4e7a:	6840      	ldr	r0, [r0, #4]
   d4e7c:	f7ff bf7e 	b.w	d4d7c <network_get_listen_timeout>

000d4e80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e80:	2200      	movs	r2, #0
   d4e82:	6840      	ldr	r0, [r0, #4]
   d4e84:	f7ff bf72 	b.w	d4d6c <network_set_listen_timeout>

000d4e88 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e88:	2200      	movs	r2, #0
   d4e8a:	f081 0101 	eor.w	r1, r1, #1
   d4e8e:	6840      	ldr	r0, [r0, #4]
   d4e90:	f7ff bf5c 	b.w	d4d4c <network_listen>

000d4e94 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4e94:	2300      	movs	r3, #0
   d4e96:	461a      	mov	r2, r3
   d4e98:	4619      	mov	r1, r3
   d4e9a:	6840      	ldr	r0, [r0, #4]
   d4e9c:	f7ff bf4e 	b.w	d4d3c <network_off>

000d4ea0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ea0:	2300      	movs	r3, #0
   d4ea2:	461a      	mov	r2, r3
   d4ea4:	4619      	mov	r1, r3
   d4ea6:	6840      	ldr	r0, [r0, #4]
   d4ea8:	f7ff bf40 	b.w	d4d2c <network_on>

000d4eac <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4eac:	2200      	movs	r2, #0
   d4eae:	4611      	mov	r1, r2
   d4eb0:	6840      	ldr	r0, [r0, #4]
   d4eb2:	f7ff bf33 	b.w	d4d1c <network_ready>

000d4eb6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4eb6:	2200      	movs	r2, #0
   d4eb8:	4611      	mov	r1, r2
   d4eba:	6840      	ldr	r0, [r0, #4]
   d4ebc:	f7ff bf1e 	b.w	d4cfc <network_connecting>

000d4ec0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ec0:	2200      	movs	r2, #0
   d4ec2:	2102      	movs	r1, #2
   d4ec4:	6840      	ldr	r0, [r0, #4]
   d4ec6:	f7ff bf21 	b.w	d4d0c <network_disconnect>

000d4eca <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4eca:	2300      	movs	r3, #0
   d4ecc:	461a      	mov	r2, r3
   d4ece:	6840      	ldr	r0, [r0, #4]
   d4ed0:	f7ff bf0c 	b.w	d4cec <network_connect>

000d4ed4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ed4:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ed6:	2203      	movs	r2, #3
   d4ed8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4eda:	4a02      	ldr	r2, [pc, #8]	; (d4ee4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4edc:	601a      	str	r2, [r3, #0]
   d4ede:	4770      	bx	lr
   d4ee0:	2003e3c4 	.word	0x2003e3c4
   d4ee4:	000d85e4 	.word	0x000d85e4

000d4ee8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4ee8:	4770      	bx	lr

000d4eea <_ZN8SPIClassD0Ev>:
   d4eea:	b510      	push	{r4, lr}
   d4eec:	2110      	movs	r1, #16
   d4eee:	4604      	mov	r4, r0
   d4ef0:	f002 fc14 	bl	d771c <_ZdlPvj>
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	bd10      	pop	{r4, pc}

000d4ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ef8:	b570      	push	{r4, r5, r6, lr}
   d4efa:	4b08      	ldr	r3, [pc, #32]	; (d4f1c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4efc:	6003      	str	r3, [r0, #0]
   d4efe:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4f00:	2500      	movs	r5, #0
   d4f02:	460e      	mov	r6, r1
   d4f04:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4f08:	f7ff fd52 	bl	d49b0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4f0c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4f0e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4f10:	f7ff fc82 	bl	d4818 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4f14:	60a5      	str	r5, [r4, #8]
}
   d4f16:	4620      	mov	r0, r4
   d4f18:	bd70      	pop	{r4, r5, r6, pc}
   d4f1a:	bf00      	nop
   d4f1c:	000d8618 	.word	0x000d8618

000d4f20 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4f20:	7900      	ldrb	r0, [r0, #4]
   d4f22:	f7ff bc81 	b.w	d4828 <HAL_SPI_Is_Enabled>
	...

000d4f28 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4f28:	4b04      	ldr	r3, [pc, #16]	; (d4f3c <_GLOBAL__sub_I_System+0x14>)
   d4f2a:	2000      	movs	r0, #0
   d4f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4f30:	7018      	strb	r0, [r3, #0]
   d4f32:	8058      	strh	r0, [r3, #2]
   d4f34:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f36:	f7ff be9b 	b.w	d4c70 <set_system_mode>
   d4f3a:	bf00      	nop
   d4f3c:	2003e3cc 	.word	0x2003e3cc

000d4f40 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4f40:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4f42:	6804      	ldr	r4, [r0, #0]
   d4f44:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4f46:	46a4      	mov	ip, r4
    }
   d4f48:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4f4c:	4760      	bx	ip

000d4f4e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4f4e:	6803      	ldr	r3, [r0, #0]
   d4f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f52:	4718      	bx	r3

000d4f54 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4f54:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4f56:	4770      	bx	lr

000d4f58 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4f58:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4f5a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4f5c:	1a10      	subs	r0, r2, r0
   d4f5e:	4770      	bx	lr

000d4f60 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4f60:	b513      	push	{r0, r1, r4, lr}
   d4f62:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d4f64:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4f66:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d4f6a:	68d4      	ldr	r4, [r2, #12]
   d4f6c:	4619      	mov	r1, r3
   d4f6e:	2201      	movs	r2, #1
   d4f70:	47a0      	blx	r4
}
   d4f72:	b002      	add	sp, #8
   d4f74:	bd10      	pop	{r4, pc}

000d4f76 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4f76:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4f78:	6803      	ldr	r3, [r0, #0]
   d4f7a:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d4f7c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4f7e:	4798      	blx	r3
   d4f80:	b128      	cbz	r0, d4f8e <_ZN3UDP4readEv+0x18>
   d4f82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4f84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4f86:	1c59      	adds	r1, r3, #1
   d4f88:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4f8a:	5cd0      	ldrb	r0, [r2, r3]
   d4f8c:	bd10      	pop	{r4, pc}
   d4f8e:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4f92:	bd10      	pop	{r4, pc}

000d4f94 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4f94:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4f96:	6803      	ldr	r3, [r0, #0]
   d4f98:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4f9a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4f9c:	4798      	blx	r3
   d4f9e:	b118      	cbz	r0, d4fa8 <_ZN3UDP4peekEv+0x14>
   d4fa0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4fa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4fa4:	5cd0      	ldrb	r0, [r2, r3]
   d4fa6:	bd10      	pop	{r4, pc}
   d4fa8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4fac:	bd10      	pop	{r4, pc}

000d4fae <_ZN3UDP5flushEv>:

void UDP::flush() {
   d4fae:	4770      	bx	lr

000d4fb0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4fb0:	b410      	push	{r4}
   d4fb2:	4603      	mov	r3, r0
   d4fb4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4fb6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d4fb8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d4fba:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d4fbc:	6803      	ldr	r3, [r0, #0]
   d4fbe:	1a52      	subs	r2, r2, r1
   d4fc0:	68db      	ldr	r3, [r3, #12]
   d4fc2:	4421      	add	r1, r4
}
   d4fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4fc8:	4718      	bx	r3

000d4fca <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4fca:	f1a0 0010 	sub.w	r0, r0, #16
   d4fce:	f7ff bfef 	b.w	d4fb0 <_ZNK3UDP7printToER5Print>

000d4fd2 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4fd4:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4fd6:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4fd8:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d4fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4fdc:	4604      	mov	r4, r0
   d4fde:	460f      	mov	r7, r1
   d4fe0:	4615      	mov	r5, r2
    stop();
   d4fe2:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d4fe4:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4fe6:	4632      	mov	r2, r6
   d4fe8:	2100      	movs	r1, #0
   d4fea:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d4fec:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4fee:	f003 f935 	bl	d825c <memset>
    saddr.sin6_len = sizeof(saddr);
   d4ff2:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4ff6:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d4ff8:	260a      	movs	r6, #10
   d4ffa:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d4ffe:	f7ff fd27 	bl	d4a50 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5002:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5004:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5008:	2102      	movs	r1, #2
   d500a:	4630      	mov	r0, r6
   d500c:	f7ff fde0 	bl	d4bd0 <sock_socket>

    if (_sock < 0) {
   d5010:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5012:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d5014:	db24      	blt.n	d5060 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d5016:	2204      	movs	r2, #4
   d5018:	9200      	str	r2, [sp, #0]
   d501a:	ab02      	add	r3, sp, #8
   d501c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5020:	f7ff fd9e 	bl	d4b60 <sock_setsockopt>
   d5024:	b9e0      	cbnz	r0, d5060 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5026:	b195      	cbz	r5, d504e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d5028:	9003      	str	r0, [sp, #12]
   d502a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d502e:	a903      	add	r1, sp, #12
   d5030:	b2e8      	uxtb	r0, r5
   d5032:	f7ff fc09 	bl	d4848 <if_index_to_name>
   d5036:	b998      	cbnz	r0, d5060 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d5038:	2306      	movs	r3, #6
   d503a:	9300      	str	r3, [sp, #0]
   d503c:	f241 020b 	movw	r2, #4107	; 0x100b
   d5040:	ab03      	add	r3, sp, #12
   d5042:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5046:	6960      	ldr	r0, [r4, #20]
   d5048:	f7ff fd8a 	bl	d4b60 <sock_setsockopt>
   d504c:	b940      	cbnz	r0, d5060 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d504e:	221c      	movs	r2, #28
   d5050:	a905      	add	r1, sp, #20
   d5052:	6960      	ldr	r0, [r4, #20]
   d5054:	f7ff fd7c 	bl	d4b50 <sock_bind>
   d5058:	b910      	cbnz	r0, d5060 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d505a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d505c:	2001      	movs	r0, #1
   d505e:	e004      	b.n	d506a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5060:	6823      	ldr	r3, [r4, #0]
   d5062:	4620      	mov	r0, r4
   d5064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5066:	4798      	blx	r3
   d5068:	2000      	movs	r0, #0
    }
    return bound;
}
   d506a:	b00d      	add	sp, #52	; 0x34
   d506c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d506e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d506e:	b510      	push	{r4, lr}
   d5070:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d5072:	6940      	ldr	r0, [r0, #20]
   d5074:	2800      	cmp	r0, #0
   d5076:	db01      	blt.n	d507c <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d5078:	f7ff fd7a 	bl	d4b70 <sock_close>
    }

    _sock = -1;
   d507c:	f04f 33ff 	mov.w	r3, #4294967295
   d5080:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5082:	2300      	movs	r3, #0
   d5084:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5086:	8723      	strh	r3, [r4, #56]	; 0x38
   d5088:	bd10      	pop	{r4, pc}

000d508a <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d508a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d508c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d508e:	4605      	mov	r5, r0
   d5090:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5092:	b113      	cbz	r3, d509a <_ZN3UDP5writeEPKhj+0x10>
   d5094:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d5096:	1a24      	subs	r4, r4, r0
   d5098:	e000      	b.n	d509c <_ZN3UDP5writeEPKhj+0x12>
   d509a:	461c      	mov	r4, r3
   d509c:	4294      	cmp	r4, r2
   d509e:	bf28      	it	cs
   d50a0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d50a2:	4622      	mov	r2, r4
   d50a4:	4418      	add	r0, r3
   d50a6:	f003 f8ce 	bl	d8246 <memcpy>
    _offset += size;
   d50aa:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d50ac:	4423      	add	r3, r4
   d50ae:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d50b0:	4620      	mov	r0, r4
   d50b2:	bd38      	pop	{r3, r4, r5, pc}

000d50b4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d50b4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d50b6:	6803      	ldr	r3, [r0, #0]
   d50b8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d50ba:	4604      	mov	r4, r0
   d50bc:	460e      	mov	r6, r1
   d50be:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d50c0:	4798      	blx	r3
   d50c2:	b188      	cbz	r0, d50e8 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d50c4:	6823      	ldr	r3, [r4, #0]
   d50c6:	4620      	mov	r0, r4
   d50c8:	691b      	ldr	r3, [r3, #16]
   d50ca:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d50cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d50ce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d50d0:	4285      	cmp	r5, r0
   d50d2:	bfa8      	it	ge
   d50d4:	4605      	movge	r5, r0
   d50d6:	4419      	add	r1, r3
   d50d8:	462a      	mov	r2, r5
   d50da:	4630      	mov	r0, r6
   d50dc:	f003 f8b3 	bl	d8246 <memcpy>
        _offset += read;
   d50e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d50e2:	442b      	add	r3, r5
   d50e4:	86e3      	strh	r3, [r4, #54]	; 0x36
   d50e6:	e001      	b.n	d50ec <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d50e8:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d50ec:	4628      	mov	r0, r5
   d50ee:	bd70      	pop	{r4, r5, r6, pc}

000d50f0 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d50f0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50f2:	4604      	mov	r4, r0
   d50f4:	4b05      	ldr	r3, [pc, #20]	; (d510c <_ZN3UDP8remoteIPEv+0x1c>)
   d50f6:	f844 3b04 	str.w	r3, [r4], #4
   d50fa:	f101 0520 	add.w	r5, r1, #32
   d50fe:	4606      	mov	r6, r0
   d5100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5104:	682b      	ldr	r3, [r5, #0]
   d5106:	7023      	strb	r3, [r4, #0]
   d5108:	4630      	mov	r0, r6
   d510a:	bd70      	pop	{r4, r5, r6, pc}
   d510c:	000d8978 	.word	0x000d8978

000d5110 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5110:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5112:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5114:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5116:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5118:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d511a:	4a0a      	ldr	r2, [pc, #40]	; (d5144 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d511c:	9202      	str	r2, [sp, #8]
   d511e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5120:	468e      	mov	lr, r1
   d5122:	4606      	mov	r6, r0
   d5124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5126:	ac03      	add	r4, sp, #12
   d5128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d512a:	682b      	ldr	r3, [r5, #0]
   d512c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d512e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5132:	9300      	str	r3, [sp, #0]
   d5134:	4662      	mov	r2, ip
   d5136:	ab02      	add	r3, sp, #8
   d5138:	4671      	mov	r1, lr
   d513a:	4630      	mov	r0, r6
   d513c:	47b8      	blx	r7
    }
   d513e:	b009      	add	sp, #36	; 0x24
   d5140:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5142:	bf00      	nop
   d5144:	000d8978 	.word	0x000d8978

000d5148 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5148:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d514a:	6803      	ldr	r3, [r0, #0]
   d514c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5150:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5152:	4b0d      	ldr	r3, [pc, #52]	; (d5188 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5154:	b089      	sub	sp, #36	; 0x24
   d5156:	f100 0620 	add.w	r6, r0, #32
   d515a:	4604      	mov	r4, r0
   d515c:	9302      	str	r3, [sp, #8]
   d515e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5160:	ad03      	add	r5, sp, #12
   d5162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5164:	6833      	ldr	r3, [r6, #0]
   d5166:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5168:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d516a:	9300      	str	r3, [sp, #0]
   d516c:	4672      	mov	r2, lr
   d516e:	ab02      	add	r3, sp, #8
   d5170:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5172:	4620      	mov	r0, r4
   d5174:	47b8      	blx	r7
    flush(); // wait for send to complete
   d5176:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5178:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d517a:	69db      	ldr	r3, [r3, #28]
   d517c:	4620      	mov	r0, r4
   d517e:	4798      	blx	r3
    return result;
}
   d5180:	4628      	mov	r0, r5
   d5182:	b009      	add	sp, #36	; 0x24
   d5184:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5186:	bf00      	nop
   d5188:	000d8978 	.word	0x000d8978

000d518c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d518c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d518e:	7843      	ldrb	r3, [r0, #1]
   d5190:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5192:	b08d      	sub	sp, #52	; 0x34
   d5194:	4605      	mov	r5, r0
   d5196:	460c      	mov	r4, r1
   d5198:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d519a:	d101      	bne.n	d51a0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d519c:	1d01      	adds	r1, r0, #4
   d519e:	e033      	b.n	d5208 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d51a0:	2b0a      	cmp	r3, #10
   d51a2:	d135      	bne.n	d5210 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d51a4:	2211      	movs	r2, #17
   d51a6:	2100      	movs	r1, #0
   d51a8:	a801      	add	r0, sp, #4
   d51aa:	f003 f857 	bl	d825c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d51ae:	68ab      	ldr	r3, [r5, #8]
   d51b0:	b943      	cbnz	r3, d51c4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d51b2:	68eb      	ldr	r3, [r5, #12]
   d51b4:	b933      	cbnz	r3, d51c4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d51b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d51ba:	692e      	ldr	r6, [r5, #16]
   d51bc:	f7ff fc38 	bl	d4a30 <inet_htonl>
   d51c0:	4286      	cmp	r6, r0
   d51c2:	d01f      	beq.n	d5204 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d51c4:	f105 0308 	add.w	r3, r5, #8
   d51c8:	ae01      	add	r6, sp, #4
   d51ca:	f105 0e18 	add.w	lr, r5, #24
   d51ce:	6818      	ldr	r0, [r3, #0]
   d51d0:	6859      	ldr	r1, [r3, #4]
   d51d2:	4632      	mov	r2, r6
   d51d4:	c203      	stmia	r2!, {r0, r1}
   d51d6:	3308      	adds	r3, #8
   d51d8:	4573      	cmp	r3, lr
   d51da:	4616      	mov	r6, r2
   d51dc:	d1f7      	bne.n	d51ce <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d51de:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d51e0:	a901      	add	r1, sp, #4
   d51e2:	a806      	add	r0, sp, #24
   d51e4:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d51e6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d51ea:	f001 f959 	bl	d64a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d51ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d51f0:	3404      	adds	r4, #4
   d51f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d51f4:	6833      	ldr	r3, [r6, #0]
   d51f6:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d51f8:	b157      	cbz	r7, d5210 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d51fa:	8868      	ldrh	r0, [r5, #2]
   d51fc:	f7ff fc20 	bl	d4a40 <inet_ntohs>
   d5200:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5202:	e005      	b.n	d5210 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5204:	f105 0114 	add.w	r1, r5, #20
   d5208:	4620      	mov	r0, r4
   d520a:	f001 f97e 	bl	d650a <_ZN9IPAddressaSEPKh>
   d520e:	e7f3      	b.n	d51f8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5210:	b00d      	add	sp, #52	; 0x34
   d5212:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5214 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5218:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d521a:	ab0e      	add	r3, sp, #56	; 0x38
   d521c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d521e:	4606      	mov	r6, r0
   d5220:	4617      	mov	r7, r2
   d5222:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d5224:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5228:	462a      	mov	r2, r5
   d522a:	4629      	mov	r1, r5
   d522c:	f7ff fabc 	bl	d47a8 <netdb_getaddrinfo>
   d5230:	2800      	cmp	r0, #0
   d5232:	db1f      	blt.n	d5274 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5234:	9b01      	ldr	r3, [sp, #4]
   d5236:	b1fb      	cbz	r3, d5278 <_ZN3UDP11beginPacketEPKct+0x64>
   d5238:	695b      	ldr	r3, [r3, #20]
   d523a:	b1eb      	cbz	r3, d5278 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d523c:	a802      	add	r0, sp, #8
   d523e:	f001 f921 	bl	d6484 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5242:	9b01      	ldr	r3, [sp, #4]
   d5244:	462a      	mov	r2, r5
   d5246:	6958      	ldr	r0, [r3, #20]
   d5248:	a902      	add	r1, sp, #8
   d524a:	f7ff ff9f 	bl	d518c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d524e:	a802      	add	r0, sp, #8
   d5250:	f001 f938 	bl	d64c4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5254:	b180      	cbz	r0, d5278 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d5256:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5258:	ad03      	add	r5, sp, #12
   d525a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d525e:	4b0b      	ldr	r3, [pc, #44]	; (d528c <_ZN3UDP11beginPacketEPKct+0x78>)
   d5260:	9308      	str	r3, [sp, #32]
   d5262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5264:	ac09      	add	r4, sp, #36	; 0x24
   d5266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5268:	682b      	ldr	r3, [r5, #0]
   d526a:	7023      	strb	r3, [r4, #0]
   d526c:	463a      	mov	r2, r7
   d526e:	a908      	add	r1, sp, #32
   d5270:	4630      	mov	r0, r6
   d5272:	47c0      	blx	r8
   d5274:	4604      	mov	r4, r0
   d5276:	e001      	b.n	d527c <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d5278:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d527c:	9801      	ldr	r0, [sp, #4]
   d527e:	f7ff fa8b 	bl	d4798 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d5282:	4620      	mov	r0, r4
   d5284:	b00e      	add	sp, #56	; 0x38
   d5286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d528a:	bf00      	nop
   d528c:	000d8978 	.word	0x000d8978

000d5290 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5294:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d5298:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d529c:	b08c      	sub	sp, #48	; 0x30
   d529e:	4605      	mov	r5, r0
   d52a0:	460c      	mov	r4, r1
   d52a2:	4617      	mov	r7, r2
   d52a4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d52a6:	db00      	blt.n	d52aa <_ZN3UDP13receivePacketEPhjm+0x1a>
   d52a8:	b911      	cbnz	r1, d52b0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d52aa:	f04f 30ff 	mov.w	r0, #4294967295
   d52ae:	e035      	b.n	d531c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d52b0:	f04f 0a1c 	mov.w	sl, #28
   d52b4:	ae05      	add	r6, sp, #20
   d52b6:	4652      	mov	r2, sl
   d52b8:	2100      	movs	r1, #0
   d52ba:	4630      	mov	r0, r6
   d52bc:	f002 ffce 	bl	d825c <memset>
        socklen_t slen = sizeof(saddr);
   d52c0:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d52c4:	f1b9 0f00 	cmp.w	r9, #0
   d52c8:	d014      	beq.n	d52f4 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d52ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52ce:	fbb9 f1f2 	udiv	r1, r9, r2
   d52d2:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d52d4:	fb02 9111 	mls	r1, r2, r1, r9
   d52d8:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d52da:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d52dc:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d52de:	9300      	str	r3, [sp, #0]
   d52e0:	f241 0206 	movw	r2, #4102	; 0x1006
   d52e4:	ab03      	add	r3, sp, #12
   d52e6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d52ea:	4640      	mov	r0, r8
   d52ec:	f7ff fc38 	bl	d4b60 <sock_setsockopt>
            if (ret) {
   d52f0:	b108      	cbz	r0, d52f6 <_ZN3UDP13receivePacketEPhjm+0x66>
   d52f2:	e013      	b.n	d531c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d52f4:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d52f6:	ab02      	add	r3, sp, #8
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	4621      	mov	r1, r4
   d52fc:	4603      	mov	r3, r0
   d52fe:	9600      	str	r6, [sp, #0]
   d5300:	463a      	mov	r2, r7
   d5302:	6968      	ldr	r0, [r5, #20]
   d5304:	f7ff fc4c 	bl	d4ba0 <sock_recvfrom>
        if (ret >= 0) {
   d5308:	1e04      	subs	r4, r0, #0
   d530a:	db06      	blt.n	d531a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d530c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5310:	f105 011c 	add.w	r1, r5, #28
   d5314:	4630      	mov	r0, r6
   d5316:	f7ff ff39 	bl	d518c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d531a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d531c:	b00c      	add	sp, #48	; 0x30
   d531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5322 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5322:	b538      	push	{r3, r4, r5, lr}
   d5324:	4605      	mov	r5, r0
   d5326:	4614      	mov	r4, r2
   d5328:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d532a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d532c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d532e:	d111      	bne.n	d5354 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5330:	231c      	movs	r3, #28
   d5332:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d5334:	230a      	movs	r3, #10
   d5336:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5338:	f7ff fb8a 	bl	d4a50 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d533c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d533e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5342:	1d2b      	adds	r3, r5, #4
   d5344:	3514      	adds	r5, #20
   d5346:	f853 2b04 	ldr.w	r2, [r3], #4
   d534a:	f844 2b04 	str.w	r2, [r4], #4
   d534e:	42ab      	cmp	r3, r5
   d5350:	d1f9      	bne.n	d5346 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d5352:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d5354:	2b04      	cmp	r3, #4
   d5356:	d10a      	bne.n	d536e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5358:	2310      	movs	r3, #16
   d535a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d535c:	2302      	movs	r3, #2
   d535e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5360:	f7ff fb76 	bl	d4a50 <inet_htons>
   d5364:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d5366:	6868      	ldr	r0, [r5, #4]
   d5368:	f7ff fb62 	bl	d4a30 <inet_htonl>
   d536c:	6060      	str	r0, [r4, #4]
   d536e:	bd38      	pop	{r3, r4, r5, pc}

000d5370 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5374:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d5376:	ac03      	add	r4, sp, #12
   d5378:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d537a:	4699      	mov	r9, r3
   d537c:	4606      	mov	r6, r0
   d537e:	460f      	mov	r7, r1
   d5380:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d5382:	2100      	movs	r1, #0
   d5384:	462a      	mov	r2, r5
   d5386:	4620      	mov	r0, r4
   d5388:	f002 ff68 	bl	d825c <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d538c:	4622      	mov	r2, r4
   d538e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d5392:	4648      	mov	r0, r9
   d5394:	f7ff ffc5 	bl	d5322 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5398:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d539c:	b143      	cbz	r3, d53b0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d539e:	e88d 0030 	stmia.w	sp, {r4, r5}
   d53a2:	2300      	movs	r3, #0
   d53a4:	4642      	mov	r2, r8
   d53a6:	4639      	mov	r1, r7
   d53a8:	6970      	ldr	r0, [r6, #20]
   d53aa:	f7ff fc09 	bl	d4bc0 <sock_sendto>
   d53ae:	e001      	b.n	d53b4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d53b0:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d53b4:	b00b      	add	sp, #44	; 0x2c
   d53b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d53ba <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d53ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53bc:	b091      	sub	sp, #68	; 0x44
   d53be:	460c      	mov	r4, r1
   d53c0:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d53c2:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d53c4:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d53c6:	a809      	add	r0, sp, #36	; 0x24
   d53c8:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d53ca:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d53cc:	f002 ff46 	bl	d825c <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d53d0:	aa09      	add	r2, sp, #36	; 0x24
   d53d2:	2100      	movs	r1, #0
   d53d4:	4620      	mov	r0, r4
   d53d6:	f7ff ffa4 	bl	d5322 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d53da:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d53de:	2b02      	cmp	r3, #2
   d53e0:	d12e      	bne.n	d5440 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d53e2:	2300      	movs	r3, #0
   d53e4:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d53e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d53e8:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d53ea:	b1dd      	cbz	r5, d5424 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d53ec:	a902      	add	r1, sp, #8
   d53ee:	4628      	mov	r0, r5
   d53f0:	f7ff fa32 	bl	d4858 <if_get_by_index>
   d53f4:	b9b0      	cbnz	r0, d5424 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d53f6:	a910      	add	r1, sp, #64	; 0x40
   d53f8:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d53fc:	9802      	ldr	r0, [sp, #8]
   d53fe:	f7ff fa33 	bl	d4868 <if_get_addrs>
   d5402:	b960      	cbnz	r0, d541e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5404:	9b03      	ldr	r3, [sp, #12]
   d5406:	b153      	cbz	r3, d541e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5408:	68da      	ldr	r2, [r3, #12]
   d540a:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d540c:	7851      	ldrb	r1, [r2, #1]
   d540e:	2902      	cmp	r1, #2
   d5410:	d103      	bne.n	d541a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5412:	6852      	ldr	r2, [r2, #4]
   d5414:	b10a      	cbz	r2, d541a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d5416:	9205      	str	r2, [sp, #20]
   d5418:	e001      	b.n	d541e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d541a:	681b      	ldr	r3, [r3, #0]
   d541c:	e7f3      	b.n	d5406 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d541e:	9803      	ldr	r0, [sp, #12]
   d5420:	f7ff fa2a 	bl	d4878 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5424:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d5426:	f04f 0308 	mov.w	r3, #8
   d542a:	9300      	str	r3, [sp, #0]
   d542c:	bf18      	it	ne
   d542e:	2203      	movne	r2, #3
   d5430:	ab04      	add	r3, sp, #16
   d5432:	bf08      	it	eq
   d5434:	2204      	moveq	r2, #4
   d5436:	2100      	movs	r1, #0
   d5438:	4630      	mov	r0, r6
   d543a:	f7ff fb91 	bl	d4b60 <sock_setsockopt>
   d543e:	e01e      	b.n	d547e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5440:	2b0a      	cmp	r3, #10
   d5442:	d11a      	bne.n	d547a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d5444:	ac04      	add	r4, sp, #16
   d5446:	2214      	movs	r2, #20
   d5448:	2100      	movs	r1, #0
   d544a:	4620      	mov	r0, r4
   d544c:	f002 ff06 	bl	d825c <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5450:	ab0b      	add	r3, sp, #44	; 0x2c
   d5452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5454:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d545a:	f04f 0314 	mov.w	r3, #20
   d545e:	9300      	str	r3, [sp, #0]
   d5460:	bf18      	it	ne
   d5462:	220c      	movne	r2, #12
   d5464:	4623      	mov	r3, r4
   d5466:	bf08      	it	eq
   d5468:	220d      	moveq	r2, #13
   d546a:	2129      	movs	r1, #41	; 0x29
   d546c:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d546e:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5470:	f7ff fb76 	bl	d4b60 <sock_setsockopt>
   d5474:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5478:	e001      	b.n	d547e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d547a:	f04f 30ff 	mov.w	r0, #4294967295
}
   d547e:	b011      	add	sp, #68	; 0x44
   d5480:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5484 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d5484:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d548a:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d548c:	4b0b      	ldr	r3, [pc, #44]	; (d54bc <_ZN3UDPC1Ev+0x38>)
   d548e:	f103 0208 	add.w	r2, r3, #8
   d5492:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5494:	2500      	movs	r5, #0
   d5496:	6103      	str	r3, [r0, #16]
   d5498:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d549c:	4604      	mov	r4, r0
   d549e:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d54a0:	6002      	str	r2, [r0, #0]
   d54a2:	6143      	str	r3, [r0, #20]
   d54a4:	301c      	adds	r0, #28
   d54a6:	f000 ffed 	bl	d6484 <_ZN9IPAddressC1Ev>
   d54aa:	f44f 7300 	mov.w	r3, #512	; 0x200
   d54ae:	86e5      	strh	r5, [r4, #54]	; 0x36
   d54b0:	8725      	strh	r5, [r4, #56]	; 0x38
   d54b2:	63e5      	str	r5, [r4, #60]	; 0x3c
   d54b4:	6423      	str	r3, [r4, #64]	; 0x40
   d54b6:	6465      	str	r5, [r4, #68]	; 0x44
}
   d54b8:	4620      	mov	r0, r4
   d54ba:	bd38      	pop	{r3, r4, r5, pc}
   d54bc:	000d8620 	.word	0x000d8620

000d54c0 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d54c0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d54c2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d54c6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d54c8:	b123      	cbz	r3, d54d4 <_ZN3UDP13releaseBufferEv+0x14>
   d54ca:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d54cc:	b110      	cbz	r0, d54d4 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d54ce:	2101      	movs	r1, #1
   d54d0:	f002 f924 	bl	d771c <_ZdlPvj>
    }
    _buffer = NULL;
   d54d4:	2300      	movs	r3, #0
   d54d6:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d54d8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d54dc:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d54de:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d54e0:	8723      	strh	r3, [r4, #56]	; 0x38
   d54e2:	bd10      	pop	{r4, pc}

000d54e4 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d54e4:	b570      	push	{r4, r5, r6, lr}
   d54e6:	4604      	mov	r4, r0
   d54e8:	4616      	mov	r6, r2
   d54ea:	460d      	mov	r5, r1
    releaseBuffer();
   d54ec:	f7ff ffe8 	bl	d54c0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d54f0:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d54f2:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d54f4:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d54f6:	b93e      	cbnz	r6, d5508 <_ZN3UDP9setBufferEjPh+0x24>
   d54f8:	b135      	cbz	r5, d5508 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d54fa:	4628      	mov	r0, r5
   d54fc:	f7fe fdcf 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   d5500:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5502:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5504:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d550a:	b103      	cbz	r3, d550e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d550c:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d550e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5510:	3000      	adds	r0, #0
   d5512:	bf18      	it	ne
   d5514:	2001      	movne	r0, #1
   d5516:	bd70      	pop	{r4, r5, r6, pc}

000d5518 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d551a:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d551c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d551e:	4605      	mov	r5, r0
   d5520:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5522:	b91a      	cbnz	r2, d552c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d5524:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5526:	b109      	cbz	r1, d552c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d5528:	f7ff ffdc 	bl	d54e4 <_ZN3UDP9setBufferEjPh>
   d552c:	3404      	adds	r4, #4
   d552e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5530:	f105 0620 	add.w	r6, r5, #32
   d5534:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5536:	6823      	ldr	r3, [r4, #0]
   d5538:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d553a:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d553c:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d553e:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5540:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5542:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d5544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5546 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5546:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5548:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d554a:	4604      	mov	r4, r0
   d554c:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d554e:	b91a      	cbnz	r2, d5558 <_ZN3UDP11parsePacketEm+0x12>
   d5550:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5552:	b109      	cbz	r1, d5558 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d5554:	f7ff ffc6 	bl	d54e4 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5558:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d555a:	2200      	movs	r2, #0
   d555c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d555e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5560:	b149      	cbz	r1, d5576 <_ZN3UDP11parsePacketEm+0x30>
   d5562:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5564:	b13a      	cbz	r2, d5576 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d5566:	6823      	ldr	r3, [r4, #0]
   d5568:	4620      	mov	r0, r4
   d556a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d556c:	4633      	mov	r3, r6
   d556e:	47a8      	blx	r5
        if (result > 0) {
   d5570:	2800      	cmp	r0, #0
            _total = result;
   d5572:	bfc8      	it	gt
   d5574:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d5576:	6823      	ldr	r3, [r4, #0]
   d5578:	4620      	mov	r0, r4
   d557a:	691b      	ldr	r3, [r3, #16]
}
   d557c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d5580:	4718      	bx	r3

000d5582 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d5582:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5584:	6940      	ldr	r0, [r0, #20]
   d5586:	2800      	cmp	r0, #0
   d5588:	db04      	blt.n	d5594 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d558a:	2301      	movs	r3, #1
   d558c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d5590:	f7ff bf13 	b.w	d53ba <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d5594:	f04f 30ff 	mov.w	r0, #4294967295
   d5598:	4770      	bx	lr

000d559a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d559a:	b510      	push	{r4, lr}
   d559c:	4604      	mov	r4, r0
{
	free(buffer);
   d559e:	6800      	ldr	r0, [r0, #0]
   d55a0:	f7ff fc34 	bl	d4e0c <free>
}
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}

000d55a8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d55a8:	b510      	push	{r4, lr}
   d55aa:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d55ac:	6800      	ldr	r0, [r0, #0]
   d55ae:	b108      	cbz	r0, d55b4 <_ZN6String10invalidateEv+0xc>
   d55b0:	f7ff fc2c 	bl	d4e0c <free>
	buffer = NULL;
   d55b4:	2300      	movs	r3, #0
   d55b6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d55b8:	60a3      	str	r3, [r4, #8]
   d55ba:	6063      	str	r3, [r4, #4]
   d55bc:	bd10      	pop	{r4, pc}

000d55be <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d55be:	b538      	push	{r3, r4, r5, lr}
   d55c0:	4604      	mov	r4, r0
   d55c2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d55c4:	6800      	ldr	r0, [r0, #0]
   d55c6:	3101      	adds	r1, #1
   d55c8:	f7ff fc28 	bl	d4e1c <realloc>
	if (newbuffer) {
   d55cc:	b110      	cbz	r0, d55d4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d55ce:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d55d2:	2001      	movs	r0, #1
	}
	return 0;
}
   d55d4:	bd38      	pop	{r3, r4, r5, pc}

000d55d6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55d6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d55d8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55da:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d55dc:	b113      	cbz	r3, d55e4 <_ZN6String7reserveEj+0xe>
   d55de:	6843      	ldr	r3, [r0, #4]
   d55e0:	428b      	cmp	r3, r1
   d55e2:	d207      	bcs.n	d55f4 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d55e4:	4620      	mov	r0, r4
   d55e6:	f7ff ffea 	bl	d55be <_ZN6String12changeBufferEj>
   d55ea:	b120      	cbz	r0, d55f6 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d55ec:	68a3      	ldr	r3, [r4, #8]
   d55ee:	b90b      	cbnz	r3, d55f4 <_ZN6String7reserveEj+0x1e>
   d55f0:	6822      	ldr	r2, [r4, #0]
   d55f2:	7013      	strb	r3, [r2, #0]
   d55f4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d55f6:	bd10      	pop	{r4, pc}

000d55f8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55f8:	b570      	push	{r4, r5, r6, lr}
   d55fa:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d55fc:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55fe:	4604      	mov	r4, r0
   d5600:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5602:	f7ff ffe8 	bl	d55d6 <_ZN6String7reserveEj>
   d5606:	b918      	cbnz	r0, d5610 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5608:	4620      	mov	r0, r4
   d560a:	f7ff ffcd 	bl	d55a8 <_ZN6String10invalidateEv>
		return *this;
   d560e:	e009      	b.n	d5624 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5610:	462a      	mov	r2, r5
   d5612:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5614:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5616:	6820      	ldr	r0, [r4, #0]
   d5618:	f002 fe15 	bl	d8246 <memcpy>
	buffer[len] = 0;
   d561c:	6822      	ldr	r2, [r4, #0]
   d561e:	68a3      	ldr	r3, [r4, #8]
   d5620:	2100      	movs	r1, #0
   d5622:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5624:	4620      	mov	r0, r4
   d5626:	bd70      	pop	{r4, r5, r6, pc}

000d5628 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5628:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d562a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d562c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d562e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5630:	6043      	str	r3, [r0, #4]
	len = 0;
   d5632:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5634:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5636:	460d      	mov	r5, r1
   d5638:	b139      	cbz	r1, d564a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d563a:	4608      	mov	r0, r1
   d563c:	f002 fe6b 	bl	d8316 <strlen>
   d5640:	4629      	mov	r1, r5
   d5642:	4602      	mov	r2, r0
   d5644:	4620      	mov	r0, r4
   d5646:	f7ff ffd7 	bl	d55f8 <_ZN6String4copyEPKcj>
}
   d564a:	4620      	mov	r0, r4
   d564c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5650 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5650:	b40e      	push	{r1, r2, r3}
   d5652:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d5654:	ac09      	add	r4, sp, #36	; 0x24
   d5656:	4605      	mov	r5, r0
   d5658:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d565c:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d565e:	4623      	mov	r3, r4
   d5660:	463a      	mov	r2, r7
   d5662:	2105      	movs	r1, #5
   d5664:	a802      	add	r0, sp, #8
   d5666:	f7ff fbe1 	bl	d4e2c <vsnprintf>
    va_end(marker);

    String result;
   d566a:	490c      	ldr	r1, [pc, #48]	; (d569c <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d566c:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d566e:	4628      	mov	r0, r5
   d5670:	f7ff ffda 	bl	d5628 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d5674:	4631      	mov	r1, r6
   d5676:	4628      	mov	r0, r5
   d5678:	f7ff ffad 	bl	d55d6 <_ZN6String7reserveEj>
    if (result.buffer) {
   d567c:	6828      	ldr	r0, [r5, #0]
   d567e:	b130      	cbz	r0, d568e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5680:	4623      	mov	r3, r4
   d5682:	463a      	mov	r2, r7
   d5684:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d5686:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5688:	f7ff fbd0 	bl	d4e2c <vsnprintf>
        va_end(marker);
        result.len = n;
   d568c:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d568e:	4628      	mov	r0, r5
   d5690:	b004      	add	sp, #16
   d5692:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d5696:	b003      	add	sp, #12
   d5698:	4770      	bx	lr
   d569a:	bf00      	nop
   d569c:	000d88f0 	.word	0x000d88f0

000d56a0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d56a0:	4770      	bx	lr

000d56a2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d56a2:	2000      	movs	r0, #0
   d56a4:	4770      	bx	lr

000d56a6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d56a6:	b510      	push	{r4, lr}
   d56a8:	2114      	movs	r1, #20
   d56aa:	4604      	mov	r4, r0
   d56ac:	f002 f836 	bl	d771c <_ZdlPvj>
   d56b0:	4620      	mov	r0, r4
   d56b2:	bd10      	pop	{r4, pc}

000d56b4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d56b4:	f7fe bcf5 	b.w	d40a2 <_ZdlPv>

000d56b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d56b8:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d56ba:	200a      	movs	r0, #10
   d56bc:	4a02      	ldr	r2, [pc, #8]	; (d56c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d56be:	2100      	movs	r1, #0
   d56c0:	f7ff fac6 	bl	d4c50 <panic_>
    }
}
   d56c4:	bd08      	pop	{r3, pc}
   d56c6:	bf00      	nop
   d56c8:	000d48a9 	.word	0x000d48a9

000d56cc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d56cc:	b510      	push	{r4, lr}
            locked_(false) {
   d56ce:	2300      	movs	r3, #0
   d56d0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d56d2:	4b04      	ldr	r3, [pc, #16]	; (d56e4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d56d4:	4604      	mov	r4, r0
   d56d6:	6818      	ldr	r0, [r3, #0]
   d56d8:	f7ff f97a 	bl	d49d0 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d56dc:	2301      	movs	r3, #1
   d56de:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d56e0:	4620      	mov	r0, r4
   d56e2:	bd10      	pop	{r4, pc}
   d56e4:	2003e3dc 	.word	0x2003e3dc

000d56e8 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d56e8:	b510      	push	{r4, lr}
        if (locked_) {
   d56ea:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d56ec:	4604      	mov	r4, r0
        if (locked_) {
   d56ee:	b11b      	cbz	r3, d56f8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d56f0:	4b02      	ldr	r3, [pc, #8]	; (d56fc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d56f2:	6818      	ldr	r0, [r3, #0]
   d56f4:	f7ff f974 	bl	d49e0 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d56f8:	4620      	mov	r0, r4
   d56fa:	bd10      	pop	{r4, pc}
   d56fc:	2003e3dc 	.word	0x2003e3dc

000d5700 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5700:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5702:	7982      	ldrb	r2, [r0, #6]
   d5704:	798b      	ldrb	r3, [r1, #6]
   d5706:	429a      	cmp	r2, r3
   d5708:	d106      	bne.n	d5718 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d570a:	2206      	movs	r2, #6
   d570c:	f002 fd8c 	bl	d8228 <memcmp>
   d5710:	fab0 f080 	clz	r0, r0
   d5714:	0940      	lsrs	r0, r0, #5
   d5716:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5718:	2000      	movs	r0, #0
}
   d571a:	bd08      	pop	{r3, pc}

000d571c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d571c:	b510      	push	{r4, lr}
   d571e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5720:	69c2      	ldr	r2, [r0, #28]
   d5722:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5726:	4293      	cmp	r3, r2
   d5728:	4618      	mov	r0, r3
   d572a:	d006      	beq.n	d573a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d572c:	6804      	ldr	r4, [r0, #0]
   d572e:	8824      	ldrh	r4, [r4, #0]
   d5730:	428c      	cmp	r4, r1
   d5732:	f103 0308 	add.w	r3, r3, #8
   d5736:	d1f6      	bne.n	d5726 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5738:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d573a:	2000      	movs	r0, #0
    }
   d573c:	bd10      	pop	{r4, pc}

000d573e <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d573e:	b510      	push	{r4, lr}
    return impl()->address();
   d5740:	680a      	ldr	r2, [r1, #0]
   d5742:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5746:	6003      	str	r3, [r0, #0]
   d5748:	6853      	ldr	r3, [r2, #4]
   d574a:	6043      	str	r3, [r0, #4]
}
   d574c:	bd10      	pop	{r4, pc}

000d574e <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d574e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5750:	6802      	ldr	r2, [r0, #0]
   d5752:	680b      	ldr	r3, [r1, #0]
   d5754:	8812      	ldrh	r2, [r2, #0]
   d5756:	881b      	ldrh	r3, [r3, #0]
   d5758:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d575a:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d575c:	d10c      	bne.n	d5778 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d575e:	4601      	mov	r1, r0
   d5760:	4668      	mov	r0, sp
   d5762:	f7ff ffec 	bl	d573e <_ZNK8particle13BlePeerDevice7addressEv>
   d5766:	4621      	mov	r1, r4
   d5768:	a802      	add	r0, sp, #8
   d576a:	f7ff ffe8 	bl	d573e <_ZNK8particle13BlePeerDevice7addressEv>
   d576e:	a902      	add	r1, sp, #8
   d5770:	4668      	mov	r0, sp
   d5772:	f7ff ffc5 	bl	d5700 <_ZNK8particle10BleAddresseqERKS0_>
   d5776:	b900      	cbnz	r0, d577a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5778:	2000      	movs	r0, #0
}
   d577a:	b004      	add	sp, #16
   d577c:	bd10      	pop	{r4, pc}
	...

000d5780 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5780:	b510      	push	{r4, lr}
   d5782:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5784:	2034      	movs	r0, #52	; 0x34
   d5786:	f7fe fc88 	bl	d409a <_Znwj>
   d578a:	4601      	mov	r1, r0
   d578c:	b168      	cbz	r0, d57aa <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d578e:	2300      	movs	r3, #0
   d5790:	6003      	str	r3, [r0, #0]
   d5792:	6043      	str	r3, [r0, #4]
   d5794:	6083      	str	r3, [r0, #8]
   d5796:	60c3      	str	r3, [r0, #12]
   d5798:	6103      	str	r3, [r0, #16]
   d579a:	6143      	str	r3, [r0, #20]
   d579c:	6183      	str	r3, [r0, #24]
   d579e:	61c3      	str	r3, [r0, #28]
   d57a0:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d57a2:	6243      	str	r3, [r0, #36]	; 0x24
   d57a4:	6283      	str	r3, [r0, #40]	; 0x28
   d57a6:	62c3      	str	r3, [r0, #44]	; 0x2c
   d57a8:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d57aa:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d57ac:	b919      	cbnz	r1, d57b6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d57ae:	4a0a      	ldr	r2, [pc, #40]	; (d57d8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d57b0:	200a      	movs	r0, #10
   d57b2:	f7ff fa4d 	bl	d4c50 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d57b6:	2000      	movs	r0, #0
   d57b8:	f7ff f886 	bl	d48c8 <hal_ble_stack_init>
   d57bc:	b120      	cbz	r0, d57c8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d57be:	4a06      	ldr	r2, [pc, #24]	; (d57d8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d57c0:	2100      	movs	r1, #0
   d57c2:	200a      	movs	r0, #10
   d57c4:	f7ff fa44 	bl	d4c50 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d57c8:	2200      	movs	r2, #0
   d57ca:	6821      	ldr	r1, [r4, #0]
   d57cc:	4803      	ldr	r0, [pc, #12]	; (d57dc <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d57ce:	f7ff f895 	bl	d48fc <hal_ble_set_callback_on_periph_link_events>
}
   d57d2:	4620      	mov	r0, r4
   d57d4:	bd10      	pop	{r4, pc}
   d57d6:	bf00      	nop
   d57d8:	000d48a9 	.word	0x000d48a9
   d57dc:	000d5a9d 	.word	0x000d5a9d

000d57e0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d57e0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d57e2:	4c0a      	ldr	r4, [pc, #40]	; (d580c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d57e4:	6823      	ldr	r3, [r4, #0]
   d57e6:	07db      	lsls	r3, r3, #31
   d57e8:	d40e      	bmi.n	d5808 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d57ea:	4620      	mov	r0, r4
   d57ec:	f7fe fc5d 	bl	d40aa <__cxa_guard_acquire>
   d57f0:	b150      	cbz	r0, d5808 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d57f2:	4807      	ldr	r0, [pc, #28]	; (d5810 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d57f4:	f7ff ffc4 	bl	d5780 <_ZN8particle14BleLocalDeviceC1Ev>
   d57f8:	4620      	mov	r0, r4
   d57fa:	f7fe fc5b 	bl	d40b4 <__cxa_guard_release>
   d57fe:	4a05      	ldr	r2, [pc, #20]	; (d5814 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5800:	4905      	ldr	r1, [pc, #20]	; (d5818 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5802:	4803      	ldr	r0, [pc, #12]	; (d5810 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5804:	f001 ff7c 	bl	d7700 <__aeabi_atexit>
    return instance;
}
   d5808:	4801      	ldr	r0, [pc, #4]	; (d5810 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d580a:	bd10      	pop	{r4, pc}
   d580c:	2003e3d8 	.word	0x2003e3d8
   d5810:	2003e3d4 	.word	0x2003e3d4
   d5814:	2003e240 	.word	0x2003e240
   d5818:	000d58b1 	.word	0x000d58b1

000d581c <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   d581c:	b513      	push	{r0, r1, r4, lr}
   d581e:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5820:	a801      	add	r0, sp, #4
   d5822:	f7ff ff53 	bl	d56cc <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   d5826:	2100      	movs	r1, #0
   d5828:	4620      	mov	r0, r4
   d582a:	f7ff f855 	bl	d48d8 <hal_ble_gap_set_tx_power>
   d582e:	4604      	mov	r4, r0
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
   d5830:	a801      	add	r0, sp, #4
   d5832:	f7ff ff59 	bl	d56e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}
   d5836:	4620      	mov	r0, r4
   d5838:	b002      	add	sp, #8
   d583a:	bd10      	pop	{r4, pc}

000d583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d583c:	680b      	ldr	r3, [r1, #0]
   d583e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5840:	b113      	cbz	r3, d5848 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5842:	685a      	ldr	r2, [r3, #4]
   d5844:	3201      	adds	r2, #1
   d5846:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5848:	4770      	bx	lr

000d584a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d584a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d584c:	6804      	ldr	r4, [r0, #0]
   d584e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5850:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5852:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5856:	42a6      	cmp	r6, r4
   d5858:	d004      	beq.n	d5864 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d585a:	1d20      	adds	r0, r4, #4
   d585c:	f7fe fd1e 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5860:	3408      	adds	r4, #8
   d5862:	e7f8      	b.n	d5856 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5864:	6828      	ldr	r0, [r5, #0]
   d5866:	f7ff fad1 	bl	d4e0c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d586a:	4628      	mov	r0, r5
   d586c:	bd70      	pop	{r4, r5, r6, pc}

000d586e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d586e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5870:	6804      	ldr	r4, [r0, #0]
   d5872:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5874:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5876:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d587a:	42a6      	cmp	r6, r4
   d587c:	d004      	beq.n	d5888 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d587e:	1d20      	adds	r0, r4, #4
   d5880:	f7fe fd0c 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5884:	3408      	adds	r4, #8
   d5886:	e7f8      	b.n	d587a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5888:	6828      	ldr	r0, [r5, #0]
   d588a:	f7ff fabf 	bl	d4e0c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d588e:	4628      	mov	r0, r5
   d5890:	bd70      	pop	{r4, r5, r6, pc}

000d5892 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5892:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5894:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5896:	f104 0018 	add.w	r0, r4, #24
   d589a:	f7ff ffe8 	bl	d586e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d589e:	f104 000c 	add.w	r0, r4, #12
   d58a2:	f7ff ffd2 	bl	d584a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d58a6:	4620      	mov	r0, r4
   d58a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d58ac:	f7fe bbf9 	b.w	d40a2 <_ZdlPv>

000d58b0 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d58b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58b2:	6804      	ldr	r4, [r0, #0]
   d58b4:	4607      	mov	r7, r0
   d58b6:	b1c4      	cbz	r4, d58ea <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d58b8:	69a5      	ldr	r5, [r4, #24]
   d58ba:	69e3      	ldr	r3, [r4, #28]
   d58bc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d58c0:	42ae      	cmp	r6, r5
   d58c2:	d004      	beq.n	d58ce <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58c4:	1d28      	adds	r0, r5, #4
   d58c6:	f7fe fce9 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58ca:	3508      	adds	r5, #8
   d58cc:	e7f8      	b.n	d58c0 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d58ce:	69a0      	ldr	r0, [r4, #24]
   d58d0:	f7ff fa9c 	bl	d4e0c <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d58d4:	f104 000c 	add.w	r0, r4, #12
   d58d8:	f7ff ffc9 	bl	d586e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d58dc:	4620      	mov	r0, r4
   d58de:	f7ff ffb4 	bl	d584a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58e2:	2134      	movs	r1, #52	; 0x34
   d58e4:	4620      	mov	r0, r4
   d58e6:	f001 ff19 	bl	d771c <_ZdlPvj>
   d58ea:	4638      	mov	r0, r7
   d58ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d58f0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d58f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d58f2:	2500      	movs	r5, #0
   d58f4:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d58f6:	6045      	str	r5, [r0, #4]
   d58f8:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d58fa:	2024      	movs	r0, #36	; 0x24
   d58fc:	f7fe fbcd 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5900:	4604      	mov	r4, r0
   d5902:	b178      	cbz	r0, d5924 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5904:	4603      	mov	r3, r0
   d5906:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d590a:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d590e:	f8c0 5002 	str.w	r5, [r0, #2]
   d5912:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5914:	7285      	strb	r5, [r0, #10]
   d5916:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5918:	60c5      	str	r5, [r0, #12]
   d591a:	6105      	str	r5, [r0, #16]
   d591c:	6145      	str	r5, [r0, #20]
   d591e:	6185      	str	r5, [r0, #24]
   d5920:	61c5      	str	r5, [r0, #28]
   d5922:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5924:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5926:	2014      	movs	r0, #20
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	f7fe fbb6 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d592e:	4603      	mov	r3, r0
   d5930:	b128      	cbz	r0, d593e <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5932:	2201      	movs	r2, #1
   d5934:	6042      	str	r2, [r0, #4]
   d5936:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5938:	4a08      	ldr	r2, [pc, #32]	; (d595c <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d593a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d593c:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d593e:	a802      	add	r0, sp, #8
   d5940:	6872      	ldr	r2, [r6, #4]
   d5942:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5946:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5948:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d594a:	f7fe fca7 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d594e:	6833      	ldr	r3, [r6, #0]
   d5950:	b90b      	cbnz	r3, d5956 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5952:	f7ff feb1 	bl	d56b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d5956:	4630      	mov	r0, r6
   d5958:	b002      	add	sp, #8
   d595a:	bd70      	pop	{r4, r5, r6, pc}
   d595c:	000d8698 	.word	0x000d8698

000d5960 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5960:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5962:	b570      	push	{r4, r5, r6, lr}
   d5964:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5966:	d91a      	bls.n	d599e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5968:	4290      	cmp	r0, r2
   d596a:	d219      	bcs.n	d59a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d596c:	f1a1 0608 	sub.w	r6, r1, #8
   d5970:	1a51      	subs	r1, r2, r1
   d5972:	3904      	subs	r1, #4
   d5974:	1f15      	subs	r5, r2, #4
   d5976:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5978:	1f2b      	subs	r3, r5, #4
   d597a:	429e      	cmp	r6, r3
   d597c:	d025      	beq.n	d59ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d597e:	2c04      	cmp	r4, #4
   d5980:	d007      	beq.n	d5992 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5982:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5986:	f844 3c04 	str.w	r3, [r4, #-4]
   d598a:	4629      	mov	r1, r5
   d598c:	4620      	mov	r0, r4
   d598e:	f7ff ff55 	bl	d583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5992:	4628      	mov	r0, r5
   d5994:	f7fe fc82 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5998:	3d08      	subs	r5, #8
   d599a:	3c08      	subs	r4, #8
   d599c:	e7ec      	b.n	d5978 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d599e:	d014      	beq.n	d59ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d59a0:	1d0c      	adds	r4, r1, #4
   d59a2:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d59a4:	1f23      	subs	r3, r4, #4
   d59a6:	429d      	cmp	r5, r3
   d59a8:	d00f      	beq.n	d59ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d59aa:	2e04      	cmp	r6, #4
   d59ac:	d007      	beq.n	d59be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d59b2:	f846 3c04 	str.w	r3, [r6, #-4]
   d59b6:	4621      	mov	r1, r4
   d59b8:	4630      	mov	r0, r6
   d59ba:	f7ff ff3f 	bl	d583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59be:	4620      	mov	r0, r4
   d59c0:	f7fe fc6c 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59c4:	3408      	adds	r4, #8
   d59c6:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d59c8:	e7ec      	b.n	d59a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d59ca:	bd70      	pop	{r4, r5, r6, pc}

000d59cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d59cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d59d0:	6804      	ldr	r4, [r0, #0]
   d59d2:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d59d4:	4605      	mov	r5, r0
   d59d6:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d59d8:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d59dc:	42a7      	cmp	r7, r4
   d59de:	d018      	beq.n	d5a12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d59e0:	4641      	mov	r1, r8
   d59e2:	4620      	mov	r0, r4
   d59e4:	f7ff feb3 	bl	d574e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d59e8:	4606      	mov	r6, r0
   d59ea:	b908      	cbnz	r0, d59f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d59ec:	3408      	adds	r4, #8
   d59ee:	e7f5      	b.n	d59dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d59f0:	b18c      	cbz	r4, d5a16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d59f2:	1d20      	adds	r0, r4, #4
   d59f4:	f7fe fc52 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d59f8:	682b      	ldr	r3, [r5, #0]
   d59fa:	686a      	ldr	r2, [r5, #4]
   d59fc:	f104 0108 	add.w	r1, r4, #8
   d5a00:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5a04:	4620      	mov	r0, r4
   d5a06:	f7ff ffab 	bl	d5960 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5a0a:	686b      	ldr	r3, [r5, #4]
   d5a0c:	3b01      	subs	r3, #1
   d5a0e:	606b      	str	r3, [r5, #4]
    return true;
   d5a10:	e002      	b.n	d5a18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5a12:	2600      	movs	r6, #0
   d5a14:	e000      	b.n	d5a18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5a16:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5a18:	4630      	mov	r0, r6
   d5a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5a1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5a1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5a20:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5a22:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5a26:	6847      	ldr	r7, [r0, #4]
   d5a28:	9300      	str	r3, [sp, #0]
   d5a2a:	a801      	add	r0, sp, #4
   d5a2c:	f7ff ff06 	bl	d583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5a30:	6866      	ldr	r6, [r4, #4]
   d5a32:	68a3      	ldr	r3, [r4, #8]
   d5a34:	429e      	cmp	r6, r3
   d5a36:	db14      	blt.n	d5a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5a38:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5a3a:	2e00      	cmp	r6, #0
   d5a3c:	dd0b      	ble.n	d5a56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5a3e:	00f0      	lsls	r0, r6, #3
   d5a40:	f7ff f9dc 	bl	d4dfc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5a44:	4605      	mov	r5, r0
   d5a46:	b318      	cbz	r0, d5a90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5a48:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5a4c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5a50:	f7ff ff86 	bl	d5960 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5a54:	e000      	b.n	d5a58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5a56:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5a58:	6820      	ldr	r0, [r4, #0]
   d5a5a:	f7ff f9d7 	bl	d4e0c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5a5e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5a60:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5a62:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5a64:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5a66:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5a6a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5a6e:	4629      	mov	r1, r5
   d5a70:	f105 0008 	add.w	r0, r5, #8
   d5a74:	f7ff ff74 	bl	d5960 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5a78:	b135      	cbz	r5, d5a88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5a7a:	9b00      	ldr	r3, [sp, #0]
   d5a7c:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5a80:	a901      	add	r1, sp, #4
   d5a82:	1d28      	adds	r0, r5, #4
   d5a84:	f7ff feda 	bl	d583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5a88:	6863      	ldr	r3, [r4, #4]
   d5a8a:	3301      	adds	r3, #1
   d5a8c:	6063      	str	r3, [r4, #4]
   d5a8e:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a90:	a801      	add	r0, sp, #4
   d5a92:	f7fe fc03 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5a96:	4628      	mov	r0, r5
   d5a98:	b003      	add	sp, #12
   d5a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5aa0:	4604      	mov	r4, r0
   d5aa2:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5aa4:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5aa6:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5aa8:	f7ff fe10 	bl	d56cc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5aac:	6823      	ldr	r3, [r4, #0]
   d5aae:	2b03      	cmp	r3, #3
   d5ab0:	d002      	beq.n	d5ab8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5ab2:	2b04      	cmp	r3, #4
   d5ab4:	d042      	beq.n	d5b3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5ab6:	e087      	b.n	d5bc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5ab8:	a804      	add	r0, sp, #16
   d5aba:	f7ff ff19 	bl	d58f0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5abe:	9b04      	ldr	r3, [sp, #16]
   d5ac0:	8922      	ldrh	r2, [r4, #8]
   d5ac2:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5ac4:	6862      	ldr	r2, [r4, #4]
   d5ac6:	9904      	ldr	r1, [sp, #16]
   d5ac8:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5acc:	f8c1 3002 	str.w	r3, [r1, #2]
   d5ad0:	6853      	ldr	r3, [r2, #4]
   d5ad2:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ad6:	a807      	add	r0, sp, #28
   d5ad8:	9b04      	ldr	r3, [sp, #16]
   d5ada:	9306      	str	r3, [sp, #24]
   d5adc:	a905      	add	r1, sp, #20
   d5ade:	f7ff fead 	bl	d583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5ae2:	a906      	add	r1, sp, #24
   d5ae4:	f105 0018 	add.w	r0, r5, #24
   d5ae8:	f7ff ff99 	bl	d5a1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5aec:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5aee:	a807      	add	r0, sp, #28
   d5af0:	f7fe fbd4 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5af4:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5af6:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5af8:	b974      	cbnz	r4, d5b18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5afa:	4b36      	ldr	r3, [pc, #216]	; (d5bd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5afc:	9300      	str	r3, [sp, #0]
   d5afe:	aa06      	add	r2, sp, #24
   d5b00:	4623      	mov	r3, r4
   d5b02:	4935      	ldr	r1, [pc, #212]	; (d5bd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5b04:	9407      	str	r4, [sp, #28]
   d5b06:	2032      	movs	r0, #50	; 0x32
   d5b08:	f7ff f8aa 	bl	d4c60 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5b0c:	9b04      	ldr	r3, [sp, #16]
   d5b0e:	4621      	mov	r1, r4
   d5b10:	8818      	ldrh	r0, [r3, #0]
   d5b12:	f7fe fee9 	bl	d48e8 <hal_ble_gap_disconnect>
   d5b16:	e00d      	b.n	d5b34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5b18:	4a30      	ldr	r2, [pc, #192]	; (d5bdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5b1a:	9200      	str	r2, [sp, #0]
   d5b1c:	2300      	movs	r3, #0
   d5b1e:	aa06      	add	r2, sp, #24
   d5b20:	492d      	ldr	r1, [pc, #180]	; (d5bd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5b22:	9307      	str	r3, [sp, #28]
   d5b24:	2001      	movs	r0, #1
   d5b26:	f7ff f89b 	bl	d4c60 <log_message>
                if (impl->connectedCb_) {
   d5b2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5b2c:	b113      	cbz	r3, d5b34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5b2e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5b30:	a804      	add	r0, sp, #16
   d5b32:	4798      	blx	r3
   d5b34:	a805      	add	r0, sp, #20
   d5b36:	f7fe fbb1 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b3a:	e045      	b.n	d5bc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5b3c:	8921      	ldrh	r1, [r4, #8]
   d5b3e:	4628      	mov	r0, r5
   d5b40:	f7ff fdec 	bl	d571c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5b44:	4607      	mov	r7, r0
   d5b46:	2800      	cmp	r0, #0
   d5b48:	d03e      	beq.n	d5bc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5b4a:	6804      	ldr	r4, [r0, #0]
   d5b4c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5b4e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5b54:	8022      	strh	r2, [r4, #0]
   d5b56:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5b5a:	4299      	cmp	r1, r3
   d5b5c:	d003      	beq.n	d5b66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5b5e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5b62:	8042      	strh	r2, [r0, #2]
   d5b64:	e7f9      	b.n	d5b5a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5b66:	68e6      	ldr	r6, [r4, #12]
   d5b68:	6923      	ldr	r3, [r4, #16]
   d5b6a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b6e:	45b0      	cmp	r8, r6
   d5b70:	d004      	beq.n	d5b7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5b72:	1d30      	adds	r0, r6, #4
   d5b74:	f7fe fb92 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b78:	3608      	adds	r6, #8
   d5b7a:	e7f8      	b.n	d5b6e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5b7c:	2300      	movs	r3, #0
   d5b7e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5b80:	69a6      	ldr	r6, [r4, #24]
   d5b82:	69e3      	ldr	r3, [r4, #28]
   d5b84:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b88:	45b0      	cmp	r8, r6
   d5b8a:	d004      	beq.n	d5b96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5b8c:	1d30      	adds	r0, r6, #4
   d5b8e:	f7fe fb85 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b92:	3608      	adds	r6, #8
   d5b94:	e7f8      	b.n	d5b88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5b96:	2300      	movs	r3, #0
   d5b98:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5b9a:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5b9c:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5b9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5ba0:	b113      	cbz	r3, d5ba8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5ba2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5ba4:	4638      	mov	r0, r7
   d5ba6:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5ba8:	2320      	movs	r3, #32
   d5baa:	4a0d      	ldr	r2, [pc, #52]	; (d5be0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5bac:	9306      	str	r3, [sp, #24]
   d5bae:	9200      	str	r2, [sp, #0]
   d5bb0:	2300      	movs	r3, #0
   d5bb2:	4909      	ldr	r1, [pc, #36]	; (d5bd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5bb4:	9307      	str	r3, [sp, #28]
   d5bb6:	2001      	movs	r0, #1
   d5bb8:	aa06      	add	r2, sp, #24
   d5bba:	f7ff f851 	bl	d4c60 <log_message>
                    impl->peers_.removeOne(*peer);
   d5bbe:	4639      	mov	r1, r7
   d5bc0:	f105 0018 	add.w	r0, r5, #24
   d5bc4:	f7ff ff02 	bl	d59cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5bc8:	a803      	add	r0, sp, #12
   d5bca:	f7ff fd8d 	bl	d56e8 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5bce:	b00e      	add	sp, #56	; 0x38
   d5bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5bd4:	000d870e 	.word	0x000d870e
   d5bd8:	000d86ac 	.word	0x000d86ac
   d5bdc:	000d8734 	.word	0x000d8734
   d5be0:	000d8751 	.word	0x000d8751

000d5be4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5be4:	4802      	ldr	r0, [pc, #8]	; (d5bf0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5be6:	2300      	movs	r3, #0
   d5be8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5bea:	f7fe bee9 	b.w	d49c0 <os_mutex_recursive_create>
   d5bee:	bf00      	nop
   d5bf0:	2003e3dc 	.word	0x2003e3dc

000d5bf4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bf6:	4606      	mov	r6, r0
   d5bf8:	460d      	mov	r5, r1
   d5bfa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5bfc:	2400      	movs	r4, #0
  while (size--) {
   d5bfe:	42bd      	cmp	r5, r7
   d5c00:	d00c      	beq.n	d5c1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c02:	6833      	ldr	r3, [r6, #0]
   d5c04:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c08:	689b      	ldr	r3, [r3, #8]
   d5c0a:	4630      	mov	r0, r6
   d5c0c:	4798      	blx	r3
     if (chunk>=0)
   d5c0e:	2800      	cmp	r0, #0
   d5c10:	db01      	blt.n	d5c16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c12:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c14:	e7f3      	b.n	d5bfe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c16:	2c00      	cmp	r4, #0
   d5c18:	bf08      	it	eq
   d5c1a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c1c:	4620      	mov	r0, r4
   d5c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c20:	b570      	push	{r4, r5, r6, lr}
   d5c22:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c24:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c26:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c28:	b149      	cbz	r1, d5c3e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c2a:	f002 fb74 	bl	d8316 <strlen>
   d5c2e:	682b      	ldr	r3, [r5, #0]
   d5c30:	4602      	mov	r2, r0
   d5c32:	4621      	mov	r1, r4
   d5c34:	4628      	mov	r0, r5
   d5c36:	68db      	ldr	r3, [r3, #12]
    }
   d5c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c3c:	4718      	bx	r3
    }
   d5c3e:	bd70      	pop	{r4, r5, r6, pc}

000d5c40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c40:	6803      	ldr	r3, [r0, #0]
   d5c42:	689b      	ldr	r3, [r3, #8]
   d5c44:	4718      	bx	r3

000d5c46 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c46:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c48:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c4a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c4c:	f7ff fff8 	bl	d5c40 <_ZN5Print5printEc>
  n += print('\n');
   d5c50:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5c52:	4604      	mov	r4, r0
  n += print('\n');
   d5c54:	4628      	mov	r0, r5
   d5c56:	f7ff fff3 	bl	d5c40 <_ZN5Print5printEc>
  return n;
}
   d5c5a:	4420      	add	r0, r4
   d5c5c:	bd38      	pop	{r3, r4, r5, pc}

000d5c5e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c5e:	b530      	push	{r4, r5, lr}
   d5c60:	b08b      	sub	sp, #44	; 0x2c
   d5c62:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c64:	2100      	movs	r1, #0
   d5c66:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c6a:	2a01      	cmp	r2, #1
   d5c6c:	bf98      	it	ls
   d5c6e:	220a      	movls	r2, #10
   d5c70:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5c74:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5c78:	fb05 3312 	mls	r3, r5, r2, r3
   d5c7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c80:	2b09      	cmp	r3, #9
   d5c82:	bf94      	ite	ls
   d5c84:	3330      	addls	r3, #48	; 0x30
   d5c86:	3337      	addhi	r3, #55	; 0x37
   d5c88:	b2db      	uxtb	r3, r3
   d5c8a:	4621      	mov	r1, r4
   d5c8c:	f804 3901 	strb.w	r3, [r4], #-1
   d5c90:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5c92:	2d00      	cmp	r5, #0
   d5c94:	d1ee      	bne.n	d5c74 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5c96:	f7ff ffc3 	bl	d5c20 <_ZN5Print5writeEPKc>
}
   d5c9a:	b00b      	add	sp, #44	; 0x2c
   d5c9c:	bd30      	pop	{r4, r5, pc}

000d5c9e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5c9e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5ca0:	b92a      	cbnz	r2, d5cae <_ZN5Print5printEmi+0x10>
   d5ca2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5ca8:	689b      	ldr	r3, [r3, #8]
   d5caa:	b2c9      	uxtb	r1, r1
   d5cac:	4718      	bx	r3
  else return printNumber(n, base);
   d5cae:	b2d2      	uxtb	r2, r2
}
   d5cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5cb4:	f7ff bfd3 	b.w	d5c5e <_ZN5Print11printNumberEmh>

000d5cb8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5cb8:	f7ff bff1 	b.w	d5c9e <_ZN5Print5printEmi>

000d5cbc <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5cbc:	b40c      	push	{r2, r3}
   d5cbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5cc2:	b087      	sub	sp, #28
   d5cc4:	af00      	add	r7, sp, #0
   d5cc6:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5cca:	4605      	mov	r5, r0
   d5ccc:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5cd0:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5cd2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5cd4:	4623      	mov	r3, r4
   d5cd6:	464a      	mov	r2, r9
   d5cd8:	2114      	movs	r1, #20
   d5cda:	1d38      	adds	r0, r7, #4
   d5cdc:	f7ff f8a6 	bl	d4e2c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5ce0:	2813      	cmp	r0, #19
   d5ce2:	d805      	bhi.n	d5cf0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5ce4:	1d39      	adds	r1, r7, #4
   d5ce6:	4628      	mov	r0, r5
   d5ce8:	f7ff ff9a 	bl	d5c20 <_ZN5Print5writeEPKc>
   d5cec:	4604      	mov	r4, r0
   d5cee:	e013      	b.n	d5d18 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5cf0:	f100 0308 	add.w	r3, r0, #8
   d5cf4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5cf8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5cfa:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5cfe:	1c41      	adds	r1, r0, #1
   d5d00:	4623      	mov	r3, r4
   d5d02:	464a      	mov	r2, r9
   d5d04:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5d06:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5d08:	f7ff f890 	bl	d4e2c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d0c:	4669      	mov	r1, sp
   d5d0e:	4628      	mov	r0, r5
   d5d10:	f7ff ff86 	bl	d5c20 <_ZN5Print5writeEPKc>
   d5d14:	4604      	mov	r4, r0
   d5d16:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5d18:	b11e      	cbz	r6, d5d22 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5d1a:	4628      	mov	r0, r5
   d5d1c:	f7ff ff93 	bl	d5c46 <_ZN5Print7printlnEv>
   d5d20:	4404      	add	r4, r0
    return n;
}
   d5d22:	4620      	mov	r0, r4
   d5d24:	371c      	adds	r7, #28
   d5d26:	46bd      	mov	sp, r7
   d5d28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d2c:	b002      	add	sp, #8
   d5d2e:	4770      	bx	lr

000d5d30 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5d30:	6800      	ldr	r0, [r0, #0]
   d5d32:	f7fe be4d 	b.w	d49d0 <os_mutex_recursive_lock>
	...

000d5d38 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5d38:	4b01      	ldr	r3, [pc, #4]	; (d5d40 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d3a:	4a02      	ldr	r2, [pc, #8]	; (d5d44 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d3c:	601a      	str	r2, [r3, #0]
   d5d3e:	4770      	bx	lr
   d5d40:	2003e3e0 	.word	0x2003e3e0
   d5d44:	000d88bf 	.word	0x000d88bf

000d5d48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5d48:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5d4a:	681a      	ldr	r2, [r3, #0]
   d5d4c:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5d4e:	601a      	str	r2, [r3, #0]
   d5d50:	4770      	bx	lr
   d5d52:	bf00      	nop
   d5d54:	2003e1d8 	.word	0x2003e1d8
   d5d58:	2003e3e4 	.word	0x2003e3e4

000d5d5c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5d5c:	b510      	push	{r4, lr}
   d5d5e:	4604      	mov	r4, r0
   d5d60:	f7fe f9f8 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
   d5d64:	4620      	mov	r0, r4
   d5d66:	bd10      	pop	{r4, pc}

000d5d68 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5d68:	b513      	push	{r0, r1, r4, lr}
   d5d6a:	460b      	mov	r3, r1
   d5d6c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d6e:	c803      	ldmia	r0, {r0, r1}
   d5d70:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5d74:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5d78:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5d7c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5d80:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5d84:	b002      	add	sp, #8
   d5d86:	bd10      	pop	{r4, pc}

000d5d88 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d88:	4803      	ldr	r0, [pc, #12]	; (d5d98 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d8a:	4a04      	ldr	r2, [pc, #16]	; (d5d9c <_GLOBAL__sub_I_RGB+0x14>)
   d5d8c:	4904      	ldr	r1, [pc, #16]	; (d5da0 <_GLOBAL__sub_I_RGB+0x18>)
   d5d8e:	2300      	movs	r3, #0
   d5d90:	6083      	str	r3, [r0, #8]
   d5d92:	f001 bcb5 	b.w	d7700 <__aeabi_atexit>
   d5d96:	bf00      	nop
   d5d98:	2003e3e8 	.word	0x2003e3e8
   d5d9c:	2003e240 	.word	0x2003e240
   d5da0:	000d5d5d 	.word	0x000d5d5d

000d5da4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5da4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5da6:	4b0f      	ldr	r3, [pc, #60]	; (d5de4 <serialEventRun+0x40>)
   d5da8:	b133      	cbz	r3, d5db8 <serialEventRun+0x14>
   d5daa:	f000 fc1b 	bl	d65e4 <_Z16_fetch_usbserialv>
   d5dae:	6803      	ldr	r3, [r0, #0]
   d5db0:	691b      	ldr	r3, [r3, #16]
   d5db2:	4798      	blx	r3
   d5db4:	2800      	cmp	r0, #0
   d5db6:	dc0d      	bgt.n	d5dd4 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5db8:	4b0b      	ldr	r3, [pc, #44]	; (d5de8 <serialEventRun+0x44>)
   d5dba:	b133      	cbz	r3, d5dca <serialEventRun+0x26>
   d5dbc:	f000 fc94 	bl	d66e8 <_Z22__fetch_global_Serial1v>
   d5dc0:	6803      	ldr	r3, [r0, #0]
   d5dc2:	691b      	ldr	r3, [r3, #16]
   d5dc4:	4798      	blx	r3
   d5dc6:	2800      	cmp	r0, #0
   d5dc8:	dc07      	bgt.n	d5dda <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d5dca:	4b08      	ldr	r3, [pc, #32]	; (d5dec <serialEventRun+0x48>)
   d5dcc:	b143      	cbz	r3, d5de0 <serialEventRun+0x3c>
   d5dce:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d5dd2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5dd4:	f3af 8000 	nop.w
   d5dd8:	e7ee      	b.n	d5db8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5dda:	f3af 8000 	nop.w
   d5dde:	e7f4      	b.n	d5dca <serialEventRun+0x26>
   d5de0:	bd08      	pop	{r3, pc}
   d5de2:	bf00      	nop
	...

000d5df0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5df0:	b508      	push	{r3, lr}
	serialEventRun();
   d5df2:	f7ff ffd7 	bl	d5da4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5df6:	f7fe fd5f 	bl	d48b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5dfa:	4b01      	ldr	r3, [pc, #4]	; (d5e00 <_post_loop+0x10>)
   d5dfc:	6018      	str	r0, [r3, #0]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	2003e730 	.word	0x2003e730

000d5e04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e06:	2300      	movs	r3, #0
   d5e08:	9300      	str	r3, [sp, #0]
   d5e0a:	461a      	mov	r2, r3
   d5e0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e10:	f7fe ff58 	bl	d4cc4 <system_ctrl_set_result>
}
   d5e14:	b003      	add	sp, #12
   d5e16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e1c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5e1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e1e:	8843      	ldrh	r3, [r0, #2]
   d5e20:	2b0a      	cmp	r3, #10
   d5e22:	d008      	beq.n	d5e36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e24:	2b50      	cmp	r3, #80	; 0x50
   d5e26:	d109      	bne.n	d5e3c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5e28:	4b09      	ldr	r3, [pc, #36]	; (d5e50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e2a:	681b      	ldr	r3, [r3, #0]
   d5e2c:	b13b      	cbz	r3, d5e3e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5e2e:	b003      	add	sp, #12
   d5e30:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5e34:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5e36:	f7ff ffe5 	bl	d5e04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5e3a:	e006      	b.n	d5e4a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e3c:	2300      	movs	r3, #0
   d5e3e:	9300      	str	r3, [sp, #0]
   d5e40:	461a      	mov	r2, r3
   d5e42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e46:	f7fe ff3d 	bl	d4cc4 <system_ctrl_set_result>
        break;
    }
}
   d5e4a:	b003      	add	sp, #12
   d5e4c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5e50:	2003e3f8 	.word	0x2003e3f8

000d5e54 <module_user_init_hook>:

void module_user_init_hook()
{
   d5e54:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e56:	f7fe fd17 	bl	d4888 <HAL_RNG_GetRandomNumber>
   d5e5a:	4604      	mov	r4, r0
    srand(seed);
   d5e5c:	f002 fa06 	bl	d826c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e60:	4b07      	ldr	r3, [pc, #28]	; (d5e80 <module_user_init_hook+0x2c>)
   d5e62:	b113      	cbz	r3, d5e6a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5e64:	4620      	mov	r0, r4
   d5e66:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e6a:	2100      	movs	r1, #0
   d5e6c:	4804      	ldr	r0, [pc, #16]	; (d5e80 <module_user_init_hook+0x2c>)
   d5e6e:	f7fe ffbd 	bl	d4dec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e72:	2100      	movs	r1, #0
   d5e74:	4803      	ldr	r0, [pc, #12]	; (d5e84 <module_user_init_hook+0x30>)
}
   d5e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e7a:	f7fe bf19 	b.w	d4cb0 <system_ctrl_set_app_request_handler>
   d5e7e:	bf00      	nop
   d5e80:	00000000 	.word	0x00000000
   d5e84:	000d5e1d 	.word	0x000d5e1d

000d5e88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5e88:	4770      	bx	lr

000d5e8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5e8a:	2000      	movs	r0, #0
   d5e8c:	4770      	bx	lr

000d5e8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5e8e:	b510      	push	{r4, lr}
   d5e90:	2110      	movs	r1, #16
   d5e92:	4604      	mov	r4, r0
   d5e94:	f001 fc42 	bl	d771c <_ZdlPvj>
   d5e98:	4620      	mov	r0, r4
   d5e9a:	bd10      	pop	{r4, pc}

000d5e9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5e9c:	b508      	push	{r3, lr}
      { delete this; }
   d5e9e:	b108      	cbz	r0, d5ea4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5ea0:	f7ff fff5 	bl	d5e8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5ea4:	bd08      	pop	{r3, pc}

000d5ea6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5ea6:	2200      	movs	r2, #0
   d5ea8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5eaa:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5eac:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5eb0:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5eb2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5eb6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5eb8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5eba:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5ebc:	680c      	ldr	r4, [r1, #0]
   d5ebe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ec0:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5ec2:	bd10      	pop	{r4, pc}

000d5ec4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5ec4:	b510      	push	{r4, lr}
   d5ec6:	4604      	mov	r4, r0
    free((void*)msg_);
   d5ec8:	6800      	ldr	r0, [r0, #0]
   d5eca:	f7fe ff9f 	bl	d4e0c <free>
}
   d5ece:	4620      	mov	r0, r4
   d5ed0:	bd10      	pop	{r4, pc}

000d5ed2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5ed2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5ed4:	68c4      	ldr	r4, [r0, #12]
   d5ed6:	b1f4      	cbz	r4, d5f16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5ed8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5eda:	2b02      	cmp	r3, #2
   d5edc:	d103      	bne.n	d5ee6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5ede:	f104 000c 	add.w	r0, r4, #12
   d5ee2:	f7ff ffef 	bl	d5ec4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5ee6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5ee8:	b135      	cbz	r5, d5ef8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5eea:	4628      	mov	r0, r5
   d5eec:	f7fe f932 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
   d5ef0:	2110      	movs	r1, #16
   d5ef2:	4628      	mov	r0, r5
   d5ef4:	f001 fc12 	bl	d771c <_ZdlPvj>
   d5ef8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5efa:	b135      	cbz	r5, d5f0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5efc:	4628      	mov	r0, r5
   d5efe:	f7fe f929 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
   d5f02:	2110      	movs	r1, #16
   d5f04:	4628      	mov	r0, r5
   d5f06:	f001 fc09 	bl	d771c <_ZdlPvj>
   d5f0a:	4620      	mov	r0, r4
   d5f0c:	2114      	movs	r1, #20
   d5f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5f12:	f001 bc03 	b.w	d771c <_ZdlPvj>
   d5f16:	bd38      	pop	{r3, r4, r5, pc}

000d5f18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5f18:	b513      	push	{r0, r1, r4, lr}
   d5f1a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5f1c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5f20:	2300      	movs	r3, #0
   d5f22:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5f24:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5f26:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5f28:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f2a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5f2c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5f2e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f30:	f7fe f9b4 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f34:	4620      	mov	r0, r4
   d5f36:	b002      	add	sp, #8
   d5f38:	bd10      	pop	{r4, pc}

000d5f3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5f3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f3c:	460c      	mov	r4, r1
   d5f3e:	ad02      	add	r5, sp, #8
   d5f40:	f854 3b04 	ldr.w	r3, [r4], #4
   d5f44:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5f48:	4606      	mov	r6, r0
   d5f4a:	460f      	mov	r7, r1
   d5f4c:	a801      	add	r0, sp, #4
   d5f4e:	4621      	mov	r1, r4
   d5f50:	f7ff fc74 	bl	d583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5f54:	4629      	mov	r1, r5
   d5f56:	4630      	mov	r0, r6
   d5f58:	f7ff ffde 	bl	d5f18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f5c:	a801      	add	r0, sp, #4
   d5f5e:	f7fe f99d 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f62:	4620      	mov	r0, r4
   d5f64:	f7fe f99a 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5f68:	4638      	mov	r0, r7
   d5f6a:	2108      	movs	r1, #8
   d5f6c:	f001 fbd6 	bl	d771c <_ZdlPvj>
        return p;
    }
   d5f70:	4630      	mov	r0, r6
   d5f72:	b003      	add	sp, #12
   d5f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5f78:	b538      	push	{r3, r4, r5, lr}
   d5f7a:	2300      	movs	r3, #0
   d5f7c:	4604      	mov	r4, r0
   d5f7e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f80:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5f82:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f84:	f7fe f889 	bl	d409a <_Znwj>
   d5f88:	b128      	cbz	r0, d5f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5f8a:	2301      	movs	r3, #1
   d5f8c:	6043      	str	r3, [r0, #4]
   d5f8e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5f90:	4b02      	ldr	r3, [pc, #8]	; (d5f9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5f92:	6003      	str	r3, [r0, #0]
   d5f94:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f96:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5f98:	4620      	mov	r0, r4
   d5f9a:	bd38      	pop	{r3, r4, r5, pc}
   d5f9c:	000d895c 	.word	0x000d895c

000d5fa0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5fa0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5fa2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5fa4:	b90a      	cbnz	r2, d5faa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5fa6:	f001 fbcc 	bl	d7742 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5faa:	68c3      	ldr	r3, [r0, #12]
    }
   d5fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5fb0:	4718      	bx	r3

000d5fb2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5fb2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5fb4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5fb6:	f100 0110 	add.w	r1, r0, #16
   d5fba:	f7ff fff1 	bl	d5fa0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5fbe:	bd08      	pop	{r3, pc}

000d5fc0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5fc0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5fc2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5fc4:	b90a      	cbnz	r2, d5fca <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5fc6:	f001 fbbc 	bl	d7742 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5fca:	68c3      	ldr	r3, [r0, #12]
    }
   d5fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5fd0:	4718      	bx	r3

000d5fd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5fd2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5fd4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5fd6:	f100 0110 	add.w	r1, r0, #16
   d5fda:	f7ff fff1 	bl	d5fc0 <_ZNKSt8functionIFvRKbEEclES1_>
   d5fde:	bd08      	pop	{r3, pc}

000d5fe0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5fe0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5fe2:	2300      	movs	r3, #0
   d5fe4:	6083      	str	r3, [r0, #8]
   d5fe6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5fe8:	4604      	mov	r4, r0
   d5fea:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5fec:	b12b      	cbz	r3, d5ffa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5fee:	2202      	movs	r2, #2
   d5ff0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5ff2:	68eb      	ldr	r3, [r5, #12]
   d5ff4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5ff6:	68ab      	ldr	r3, [r5, #8]
   d5ff8:	60a3      	str	r3, [r4, #8]
	}
    }
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6000:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6002:	b089      	sub	sp, #36	; 0x24
   d6004:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6006:	4668      	mov	r0, sp
   d6008:	f7ff ff4d 	bl	d5ea6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d600c:	2300      	movs	r3, #0
   d600e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6012:	f04f 0202 	mov.w	r2, #2
   d6016:	e8d4 3f4f 	ldrexb	r3, [r4]
   d601a:	2b00      	cmp	r3, #0
   d601c:	d103      	bne.n	d6026 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d601e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6022:	2900      	cmp	r1, #0
   d6024:	d1f7      	bne.n	d6016 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6026:	d002      	beq.n	d602e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6028:	f88d 3008 	strb.w	r3, [sp, #8]
   d602c:	e063      	b.n	d60f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d602e:	f114 050c 	adds.w	r5, r4, #12
   d6032:	d003      	beq.n	d603c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6034:	4669      	mov	r1, sp
   d6036:	4628      	mov	r0, r5
   d6038:	f7ff ff35 	bl	d5ea6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d603c:	f3bf 8f5f 	dmb	sy
   d6040:	2301      	movs	r3, #1
   d6042:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6044:	2000      	movs	r0, #0
   d6046:	f104 0308 	add.w	r3, r4, #8
   d604a:	f3bf 8f5f 	dmb	sy
   d604e:	e853 6f00 	ldrex	r6, [r3]
   d6052:	e843 0200 	strex	r2, r0, [r3]
   d6056:	2a00      	cmp	r2, #0
   d6058:	d1f9      	bne.n	d604e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d605a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d605e:	2e00      	cmp	r6, #0
   d6060:	d049      	beq.n	d60f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6062:	f7fe fe15 	bl	d4c90 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6066:	b120      	cbz	r0, d6072 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6068:	4629      	mov	r1, r5
   d606a:	4630      	mov	r0, r6
   d606c:	f7ff ff98 	bl	d5fa0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6070:	e03a      	b.n	d60e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6072:	4631      	mov	r1, r6
   d6074:	a802      	add	r0, sp, #8
   d6076:	f7ff ffb3 	bl	d5fe0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d607a:	68e0      	ldr	r0, [r4, #12]
   d607c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6080:	b108      	cbz	r0, d6086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6082:	f002 f92d 	bl	d82e0 <strdup>
   d6086:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6088:	2010      	movs	r0, #16
   d608a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d608e:	f7fe f804 	bl	d409a <_Znwj>
   d6092:	4605      	mov	r5, r0
   d6094:	b1e8      	cbz	r0, d60d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6096:	2700      	movs	r7, #0
   d6098:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d609a:	2018      	movs	r0, #24
   d609c:	f7fd fffd 	bl	d409a <_Znwj>
   d60a0:	4604      	mov	r4, r0
   d60a2:	b188      	cbz	r0, d60c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d60a4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d60a6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d60a8:	a802      	add	r0, sp, #8
   d60aa:	f7ff fe5d 	bl	d5d68 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60ae:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d60b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d60b2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60b4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d60b6:	9204      	str	r2, [sp, #16]
   d60b8:	a906      	add	r1, sp, #24
   d60ba:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d60bc:	60e3      	str	r3, [r4, #12]
   d60be:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d60c2:	9205      	str	r2, [sp, #20]
   d60c4:	f7ff feef 	bl	d5ea6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d60c8:	4b0d      	ldr	r3, [pc, #52]	; (d6100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d60ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d60cc:	4b0d      	ldr	r3, [pc, #52]	; (d6104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d60ce:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d60d0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d60d2:	a806      	add	r0, sp, #24
   d60d4:	f7ff fef6 	bl	d5ec4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d60d8:	a802      	add	r0, sp, #8
   d60da:	f7fe f83b 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d60de:	2200      	movs	r2, #0
   d60e0:	4629      	mov	r1, r5
   d60e2:	4809      	ldr	r0, [pc, #36]	; (d6108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d60e4:	f7fe fddc 	bl	d4ca0 <application_thread_invoke>
   d60e8:	4630      	mov	r0, r6
   d60ea:	f7fe f833 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d60ee:	2110      	movs	r1, #16
   d60f0:	4630      	mov	r0, r6
   d60f2:	f001 fb13 	bl	d771c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d60f6:	4668      	mov	r0, sp
   d60f8:	f7ff fee4 	bl	d5ec4 <_ZN8particle5ErrorD1Ev>
    }
   d60fc:	b009      	add	sp, #36	; 0x24
   d60fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6100:	000d5fb3 	.word	0x000d5fb3
   d6104:	000d6229 	.word	0x000d6229
   d6108:	000d6735 	.word	0x000d6735

000d610c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6110:	b08b      	sub	sp, #44	; 0x2c
   d6112:	4606      	mov	r6, r0
   d6114:	460f      	mov	r7, r1
   d6116:	4690      	mov	r8, r2
   d6118:	4699      	mov	r9, r3
   d611a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d611e:	f7fe fe3d 	bl	d4d9c <spark_cloud_flag_connected>
   d6122:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d6124:	4683      	mov	fp, r0
   d6126:	bb30      	cbnz	r0, d6176 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6128:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d612c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d612e:	a905      	add	r1, sp, #20
   d6130:	4628      	mov	r0, r5
   d6132:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6136:	f7ff feb6 	bl	d5ea6 <_ZN8particle5ErrorC1EOS0_>
   d613a:	2014      	movs	r0, #20
   d613c:	f7fd ffad 	bl	d409a <_Znwj>
   d6140:	4604      	mov	r4, r0
   d6142:	b158      	cbz	r0, d615c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6144:	2302      	movs	r3, #2
   d6146:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6148:	2301      	movs	r3, #1
   d614a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d614c:	f8c0 b004 	str.w	fp, [r0, #4]
   d6150:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6154:	4629      	mov	r1, r5
   d6156:	300c      	adds	r0, #12
   d6158:	f7ff fea5 	bl	d5ea6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d615c:	4630      	mov	r0, r6
   d615e:	4621      	mov	r1, r4
   d6160:	f840 4b04 	str.w	r4, [r0], #4
   d6164:	f7ff ff08 	bl	d5f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6168:	4628      	mov	r0, r5
   d616a:	f7ff feab 	bl	d5ec4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d616e:	a805      	add	r0, sp, #20
   d6170:	f7ff fea8 	bl	d5ec4 <_ZN8particle5ErrorD1Ev>
   d6174:	e052      	b.n	d621c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6176:	2400      	movs	r4, #0
   d6178:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d617a:	2014      	movs	r0, #20
   d617c:	606c      	str	r4, [r5, #4]
   d617e:	60ac      	str	r4, [r5, #8]
   d6180:	9307      	str	r3, [sp, #28]
   d6182:	f7fd ff8a 	bl	d409a <_Znwj>
   d6186:	4601      	mov	r1, r0
   d6188:	b118      	cbz	r0, d6192 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d618a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d618c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d618e:	6044      	str	r4, [r0, #4]
   d6190:	6084      	str	r4, [r0, #8]
   d6192:	a804      	add	r0, sp, #16
   d6194:	9103      	str	r1, [sp, #12]
   d6196:	f7ff feef 	bl	d5f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d619a:	4b22      	ldr	r3, [pc, #136]	; (d6224 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d619c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d619e:	2008      	movs	r0, #8
   d61a0:	f7fd ff7b 	bl	d409a <_Znwj>
   d61a4:	4604      	mov	r4, r0
   d61a6:	b128      	cbz	r0, d61b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d61a8:	9b03      	ldr	r3, [sp, #12]
   d61aa:	f840 3b04 	str.w	r3, [r0], #4
   d61ae:	a904      	add	r1, sp, #16
   d61b0:	f7ff fb44 	bl	d583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d61b4:	9500      	str	r5, [sp, #0]
   d61b6:	fa5f f38a 	uxtb.w	r3, sl
   d61ba:	464a      	mov	r2, r9
   d61bc:	4641      	mov	r1, r8
   d61be:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d61c0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d61c2:	f7fe fdfb 	bl	d4dbc <spark_send_event>
   d61c6:	b920      	cbnz	r0, d61d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d61c8:	9b03      	ldr	r3, [sp, #12]
   d61ca:	785b      	ldrb	r3, [r3, #1]
   d61cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d61d0:	b183      	cbz	r3, d61f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d61d2:	9b03      	ldr	r3, [sp, #12]
   d61d4:	9305      	str	r3, [sp, #20]
   d61d6:	a904      	add	r1, sp, #16
   d61d8:	a806      	add	r0, sp, #24
   d61da:	f7ff fb2f 	bl	d583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d61de:	a905      	add	r1, sp, #20
   d61e0:	4630      	mov	r0, r6
   d61e2:	f7ff fe99 	bl	d5f18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d61e6:	a806      	add	r0, sp, #24
   d61e8:	f7fe f858 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d61ec:	a804      	add	r0, sp, #16
   d61ee:	f7fe f855 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d61f2:	e013      	b.n	d621c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d61f4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d61f8:	a905      	add	r1, sp, #20
   d61fa:	a803      	add	r0, sp, #12
   d61fc:	9205      	str	r2, [sp, #20]
   d61fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6202:	f7ff fefd 	bl	d6000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6206:	a805      	add	r0, sp, #20
   d6208:	f7ff fe5c 	bl	d5ec4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d620c:	a805      	add	r0, sp, #20
   d620e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6210:	f7ff fe93 	bl	d5f3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6214:	a806      	add	r0, sp, #24
   d6216:	f7fe f841 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d621a:	e7da      	b.n	d61d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d621c:	4630      	mov	r0, r6
   d621e:	b00b      	add	sp, #44	; 0x2c
   d6220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6224:	000d6399 	.word	0x000d6399

000d6228 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6228:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d622a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d622c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d622e:	d006      	beq.n	d623e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6230:	2a03      	cmp	r2, #3
   d6232:	d017      	beq.n	d6264 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6234:	2a01      	cmp	r2, #1
   d6236:	d122      	bne.n	d627e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6238:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d623a:	6003      	str	r3, [r0, #0]
	      break;
   d623c:	e01f      	b.n	d627e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d623e:	2018      	movs	r0, #24
   d6240:	680e      	ldr	r6, [r1, #0]
   d6242:	f7fd ff2a 	bl	d409a <_Znwj>
   d6246:	4605      	mov	r5, r0
   d6248:	b150      	cbz	r0, d6260 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d624a:	4631      	mov	r1, r6
   d624c:	f7ff fec8 	bl	d5fe0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6250:	6930      	ldr	r0, [r6, #16]
   d6252:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6256:	b108      	cbz	r0, d625c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6258:	f002 f842 	bl	d82e0 <strdup>
   d625c:	6128      	str	r0, [r5, #16]
   d625e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6260:	6025      	str	r5, [r4, #0]
   d6262:	e00c      	b.n	d627e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6264:	6804      	ldr	r4, [r0, #0]
   d6266:	b154      	cbz	r4, d627e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6268:	f104 0010 	add.w	r0, r4, #16
   d626c:	f7ff fe2a 	bl	d5ec4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6270:	4620      	mov	r0, r4
   d6272:	f7fd ff6f 	bl	d4154 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6276:	2118      	movs	r1, #24
   d6278:	4620      	mov	r0, r4
   d627a:	f001 fa4f 	bl	d771c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d627e:	2000      	movs	r0, #0
   d6280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6282 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6282:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6284:	2300      	movs	r3, #0
   d6286:	6083      	str	r3, [r0, #8]
   d6288:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d628a:	4604      	mov	r4, r0
   d628c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d628e:	b12b      	cbz	r3, d629c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6290:	2202      	movs	r2, #2
   d6292:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6294:	68eb      	ldr	r3, [r5, #12]
   d6296:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6298:	68ab      	ldr	r3, [r5, #8]
   d629a:	60a3      	str	r3, [r4, #8]
	}
    }
   d629c:	4620      	mov	r0, r4
   d629e:	bd38      	pop	{r3, r4, r5, pc}

000d62a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d62a0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d62a2:	b570      	push	{r4, r5, r6, lr}
   d62a4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d62a6:	d006      	beq.n	d62b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d62a8:	2a03      	cmp	r2, #3
   d62aa:	d011      	beq.n	d62d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d62ac:	2a01      	cmp	r2, #1
   d62ae:	d118      	bne.n	d62e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d62b0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d62b2:	6003      	str	r3, [r0, #0]
	      break;
   d62b4:	e015      	b.n	d62e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d62b6:	2014      	movs	r0, #20
   d62b8:	680e      	ldr	r6, [r1, #0]
   d62ba:	f7fd feee 	bl	d409a <_Znwj>
   d62be:	4605      	mov	r5, r0
   d62c0:	b120      	cbz	r0, d62cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d62c2:	4631      	mov	r1, r6
   d62c4:	f7ff ffdd 	bl	d6282 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d62c8:	7c33      	ldrb	r3, [r6, #16]
   d62ca:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d62cc:	6025      	str	r5, [r4, #0]
   d62ce:	e008      	b.n	d62e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d62d0:	6804      	ldr	r4, [r0, #0]
   d62d2:	b134      	cbz	r4, d62e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d62d4:	4620      	mov	r0, r4
   d62d6:	f7fd ff3d 	bl	d4154 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d62da:	2114      	movs	r1, #20
   d62dc:	4620      	mov	r0, r4
   d62de:	f001 fa1d 	bl	d771c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d62e2:	2000      	movs	r0, #0
   d62e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d62e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d62e8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d62ea:	2300      	movs	r3, #0
   d62ec:	b087      	sub	sp, #28
   d62ee:	460c      	mov	r4, r1
   d62f0:	f3bf 8f5f 	dmb	sy
   d62f4:	e850 6f00 	ldrex	r6, [r0]
   d62f8:	e840 3200 	strex	r2, r3, [r0]
   d62fc:	2a00      	cmp	r2, #0
   d62fe:	d1f9      	bne.n	d62f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6300:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6304:	2e00      	cmp	r6, #0
   d6306:	d03f      	beq.n	d6388 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6308:	4618      	mov	r0, r3
   d630a:	f7fe fcc1 	bl	d4c90 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d630e:	4607      	mov	r7, r0
   d6310:	b120      	cbz	r0, d631c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6312:	4621      	mov	r1, r4
   d6314:	4630      	mov	r0, r6
   d6316:	f7ff fe53 	bl	d5fc0 <_ZNKSt8functionIFvRKbEEclES1_>
   d631a:	e02e      	b.n	d637a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d631c:	4631      	mov	r1, r6
   d631e:	a801      	add	r0, sp, #4
   d6320:	f7ff ffaf 	bl	d6282 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6324:	7823      	ldrb	r3, [r4, #0]
   d6326:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d632a:	2010      	movs	r0, #16
   d632c:	f7fd feb5 	bl	d409a <_Znwj>
   d6330:	4605      	mov	r5, r0
   d6332:	b1d0      	cbz	r0, d636a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6334:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6336:	2014      	movs	r0, #20
   d6338:	f7fd feaf 	bl	d409a <_Znwj>
   d633c:	4604      	mov	r4, r0
   d633e:	b178      	cbz	r0, d6360 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6340:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6342:	4601      	mov	r1, r0
   d6344:	a801      	add	r0, sp, #4
   d6346:	f7ff fd0f 	bl	d5d68 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d634a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d634c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d634e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6350:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6352:	9203      	str	r2, [sp, #12]
   d6354:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6356:	60e3      	str	r3, [r4, #12]
   d6358:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d635c:	9204      	str	r2, [sp, #16]
   d635e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6360:	4b0a      	ldr	r3, [pc, #40]	; (d638c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6362:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6364:	4b0a      	ldr	r3, [pc, #40]	; (d6390 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6366:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6368:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d636a:	a801      	add	r0, sp, #4
   d636c:	f7fd fef2 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6370:	2200      	movs	r2, #0
   d6372:	4629      	mov	r1, r5
   d6374:	4807      	ldr	r0, [pc, #28]	; (d6394 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6376:	f7fe fc93 	bl	d4ca0 <application_thread_invoke>
   d637a:	4630      	mov	r0, r6
   d637c:	f7fd feea 	bl	d4154 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6380:	2110      	movs	r1, #16
   d6382:	4630      	mov	r0, r6
   d6384:	f001 f9ca 	bl	d771c <_ZdlPvj>
        }
    }
   d6388:	b007      	add	sp, #28
   d638a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d638c:	000d5fd3 	.word	0x000d5fd3
   d6390:	000d62a1 	.word	0x000d62a1
   d6394:	000d6735 	.word	0x000d6735

000d6398 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6398:	b530      	push	{r4, r5, lr}
   d639a:	b085      	sub	sp, #20
   d639c:	4604      	mov	r4, r0
   d639e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d63a0:	4668      	mov	r0, sp
   d63a2:	4611      	mov	r1, r2
   d63a4:	f7ff fdc9 	bl	d5f3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d63a8:	b17c      	cbz	r4, d63ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d63aa:	b224      	sxth	r4, r4
   d63ac:	4628      	mov	r0, r5
   d63ae:	b10d      	cbz	r5, d63b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d63b0:	f001 ff96 	bl	d82e0 <strdup>
   d63b4:	9002      	str	r0, [sp, #8]
   d63b6:	a902      	add	r1, sp, #8
   d63b8:	4668      	mov	r0, sp
   d63ba:	f8ad 400c 	strh.w	r4, [sp, #12]
   d63be:	f7ff fe1f 	bl	d6000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d63c2:	a802      	add	r0, sp, #8
   d63c4:	f7ff fd7e 	bl	d5ec4 <_ZN8particle5ErrorD1Ev>
   d63c8:	e01d      	b.n	d6406 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d63ca:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d63cc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d63d0:	f04f 0201 	mov.w	r2, #1
   d63d4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d63d8:	42a3      	cmp	r3, r4
   d63da:	d103      	bne.n	d63e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d63dc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d63e0:	2900      	cmp	r1, #0
   d63e2:	d1f7      	bne.n	d63d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d63e4:	d002      	beq.n	d63ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d63e6:	f88d 3008 	strb.w	r3, [sp, #8]
   d63ea:	e00c      	b.n	d6406 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d63ec:	f110 010c 	adds.w	r1, r0, #12
   d63f0:	f04f 0301 	mov.w	r3, #1
   d63f4:	bf18      	it	ne
   d63f6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d63f8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d63fc:	3004      	adds	r0, #4
   d63fe:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6402:	f7ff ff71 	bl	d62e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6406:	a801      	add	r0, sp, #4
   d6408:	f7fd ff48 	bl	d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d640c:	b005      	add	sp, #20
   d640e:	bd30      	pop	{r4, r5, pc}

000d6410 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6410:	4770      	bx	lr

000d6412 <_ZN9IPAddressD0Ev>:
   d6412:	b510      	push	{r4, lr}
   d6414:	2118      	movs	r1, #24
   d6416:	4604      	mov	r4, r0
   d6418:	f001 f980 	bl	d771c <_ZdlPvj>
   d641c:	4620      	mov	r0, r4
   d641e:	bd10      	pop	{r4, pc}

000d6420 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6420:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6422:	7d03      	ldrb	r3, [r0, #20]
   d6424:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6426:	b08d      	sub	sp, #52	; 0x34
   d6428:	460e      	mov	r6, r1
   d642a:	f100 0704 	add.w	r7, r0, #4
   d642e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6432:	d002      	beq.n	d643a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6434:	f100 0508 	add.w	r5, r0, #8
   d6438:	e018      	b.n	d646c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d643a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d643c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d643e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6442:	232f      	movs	r3, #47	; 0x2f
   d6444:	462a      	mov	r2, r5
   d6446:	200a      	movs	r0, #10
   d6448:	f7fe fae2 	bl	d4a10 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d644c:	4628      	mov	r0, r5
   d644e:	f001 ff62 	bl	d8316 <strlen>
   d6452:	6833      	ldr	r3, [r6, #0]
   d6454:	4602      	mov	r2, r0
   d6456:	68db      	ldr	r3, [r3, #12]
   d6458:	4629      	mov	r1, r5
   d645a:	4630      	mov	r0, r6
   d645c:	4798      	blx	r3
   d645e:	e00f      	b.n	d6480 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6460:	b124      	cbz	r4, d646c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6462:	212e      	movs	r1, #46	; 0x2e
   d6464:	4630      	mov	r0, r6
   d6466:	f7ff fbeb 	bl	d5c40 <_ZN5Print5printEc>
   d646a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d646c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6470:	220a      	movs	r2, #10
   d6472:	4630      	mov	r0, r6
   d6474:	f7ff fc20 	bl	d5cb8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6478:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d647a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d647c:	d1f0      	bne.n	d6460 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d647e:	4620      	mov	r0, r4
    }
    return n;
}
   d6480:	b00d      	add	sp, #52	; 0x34
   d6482:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6484 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6484:	b510      	push	{r4, lr}
   d6486:	4b05      	ldr	r3, [pc, #20]	; (d649c <_ZN9IPAddressC1Ev+0x18>)
   d6488:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d648a:	2211      	movs	r2, #17
   d648c:	f840 3b04 	str.w	r3, [r0], #4
   d6490:	2100      	movs	r1, #0
   d6492:	f001 fee3 	bl	d825c <memset>
{
    clear();
}
   d6496:	4620      	mov	r0, r4
   d6498:	bd10      	pop	{r4, pc}
   d649a:	bf00      	nop
   d649c:	000d8978 	.word	0x000d8978

000d64a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d64a0:	4603      	mov	r3, r0
   d64a2:	4a07      	ldr	r2, [pc, #28]	; (d64c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d64a4:	b510      	push	{r4, lr}
   d64a6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d64aa:	f101 0210 	add.w	r2, r1, #16
   d64ae:	f851 4b04 	ldr.w	r4, [r1], #4
   d64b2:	f843 4b04 	str.w	r4, [r3], #4
   d64b6:	4291      	cmp	r1, r2
   d64b8:	d1f9      	bne.n	d64ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d64ba:	780a      	ldrb	r2, [r1, #0]
   d64bc:	701a      	strb	r2, [r3, #0]
}
   d64be:	bd10      	pop	{r4, pc}
   d64c0:	000d8978 	.word	0x000d8978

000d64c4 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d64c4:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d64c6:	2b04      	cmp	r3, #4
   d64c8:	d101      	bne.n	d64ce <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d64ca:	6840      	ldr	r0, [r0, #4]
   d64cc:	e008      	b.n	d64e0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d64ce:	2b06      	cmp	r3, #6
   d64d0:	d10a      	bne.n	d64e8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d64d2:	6843      	ldr	r3, [r0, #4]
   d64d4:	b953      	cbnz	r3, d64ec <_ZNK9IPAddresscvbEv+0x28>
   d64d6:	6883      	ldr	r3, [r0, #8]
   d64d8:	b943      	cbnz	r3, d64ec <_ZNK9IPAddresscvbEv+0x28>
   d64da:	68c3      	ldr	r3, [r0, #12]
   d64dc:	b933      	cbnz	r3, d64ec <_ZNK9IPAddresscvbEv+0x28>
   d64de:	6900      	ldr	r0, [r0, #16]
   d64e0:	3000      	adds	r0, #0
   d64e2:	bf18      	it	ne
   d64e4:	2001      	movne	r0, #1
   d64e6:	4770      	bx	lr
    } else {
        return false;
   d64e8:	2000      	movs	r0, #0
   d64ea:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d64ec:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d64ee:	4770      	bx	lr

000d64f0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d64f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d64f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d64f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d64fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d64fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6502:	2304      	movs	r3, #4
   d6504:	6041      	str	r1, [r0, #4]
   d6506:	7503      	strb	r3, [r0, #20]
   d6508:	bd10      	pop	{r4, pc}

000d650a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d650a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d650c:	780d      	ldrb	r5, [r1, #0]
   d650e:	788b      	ldrb	r3, [r1, #2]
   d6510:	784a      	ldrb	r2, [r1, #1]
   d6512:	78c9      	ldrb	r1, [r1, #3]
   d6514:	9100      	str	r1, [sp, #0]
   d6516:	4629      	mov	r1, r5
   d6518:	f7ff ffea 	bl	d64f0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d651c:	b003      	add	sp, #12
   d651e:	bd30      	pop	{r4, r5, pc}

000d6520 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6520:	7441      	strb	r1, [r0, #17]
   d6522:	4770      	bx	lr

000d6524 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6524:	4770      	bx	lr

000d6526 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6526:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6528:	2100      	movs	r1, #0
   d652a:	7c00      	ldrb	r0, [r0, #16]
   d652c:	f7fe fb78 	bl	d4c20 <HAL_USB_USART_Receive_Data>
}
   d6530:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6534:	bf28      	it	cs
   d6536:	f04f 30ff 	movcs.w	r0, #4294967295
   d653a:	bd08      	pop	{r3, pc}

000d653c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d653c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d653e:	2101      	movs	r1, #1
   d6540:	7c00      	ldrb	r0, [r0, #16]
   d6542:	f7fe fb6d 	bl	d4c20 <HAL_USB_USART_Receive_Data>
}
   d6546:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d654a:	bf28      	it	cs
   d654c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6550:	bd08      	pop	{r3, pc}

000d6552 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6552:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6554:	7c00      	ldrb	r0, [r0, #16]
   d6556:	f7fe fb5b 	bl	d4c10 <HAL_USB_USART_Available_Data_For_Write>
}
   d655a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d655e:	bd08      	pop	{r3, pc}

000d6560 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6560:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6562:	7c00      	ldrb	r0, [r0, #16]
   d6564:	f7fe fb4c 	bl	d4c00 <HAL_USB_USART_Available_Data>
}
   d6568:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d656c:	bd08      	pop	{r3, pc}

000d656e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d656e:	7c00      	ldrb	r0, [r0, #16]
   d6570:	f7fe bb66 	b.w	d4c40 <HAL_USB_USART_Flush_Data>

000d6574 <_ZN9USBSerialD0Ev>:
   d6574:	b510      	push	{r4, lr}
   d6576:	2114      	movs	r1, #20
   d6578:	4604      	mov	r4, r0
   d657a:	f001 f8cf 	bl	d771c <_ZdlPvj>
   d657e:	4620      	mov	r0, r4
   d6580:	bd10      	pop	{r4, pc}

000d6582 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6582:	b538      	push	{r3, r4, r5, lr}
   d6584:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6586:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6588:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d658a:	f7fe fb41 	bl	d4c10 <HAL_USB_USART_Available_Data_For_Write>
   d658e:	2800      	cmp	r0, #0
   d6590:	dc01      	bgt.n	d6596 <_ZN9USBSerial5writeEh+0x14>
   d6592:	7c60      	ldrb	r0, [r4, #17]
   d6594:	b128      	cbz	r0, d65a2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6596:	4629      	mov	r1, r5
   d6598:	7c20      	ldrb	r0, [r4, #16]
   d659a:	f7fe fb49 	bl	d4c30 <HAL_USB_USART_Send_Data>
   d659e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d65a2:	bd38      	pop	{r3, r4, r5, pc}

000d65a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d65a4:	b510      	push	{r4, lr}
   d65a6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d65a8:	2300      	movs	r3, #0
   d65aa:	6063      	str	r3, [r4, #4]
   d65ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d65b0:	60a3      	str	r3, [r4, #8]
   d65b2:	4b05      	ldr	r3, [pc, #20]	; (d65c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d65b4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d65b6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d65b8:	4608      	mov	r0, r1
{
  _serial = serial;
   d65ba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d65bc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d65be:	4611      	mov	r1, r2
   d65c0:	f7fe fb0e 	bl	d4be0 <HAL_USB_USART_Init>
}
   d65c4:	4620      	mov	r0, r4
   d65c6:	bd10      	pop	{r4, pc}
   d65c8:	000d898c 	.word	0x000d898c

000d65cc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d65cc:	2200      	movs	r2, #0
   d65ce:	7c00      	ldrb	r0, [r0, #16]
   d65d0:	f7fe bb0e 	b.w	d4bf0 <HAL_USB_USART_Begin>

000d65d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d65d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d65d6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d65d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d65da:	2100      	movs	r1, #0
   d65dc:	f001 fe3e 	bl	d825c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d65e0:	4620      	mov	r0, r4
   d65e2:	bd10      	pop	{r4, pc}

000d65e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d65e4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d65e6:	4d0e      	ldr	r5, [pc, #56]	; (d6620 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d65e8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d65ea:	a801      	add	r0, sp, #4
   d65ec:	f7ff fff2 	bl	d65d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d65f0:	6829      	ldr	r1, [r5, #0]
   d65f2:	f011 0401 	ands.w	r4, r1, #1
   d65f6:	d110      	bne.n	d661a <_Z16_fetch_usbserialv+0x36>
   d65f8:	4628      	mov	r0, r5
   d65fa:	f7fd fd56 	bl	d40aa <__cxa_guard_acquire>
   d65fe:	b160      	cbz	r0, d661a <_Z16_fetch_usbserialv+0x36>
   d6600:	aa01      	add	r2, sp, #4
   d6602:	4621      	mov	r1, r4
   d6604:	4807      	ldr	r0, [pc, #28]	; (d6624 <_Z16_fetch_usbserialv+0x40>)
   d6606:	f7ff ffcd 	bl	d65a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d660a:	4628      	mov	r0, r5
   d660c:	f7fd fd52 	bl	d40b4 <__cxa_guard_release>
   d6610:	4a05      	ldr	r2, [pc, #20]	; (d6628 <_Z16_fetch_usbserialv+0x44>)
   d6612:	4906      	ldr	r1, [pc, #24]	; (d662c <_Z16_fetch_usbserialv+0x48>)
   d6614:	4803      	ldr	r0, [pc, #12]	; (d6624 <_Z16_fetch_usbserialv+0x40>)
   d6616:	f001 f873 	bl	d7700 <__aeabi_atexit>
	return _usbserial;
}
   d661a:	4802      	ldr	r0, [pc, #8]	; (d6624 <_Z16_fetch_usbserialv+0x40>)
   d661c:	b007      	add	sp, #28
   d661e:	bd30      	pop	{r4, r5, pc}
   d6620:	2003e3fc 	.word	0x2003e3fc
   d6624:	2003e400 	.word	0x2003e400
   d6628:	2003e240 	.word	0x2003e240
   d662c:	000d6525 	.word	0x000d6525

000d6630 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6630:	4770      	bx	lr

000d6632 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6632:	7441      	strb	r1, [r0, #17]
   d6634:	4770      	bx	lr

000d6636 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6636:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6638:	7c00      	ldrb	r0, [r0, #16]
   d663a:	f7fe fa49 	bl	d4ad0 <HAL_USART_Available_Data_For_Write>
}
   d663e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6642:	bd08      	pop	{r3, pc}

000d6644 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6644:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6646:	7c00      	ldrb	r0, [r0, #16]
   d6648:	f7fe fa1a 	bl	d4a80 <HAL_USART_Available_Data>
}
   d664c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6650:	bd08      	pop	{r3, pc}

000d6652 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6652:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6654:	7c00      	ldrb	r0, [r0, #16]
   d6656:	f7fe fa23 	bl	d4aa0 <HAL_USART_Peek_Data>
}
   d665a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d665e:	bf28      	it	cs
   d6660:	f04f 30ff 	movcs.w	r0, #4294967295
   d6664:	bd08      	pop	{r3, pc}

000d6666 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6666:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6668:	7c00      	ldrb	r0, [r0, #16]
   d666a:	f7fe fa11 	bl	d4a90 <HAL_USART_Read_Data>
}
   d666e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6672:	bf28      	it	cs
   d6674:	f04f 30ff 	movcs.w	r0, #4294967295
   d6678:	bd08      	pop	{r3, pc}

000d667a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d667a:	7c00      	ldrb	r0, [r0, #16]
   d667c:	f7fe ba18 	b.w	d4ab0 <HAL_USART_Flush_Data>

000d6680 <_ZN11USARTSerialD0Ev>:
   d6680:	b510      	push	{r4, lr}
   d6682:	2114      	movs	r1, #20
   d6684:	4604      	mov	r4, r0
   d6686:	f001 f849 	bl	d771c <_ZdlPvj>
   d668a:	4620      	mov	r0, r4
   d668c:	bd10      	pop	{r4, pc}

000d668e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d668e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6690:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6692:	4604      	mov	r4, r0
   d6694:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6696:	b925      	cbnz	r5, d66a2 <_ZN11USARTSerial5writeEh+0x14>
   d6698:	7c00      	ldrb	r0, [r0, #16]
   d669a:	f7fe fa19 	bl	d4ad0 <HAL_USART_Available_Data_For_Write>
   d669e:	2800      	cmp	r0, #0
   d66a0:	dd05      	ble.n	d66ae <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d66a2:	4631      	mov	r1, r6
   d66a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d66a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d66aa:	f7fe b9e1 	b.w	d4a70 <HAL_USART_Write_Data>
  }
  return 0;
}
   d66ae:	4628      	mov	r0, r5
   d66b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d66b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d66b4:	b510      	push	{r4, lr}
   d66b6:	4604      	mov	r4, r0
   d66b8:	4608      	mov	r0, r1
   d66ba:	4611      	mov	r1, r2
   d66bc:	2200      	movs	r2, #0
   d66be:	6062      	str	r2, [r4, #4]
   d66c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66c4:	60a2      	str	r2, [r4, #8]
   d66c6:	4a05      	ldr	r2, [pc, #20]	; (d66dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d66c8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d66ca:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d66cc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d66ce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d66d0:	461a      	mov	r2, r3
   d66d2:	f7fe f9c5 	bl	d4a60 <HAL_USART_Init>
}
   d66d6:	4620      	mov	r0, r4
   d66d8:	bd10      	pop	{r4, pc}
   d66da:	bf00      	nop
   d66dc:	000d89bc 	.word	0x000d89bc

000d66e0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d66e0:	7c00      	ldrb	r0, [r0, #16]
   d66e2:	f7fe b9ed 	b.w	d4ac0 <HAL_USART_Is_Enabled>
	...

000d66e8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d66e8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d66ea:	4d0c      	ldr	r5, [pc, #48]	; (d671c <_Z22__fetch_global_Serial1v+0x34>)
   d66ec:	6829      	ldr	r1, [r5, #0]
   d66ee:	f011 0401 	ands.w	r4, r1, #1
   d66f2:	d111      	bne.n	d6718 <_Z22__fetch_global_Serial1v+0x30>
   d66f4:	4628      	mov	r0, r5
   d66f6:	f7fd fcd8 	bl	d40aa <__cxa_guard_acquire>
   d66fa:	b168      	cbz	r0, d6718 <_Z22__fetch_global_Serial1v+0x30>
   d66fc:	4a08      	ldr	r2, [pc, #32]	; (d6720 <_Z22__fetch_global_Serial1v+0x38>)
   d66fe:	4b09      	ldr	r3, [pc, #36]	; (d6724 <_Z22__fetch_global_Serial1v+0x3c>)
   d6700:	4809      	ldr	r0, [pc, #36]	; (d6728 <_Z22__fetch_global_Serial1v+0x40>)
   d6702:	4621      	mov	r1, r4
   d6704:	f7ff ffd6 	bl	d66b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6708:	4628      	mov	r0, r5
   d670a:	f7fd fcd3 	bl	d40b4 <__cxa_guard_release>
   d670e:	4a07      	ldr	r2, [pc, #28]	; (d672c <_Z22__fetch_global_Serial1v+0x44>)
   d6710:	4907      	ldr	r1, [pc, #28]	; (d6730 <_Z22__fetch_global_Serial1v+0x48>)
   d6712:	4805      	ldr	r0, [pc, #20]	; (d6728 <_Z22__fetch_global_Serial1v+0x40>)
   d6714:	f000 fff4 	bl	d7700 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6718:	4803      	ldr	r0, [pc, #12]	; (d6728 <_Z22__fetch_global_Serial1v+0x40>)
   d671a:	bd38      	pop	{r3, r4, r5, pc}
   d671c:	2003e4ac 	.word	0x2003e4ac
   d6720:	2003e4b0 	.word	0x2003e4b0
   d6724:	2003e428 	.word	0x2003e428
   d6728:	2003e414 	.word	0x2003e414
   d672c:	2003e240 	.word	0x2003e240
   d6730:	000d6631 	.word	0x000d6631

000d6734 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6734:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6736:	6883      	ldr	r3, [r0, #8]
   d6738:	4604      	mov	r4, r0
   d673a:	b90b      	cbnz	r3, d6740 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d673c:	f001 f801 	bl	d7742 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6740:	68c3      	ldr	r3, [r0, #12]
   d6742:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6744:	68a3      	ldr	r3, [r4, #8]
   d6746:	b11b      	cbz	r3, d6750 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6748:	2203      	movs	r2, #3
   d674a:	4621      	mov	r1, r4
   d674c:	4620      	mov	r0, r4
   d674e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6750:	4620      	mov	r0, r4
   d6752:	2110      	movs	r1, #16
}
   d6754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6758:	f000 bfe0 	b.w	d771c <_ZdlPvj>

000d675c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d675c:	4770      	bx	lr

000d675e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d675e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6760:	4606      	mov	r6, r0
   d6762:	4615      	mov	r5, r2
   d6764:	460c      	mov	r4, r1
   d6766:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6768:	42bc      	cmp	r4, r7
   d676a:	d006      	beq.n	d677a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d676c:	6833      	ldr	r3, [r6, #0]
   d676e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6772:	689b      	ldr	r3, [r3, #8]
   d6774:	4630      	mov	r0, r6
   d6776:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6778:	e7f6      	b.n	d6768 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d677a:	4628      	mov	r0, r5
   d677c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d677e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d677e:	2200      	movs	r2, #0
   d6780:	7c00      	ldrb	r0, [r0, #16]
   d6782:	f7fe b9ad 	b.w	d4ae0 <HAL_I2C_Write_Data>

000d6786 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6786:	2100      	movs	r1, #0
   d6788:	7c00      	ldrb	r0, [r0, #16]
   d678a:	f7fe b9b1 	b.w	d4af0 <HAL_I2C_Available_Data>

000d678e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d678e:	2100      	movs	r1, #0
   d6790:	7c00      	ldrb	r0, [r0, #16]
   d6792:	f7fe b9b5 	b.w	d4b00 <HAL_I2C_Read_Data>

000d6796 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6796:	2100      	movs	r1, #0
   d6798:	7c00      	ldrb	r0, [r0, #16]
   d679a:	f7fe b9b9 	b.w	d4b10 <HAL_I2C_Peek_Data>

000d679e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d679e:	2100      	movs	r1, #0
   d67a0:	7c00      	ldrb	r0, [r0, #16]
   d67a2:	f7fe b9bd 	b.w	d4b20 <HAL_I2C_Flush_Data>

000d67a6 <_ZN7TwoWireD0Ev>:
   d67a6:	b510      	push	{r4, lr}
   d67a8:	2114      	movs	r1, #20
   d67aa:	4604      	mov	r4, r0
   d67ac:	f000 ffb6 	bl	d771c <_ZdlPvj>
   d67b0:	4620      	mov	r0, r4
   d67b2:	bd10      	pop	{r4, pc}

000d67b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d67b4:	b510      	push	{r4, lr}
   d67b6:	4604      	mov	r4, r0
   d67b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d67bc:	4608      	mov	r0, r1
   d67be:	60a3      	str	r3, [r4, #8]
   d67c0:	2100      	movs	r1, #0
   d67c2:	4b04      	ldr	r3, [pc, #16]	; (d67d4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d67c4:	7420      	strb	r0, [r4, #16]
   d67c6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d67c8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d67ca:	f7fe f9b9 	bl	d4b40 <HAL_I2C_Init>

}
   d67ce:	4620      	mov	r0, r4
   d67d0:	bd10      	pop	{r4, pc}
   d67d2:	bf00      	nop
   d67d4:	000d89ec 	.word	0x000d89ec

000d67d8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d67d8:	2100      	movs	r1, #0
   d67da:	7c00      	ldrb	r0, [r0, #16]
   d67dc:	f7fe b9a8 	b.w	d4b30 <HAL_I2C_Is_Enabled>

000d67e0 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d67e0:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d67e2:	2301      	movs	r3, #1
   d67e4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d67e6:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d67e8:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d67ea:	b10b      	cbz	r3, d67f0 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d67ec:	68c0      	ldr	r0, [r0, #12]
   d67ee:	e006      	b.n	d67fe <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d67f0:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d67f2:	b128      	cbz	r0, d6800 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d67f4:	6883      	ldr	r3, [r0, #8]
   d67f6:	b90b      	cbnz	r3, d67fc <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d67f8:	f000 ffa3 	bl	d7742 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67fc:	68c3      	ldr	r3, [r0, #12]
   d67fe:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d6800:	2301      	movs	r3, #1
   d6802:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6804:	2000      	movs	r0, #0
    }
   d6806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d680a:	f7fe b8f1 	b.w	d49f0 <os_thread_exit>

000d680e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d680e:	2200      	movs	r2, #0
   d6810:	4611      	mov	r1, r2
   d6812:	6840      	ldr	r0, [r0, #4]
   d6814:	f7fe baa2 	b.w	d4d5c <network_listening>

000d6818 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6818:	2200      	movs	r2, #0
   d681a:	4611      	mov	r1, r2
   d681c:	6840      	ldr	r0, [r0, #4]
   d681e:	f7fe baad 	b.w	d4d7c <network_get_listen_timeout>

000d6822 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6822:	2200      	movs	r2, #0
   d6824:	6840      	ldr	r0, [r0, #4]
   d6826:	f7fe baa1 	b.w	d4d6c <network_set_listen_timeout>

000d682a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d682a:	2200      	movs	r2, #0
   d682c:	f081 0101 	eor.w	r1, r1, #1
   d6830:	6840      	ldr	r0, [r0, #4]
   d6832:	f7fe ba8b 	b.w	d4d4c <network_listen>

000d6836 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6836:	2300      	movs	r3, #0
   d6838:	461a      	mov	r2, r3
   d683a:	2101      	movs	r1, #1
   d683c:	6840      	ldr	r0, [r0, #4]
   d683e:	f7fe ba7d 	b.w	d4d3c <network_off>

000d6842 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6842:	2300      	movs	r3, #0
   d6844:	461a      	mov	r2, r3
   d6846:	4619      	mov	r1, r3
   d6848:	6840      	ldr	r0, [r0, #4]
   d684a:	f7fe ba6f 	b.w	d4d2c <network_on>

000d684e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d684e:	2200      	movs	r2, #0
   d6850:	4611      	mov	r1, r2
   d6852:	6840      	ldr	r0, [r0, #4]
   d6854:	f7fe ba52 	b.w	d4cfc <network_connecting>

000d6858 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6858:	2200      	movs	r2, #0
   d685a:	2102      	movs	r1, #2
   d685c:	6840      	ldr	r0, [r0, #4]
   d685e:	f7fe ba55 	b.w	d4d0c <network_disconnect>

000d6862 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6862:	2300      	movs	r3, #0
   d6864:	461a      	mov	r2, r3
   d6866:	6840      	ldr	r0, [r0, #4]
   d6868:	f7fe ba40 	b.w	d4cec <network_connect>

000d686c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d686c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d686e:	4605      	mov	r5, r0
   d6870:	b188      	cbz	r0, d6896 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6872:	6804      	ldr	r4, [r0, #0]
   d6874:	b14c      	cbz	r4, d688a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6876:	68a3      	ldr	r3, [r4, #8]
   d6878:	b11b      	cbz	r3, d6882 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d687a:	2203      	movs	r2, #3
   d687c:	4621      	mov	r1, r4
   d687e:	4620      	mov	r0, r4
   d6880:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6882:	2110      	movs	r1, #16
   d6884:	4620      	mov	r0, r4
   d6886:	f000 ff49 	bl	d771c <_ZdlPvj>
   d688a:	4628      	mov	r0, r5
   d688c:	2114      	movs	r1, #20
      }
   d688e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6892:	f000 bf43 	b.w	d771c <_ZdlPvj>
   d6896:	bd38      	pop	{r3, r4, r5, pc}

000d6898 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6898:	b110      	cbz	r0, d68a0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d689a:	6803      	ldr	r3, [r0, #0]
   d689c:	685b      	ldr	r3, [r3, #4]
   d689e:	4718      	bx	r3
   d68a0:	4770      	bx	lr

000d68a2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d68a2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d68a4:	6803      	ldr	r3, [r0, #0]
   d68a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d68a8:	b1bb      	cbz	r3, d68da <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d68aa:	6858      	ldr	r0, [r3, #4]
   d68ac:	f7fe f838 	bl	d4920 <os_thread_is_current>
   d68b0:	b978      	cbnz	r0, d68d2 <_ZN6ThreadD1Ev+0x30>
   d68b2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d68b4:	7c5a      	ldrb	r2, [r3, #17]
   d68b6:	b912      	cbnz	r2, d68be <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d68b8:	6858      	ldr	r0, [r3, #4]
   d68ba:	f7fe f841 	bl	d4940 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d68be:	6823      	ldr	r3, [r4, #0]
   d68c0:	6858      	ldr	r0, [r3, #4]
   d68c2:	f7fe f845 	bl	d4950 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68c6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68c8:	2300      	movs	r3, #0
   d68ca:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d68cc:	b128      	cbz	r0, d68da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d68ce:	f7ff ffcd 	bl	d686c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68d2:	6820      	ldr	r0, [r4, #0]
   d68d4:	b108      	cbz	r0, d68da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d68d6:	f7ff ffc9 	bl	d686c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d68da:	4620      	mov	r0, r4
   d68dc:	bd10      	pop	{r4, pc}
	...

000d68e0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d68e0:	b538      	push	{r3, r4, r5, lr}
   d68e2:	4b0c      	ldr	r3, [pc, #48]	; (d6914 <_ZN5spark9MeshClassD1Ev+0x34>)
   d68e4:	6003      	str	r3, [r0, #0]
   d68e6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68e8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d68ec:	b108      	cbz	r0, d68f2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d68ee:	f7fd fbda 	bl	d40a6 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68f2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d68f6:	b135      	cbz	r5, d6906 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68f8:	4628      	mov	r0, r5
   d68fa:	f7ff ffd2 	bl	d68a2 <_ZN6ThreadD1Ev>
   d68fe:	2104      	movs	r1, #4
   d6900:	4628      	mov	r0, r5
   d6902:	f000 ff0b 	bl	d771c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6906:	68a0      	ldr	r0, [r4, #8]
   d6908:	b108      	cbz	r0, d690e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d690a:	f7ff ffc5 	bl	d6898 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d690e:	4620      	mov	r0, r4
   d6910:	bd38      	pop	{r3, r4, r5, pc}
   d6912:	bf00      	nop
   d6914:	000d8a14 	.word	0x000d8a14

000d6918 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d691c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d691e:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d6922:	4606      	mov	r6, r0
   d6924:	4688      	mov	r8, r1
   d6926:	4691      	mov	r9, r2
   d6928:	469a      	mov	sl, r3
   d692a:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d692c:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d692e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6930:	454b      	cmp	r3, r9
   d6932:	d129      	bne.n	d6988 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d6934:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d6936:	4553      	cmp	r3, sl
   d6938:	d126      	bne.n	d6988 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d693a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d693e:	455b      	cmp	r3, fp
   d6940:	d122      	bne.n	d6988 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6942:	2140      	movs	r1, #64	; 0x40
   d6944:	4640      	mov	r0, r8
   d6946:	f001 fd16 	bl	d8376 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d694a:	4641      	mov	r1, r8
   d694c:	4602      	mov	r2, r0
   d694e:	4620      	mov	r0, r4
   d6950:	f001 fce9 	bl	d8326 <strncmp>
   d6954:	b9c0      	cbnz	r0, d6988 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d6956:	b16f      	cbz	r7, d6974 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d6958:	210c      	movs	r1, #12
   d695a:	4638      	mov	r0, r7
   d695c:	f001 fd0b 	bl	d8376 <strnlen>
                if (id_len)
   d6960:	4602      	mov	r2, r0
   d6962:	b138      	cbz	r0, d6974 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d6964:	2358      	movs	r3, #88	; 0x58
   d6966:	fb03 6005 	mla	r0, r3, r5, r6
   d696a:	4639      	mov	r1, r7
   d696c:	3049      	adds	r0, #73	; 0x49
   d696e:	f001 fcda 	bl	d8326 <strncmp>
   d6972:	e004      	b.n	d697e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d6974:	2058      	movs	r0, #88	; 0x58
   d6976:	fb00 6505 	mla	r5, r0, r5, r6
   d697a:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d697e:	fab0 f080 	clz	r0, r0
   d6982:	0940      	lsrs	r0, r0, #5
   d6984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6988:	3501      	adds	r5, #1
   d698a:	2d05      	cmp	r5, #5
   d698c:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d6990:	d1cd      	bne.n	d692e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d6992:	2000      	movs	r0, #0
}
   d6994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6998 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d699c:	b085      	sub	sp, #20
   d699e:	4607      	mov	r7, r0
   d69a0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d69a4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d69a6:	9601      	str	r6, [sp, #4]
   d69a8:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d69ac:	4689      	mov	r9, r1
   d69ae:	9202      	str	r2, [sp, #8]
   d69b0:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d69b2:	f7ff ffb1 	bl	d6918 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d69b6:	2800      	cmp	r0, #0
   d69b8:	d13c      	bne.n	d6a34 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d69ba:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d69bc:	2358      	movs	r3, #88	; 0x58
   d69be:	fb03 7504 	mla	r5, r3, r4, r7
   d69c2:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d69c6:	f1b8 0f00 	cmp.w	r8, #0
   d69ca:	d12e      	bne.n	d6a2a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d69cc:	2140      	movs	r1, #64	; 0x40
   d69ce:	4648      	mov	r0, r9
   d69d0:	f001 fcd1 	bl	d8376 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d69d4:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d69d6:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d69d8:	4602      	mov	r2, r0
   d69da:	4628      	mov	r0, r5
   d69dc:	f001 fc33 	bl	d8246 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d69e0:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d69e4:	4641      	mov	r1, r8
   d69e6:	eb05 000b 	add.w	r0, r5, fp
   d69ea:	f001 fc37 	bl	d825c <memset>
            event_handlers[i].handler = handler;
   d69ee:	9b02      	ldr	r3, [sp, #8]
   d69f0:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d69f2:	9b03      	ldr	r3, [sp, #12]
   d69f4:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d69f6:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d69fa:	b12e      	cbz	r6, d6a08 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d69fc:	210c      	movs	r1, #12
   d69fe:	4630      	mov	r0, r6
   d6a00:	f001 fcb9 	bl	d8376 <strnlen>
   d6a04:	4605      	mov	r5, r0
   d6a06:	e000      	b.n	d6a0a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d6a08:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d6a0a:	2058      	movs	r0, #88	; 0x58
   d6a0c:	4344      	muls	r4, r0
   d6a0e:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d6a10:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d6a12:	462a      	mov	r2, r5
   d6a14:	4631      	mov	r1, r6
   d6a16:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d6a18:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d6a1a:	f001 fc14 	bl	d8246 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d6a1e:	2000      	movs	r0, #0
   d6a20:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d6a24:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d6a28:	e005      	b.n	d6a36 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6a2a:	3401      	adds	r4, #1
   d6a2c:	2c05      	cmp	r4, #5
   d6a2e:	d1c6      	bne.n	d69be <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d6a30:	4802      	ldr	r0, [pc, #8]	; (d6a3c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d6a32:	e000      	b.n	d6a36 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d6a34:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d6a36:	b005      	add	sp, #20
   d6a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a3c:	fffffefc 	.word	0xfffffefc

000d6a40 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d6a40:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d6a42:	2300      	movs	r3, #0
   d6a44:	9301      	str	r3, [sp, #4]
   d6a46:	9300      	str	r3, [sp, #0]
   d6a48:	f7ff ffa6 	bl	d6998 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d6a4c:	b003      	add	sp, #12
   d6a4e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a52 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6a52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6a56:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d6a58:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6a5a:	460d      	mov	r5, r1
   d6a5c:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d6a5e:	f001 fc5a 	bl	d8316 <strlen>
   d6a62:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d6a66:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d6a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6a6a:	b1ab      	cbz	r3, d6a98 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6a6c:	2140      	movs	r1, #64	; 0x40
   d6a6e:	4620      	mov	r0, r4
   d6a70:	f001 fc81 	bl	d8376 <strnlen>

        if (event_name_length < filter_length)
   d6a74:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6a76:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d6a78:	d30b      	bcc.n	d6a92 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d6a7a:	4629      	mov	r1, r5
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	f001 fbd3 	bl	d8228 <memcmp>
        if (0 == cmp)
   d6a82:	b930      	cbnz	r0, d6a92 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d6a84:	9000      	str	r0, [sp, #0]
   d6a86:	4643      	mov	r3, r8
   d6a88:	462a      	mov	r2, r5
   d6a8a:	4621      	mov	r1, r4
   d6a8c:	2058      	movs	r0, #88	; 0x58
   d6a8e:	f7fe f923 	bl	d4cd8 <system_invoke_event_handler>
   d6a92:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6a94:	42b4      	cmp	r4, r6
   d6a96:	d1e7      	bne.n	d6a68 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d6a98:	b002      	add	sp, #8
   d6a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6aa0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d6aa0:	b530      	push	{r4, r5, lr}
   d6aa2:	b08d      	sub	sp, #52	; 0x34
   d6aa4:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d6aa6:	2211      	movs	r2, #17
   d6aa8:	2100      	movs	r1, #0
   d6aaa:	a801      	add	r0, sp, #4
   d6aac:	f001 fbd6 	bl	d825c <memset>
    addr.v = 6;
   d6ab0:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6ab2:	aa01      	add	r2, sp, #4
   d6ab4:	4909      	ldr	r1, [pc, #36]	; (d6adc <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d6ab6:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6aba:	200a      	movs	r0, #10
   d6abc:	f7fd ffb0 	bl	d4a20 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6ac0:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d6ac2:	a901      	add	r1, sp, #4
   d6ac4:	a806      	add	r0, sp, #24
   d6ac6:	f7ff fceb 	bl	d64a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6acc:	3404      	adds	r4, #4
   d6ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ad0:	682b      	ldr	r3, [r5, #0]
   d6ad2:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d6ad4:	2000      	movs	r0, #0
   d6ad6:	b00d      	add	sp, #52	; 0x34
   d6ad8:	bd30      	pop	{r4, r5, pc}
   d6ada:	bf00      	nop
   d6adc:	000d8a40 	.word	0x000d8a40

000d6ae0 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ae4:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d6ae6:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6aea:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6aec:	4630      	mov	r0, r6
   d6aee:	f7ff f91f 	bl	d5d30 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6af2:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6af4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6af8:	f7fd ff72 	bl	d49e0 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d6afc:	2c00      	cmp	r4, #0
   d6afe:	d063      	beq.n	d6bc8 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d6b00:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d6b04:	b163      	cbz	r3, d6b20 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d6b06:	6823      	ldr	r3, [r4, #0]
   d6b08:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d6b0c:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d6b0e:	4620      	mov	r0, r4
   d6b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b14:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d6b18:	47b8      	blx	r7
        if (len > 0) {
   d6b1a:	1e04      	subs	r4, r0, #0
   d6b1c:	dc13      	bgt.n	d6b46 <_ZN5spark11MeshPublish4pollEv+0x66>
   d6b1e:	e056      	b.n	d6bce <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d6b20:	492d      	ldr	r1, [pc, #180]	; (d6bd8 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d6b22:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d6b26:	f000 fdfb 	bl	d7720 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b2a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d6b2e:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d6b32:	b113      	cbz	r3, d6b3a <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6b34:	4618      	mov	r0, r3
   d6b36:	f7fd fab6 	bl	d40a6 <_ZdaPv>
            if (!buffer_) {
   d6b3a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d6b3e:	2b00      	cmp	r3, #0
   d6b40:	d1e1      	bne.n	d6b06 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d6b42:	4826      	ldr	r0, [pc, #152]	; (d6bdc <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d6b44:	e044      	b.n	d6bd0 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d6b46:	2320      	movs	r3, #32
   d6b48:	4a25      	ldr	r2, [pc, #148]	; (d6be0 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d6b4a:	9302      	str	r3, [sp, #8]
   d6b4c:	9200      	str	r2, [sp, #0]
   d6b4e:	2300      	movs	r3, #0
   d6b50:	9401      	str	r4, [sp, #4]
   d6b52:	aa02      	add	r2, sp, #8
   d6b54:	4923      	ldr	r1, [pc, #140]	; (d6be4 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d6b56:	9303      	str	r3, [sp, #12]
   d6b58:	2001      	movs	r0, #1
   d6b5a:	f7fe f881 	bl	d4c60 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6b5e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d6b62:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d6b64:	781b      	ldrb	r3, [r3, #0]
   d6b66:	bb6b      	cbnz	r3, d6bc4 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d6b68:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d6b6a:	4621      	mov	r1, r4
   d6b6c:	4638      	mov	r0, r7
   d6b6e:	f001 fc02 	bl	d8376 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d6b72:	b338      	cbz	r0, d6bc4 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d6b74:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d6b76:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d6b78:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d6b7c:	dd22      	ble.n	d6bc4 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d6b7e:	5c3b      	ldrb	r3, [r7, r0]
   d6b80:	bb03      	cbnz	r3, d6bc4 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d6b82:	3c01      	subs	r4, #1
   d6b84:	d00e      	beq.n	d6ba4 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d6b86:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d6b8a:	4621      	mov	r1, r4
   d6b8c:	4640      	mov	r0, r8
   d6b8e:	f001 fbf2 	bl	d8376 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d6b92:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d6b94:	2c00      	cmp	r4, #0
   d6b96:	dd15      	ble.n	d6bc4 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d6b98:	f818 3000 	ldrb.w	r3, [r8, r0]
   d6b9c:	b993      	cbnz	r3, d6bc4 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d6b9e:	2c01      	cmp	r4, #1
   d6ba0:	d002      	beq.n	d6ba8 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d6ba2:	e00f      	b.n	d6bc4 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d6ba4:	f8df 8044 	ldr.w	r8, [pc, #68]	; d6bec <_ZN5spark11MeshPublish4pollEv+0x10c>
   d6ba8:	4630      	mov	r0, r6
   d6baa:	f7ff f8c1 	bl	d5d30 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d6bae:	4642      	mov	r2, r8
   d6bb0:	4639      	mov	r1, r7
   d6bb2:	1d28      	adds	r0, r5, #4
   d6bb4:	f7ff ff4d 	bl	d6a52 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d6bb8:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6bbc:	f7fd ff10 	bl	d49e0 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d6bc0:	2000      	movs	r0, #0
   d6bc2:	e005      	b.n	d6bd0 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d6bc4:	4808      	ldr	r0, [pc, #32]	; (d6be8 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d6bc6:	e003      	b.n	d6bd0 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d6bc8:	2064      	movs	r0, #100	; 0x64
   d6bca:	f7fd fe65 	bl	d4898 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d6bce:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d6bd0:	b00a      	add	sp, #40	; 0x28
   d6bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6bd6:	bf00      	nop
   d6bd8:	000d8b1c 	.word	0x000d8b1c
   d6bdc:	fffffefc 	.word	0xfffffefc
   d6be0:	000d8a54 	.word	0x000d8a54
   d6be4:	000d8a4d 	.word	0x000d8a4d
   d6be8:	fffffee8 	.word	0xfffffee8
   d6bec:	000d88f0 	.word	0x000d88f0

000d6bf0 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d6bf0:	b510      	push	{r4, lr}
   d6bf2:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6bf4:	f3bf 8f5f 	dmb	sy
   d6bf8:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d6bfc:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d6c00:	b91b      	cbnz	r3, d6c0a <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d6c02:	4620      	mov	r0, r4
   d6c04:	f7ff ff6c 	bl	d6ae0 <_ZN5spark11MeshPublish4pollEv>
   d6c08:	e7f4      	b.n	d6bf4 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d6c0a:	bd10      	pop	{r4, pc}

000d6c0c <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d6c0c:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c0e:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6c10:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6c12:	b144      	cbz	r4, d6c26 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c14:	4620      	mov	r0, r4
   d6c16:	f7ff fe44 	bl	d68a2 <_ZN6ThreadD1Ev>
   d6c1a:	4620      	mov	r0, r4
   d6c1c:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d6c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c22:	f000 bd7b 	b.w	d771c <_ZdlPvj>
   d6c26:	bd10      	pop	{r4, pc}

000d6c28 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d6c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c2c:	4605      	mov	r5, r0
   d6c2e:	b08a      	sub	sp, #40	; 0x28
   d6c30:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6c34:	f7ff f87c 	bl	d5d30 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d6c38:	682c      	ldr	r4, [r5, #0]
   d6c3a:	2c00      	cmp	r4, #0
   d6c3c:	d17b      	bne.n	d6d36 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d6c3e:	204c      	movs	r0, #76	; 0x4c
   d6c40:	f7fd fa2b 	bl	d409a <_Znwj>
   d6c44:	4606      	mov	r6, r0
   d6c46:	2800      	cmp	r0, #0
   d6c48:	d073      	beq.n	d6d32 <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d6c4a:	f7fe fc1b 	bl	d5484 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d6c4e:	4622      	mov	r2, r4
   d6c50:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d6c54:	4630      	mov	r0, r6
   d6c56:	f7fe fc45 	bl	d54e4 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d6c5a:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d6c5c:	483a      	ldr	r0, [pc, #232]	; (d6d48 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d6c5e:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d6c62:	f7fd fde9 	bl	d4838 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d6c66:	6833      	ldr	r3, [r6, #0]
   d6c68:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6c6c:	6a1b      	ldr	r3, [r3, #32]
   d6c6e:	f249 0169 	movw	r1, #36969	; 0x9069
   d6c72:	4630      	mov	r0, r6
   d6c74:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d6c76:	a804      	add	r0, sp, #16
   d6c78:	f7ff fc04 	bl	d6484 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6c7c:	a804      	add	r0, sp, #16
   d6c7e:	f7ff ff0f 	bl	d6aa0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6c82:	2800      	cmp	r0, #0
   d6c84:	db4a      	blt.n	d6d1c <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d6c86:	a904      	add	r1, sp, #16
   d6c88:	4630      	mov	r0, r6
   d6c8a:	f7fe fc7a 	bl	d5582 <_ZN3UDP13joinMulticastERK9IPAddress>
   d6c8e:	2800      	cmp	r0, #0
   d6c90:	db44      	blt.n	d6d1c <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6c92:	f3bf 8f5f 	dmb	sy
   d6c96:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d6c9a:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d6c9e:	492b      	ldr	r1, [pc, #172]	; (d6d4c <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d6ca0:	2004      	movs	r0, #4
   d6ca2:	f000 fd3f 	bl	d7724 <_ZnwjRKSt9nothrow_t>
   d6ca6:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d6caa:	4607      	mov	r7, r0
   d6cac:	b348      	cbz	r0, d6d02 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d6cae:	4927      	ldr	r1, [pc, #156]	; (d6d4c <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d6cb0:	2014      	movs	r0, #20
   d6cb2:	f000 fd37 	bl	d7724 <_ZnwjRKSt9nothrow_t>
   d6cb6:	b128      	cbz	r0, d6cc4 <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d6cb8:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6cba:	6004      	str	r4, [r0, #0]
   d6cbc:	6044      	str	r4, [r0, #4]
   d6cbe:	6084      	str	r4, [r0, #8]
   d6cc0:	60c4      	str	r4, [r0, #12]
   d6cc2:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6cc4:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d6cc6:	b1b0      	cbz	r0, d6cf6 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d6cc8:	4b21      	ldr	r3, [pc, #132]	; (d6d50 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d6cca:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6ccc:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6cce:	4921      	ldr	r1, [pc, #132]	; (d6d54 <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d6cd0:	60dd      	str	r5, [r3, #12]
   d6cd2:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6cd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d6cd8:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6cdc:	2203      	movs	r2, #3
   d6cde:	4b1e      	ldr	r3, [pc, #120]	; (d6d58 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d6ce0:	3004      	adds	r0, #4
   d6ce2:	f7fd fe15 	bl	d4910 <os_thread_create>
   d6ce6:	b930      	cbnz	r0, d6cf6 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d6ce8:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d6cea:	7c1b      	ldrb	r3, [r3, #16]
   d6cec:	b94b      	cbnz	r3, d6d02 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d6cee:	2001      	movs	r0, #1
   d6cf0:	f7fd fdd2 	bl	d4898 <HAL_Delay_Milliseconds>
   d6cf4:	e7f8      	b.n	d6ce8 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6cf6:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6cf8:	2300      	movs	r3, #0
   d6cfa:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6cfc:	b108      	cbz	r0, d6d02 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d6cfe:	f7ff fdb5 	bl	d686c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d6d02:	4639      	mov	r1, r7
   d6d04:	4640      	mov	r0, r8
   d6d06:	f7ff ff81 	bl	d6c0c <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d6d0a:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d6d0e:	b13b      	cbz	r3, d6d20 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d10:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6d12:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6d14:	b130      	cbz	r0, d6d24 <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d6d16:	f7ff fdbf 	bl	d6898 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6d1a:	e00c      	b.n	d6d36 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d6d1c:	4604      	mov	r4, r0
   d6d1e:	e003      	b.n	d6d28 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d6d20:	4c0e      	ldr	r4, [pc, #56]	; (d6d5c <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d6d22:	e001      	b.n	d6d28 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d6d24:	4604      	mov	r4, r0
   d6d26:	e007      	b.n	d6d38 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d28:	b136      	cbz	r6, d6d38 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d6d2a:	4630      	mov	r0, r6
   d6d2c:	f7ff fdb4 	bl	d6898 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6d30:	e002      	b.n	d6d38 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d6d32:	4c0a      	ldr	r4, [pc, #40]	; (d6d5c <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d6d34:	e000      	b.n	d6d38 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d6d36:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6d38:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6d3c:	f7fd fe50 	bl	d49e0 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d6d40:	4620      	mov	r0, r4
   d6d42:	b00a      	add	sp, #40	; 0x28
   d6d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d48:	000d8a64 	.word	0x000d8a64
   d6d4c:	000d8b1c 	.word	0x000d8b1c
   d6d50:	000d6bf1 	.word	0x000d6bf1
   d6d54:	000d8a68 	.word	0x000d8a68
   d6d58:	000d67e1 	.word	0x000d67e1
   d6d5c:	fffffefc 	.word	0xfffffefc

000d6d60 <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d6d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6d64:	4605      	mov	r5, r0
   d6d66:	b08c      	sub	sp, #48	; 0x30
   d6d68:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d6d6a:	460f      	mov	r7, r1
   d6d6c:	b109      	cbz	r1, d6d72 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d6d6e:	780b      	ldrb	r3, [r1, #0]
   d6d70:	b90b      	cbnz	r3, d6d76 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d6d72:	4c35      	ldr	r4, [pc, #212]	; (d6e48 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d6d74:	e064      	b.n	d6e40 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d6d76:	4608      	mov	r0, r1
   d6d78:	f001 facd 	bl	d8316 <strlen>
   d6d7c:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6d7e:	2e00      	cmp	r6, #0
   d6d80:	d05c      	beq.n	d6e3c <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d6d82:	4630      	mov	r0, r6
   d6d84:	f001 fac7 	bl	d8316 <strlen>
   d6d88:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6d8a:	f108 0302 	add.w	r3, r8, #2
   d6d8e:	4423      	add	r3, r4
   d6d90:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d6d94:	d84f      	bhi.n	d6e36 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d6d96:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d6d9a:	f7fe ffc9 	bl	d5d30 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d6d9e:	4628      	mov	r0, r5
   d6da0:	f7ff ff42 	bl	d6c28 <_ZN5spark11MeshPublish13initializeUdpEv>
   d6da4:	2800      	cmp	r0, #0
   d6da6:	db40      	blt.n	d6e2a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d6da8:	4668      	mov	r0, sp
   d6daa:	f7ff fb6b 	bl	d6484 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6dae:	4668      	mov	r0, sp
   d6db0:	f7ff fe76 	bl	d6aa0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6db4:	2800      	cmp	r0, #0
   d6db6:	db38      	blt.n	d6e2a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6db8:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d6dbc:	f8da 3000 	ldr.w	r3, [sl]
   d6dc0:	f10d 0c04 	add.w	ip, sp, #4
   d6dc4:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d6dc8:	4b20      	ldr	r3, [pc, #128]	; (d6e4c <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d6dca:	9306      	str	r3, [sp, #24]
   d6dcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6dd0:	f10d 0e1c 	add.w	lr, sp, #28
   d6dd4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6dd8:	f8dc 3000 	ldr.w	r3, [ip]
   d6ddc:	f88e 3000 	strb.w	r3, [lr]
   d6de0:	f249 0269 	movw	r2, #36969	; 0x9069
   d6de4:	a906      	add	r1, sp, #24
   d6de6:	4650      	mov	r0, sl
   d6de8:	47c8      	blx	r9
   d6dea:	2800      	cmp	r0, #0
   d6dec:	db1d      	blt.n	d6e2a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d6dee:	2300      	movs	r3, #0
   d6df0:	6828      	ldr	r0, [r5, #0]
   d6df2:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d6df6:	6803      	ldr	r3, [r0, #0]
   d6df8:	2201      	movs	r2, #1
   d6dfa:	68db      	ldr	r3, [r3, #12]
   d6dfc:	a906      	add	r1, sp, #24
   d6dfe:	4798      	blx	r3
   d6e00:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d6e02:	6803      	ldr	r3, [r0, #0]
   d6e04:	f108 0201 	add.w	r2, r8, #1
   d6e08:	68db      	ldr	r3, [r3, #12]
   d6e0a:	4639      	mov	r1, r7
   d6e0c:	4798      	blx	r3
    if (dataLen > 0) {
   d6e0e:	b12c      	cbz	r4, d6e1c <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d6e10:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d6e12:	6803      	ldr	r3, [r0, #0]
   d6e14:	4622      	mov	r2, r4
   d6e16:	68db      	ldr	r3, [r3, #12]
   d6e18:	4631      	mov	r1, r6
   d6e1a:	4798      	blx	r3
   d6e1c:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d6e1e:	6803      	ldr	r3, [r0, #0]
   d6e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6e22:	4798      	blx	r3
   d6e24:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6e28:	e000      	b.n	d6e2c <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d6e2a:	4604      	mov	r4, r0
   d6e2c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6e30:	f7fd fdd6 	bl	d49e0 <os_mutex_recursive_unlock>
   d6e34:	e004      	b.n	d6e40 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6e36:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d6e3a:	e001      	b.n	d6e40 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6e3c:	4634      	mov	r4, r6
   d6e3e:	e7a4      	b.n	d6d8a <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d6e40:	4620      	mov	r0, r4
   d6e42:	b00c      	add	sp, #48	; 0x30
   d6e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e48:	fffffef2 	.word	0xfffffef2
   d6e4c:	000d8978 	.word	0x000d8978

000d6e50 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d6e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e52:	4605      	mov	r5, r0
   d6e54:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6e58:	460e      	mov	r6, r1
   d6e5a:	4617      	mov	r7, r2
   d6e5c:	f7fe ff68 	bl	d5d30 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d6e60:	4628      	mov	r0, r5
   d6e62:	f7ff fee1 	bl	d6c28 <_ZN5spark11MeshPublish13initializeUdpEv>
   d6e66:	2800      	cmp	r0, #0
   d6e68:	db07      	blt.n	d6e7a <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   d6e6a:	463a      	mov	r2, r7
   d6e6c:	4631      	mov	r1, r6
   d6e6e:	1d28      	adds	r0, r5, #4
   d6e70:	f7ff fde6 	bl	d6a40 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d6e74:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6e78:	e000      	b.n	d6e7c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   d6e7a:	4604      	mov	r4, r0
   d6e7c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6e80:	f7fd fdae 	bl	d49e0 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d6e84:	4620      	mov	r0, r4
   d6e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6e88:	b538      	push	{r3, r4, r5, lr}
   d6e8a:	4c0e      	ldr	r4, [pc, #56]	; (d6ec4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6e8c:	4b0e      	ldr	r3, [pc, #56]	; (d6ec8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6e8e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6e90:	2500      	movs	r5, #0
   d6e92:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6e94:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6e98:	6063      	str	r3, [r4, #4]
   d6e9a:	60a5      	str	r5, [r4, #8]
   d6e9c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6ea0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6ea4:	f7fd fd8c 	bl	d49c0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6ea8:	4b08      	ldr	r3, [pc, #32]	; (d6ecc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6eaa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6eae:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6eb2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	4a06      	ldr	r2, [pc, #24]	; (d6ed0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6eb8:	4906      	ldr	r1, [pc, #24]	; (d6ed4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6ebe:	f000 bc1f 	b.w	d7700 <__aeabi_atexit>
   d6ec2:	bf00      	nop
   d6ec4:	2003e534 	.word	0x2003e534
   d6ec8:	000d8af0 	.word	0x000d8af0
   d6ecc:	000d8a14 	.word	0x000d8a14
   d6ed0:	2003e240 	.word	0x2003e240
   d6ed4:	000d68e1 	.word	0x000d68e1

000d6ed8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6eda:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6edc:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6ede:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6ee2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6ee4:	2201      	movs	r2, #1
   d6ee6:	f04f 33ff 	mov.w	r3, #4294967295
   d6eea:	4621      	mov	r1, r4
   d6eec:	47a8      	blx	r5
}
   d6eee:	b003      	add	sp, #12
   d6ef0:	bd30      	pop	{r4, r5, pc}

000d6ef2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6ef2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6ef4:	6803      	ldr	r3, [r0, #0]
   d6ef6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6ef8:	f04f 33ff 	mov.w	r3, #4294967295
   d6efc:	46a4      	mov	ip, r4
}
   d6efe:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6f02:	4760      	bx	ip

000d6f04 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6f06:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6f08:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6f0a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6f0e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6f10:	4621      	mov	r1, r4
   d6f12:	4613      	mov	r3, r2
   d6f14:	2201      	movs	r2, #1
   d6f16:	47a8      	blx	r5
}
   d6f18:	b003      	add	sp, #12
   d6f1a:	bd30      	pop	{r4, r5, pc}

000d6f1c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6f1c:	4770      	bx	lr

000d6f1e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6f1e:	b538      	push	{r3, r4, r5, lr}
   d6f20:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6f22:	681a      	ldr	r2, [r3, #0]
   d6f24:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6f26:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6f28:	da05      	bge.n	d6f36 <_ZN9TCPClient9connectedEv+0x18>
   d6f2a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6f2e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6f32:	429a      	cmp	r2, r3
   d6f34:	d001      	beq.n	d6f3a <_ZN9TCPClient9connectedEv+0x1c>
   d6f36:	2501      	movs	r5, #1
   d6f38:	e00b      	b.n	d6f52 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6f3a:	6803      	ldr	r3, [r0, #0]
   d6f3c:	691b      	ldr	r3, [r3, #16]
   d6f3e:	4798      	blx	r3
   d6f40:	2800      	cmp	r0, #0
   d6f42:	bf14      	ite	ne
   d6f44:	2501      	movne	r5, #1
   d6f46:	2500      	moveq	r5, #0
        if (!rv) {
   d6f48:	d103      	bne.n	d6f52 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6f4a:	6823      	ldr	r3, [r4, #0]
   d6f4c:	4620      	mov	r0, r4
   d6f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f50:	4798      	blx	r3
        }
    }
    return rv;
}
   d6f52:	4628      	mov	r0, r5
   d6f54:	bd38      	pop	{r3, r4, r5, pc}

000d6f56 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6f56:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6f58:	6818      	ldr	r0, [r3, #0]
}
   d6f5a:	43c0      	mvns	r0, r0
   d6f5c:	0fc0      	lsrs	r0, r0, #31
   d6f5e:	4770      	bx	lr

000d6f60 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6f60:	4770      	bx	lr

000d6f62 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6f62:	2000      	movs	r0, #0
   d6f64:	4770      	bx	lr

000d6f66 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6f66:	b510      	push	{r4, lr}
   d6f68:	2114      	movs	r1, #20
   d6f6a:	4604      	mov	r4, r0
   d6f6c:	f000 fbd6 	bl	d771c <_ZdlPvj>
   d6f70:	4620      	mov	r0, r4
   d6f72:	bd10      	pop	{r4, pc}

000d6f74 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6f74:	f7fd b895 	b.w	d40a2 <_ZdlPv>

000d6f78 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6f78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6f7a:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6f7c:	2200      	movs	r2, #0
   d6f7e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6f80:	9202      	str	r2, [sp, #8]
   d6f82:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6f84:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6f86:	4604      	mov	r4, r0
   d6f88:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6f8a:	d008      	beq.n	d6f9e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6f90:	fbb3 f1f2 	udiv	r1, r3, r2
   d6f94:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6f96:	fb02 3111 	mls	r1, r2, r1, r3
   d6f9a:	434a      	muls	r2, r1
   d6f9c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6f9e:	6960      	ldr	r0, [r4, #20]
   d6fa0:	2308      	movs	r3, #8
   d6fa2:	9300      	str	r3, [sp, #0]
   d6fa4:	f241 0205 	movw	r2, #4101	; 0x1005
   d6fa8:	446b      	add	r3, sp
   d6faa:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6fae:	6800      	ldr	r0, [r0, #0]
   d6fb0:	f7fd fdd6 	bl	d4b60 <sock_setsockopt>
    if (ret < 0) {
   d6fb4:	2800      	cmp	r0, #0
   d6fb6:	db08      	blt.n	d6fca <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6fb8:	6960      	ldr	r0, [r4, #20]
   d6fba:	2300      	movs	r3, #0
   d6fbc:	4632      	mov	r2, r6
   d6fbe:	4629      	mov	r1, r5
   d6fc0:	6800      	ldr	r0, [r0, #0]
   d6fc2:	f7fd fdf5 	bl	d4bb0 <sock_send>
    if (ret < 0) {
   d6fc6:	2800      	cmp	r0, #0
   d6fc8:	da04      	bge.n	d6fd4 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6fca:	f7fd ff47 	bl	d4e5c <__errno>
   d6fce:	6803      	ldr	r3, [r0, #0]
   d6fd0:	6063      	str	r3, [r4, #4]
   d6fd2:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6fd4:	b004      	add	sp, #16
   d6fd6:	bd70      	pop	{r4, r5, r6, pc}

000d6fd8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6fd8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6fda:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6fdc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6fde:	689b      	ldr	r3, [r3, #8]
   d6fe0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6fe2:	68a3      	ldr	r3, [r4, #8]
   d6fe4:	3b01      	subs	r3, #1
   d6fe6:	60a3      	str	r3, [r4, #8]
   d6fe8:	b92b      	cbnz	r3, d6ff6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d6fea:	6823      	ldr	r3, [r4, #0]
   d6fec:	4620      	mov	r0, r4
   d6fee:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6ff4:	4718      	bx	r3
   d6ff6:	bd10      	pop	{r4, pc}

000d6ff8 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6ff8:	b570      	push	{r4, r5, r6, lr}
   d6ffa:	4604      	mov	r4, r0
   d6ffc:	694d      	ldr	r5, [r1, #20]
   d6ffe:	4b05      	ldr	r3, [pc, #20]	; (d7014 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7000:	f844 3b04 	str.w	r3, [r4], #4
   d7004:	358c      	adds	r5, #140	; 0x8c
   d7006:	4606      	mov	r6, r0
   d7008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d700c:	682b      	ldr	r3, [r5, #0]
   d700e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7010:	4630      	mov	r0, r6
   d7012:	bd70      	pop	{r4, r5, r6, pc}
   d7014:	000d8978 	.word	0x000d8978

000d7018 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7018:	b510      	push	{r4, lr}
   d701a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d701c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7020:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7024:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7026:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7028:	d005      	beq.n	d7036 <_ZN9TCPClient4peekEv+0x1e>
   d702a:	6962      	ldr	r2, [r4, #20]
   d702c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7030:	4413      	add	r3, r2
   d7032:	7918      	ldrb	r0, [r3, #4]
   d7034:	bd10      	pop	{r4, pc}
   d7036:	6803      	ldr	r3, [r0, #0]
   d7038:	691b      	ldr	r3, [r3, #16]
   d703a:	4798      	blx	r3
   d703c:	2800      	cmp	r0, #0
   d703e:	d1f4      	bne.n	d702a <_ZN9TCPClient4peekEv+0x12>
   d7040:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7044:	bd10      	pop	{r4, pc}

000d7046 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7046:	b510      	push	{r4, lr}
   d7048:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d704a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d704e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7052:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7054:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7056:	d008      	beq.n	d706a <_ZN9TCPClient4readEv+0x24>
   d7058:	6962      	ldr	r2, [r4, #20]
   d705a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d705e:	1c59      	adds	r1, r3, #1
   d7060:	4413      	add	r3, r2
   d7062:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7066:	7918      	ldrb	r0, [r3, #4]
   d7068:	bd10      	pop	{r4, pc}
   d706a:	6803      	ldr	r3, [r0, #0]
   d706c:	691b      	ldr	r3, [r3, #16]
   d706e:	4798      	blx	r3
   d7070:	2800      	cmp	r0, #0
   d7072:	d1f1      	bne.n	d7058 <_ZN9TCPClient4readEv+0x12>
   d7074:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7078:	bd10      	pop	{r4, pc}

000d707a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d707a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d707c:	6943      	ldr	r3, [r0, #20]
   d707e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7080:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7084:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7088:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d708a:	4605      	mov	r5, r0
   d708c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d708e:	d106      	bne.n	d709e <_ZN9TCPClient4readEPhj+0x24>
   d7090:	6803      	ldr	r3, [r0, #0]
   d7092:	691b      	ldr	r3, [r3, #16]
   d7094:	4798      	blx	r3
   d7096:	b910      	cbnz	r0, d709e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7098:	f04f 34ff 	mov.w	r4, #4294967295
   d709c:	e014      	b.n	d70c8 <_ZN9TCPClient4readEPhj+0x4e>
   d709e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d70a0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d70a4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d70a8:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d70aa:	42bc      	cmp	r4, r7
   d70ac:	bf28      	it	cs
   d70ae:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d70b0:	4419      	add	r1, r3
   d70b2:	4622      	mov	r2, r4
   d70b4:	3104      	adds	r1, #4
   d70b6:	4630      	mov	r0, r6
   d70b8:	f001 f8c5 	bl	d8246 <memcpy>
   d70bc:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d70be:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d70c2:	4423      	add	r3, r4
   d70c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d70c8:	4620      	mov	r0, r4
   d70ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70cc <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d70cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d70d0:	4698      	mov	r8, r3
    stop();
   d70d2:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d70d4:	b093      	sub	sp, #76	; 0x4c
    stop();
   d70d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d70d8:	460d      	mov	r5, r1
   d70da:	4606      	mov	r6, r0
   d70dc:	4617      	mov	r7, r2
    stop();
   d70de:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d70e0:	ab12      	add	r3, sp, #72	; 0x48
   d70e2:	2400      	movs	r4, #0
   d70e4:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d70e8:	4622      	mov	r2, r4
   d70ea:	4621      	mov	r1, r4
   d70ec:	4628      	mov	r0, r5
   d70ee:	f7fd fb5b 	bl	d47a8 <netdb_getaddrinfo>
   d70f2:	4681      	mov	r9, r0
   d70f4:	2800      	cmp	r0, #0
   d70f6:	d13d      	bne.n	d7174 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d70f8:	9b00      	ldr	r3, [sp, #0]
   d70fa:	2b00      	cmp	r3, #0
   d70fc:	d056      	beq.n	d71ac <_ZN9TCPClient7connectEPKctm+0xe0>
   d70fe:	695b      	ldr	r3, [r3, #20]
   d7100:	2b00      	cmp	r3, #0
   d7102:	d053      	beq.n	d71ac <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d7104:	a806      	add	r0, sp, #24
   d7106:	f7ff f9bd 	bl	d6484 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d710a:	9b00      	ldr	r3, [sp, #0]
   d710c:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d710e:	7863      	ldrb	r3, [r4, #1]
   d7110:	2b02      	cmp	r3, #2
   d7112:	d101      	bne.n	d7118 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7114:	1d21      	adds	r1, r4, #4
   d7116:	e013      	b.n	d7140 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7118:	2b0a      	cmp	r3, #10
   d711a:	d114      	bne.n	d7146 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d711c:	2211      	movs	r2, #17
   d711e:	4649      	mov	r1, r9
   d7120:	a801      	add	r0, sp, #4
   d7122:	f001 f89b 	bl	d825c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7126:	68a3      	ldr	r3, [r4, #8]
   d7128:	bb33      	cbnz	r3, d7178 <_ZN9TCPClient7connectEPKctm+0xac>
   d712a:	68e3      	ldr	r3, [r4, #12]
   d712c:	bb23      	cbnz	r3, d7178 <_ZN9TCPClient7connectEPKctm+0xac>
   d712e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7132:	6925      	ldr	r5, [r4, #16]
   d7134:	f7fd fc7c 	bl	d4a30 <inet_htonl>
   d7138:	4285      	cmp	r5, r0
   d713a:	d11d      	bne.n	d7178 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d713c:	f104 0114 	add.w	r1, r4, #20
   d7140:	a806      	add	r0, sp, #24
   d7142:	f7ff f9e2 	bl	d650a <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7146:	a806      	add	r0, sp, #24
   d7148:	f7ff f9bc 	bl	d64c4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d714c:	2800      	cmp	r0, #0
   d714e:	d02d      	beq.n	d71ac <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7150:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7152:	ad07      	add	r5, sp, #28
   d7154:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7158:	4b18      	ldr	r3, [pc, #96]	; (d71bc <_ZN9TCPClient7connectEPKctm+0xf0>)
   d715a:	930c      	str	r3, [sp, #48]	; 0x30
   d715c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d715e:	ac0d      	add	r4, sp, #52	; 0x34
   d7160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7162:	682b      	ldr	r3, [r5, #0]
   d7164:	7023      	strb	r3, [r4, #0]
   d7166:	463a      	mov	r2, r7
   d7168:	4643      	mov	r3, r8
   d716a:	a90c      	add	r1, sp, #48	; 0x30
   d716c:	4630      	mov	r0, r6
   d716e:	47c8      	blx	r9
   d7170:	4681      	mov	r9, r0
   d7172:	e01b      	b.n	d71ac <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7174:	46a1      	mov	r9, r4
   d7176:	e019      	b.n	d71ac <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7178:	f104 0308 	add.w	r3, r4, #8
   d717c:	ad01      	add	r5, sp, #4
   d717e:	3418      	adds	r4, #24
   d7180:	6818      	ldr	r0, [r3, #0]
   d7182:	6859      	ldr	r1, [r3, #4]
   d7184:	462a      	mov	r2, r5
   d7186:	c203      	stmia	r2!, {r0, r1}
   d7188:	3308      	adds	r3, #8
   d718a:	42a3      	cmp	r3, r4
   d718c:	4615      	mov	r5, r2
   d718e:	d1f7      	bne.n	d7180 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7190:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7192:	a901      	add	r1, sp, #4
   d7194:	a80c      	add	r0, sp, #48	; 0x30
   d7196:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7198:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d719c:	f7ff f980 	bl	d64a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d71a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71a2:	ac07      	add	r4, sp, #28
   d71a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71a6:	682b      	ldr	r3, [r5, #0]
   d71a8:	7023      	strb	r3, [r4, #0]
   d71aa:	e7cc      	b.n	d7146 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d71ac:	9800      	ldr	r0, [sp, #0]
   d71ae:	f7fd faf3 	bl	d4798 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d71b2:	4648      	mov	r0, r9
   d71b4:	b013      	add	sp, #76	; 0x4c
   d71b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d71ba:	bf00      	nop
   d71bc:	000d8978 	.word	0x000d8978

000d71c0 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d71c0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d71c2:	2300      	movs	r3, #0
   d71c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d71c8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d71ca:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d71ce:	4770      	bx	lr

000d71d0 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d71d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d71d4:	461e      	mov	r6, r3
    stop();
   d71d6:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d71d8:	460c      	mov	r4, r1
   d71da:	b08a      	sub	sp, #40	; 0x28
    stop();
   d71dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d71de:	4605      	mov	r5, r0
   d71e0:	4617      	mov	r7, r2
    stop();
   d71e2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d71e4:	7d23      	ldrb	r3, [r4, #20]
   d71e6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d71ea:	2b04      	cmp	r3, #4
   d71ec:	bf0c      	ite	eq
   d71ee:	2002      	moveq	r0, #2
   d71f0:	200a      	movne	r0, #10
   d71f2:	2206      	movs	r2, #6
   d71f4:	2101      	movs	r1, #1
   d71f6:	f7fd fceb 	bl	d4bd0 <sock_socket>
   d71fa:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d71fe:	696b      	ldr	r3, [r5, #20]
   d7200:	681b      	ldr	r3, [r3, #0]
   d7202:	2b00      	cmp	r3, #0
   d7204:	db18      	blt.n	d7238 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d7206:	4628      	mov	r0, r5
   d7208:	f7ff ffda 	bl	d71c0 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d720c:	b1d6      	cbz	r6, d7244 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d720e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7210:	a903      	add	r1, sp, #12
   d7212:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7214:	9303      	str	r3, [sp, #12]
   d7216:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d721a:	f7fd fb15 	bl	d4848 <if_index_to_name>
   d721e:	b958      	cbnz	r0, d7238 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7220:	6968      	ldr	r0, [r5, #20]
   d7222:	2306      	movs	r3, #6
   d7224:	9300      	str	r3, [sp, #0]
   d7226:	f241 020b 	movw	r2, #4107	; 0x100b
   d722a:	ab03      	add	r3, sp, #12
   d722c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7230:	6800      	ldr	r0, [r0, #0]
   d7232:	f7fd fc95 	bl	d4b60 <sock_setsockopt>
   d7236:	b128      	cbz	r0, d7244 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7238:	682b      	ldr	r3, [r5, #0]
   d723a:	4628      	mov	r0, r5
   d723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d723e:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7240:	4798      	blx	r3
   d7242:	e03b      	b.n	d72bc <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7244:	261c      	movs	r6, #28
   d7246:	4632      	mov	r2, r6
   d7248:	2100      	movs	r1, #0
   d724a:	a803      	add	r0, sp, #12
   d724c:	f001 f806 	bl	d825c <memset>
    if (ip.version() == 4) {
   d7250:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7252:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7256:	2b04      	cmp	r3, #4
   d7258:	d10c      	bne.n	d7274 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d725a:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d725c:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d725e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7262:	f7fd fbf5 	bl	d4a50 <inet_htons>
   d7266:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d726a:	6860      	ldr	r0, [r4, #4]
   d726c:	f7fd fbe0 	bl	d4a30 <inet_htonl>
   d7270:	9004      	str	r0, [sp, #16]
   d7272:	e013      	b.n	d729c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7274:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7276:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7278:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d727c:	f7fd fbe8 	bl	d4a50 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7280:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7282:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7286:	1d23      	adds	r3, r4, #4
   d7288:	f104 0714 	add.w	r7, r4, #20
   d728c:	6818      	ldr	r0, [r3, #0]
   d728e:	6859      	ldr	r1, [r3, #4]
   d7290:	4632      	mov	r2, r6
   d7292:	c203      	stmia	r2!, {r0, r1}
   d7294:	3308      	adds	r3, #8
   d7296:	42bb      	cmp	r3, r7
   d7298:	4616      	mov	r6, r2
   d729a:	d1f7      	bne.n	d728c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d729c:	696b      	ldr	r3, [r5, #20]
   d729e:	221c      	movs	r2, #28
   d72a0:	a903      	add	r1, sp, #12
   d72a2:	6818      	ldr	r0, [r3, #0]
   d72a4:	f7fd fc6c 	bl	d4b80 <sock_connect>
   d72a8:	2800      	cmp	r0, #0
   d72aa:	d1c5      	bne.n	d7238 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d72ac:	3404      	adds	r4, #4
   d72ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d72b0:	696d      	ldr	r5, [r5, #20]
   d72b2:	358c      	adds	r5, #140	; 0x8c
   d72b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d72b6:	6823      	ldr	r3, [r4, #0]
   d72b8:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d72ba:	2401      	movs	r4, #1
}
   d72bc:	4620      	mov	r0, r4
   d72be:	b00a      	add	sp, #40	; 0x28
   d72c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d72c4 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d72c4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d72c6:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d72c8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d72ca:	6818      	ldr	r0, [r3, #0]
   d72cc:	2800      	cmp	r0, #0
   d72ce:	db01      	blt.n	d72d4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d72d0:	f7fd fc4e 	bl	d4b70 <sock_close>
   d72d4:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d72d6:	f04f 32ff 	mov.w	r2, #4294967295
   d72da:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d72dc:	6960      	ldr	r0, [r4, #20]
   d72de:	2211      	movs	r2, #17
   d72e0:	2100      	movs	r1, #0
   d72e2:	308c      	adds	r0, #140	; 0x8c
   d72e4:	f000 ffba 	bl	d825c <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d72e8:	4620      	mov	r0, r4
}
   d72ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d72ee:	f7ff bf67 	b.w	d71c0 <_ZN9TCPClient12flush_bufferEv>
	...

000d72f4 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d72f4:	b530      	push	{r4, r5, lr}
   d72f6:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d72f8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d72fc:	b08b      	sub	sp, #44	; 0x2c
   d72fe:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7300:	b11b      	cbz	r3, d730a <_ZN9TCPClient9availableEv+0x16>
   d7302:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7306:	429a      	cmp	r2, r3
   d7308:	d040      	beq.n	d738c <_ZN9TCPClient9availableEv+0x98>
   d730a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d730c:	6818      	ldr	r0, [r3, #0]
   d730e:	2800      	cmp	r0, #0
   d7310:	db3f      	blt.n	d7392 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7312:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7316:	2d7f      	cmp	r5, #127	; 0x7f
   d7318:	d83b      	bhi.n	d7392 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d731a:	1d19      	adds	r1, r3, #4
   d731c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7320:	2308      	movs	r3, #8
   d7322:	4429      	add	r1, r5
   d7324:	f7fd fc34 	bl	d4b90 <sock_recv>
            if (ret > 0) {
   d7328:	2800      	cmp	r0, #0
   d732a:	dd0c      	ble.n	d7346 <_ZN9TCPClient9availableEv+0x52>
   d732c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d732e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7332:	b90a      	cbnz	r2, d7338 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7334:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7338:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d733a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d733e:	4418      	add	r0, r3
   d7340:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7344:	e025      	b.n	d7392 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7346:	f7fd fd89 	bl	d4e5c <__errno>
   d734a:	6803      	ldr	r3, [r0, #0]
   d734c:	2b0b      	cmp	r3, #11
   d734e:	d020      	beq.n	d7392 <_ZN9TCPClient9availableEv+0x9e>
   d7350:	f7fd fd84 	bl	d4e5c <__errno>
   d7354:	6803      	ldr	r3, [r0, #0]
   d7356:	2b0b      	cmp	r3, #11
   d7358:	d01b      	beq.n	d7392 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d735a:	2320      	movs	r3, #32
   d735c:	2500      	movs	r5, #0
   d735e:	9302      	str	r3, [sp, #8]
   d7360:	9503      	str	r5, [sp, #12]
   d7362:	f7fd fd7b 	bl	d4e5c <__errno>
   d7366:	6803      	ldr	r3, [r0, #0]
   d7368:	9301      	str	r3, [sp, #4]
   d736a:	4b0e      	ldr	r3, [pc, #56]	; (d73a4 <_ZN9TCPClient9availableEv+0xb0>)
   d736c:	9300      	str	r3, [sp, #0]
   d736e:	aa02      	add	r2, sp, #8
   d7370:	462b      	mov	r3, r5
   d7372:	490d      	ldr	r1, [pc, #52]	; (d73a8 <_ZN9TCPClient9availableEv+0xb4>)
   d7374:	2032      	movs	r0, #50	; 0x32
   d7376:	f7fd fc73 	bl	d4c60 <log_message>
                    sock_close(d_->sock);
   d737a:	6963      	ldr	r3, [r4, #20]
   d737c:	6818      	ldr	r0, [r3, #0]
   d737e:	f7fd fbf7 	bl	d4b70 <sock_close>
   d7382:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7384:	f04f 32ff 	mov.w	r2, #4294967295
   d7388:	601a      	str	r2, [r3, #0]
   d738a:	e002      	b.n	d7392 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d738c:	f7ff ff18 	bl	d71c0 <_ZN9TCPClient12flush_bufferEv>
   d7390:	e7bb      	b.n	d730a <_ZN9TCPClient9availableEv+0x16>
   d7392:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7394:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7398:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d739c:	1a18      	subs	r0, r3, r0
}
   d739e:	b00b      	add	sp, #44	; 0x2c
   d73a0:	bd30      	pop	{r4, r5, pc}
   d73a2:	bf00      	nop
   d73a4:	000d8ad8 	.word	0x000d8ad8
   d73a8:	000d8a4d 	.word	0x000d8a4d

000d73ac <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d73ac:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d73ae:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d73b0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d73b2:	6001      	str	r1, [r0, #0]
   d73b4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d73b8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d73bc:	3088      	adds	r0, #136	; 0x88
   d73be:	f7ff f861 	bl	d6484 <_ZN9IPAddressC1Ev>
}
   d73c2:	4620      	mov	r0, r4
   d73c4:	bd10      	pop	{r4, pc}
	...

000d73c8 <_ZN9TCPClientC1Ei>:
   d73c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d73cc:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d73ce:	2300      	movs	r3, #0
   d73d0:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d73d2:	4a14      	ldr	r2, [pc, #80]	; (d7424 <_ZN9TCPClientC1Ei+0x5c>)
   d73d4:	6043      	str	r3, [r0, #4]
   d73d6:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d73d8:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d73da:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d73dc:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d73de:	20a0      	movs	r0, #160	; 0xa0
   d73e0:	460e      	mov	r6, r1
   d73e2:	f7fc fe5a 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d73e6:	4605      	mov	r5, r0
   d73e8:	b110      	cbz	r0, d73f0 <_ZN9TCPClientC1Ei+0x28>
   d73ea:	4631      	mov	r1, r6
   d73ec:	f7ff ffde 	bl	d73ac <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d73f0:	2014      	movs	r0, #20
   d73f2:	f7fc fe52 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d73f6:	4603      	mov	r3, r0
   d73f8:	b128      	cbz	r0, d7406 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d73fa:	2201      	movs	r2, #1
   d73fc:	6042      	str	r2, [r0, #4]
   d73fe:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7400:	4a09      	ldr	r2, [pc, #36]	; (d7428 <_ZN9TCPClientC1Ei+0x60>)
   d7402:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7404:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7406:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7408:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d740a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d740c:	b128      	cbz	r0, d741a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d740e:	6843      	ldr	r3, [r0, #4]
   d7410:	3b01      	subs	r3, #1
   d7412:	6043      	str	r3, [r0, #4]
   d7414:	b90b      	cbnz	r3, d741a <_ZN9TCPClientC1Ei+0x52>
   d7416:	f7ff fddf 	bl	d6fd8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d741a:	4620      	mov	r0, r4
   d741c:	f7ff fed0 	bl	d71c0 <_ZN9TCPClient12flush_bufferEv>
}
   d7420:	4620      	mov	r0, r4
   d7422:	bd70      	pop	{r4, r5, r6, pc}
   d7424:	000d8a94 	.word	0x000d8a94
   d7428:	000d8a78 	.word	0x000d8a78

000d742c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d742c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d742e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7432:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7434:	f7ff ffc8 	bl	d73c8 <_ZN9TCPClientC1Ei>
}
   d7438:	4620      	mov	r0, r4
   d743a:	bd10      	pop	{r4, pc}

000d743c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d743c:	b510      	push	{r4, lr}
   d743e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7440:	6800      	ldr	r0, [r0, #0]
   d7442:	2800      	cmp	r0, #0
   d7444:	db01      	blt.n	d744a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7446:	f7fd fb93 	bl	d4b70 <sock_close>
    }
}
   d744a:	4620      	mov	r0, r4
   d744c:	bd10      	pop	{r4, pc}

000d744e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d744e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7450:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7452:	4620      	mov	r0, r4
   d7454:	f7ff fff2 	bl	d743c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7458:	b124      	cbz	r4, d7464 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d745a:	4620      	mov	r0, r4
   d745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7460:	f7fc be1f 	b.w	d40a2 <_ZdlPv>
   d7464:	bd10      	pop	{r4, pc}

000d7466 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7466:	2300      	movs	r3, #0
   d7468:	461a      	mov	r2, r3
   d746a:	6840      	ldr	r0, [r0, #4]
   d746c:	f7fd bc3e 	b.w	d4cec <network_connect>

000d7470 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7470:	2200      	movs	r2, #0
   d7472:	2102      	movs	r1, #2
   d7474:	6840      	ldr	r0, [r0, #4]
   d7476:	f7fd bc49 	b.w	d4d0c <network_disconnect>

000d747a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d747a:	2200      	movs	r2, #0
   d747c:	4611      	mov	r1, r2
   d747e:	6840      	ldr	r0, [r0, #4]
   d7480:	f7fd bc3c 	b.w	d4cfc <network_connecting>

000d7484 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7484:	2200      	movs	r2, #0
   d7486:	4611      	mov	r1, r2
   d7488:	6840      	ldr	r0, [r0, #4]
   d748a:	f7fd bc47 	b.w	d4d1c <network_ready>

000d748e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d748e:	2300      	movs	r3, #0
   d7490:	461a      	mov	r2, r3
   d7492:	4619      	mov	r1, r3
   d7494:	6840      	ldr	r0, [r0, #4]
   d7496:	f7fd bc49 	b.w	d4d2c <network_on>

000d749a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d749a:	2300      	movs	r3, #0
   d749c:	461a      	mov	r2, r3
   d749e:	4619      	mov	r1, r3
   d74a0:	6840      	ldr	r0, [r0, #4]
   d74a2:	f7fd bc4b 	b.w	d4d3c <network_off>

000d74a6 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d74a6:	2200      	movs	r2, #0
   d74a8:	f081 0101 	eor.w	r1, r1, #1
   d74ac:	6840      	ldr	r0, [r0, #4]
   d74ae:	f7fd bc4d 	b.w	d4d4c <network_listen>

000d74b2 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d74b2:	2200      	movs	r2, #0
   d74b4:	6840      	ldr	r0, [r0, #4]
   d74b6:	f7fd bc59 	b.w	d4d6c <network_set_listen_timeout>

000d74ba <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d74ba:	2200      	movs	r2, #0
   d74bc:	4611      	mov	r1, r2
   d74be:	6840      	ldr	r0, [r0, #4]
   d74c0:	f7fd bc5c 	b.w	d4d7c <network_get_listen_timeout>

000d74c4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d74c4:	2200      	movs	r2, #0
   d74c6:	4611      	mov	r1, r2
   d74c8:	6840      	ldr	r0, [r0, #4]
   d74ca:	f7fd bc47 	b.w	d4d5c <network_listening>

000d74ce <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d74ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d74d2:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d74d4:	b095      	sub	sp, #84	; 0x54
   d74d6:	4616      	mov	r6, r2
   d74d8:	460d      	mov	r5, r1
   d74da:	4607      	mov	r7, r0
    IPAddress addr;
   d74dc:	f7fe ffd2 	bl	d6484 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d74e0:	4621      	mov	r1, r4
   d74e2:	2220      	movs	r2, #32
   d74e4:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d74e6:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d74e8:	f000 feb8 	bl	d825c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d74ec:	2340      	movs	r3, #64	; 0x40
   d74ee:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d74f0:	4621      	mov	r1, r4
   d74f2:	466b      	mov	r3, sp
   d74f4:	aa0c      	add	r2, sp, #48	; 0x30
   d74f6:	4630      	mov	r0, r6
   d74f8:	f7fd f956 	bl	d47a8 <netdb_getaddrinfo>
    if (!r) {
   d74fc:	4604      	mov	r4, r0
   d74fe:	2800      	cmp	r0, #0
   d7500:	d144      	bne.n	d758c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7502:	4602      	mov	r2, r0
   d7504:	2101      	movs	r1, #1
   d7506:	6868      	ldr	r0, [r5, #4]
   d7508:	f7fd fc08 	bl	d4d1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d750c:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d750e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7510:	4622      	mov	r2, r4
   d7512:	6868      	ldr	r0, [r5, #4]
   d7514:	f7fd fc02 	bl	d4d1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7518:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d751a:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d751c:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d751e:	2e00      	cmp	r6, #0
   d7520:	d034      	beq.n	d758c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7522:	2900      	cmp	r1, #0
   d7524:	d132      	bne.n	d758c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7526:	6873      	ldr	r3, [r6, #4]
   d7528:	2b02      	cmp	r3, #2
   d752a:	d002      	beq.n	d7532 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d752c:	2b0a      	cmp	r3, #10
   d752e:	d009      	beq.n	d7544 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7530:	e02a      	b.n	d7588 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7532:	f1b8 0f00 	cmp.w	r8, #0
   d7536:	d027      	beq.n	d7588 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7538:	6971      	ldr	r1, [r6, #20]
   d753a:	4638      	mov	r0, r7
   d753c:	3104      	adds	r1, #4
   d753e:	f7fe ffe4 	bl	d650a <_ZN9IPAddressaSEPKh>
   d7542:	e020      	b.n	d7586 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7544:	f1b9 0f00 	cmp.w	r9, #0
   d7548:	d01e      	beq.n	d7588 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d754a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d754c:	2211      	movs	r2, #17
   d754e:	a801      	add	r0, sp, #4
   d7550:	f000 fe84 	bl	d825c <memset>
                    a.v = 6;
   d7554:	2306      	movs	r3, #6
   d7556:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d755a:	ad01      	add	r5, sp, #4
   d755c:	f104 0308 	add.w	r3, r4, #8
   d7560:	3418      	adds	r4, #24
   d7562:	6818      	ldr	r0, [r3, #0]
   d7564:	6859      	ldr	r1, [r3, #4]
   d7566:	462a      	mov	r2, r5
   d7568:	c203      	stmia	r2!, {r0, r1}
   d756a:	3308      	adds	r3, #8
   d756c:	42a3      	cmp	r3, r4
   d756e:	4615      	mov	r5, r2
   d7570:	d1f7      	bne.n	d7562 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7572:	a901      	add	r1, sp, #4
   d7574:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7576:	ad07      	add	r5, sp, #28
   d7578:	f7fe ff92 	bl	d64a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d757c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d757e:	1d3c      	adds	r4, r7, #4
   d7580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7582:	682b      	ldr	r3, [r5, #0]
   d7584:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7586:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7588:	69f6      	ldr	r6, [r6, #28]
   d758a:	e7c8      	b.n	d751e <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d758c:	9800      	ldr	r0, [sp, #0]
   d758e:	f7fd f903 	bl	d4798 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7592:	4638      	mov	r0, r7
   d7594:	b015      	add	sp, #84	; 0x54
   d7596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d759c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d759c:	4b02      	ldr	r3, [pc, #8]	; (d75a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d759e:	4a03      	ldr	r2, [pc, #12]	; (d75ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d75a0:	601a      	str	r2, [r3, #0]
   d75a2:	2200      	movs	r2, #0
   d75a4:	605a      	str	r2, [r3, #4]
   d75a6:	4770      	bx	lr
   d75a8:	2003e708 	.word	0x2003e708
   d75ac:	000d8af0 	.word	0x000d8af0

000d75b0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d75b0:	b510      	push	{r4, lr}
   d75b2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d75b4:	480f      	ldr	r0, [pc, #60]	; (d75f4 <pinAvailable+0x44>)
   d75b6:	f7fd fcb3 	bl	d4f20 <_ZN8SPIClass9isEnabledEv>
   d75ba:	b128      	cbz	r0, d75c8 <pinAvailable+0x18>
   d75bc:	f1a4 030b 	sub.w	r3, r4, #11
   d75c0:	2b02      	cmp	r3, #2
   d75c2:	d801      	bhi.n	d75c8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d75c4:	2000      	movs	r0, #0
   d75c6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d75c8:	f000 f87a 	bl	d76c0 <_Z19__fetch_global_Wirev>
   d75cc:	f7ff f904 	bl	d67d8 <_ZN7TwoWire9isEnabledEv>
   d75d0:	b108      	cbz	r0, d75d6 <pinAvailable+0x26>
   d75d2:	2c01      	cmp	r4, #1
   d75d4:	d9f6      	bls.n	d75c4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d75d6:	f7ff f887 	bl	d66e8 <_Z22__fetch_global_Serial1v>
   d75da:	f7ff f881 	bl	d66e0 <_ZN11USARTSerial9isEnabledEv>
   d75de:	b118      	cbz	r0, d75e8 <pinAvailable+0x38>
   d75e0:	f1a4 0309 	sub.w	r3, r4, #9
   d75e4:	2b01      	cmp	r3, #1
   d75e6:	d9ed      	bls.n	d75c4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d75e8:	2c1e      	cmp	r4, #30
   d75ea:	bf8c      	ite	hi
   d75ec:	2000      	movhi	r0, #0
   d75ee:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d75f0:	bd10      	pop	{r4, pc}
   d75f2:	bf00      	nop
   d75f4:	2003e710 	.word	0x2003e710

000d75f8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d75f8:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d75fa:	b538      	push	{r3, r4, r5, lr}
   d75fc:	4604      	mov	r4, r0
   d75fe:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7600:	d80a      	bhi.n	d7618 <pinMode+0x20>
   d7602:	29ff      	cmp	r1, #255	; 0xff
   d7604:	d008      	beq.n	d7618 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7606:	f7ff ffd3 	bl	d75b0 <pinAvailable>
   d760a:	b128      	cbz	r0, d7618 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d760c:	4629      	mov	r1, r5
   d760e:	4620      	mov	r0, r4
}
   d7610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7614:	f7fd b8e0 	b.w	d47d8 <HAL_Pin_Mode>
   d7618:	bd38      	pop	{r3, r4, r5, pc}

000d761a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d761a:	b538      	push	{r3, r4, r5, lr}
   d761c:	4604      	mov	r4, r0
   d761e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7620:	f7fd f8e2 	bl	d47e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7624:	28ff      	cmp	r0, #255	; 0xff
   d7626:	d010      	beq.n	d764a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7628:	2806      	cmp	r0, #6
   d762a:	d804      	bhi.n	d7636 <digitalWrite+0x1c>
   d762c:	234d      	movs	r3, #77	; 0x4d
   d762e:	fa23 f000 	lsr.w	r0, r3, r0
   d7632:	07c3      	lsls	r3, r0, #31
   d7634:	d409      	bmi.n	d764a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7636:	4620      	mov	r0, r4
   d7638:	f7ff ffba 	bl	d75b0 <pinAvailable>
   d763c:	b128      	cbz	r0, d764a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d763e:	4629      	mov	r1, r5
   d7640:	4620      	mov	r0, r4
}
   d7642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7646:	f7fd b8d7 	b.w	d47f8 <HAL_GPIO_Write>
   d764a:	bd38      	pop	{r3, r4, r5, pc}

000d764c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d764c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d764e:	b510      	push	{r4, lr}
   d7650:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7652:	bf9c      	itt	ls
   d7654:	340e      	addls	r4, #14
   d7656:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7658:	4620      	mov	r0, r4
   d765a:	f7ff ffa9 	bl	d75b0 <pinAvailable>
   d765e:	b150      	cbz	r0, d7676 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7660:	2103      	movs	r1, #3
   d7662:	4620      	mov	r0, r4
   d7664:	f7fd f8b0 	bl	d47c8 <HAL_Validate_Pin_Function>
   d7668:	2803      	cmp	r0, #3
   d766a:	d104      	bne.n	d7676 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d766c:	4620      	mov	r0, r4
}
   d766e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7672:	f7fd b8c9 	b.w	d4808 <HAL_ADC_Read>
}
   d7676:	2000      	movs	r0, #0
   d7678:	bd10      	pop	{r4, pc}
	...

000d767c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d767c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d767e:	4c0c      	ldr	r4, [pc, #48]	; (d76b0 <_GLOBAL__sub_I_SPI+0x34>)
   d7680:	4e0c      	ldr	r6, [pc, #48]	; (d76b4 <_GLOBAL__sub_I_SPI+0x38>)
   d7682:	4d0d      	ldr	r5, [pc, #52]	; (d76b8 <_GLOBAL__sub_I_SPI+0x3c>)
   d7684:	2100      	movs	r1, #0
   d7686:	4620      	mov	r0, r4
   d7688:	f7fd fc36 	bl	d4ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d768c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d768e:	4c0b      	ldr	r4, [pc, #44]	; (d76bc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7690:	4632      	mov	r2, r6
   d7692:	4629      	mov	r1, r5
   d7694:	f000 f834 	bl	d7700 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7698:	2101      	movs	r1, #1
   d769a:	4620      	mov	r0, r4
   d769c:	f7fd fc2c 	bl	d4ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d76a0:	4632      	mov	r2, r6
   d76a2:	4629      	mov	r1, r5
   d76a4:	4620      	mov	r0, r4
   d76a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d76aa:	f000 b829 	b.w	d7700 <__aeabi_atexit>
   d76ae:	bf00      	nop
   d76b0:	2003e710 	.word	0x2003e710
   d76b4:	2003e240 	.word	0x2003e240
   d76b8:	000d4ee9 	.word	0x000d4ee9
   d76bc:	2003e720 	.word	0x2003e720

000d76c0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d76c0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d76c2:	4d0b      	ldr	r5, [pc, #44]	; (d76f0 <_Z19__fetch_global_Wirev+0x30>)
   d76c4:	6829      	ldr	r1, [r5, #0]
   d76c6:	f011 0401 	ands.w	r4, r1, #1
   d76ca:	d10f      	bne.n	d76ec <_Z19__fetch_global_Wirev+0x2c>
   d76cc:	4628      	mov	r0, r5
   d76ce:	f7fc fcec 	bl	d40aa <__cxa_guard_acquire>
   d76d2:	b158      	cbz	r0, d76ec <_Z19__fetch_global_Wirev+0x2c>
   d76d4:	4621      	mov	r1, r4
   d76d6:	4807      	ldr	r0, [pc, #28]	; (d76f4 <_Z19__fetch_global_Wirev+0x34>)
   d76d8:	f7ff f86c 	bl	d67b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d76dc:	4628      	mov	r0, r5
   d76de:	f7fc fce9 	bl	d40b4 <__cxa_guard_release>
   d76e2:	4a05      	ldr	r2, [pc, #20]	; (d76f8 <_Z19__fetch_global_Wirev+0x38>)
   d76e4:	4905      	ldr	r1, [pc, #20]	; (d76fc <_Z19__fetch_global_Wirev+0x3c>)
   d76e6:	4803      	ldr	r0, [pc, #12]	; (d76f4 <_Z19__fetch_global_Wirev+0x34>)
   d76e8:	f000 f80a 	bl	d7700 <__aeabi_atexit>
	return wire;
}
   d76ec:	4801      	ldr	r0, [pc, #4]	; (d76f4 <_Z19__fetch_global_Wirev+0x34>)
   d76ee:	bd38      	pop	{r3, r4, r5, pc}
   d76f0:	2003e734 	.word	0x2003e734
   d76f4:	2003e738 	.word	0x2003e738
   d76f8:	2003e240 	.word	0x2003e240
   d76fc:	000d675d 	.word	0x000d675d

000d7700 <__aeabi_atexit>:
   d7700:	460b      	mov	r3, r1
   d7702:	4601      	mov	r1, r0
   d7704:	4618      	mov	r0, r3
   d7706:	f000 bd81 	b.w	d820c <__cxa_atexit>
	...

000d770c <_ZSt15get_new_handlerv>:
   d770c:	4b02      	ldr	r3, [pc, #8]	; (d7718 <_ZSt15get_new_handlerv+0xc>)
   d770e:	6818      	ldr	r0, [r3, #0]
   d7710:	f3bf 8f5f 	dmb	sy
   d7714:	4770      	bx	lr
   d7716:	bf00      	nop
   d7718:	2003e74c 	.word	0x2003e74c

000d771c <_ZdlPvj>:
   d771c:	f7fc bcc1 	b.w	d40a2 <_ZdlPv>

000d7720 <_ZnajRKSt9nothrow_t>:
   d7720:	f000 b800 	b.w	d7724 <_ZnwjRKSt9nothrow_t>

000d7724 <_ZnwjRKSt9nothrow_t>:
   d7724:	b510      	push	{r4, lr}
   d7726:	2800      	cmp	r0, #0
   d7728:	bf14      	ite	ne
   d772a:	4604      	movne	r4, r0
   d772c:	2401      	moveq	r4, #1
   d772e:	4620      	mov	r0, r4
   d7730:	f7fd fb64 	bl	d4dfc <malloc>
   d7734:	b920      	cbnz	r0, d7740 <_ZnwjRKSt9nothrow_t+0x1c>
   d7736:	f7ff ffe9 	bl	d770c <_ZSt15get_new_handlerv>
   d773a:	b108      	cbz	r0, d7740 <_ZnwjRKSt9nothrow_t+0x1c>
   d773c:	4780      	blx	r0
   d773e:	e7f6      	b.n	d772e <_ZnwjRKSt9nothrow_t+0xa>
   d7740:	bd10      	pop	{r4, pc}

000d7742 <_ZSt25__throw_bad_function_callv>:
   d7742:	b508      	push	{r3, lr}
   d7744:	f7fd fb7a 	bl	d4e3c <abort>

000d7748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7748:	4b18      	ldr	r3, [pc, #96]	; (d77ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d774a:	681a      	ldr	r2, [r3, #0]
   d774c:	07d1      	lsls	r1, r2, #31
   d774e:	bf5c      	itt	pl
   d7750:	2201      	movpl	r2, #1
   d7752:	601a      	strpl	r2, [r3, #0]
   d7754:	4b16      	ldr	r3, [pc, #88]	; (d77b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7756:	681a      	ldr	r2, [r3, #0]
   d7758:	07d2      	lsls	r2, r2, #31
   d775a:	bf5c      	itt	pl
   d775c:	2201      	movpl	r2, #1
   d775e:	601a      	strpl	r2, [r3, #0]
   d7760:	4b14      	ldr	r3, [pc, #80]	; (d77b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7762:	681a      	ldr	r2, [r3, #0]
   d7764:	07d0      	lsls	r0, r2, #31
   d7766:	bf5c      	itt	pl
   d7768:	2201      	movpl	r2, #1
   d776a:	601a      	strpl	r2, [r3, #0]
   d776c:	4b12      	ldr	r3, [pc, #72]	; (d77b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d776e:	681a      	ldr	r2, [r3, #0]
   d7770:	07d1      	lsls	r1, r2, #31
   d7772:	bf5c      	itt	pl
   d7774:	2201      	movpl	r2, #1
   d7776:	601a      	strpl	r2, [r3, #0]
   d7778:	4b10      	ldr	r3, [pc, #64]	; (d77bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d777a:	681a      	ldr	r2, [r3, #0]
   d777c:	07d2      	lsls	r2, r2, #31
   d777e:	bf5c      	itt	pl
   d7780:	2201      	movpl	r2, #1
   d7782:	601a      	strpl	r2, [r3, #0]
   d7784:	4b0e      	ldr	r3, [pc, #56]	; (d77c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7786:	681a      	ldr	r2, [r3, #0]
   d7788:	07d0      	lsls	r0, r2, #31
   d778a:	bf5c      	itt	pl
   d778c:	2201      	movpl	r2, #1
   d778e:	601a      	strpl	r2, [r3, #0]
   d7790:	4b0c      	ldr	r3, [pc, #48]	; (d77c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7792:	681a      	ldr	r2, [r3, #0]
   d7794:	07d1      	lsls	r1, r2, #31
   d7796:	bf5c      	itt	pl
   d7798:	2201      	movpl	r2, #1
   d779a:	601a      	strpl	r2, [r3, #0]
   d779c:	4b0a      	ldr	r3, [pc, #40]	; (d77c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d779e:	681a      	ldr	r2, [r3, #0]
   d77a0:	07d2      	lsls	r2, r2, #31
   d77a2:	bf5c      	itt	pl
   d77a4:	2201      	movpl	r2, #1
   d77a6:	601a      	strpl	r2, [r3, #0]
   d77a8:	4770      	bx	lr
   d77aa:	bf00      	nop
   d77ac:	2003e76c 	.word	0x2003e76c
   d77b0:	2003e768 	.word	0x2003e768
   d77b4:	2003e764 	.word	0x2003e764
   d77b8:	2003e760 	.word	0x2003e760
   d77bc:	2003e75c 	.word	0x2003e75c
   d77c0:	2003e758 	.word	0x2003e758
   d77c4:	2003e754 	.word	0x2003e754
   d77c8:	2003e750 	.word	0x2003e750

000d77cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d77cc:	4b24      	ldr	r3, [pc, #144]	; (d7860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d77ce:	681a      	ldr	r2, [r3, #0]
   d77d0:	07d0      	lsls	r0, r2, #31
   d77d2:	bf5c      	itt	pl
   d77d4:	2201      	movpl	r2, #1
   d77d6:	601a      	strpl	r2, [r3, #0]
   d77d8:	4b22      	ldr	r3, [pc, #136]	; (d7864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d77da:	681a      	ldr	r2, [r3, #0]
   d77dc:	07d1      	lsls	r1, r2, #31
   d77de:	bf5c      	itt	pl
   d77e0:	2201      	movpl	r2, #1
   d77e2:	601a      	strpl	r2, [r3, #0]
   d77e4:	4b20      	ldr	r3, [pc, #128]	; (d7868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d77e6:	681a      	ldr	r2, [r3, #0]
   d77e8:	07d2      	lsls	r2, r2, #31
   d77ea:	bf5c      	itt	pl
   d77ec:	2201      	movpl	r2, #1
   d77ee:	601a      	strpl	r2, [r3, #0]
   d77f0:	4b1e      	ldr	r3, [pc, #120]	; (d786c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d77f2:	681a      	ldr	r2, [r3, #0]
   d77f4:	07d0      	lsls	r0, r2, #31
   d77f6:	bf5c      	itt	pl
   d77f8:	2201      	movpl	r2, #1
   d77fa:	601a      	strpl	r2, [r3, #0]
   d77fc:	4b1c      	ldr	r3, [pc, #112]	; (d7870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d77fe:	681a      	ldr	r2, [r3, #0]
   d7800:	07d1      	lsls	r1, r2, #31
   d7802:	bf5c      	itt	pl
   d7804:	2201      	movpl	r2, #1
   d7806:	601a      	strpl	r2, [r3, #0]
   d7808:	4b1a      	ldr	r3, [pc, #104]	; (d7874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d780a:	681a      	ldr	r2, [r3, #0]
   d780c:	07d2      	lsls	r2, r2, #31
   d780e:	bf5c      	itt	pl
   d7810:	2201      	movpl	r2, #1
   d7812:	601a      	strpl	r2, [r3, #0]
   d7814:	4b18      	ldr	r3, [pc, #96]	; (d7878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7816:	681a      	ldr	r2, [r3, #0]
   d7818:	07d0      	lsls	r0, r2, #31
   d781a:	bf5c      	itt	pl
   d781c:	2201      	movpl	r2, #1
   d781e:	601a      	strpl	r2, [r3, #0]
   d7820:	4b16      	ldr	r3, [pc, #88]	; (d787c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7822:	681a      	ldr	r2, [r3, #0]
   d7824:	07d1      	lsls	r1, r2, #31
   d7826:	bf5c      	itt	pl
   d7828:	2201      	movpl	r2, #1
   d782a:	601a      	strpl	r2, [r3, #0]
   d782c:	4b14      	ldr	r3, [pc, #80]	; (d7880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d782e:	681a      	ldr	r2, [r3, #0]
   d7830:	07d2      	lsls	r2, r2, #31
   d7832:	bf5c      	itt	pl
   d7834:	2201      	movpl	r2, #1
   d7836:	601a      	strpl	r2, [r3, #0]
   d7838:	4b12      	ldr	r3, [pc, #72]	; (d7884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d783a:	681a      	ldr	r2, [r3, #0]
   d783c:	07d0      	lsls	r0, r2, #31
   d783e:	bf5c      	itt	pl
   d7840:	2201      	movpl	r2, #1
   d7842:	601a      	strpl	r2, [r3, #0]
   d7844:	4b10      	ldr	r3, [pc, #64]	; (d7888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7846:	681a      	ldr	r2, [r3, #0]
   d7848:	07d1      	lsls	r1, r2, #31
   d784a:	bf5c      	itt	pl
   d784c:	2201      	movpl	r2, #1
   d784e:	601a      	strpl	r2, [r3, #0]
   d7850:	4b0e      	ldr	r3, [pc, #56]	; (d788c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7852:	681a      	ldr	r2, [r3, #0]
   d7854:	07d2      	lsls	r2, r2, #31
   d7856:	bf5c      	itt	pl
   d7858:	2201      	movpl	r2, #1
   d785a:	601a      	strpl	r2, [r3, #0]
   d785c:	4770      	bx	lr
   d785e:	bf00      	nop
   d7860:	2003e79c 	.word	0x2003e79c
   d7864:	2003e798 	.word	0x2003e798
   d7868:	2003e794 	.word	0x2003e794
   d786c:	2003e790 	.word	0x2003e790
   d7870:	2003e78c 	.word	0x2003e78c
   d7874:	2003e788 	.word	0x2003e788
   d7878:	2003e784 	.word	0x2003e784
   d787c:	2003e780 	.word	0x2003e780
   d7880:	2003e77c 	.word	0x2003e77c
   d7884:	2003e778 	.word	0x2003e778
   d7888:	2003e774 	.word	0x2003e774
   d788c:	2003e770 	.word	0x2003e770

000d7890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7890:	4b24      	ldr	r3, [pc, #144]	; (d7924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7892:	681a      	ldr	r2, [r3, #0]
   d7894:	07d0      	lsls	r0, r2, #31
   d7896:	bf5c      	itt	pl
   d7898:	2201      	movpl	r2, #1
   d789a:	601a      	strpl	r2, [r3, #0]
   d789c:	4b22      	ldr	r3, [pc, #136]	; (d7928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d789e:	681a      	ldr	r2, [r3, #0]
   d78a0:	07d1      	lsls	r1, r2, #31
   d78a2:	bf5c      	itt	pl
   d78a4:	2201      	movpl	r2, #1
   d78a6:	601a      	strpl	r2, [r3, #0]
   d78a8:	4b20      	ldr	r3, [pc, #128]	; (d792c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d78aa:	681a      	ldr	r2, [r3, #0]
   d78ac:	07d2      	lsls	r2, r2, #31
   d78ae:	bf5c      	itt	pl
   d78b0:	2201      	movpl	r2, #1
   d78b2:	601a      	strpl	r2, [r3, #0]
   d78b4:	4b1e      	ldr	r3, [pc, #120]	; (d7930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d78b6:	681a      	ldr	r2, [r3, #0]
   d78b8:	07d0      	lsls	r0, r2, #31
   d78ba:	bf5c      	itt	pl
   d78bc:	2201      	movpl	r2, #1
   d78be:	601a      	strpl	r2, [r3, #0]
   d78c0:	4b1c      	ldr	r3, [pc, #112]	; (d7934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d78c2:	681a      	ldr	r2, [r3, #0]
   d78c4:	07d1      	lsls	r1, r2, #31
   d78c6:	bf5c      	itt	pl
   d78c8:	2201      	movpl	r2, #1
   d78ca:	601a      	strpl	r2, [r3, #0]
   d78cc:	4b1a      	ldr	r3, [pc, #104]	; (d7938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d78ce:	681a      	ldr	r2, [r3, #0]
   d78d0:	07d2      	lsls	r2, r2, #31
   d78d2:	bf5c      	itt	pl
   d78d4:	2201      	movpl	r2, #1
   d78d6:	601a      	strpl	r2, [r3, #0]
   d78d8:	4b18      	ldr	r3, [pc, #96]	; (d793c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d78da:	681a      	ldr	r2, [r3, #0]
   d78dc:	07d0      	lsls	r0, r2, #31
   d78de:	bf5c      	itt	pl
   d78e0:	2201      	movpl	r2, #1
   d78e2:	601a      	strpl	r2, [r3, #0]
   d78e4:	4b16      	ldr	r3, [pc, #88]	; (d7940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d78e6:	681a      	ldr	r2, [r3, #0]
   d78e8:	07d1      	lsls	r1, r2, #31
   d78ea:	bf5c      	itt	pl
   d78ec:	2201      	movpl	r2, #1
   d78ee:	601a      	strpl	r2, [r3, #0]
   d78f0:	4b14      	ldr	r3, [pc, #80]	; (d7944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d78f2:	681a      	ldr	r2, [r3, #0]
   d78f4:	07d2      	lsls	r2, r2, #31
   d78f6:	bf5c      	itt	pl
   d78f8:	2201      	movpl	r2, #1
   d78fa:	601a      	strpl	r2, [r3, #0]
   d78fc:	4b12      	ldr	r3, [pc, #72]	; (d7948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d78fe:	681a      	ldr	r2, [r3, #0]
   d7900:	07d0      	lsls	r0, r2, #31
   d7902:	bf5c      	itt	pl
   d7904:	2201      	movpl	r2, #1
   d7906:	601a      	strpl	r2, [r3, #0]
   d7908:	4b10      	ldr	r3, [pc, #64]	; (d794c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d790a:	681a      	ldr	r2, [r3, #0]
   d790c:	07d1      	lsls	r1, r2, #31
   d790e:	bf5c      	itt	pl
   d7910:	2201      	movpl	r2, #1
   d7912:	601a      	strpl	r2, [r3, #0]
   d7914:	4b0e      	ldr	r3, [pc, #56]	; (d7950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7916:	681a      	ldr	r2, [r3, #0]
   d7918:	07d2      	lsls	r2, r2, #31
   d791a:	bf5c      	itt	pl
   d791c:	2201      	movpl	r2, #1
   d791e:	601a      	strpl	r2, [r3, #0]
   d7920:	4770      	bx	lr
   d7922:	bf00      	nop
   d7924:	2003e7cc 	.word	0x2003e7cc
   d7928:	2003e7c8 	.word	0x2003e7c8
   d792c:	2003e7c4 	.word	0x2003e7c4
   d7930:	2003e7c0 	.word	0x2003e7c0
   d7934:	2003e7bc 	.word	0x2003e7bc
   d7938:	2003e7b8 	.word	0x2003e7b8
   d793c:	2003e7b4 	.word	0x2003e7b4
   d7940:	2003e7b0 	.word	0x2003e7b0
   d7944:	2003e7ac 	.word	0x2003e7ac
   d7948:	2003e7a8 	.word	0x2003e7a8
   d794c:	2003e7a4 	.word	0x2003e7a4
   d7950:	2003e7a0 	.word	0x2003e7a0

000d7954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7954:	4b18      	ldr	r3, [pc, #96]	; (d79b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7956:	681a      	ldr	r2, [r3, #0]
   d7958:	07d1      	lsls	r1, r2, #31
   d795a:	bf5c      	itt	pl
   d795c:	2201      	movpl	r2, #1
   d795e:	601a      	strpl	r2, [r3, #0]
   d7960:	4b16      	ldr	r3, [pc, #88]	; (d79bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7962:	681a      	ldr	r2, [r3, #0]
   d7964:	07d2      	lsls	r2, r2, #31
   d7966:	bf5c      	itt	pl
   d7968:	2201      	movpl	r2, #1
   d796a:	601a      	strpl	r2, [r3, #0]
   d796c:	4b14      	ldr	r3, [pc, #80]	; (d79c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d796e:	681a      	ldr	r2, [r3, #0]
   d7970:	07d0      	lsls	r0, r2, #31
   d7972:	bf5c      	itt	pl
   d7974:	2201      	movpl	r2, #1
   d7976:	601a      	strpl	r2, [r3, #0]
   d7978:	4b12      	ldr	r3, [pc, #72]	; (d79c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d797a:	681a      	ldr	r2, [r3, #0]
   d797c:	07d1      	lsls	r1, r2, #31
   d797e:	bf5c      	itt	pl
   d7980:	2201      	movpl	r2, #1
   d7982:	601a      	strpl	r2, [r3, #0]
   d7984:	4b10      	ldr	r3, [pc, #64]	; (d79c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7986:	681a      	ldr	r2, [r3, #0]
   d7988:	07d2      	lsls	r2, r2, #31
   d798a:	bf5c      	itt	pl
   d798c:	2201      	movpl	r2, #1
   d798e:	601a      	strpl	r2, [r3, #0]
   d7990:	4b0e      	ldr	r3, [pc, #56]	; (d79cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7992:	681a      	ldr	r2, [r3, #0]
   d7994:	07d0      	lsls	r0, r2, #31
   d7996:	bf5c      	itt	pl
   d7998:	2201      	movpl	r2, #1
   d799a:	601a      	strpl	r2, [r3, #0]
   d799c:	4b0c      	ldr	r3, [pc, #48]	; (d79d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d799e:	681a      	ldr	r2, [r3, #0]
   d79a0:	07d1      	lsls	r1, r2, #31
   d79a2:	bf5c      	itt	pl
   d79a4:	2201      	movpl	r2, #1
   d79a6:	601a      	strpl	r2, [r3, #0]
   d79a8:	4b0a      	ldr	r3, [pc, #40]	; (d79d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d79aa:	681a      	ldr	r2, [r3, #0]
   d79ac:	07d2      	lsls	r2, r2, #31
   d79ae:	bf5c      	itt	pl
   d79b0:	2201      	movpl	r2, #1
   d79b2:	601a      	strpl	r2, [r3, #0]
   d79b4:	4770      	bx	lr
   d79b6:	bf00      	nop
   d79b8:	2003e7ec 	.word	0x2003e7ec
   d79bc:	2003e7e8 	.word	0x2003e7e8
   d79c0:	2003e7e4 	.word	0x2003e7e4
   d79c4:	2003e7e0 	.word	0x2003e7e0
   d79c8:	2003e7dc 	.word	0x2003e7dc
   d79cc:	2003e7d8 	.word	0x2003e7d8
   d79d0:	2003e7d4 	.word	0x2003e7d4
   d79d4:	2003e7d0 	.word	0x2003e7d0

000d79d8 <__aeabi_drsub>:
   d79d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d79dc:	e002      	b.n	d79e4 <__adddf3>
   d79de:	bf00      	nop

000d79e0 <__aeabi_dsub>:
   d79e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d79e4 <__adddf3>:
   d79e4:	b530      	push	{r4, r5, lr}
   d79e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d79ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d79ee:	ea94 0f05 	teq	r4, r5
   d79f2:	bf08      	it	eq
   d79f4:	ea90 0f02 	teqeq	r0, r2
   d79f8:	bf1f      	itttt	ne
   d79fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   d79fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7a02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7a06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7a0a:	f000 80e2 	beq.w	d7bd2 <__adddf3+0x1ee>
   d7a0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7a12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7a16:	bfb8      	it	lt
   d7a18:	426d      	neglt	r5, r5
   d7a1a:	dd0c      	ble.n	d7a36 <__adddf3+0x52>
   d7a1c:	442c      	add	r4, r5
   d7a1e:	ea80 0202 	eor.w	r2, r0, r2
   d7a22:	ea81 0303 	eor.w	r3, r1, r3
   d7a26:	ea82 0000 	eor.w	r0, r2, r0
   d7a2a:	ea83 0101 	eor.w	r1, r3, r1
   d7a2e:	ea80 0202 	eor.w	r2, r0, r2
   d7a32:	ea81 0303 	eor.w	r3, r1, r3
   d7a36:	2d36      	cmp	r5, #54	; 0x36
   d7a38:	bf88      	it	hi
   d7a3a:	bd30      	pophi	{r4, r5, pc}
   d7a3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7a40:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7a44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7a48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7a4c:	d002      	beq.n	d7a54 <__adddf3+0x70>
   d7a4e:	4240      	negs	r0, r0
   d7a50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7a54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7a58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7a5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7a60:	d002      	beq.n	d7a68 <__adddf3+0x84>
   d7a62:	4252      	negs	r2, r2
   d7a64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7a68:	ea94 0f05 	teq	r4, r5
   d7a6c:	f000 80a7 	beq.w	d7bbe <__adddf3+0x1da>
   d7a70:	f1a4 0401 	sub.w	r4, r4, #1
   d7a74:	f1d5 0e20 	rsbs	lr, r5, #32
   d7a78:	db0d      	blt.n	d7a96 <__adddf3+0xb2>
   d7a7a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7a7e:	fa22 f205 	lsr.w	r2, r2, r5
   d7a82:	1880      	adds	r0, r0, r2
   d7a84:	f141 0100 	adc.w	r1, r1, #0
   d7a88:	fa03 f20e 	lsl.w	r2, r3, lr
   d7a8c:	1880      	adds	r0, r0, r2
   d7a8e:	fa43 f305 	asr.w	r3, r3, r5
   d7a92:	4159      	adcs	r1, r3
   d7a94:	e00e      	b.n	d7ab4 <__adddf3+0xd0>
   d7a96:	f1a5 0520 	sub.w	r5, r5, #32
   d7a9a:	f10e 0e20 	add.w	lr, lr, #32
   d7a9e:	2a01      	cmp	r2, #1
   d7aa0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7aa4:	bf28      	it	cs
   d7aa6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7aaa:	fa43 f305 	asr.w	r3, r3, r5
   d7aae:	18c0      	adds	r0, r0, r3
   d7ab0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7ab4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7ab8:	d507      	bpl.n	d7aca <__adddf3+0xe6>
   d7aba:	f04f 0e00 	mov.w	lr, #0
   d7abe:	f1dc 0c00 	rsbs	ip, ip, #0
   d7ac2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7ac6:	eb6e 0101 	sbc.w	r1, lr, r1
   d7aca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7ace:	d31b      	bcc.n	d7b08 <__adddf3+0x124>
   d7ad0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7ad4:	d30c      	bcc.n	d7af0 <__adddf3+0x10c>
   d7ad6:	0849      	lsrs	r1, r1, #1
   d7ad8:	ea5f 0030 	movs.w	r0, r0, rrx
   d7adc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7ae0:	f104 0401 	add.w	r4, r4, #1
   d7ae4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7ae8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7aec:	f080 809a 	bcs.w	d7c24 <__adddf3+0x240>
   d7af0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7af4:	bf08      	it	eq
   d7af6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7afa:	f150 0000 	adcs.w	r0, r0, #0
   d7afe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7b02:	ea41 0105 	orr.w	r1, r1, r5
   d7b06:	bd30      	pop	{r4, r5, pc}
   d7b08:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7b0c:	4140      	adcs	r0, r0
   d7b0e:	eb41 0101 	adc.w	r1, r1, r1
   d7b12:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b16:	f1a4 0401 	sub.w	r4, r4, #1
   d7b1a:	d1e9      	bne.n	d7af0 <__adddf3+0x10c>
   d7b1c:	f091 0f00 	teq	r1, #0
   d7b20:	bf04      	itt	eq
   d7b22:	4601      	moveq	r1, r0
   d7b24:	2000      	moveq	r0, #0
   d7b26:	fab1 f381 	clz	r3, r1
   d7b2a:	bf08      	it	eq
   d7b2c:	3320      	addeq	r3, #32
   d7b2e:	f1a3 030b 	sub.w	r3, r3, #11
   d7b32:	f1b3 0220 	subs.w	r2, r3, #32
   d7b36:	da0c      	bge.n	d7b52 <__adddf3+0x16e>
   d7b38:	320c      	adds	r2, #12
   d7b3a:	dd08      	ble.n	d7b4e <__adddf3+0x16a>
   d7b3c:	f102 0c14 	add.w	ip, r2, #20
   d7b40:	f1c2 020c 	rsb	r2, r2, #12
   d7b44:	fa01 f00c 	lsl.w	r0, r1, ip
   d7b48:	fa21 f102 	lsr.w	r1, r1, r2
   d7b4c:	e00c      	b.n	d7b68 <__adddf3+0x184>
   d7b4e:	f102 0214 	add.w	r2, r2, #20
   d7b52:	bfd8      	it	le
   d7b54:	f1c2 0c20 	rsble	ip, r2, #32
   d7b58:	fa01 f102 	lsl.w	r1, r1, r2
   d7b5c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7b60:	bfdc      	itt	le
   d7b62:	ea41 010c 	orrle.w	r1, r1, ip
   d7b66:	4090      	lslle	r0, r2
   d7b68:	1ae4      	subs	r4, r4, r3
   d7b6a:	bfa2      	ittt	ge
   d7b6c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7b70:	4329      	orrge	r1, r5
   d7b72:	bd30      	popge	{r4, r5, pc}
   d7b74:	ea6f 0404 	mvn.w	r4, r4
   d7b78:	3c1f      	subs	r4, #31
   d7b7a:	da1c      	bge.n	d7bb6 <__adddf3+0x1d2>
   d7b7c:	340c      	adds	r4, #12
   d7b7e:	dc0e      	bgt.n	d7b9e <__adddf3+0x1ba>
   d7b80:	f104 0414 	add.w	r4, r4, #20
   d7b84:	f1c4 0220 	rsb	r2, r4, #32
   d7b88:	fa20 f004 	lsr.w	r0, r0, r4
   d7b8c:	fa01 f302 	lsl.w	r3, r1, r2
   d7b90:	ea40 0003 	orr.w	r0, r0, r3
   d7b94:	fa21 f304 	lsr.w	r3, r1, r4
   d7b98:	ea45 0103 	orr.w	r1, r5, r3
   d7b9c:	bd30      	pop	{r4, r5, pc}
   d7b9e:	f1c4 040c 	rsb	r4, r4, #12
   d7ba2:	f1c4 0220 	rsb	r2, r4, #32
   d7ba6:	fa20 f002 	lsr.w	r0, r0, r2
   d7baa:	fa01 f304 	lsl.w	r3, r1, r4
   d7bae:	ea40 0003 	orr.w	r0, r0, r3
   d7bb2:	4629      	mov	r1, r5
   d7bb4:	bd30      	pop	{r4, r5, pc}
   d7bb6:	fa21 f004 	lsr.w	r0, r1, r4
   d7bba:	4629      	mov	r1, r5
   d7bbc:	bd30      	pop	{r4, r5, pc}
   d7bbe:	f094 0f00 	teq	r4, #0
   d7bc2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7bc6:	bf06      	itte	eq
   d7bc8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7bcc:	3401      	addeq	r4, #1
   d7bce:	3d01      	subne	r5, #1
   d7bd0:	e74e      	b.n	d7a70 <__adddf3+0x8c>
   d7bd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7bd6:	bf18      	it	ne
   d7bd8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7bdc:	d029      	beq.n	d7c32 <__adddf3+0x24e>
   d7bde:	ea94 0f05 	teq	r4, r5
   d7be2:	bf08      	it	eq
   d7be4:	ea90 0f02 	teqeq	r0, r2
   d7be8:	d005      	beq.n	d7bf6 <__adddf3+0x212>
   d7bea:	ea54 0c00 	orrs.w	ip, r4, r0
   d7bee:	bf04      	itt	eq
   d7bf0:	4619      	moveq	r1, r3
   d7bf2:	4610      	moveq	r0, r2
   d7bf4:	bd30      	pop	{r4, r5, pc}
   d7bf6:	ea91 0f03 	teq	r1, r3
   d7bfa:	bf1e      	ittt	ne
   d7bfc:	2100      	movne	r1, #0
   d7bfe:	2000      	movne	r0, #0
   d7c00:	bd30      	popne	{r4, r5, pc}
   d7c02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7c06:	d105      	bne.n	d7c14 <__adddf3+0x230>
   d7c08:	0040      	lsls	r0, r0, #1
   d7c0a:	4149      	adcs	r1, r1
   d7c0c:	bf28      	it	cs
   d7c0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7c12:	bd30      	pop	{r4, r5, pc}
   d7c14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7c18:	bf3c      	itt	cc
   d7c1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7c1e:	bd30      	popcc	{r4, r5, pc}
   d7c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7c28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7c2c:	f04f 0000 	mov.w	r0, #0
   d7c30:	bd30      	pop	{r4, r5, pc}
   d7c32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7c36:	bf1a      	itte	ne
   d7c38:	4619      	movne	r1, r3
   d7c3a:	4610      	movne	r0, r2
   d7c3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7c40:	bf1c      	itt	ne
   d7c42:	460b      	movne	r3, r1
   d7c44:	4602      	movne	r2, r0
   d7c46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7c4a:	bf06      	itte	eq
   d7c4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7c50:	ea91 0f03 	teqeq	r1, r3
   d7c54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7c58:	bd30      	pop	{r4, r5, pc}
   d7c5a:	bf00      	nop

000d7c5c <__aeabi_ui2d>:
   d7c5c:	f090 0f00 	teq	r0, #0
   d7c60:	bf04      	itt	eq
   d7c62:	2100      	moveq	r1, #0
   d7c64:	4770      	bxeq	lr
   d7c66:	b530      	push	{r4, r5, lr}
   d7c68:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c70:	f04f 0500 	mov.w	r5, #0
   d7c74:	f04f 0100 	mov.w	r1, #0
   d7c78:	e750      	b.n	d7b1c <__adddf3+0x138>
   d7c7a:	bf00      	nop

000d7c7c <__aeabi_i2d>:
   d7c7c:	f090 0f00 	teq	r0, #0
   d7c80:	bf04      	itt	eq
   d7c82:	2100      	moveq	r1, #0
   d7c84:	4770      	bxeq	lr
   d7c86:	b530      	push	{r4, r5, lr}
   d7c88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7c8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7c90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7c94:	bf48      	it	mi
   d7c96:	4240      	negmi	r0, r0
   d7c98:	f04f 0100 	mov.w	r1, #0
   d7c9c:	e73e      	b.n	d7b1c <__adddf3+0x138>
   d7c9e:	bf00      	nop

000d7ca0 <__aeabi_f2d>:
   d7ca0:	0042      	lsls	r2, r0, #1
   d7ca2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7ca6:	ea4f 0131 	mov.w	r1, r1, rrx
   d7caa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7cae:	bf1f      	itttt	ne
   d7cb0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7cb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7cb8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7cbc:	4770      	bxne	lr
   d7cbe:	f092 0f00 	teq	r2, #0
   d7cc2:	bf14      	ite	ne
   d7cc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7cc8:	4770      	bxeq	lr
   d7cca:	b530      	push	{r4, r5, lr}
   d7ccc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7cd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7cd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7cd8:	e720      	b.n	d7b1c <__adddf3+0x138>
   d7cda:	bf00      	nop

000d7cdc <__aeabi_ul2d>:
   d7cdc:	ea50 0201 	orrs.w	r2, r0, r1
   d7ce0:	bf08      	it	eq
   d7ce2:	4770      	bxeq	lr
   d7ce4:	b530      	push	{r4, r5, lr}
   d7ce6:	f04f 0500 	mov.w	r5, #0
   d7cea:	e00a      	b.n	d7d02 <__aeabi_l2d+0x16>

000d7cec <__aeabi_l2d>:
   d7cec:	ea50 0201 	orrs.w	r2, r0, r1
   d7cf0:	bf08      	it	eq
   d7cf2:	4770      	bxeq	lr
   d7cf4:	b530      	push	{r4, r5, lr}
   d7cf6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7cfa:	d502      	bpl.n	d7d02 <__aeabi_l2d+0x16>
   d7cfc:	4240      	negs	r0, r0
   d7cfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7d02:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7d06:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7d0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7d0e:	f43f aedc 	beq.w	d7aca <__adddf3+0xe6>
   d7d12:	f04f 0203 	mov.w	r2, #3
   d7d16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7d1a:	bf18      	it	ne
   d7d1c:	3203      	addne	r2, #3
   d7d1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7d22:	bf18      	it	ne
   d7d24:	3203      	addne	r2, #3
   d7d26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7d2a:	f1c2 0320 	rsb	r3, r2, #32
   d7d2e:	fa00 fc03 	lsl.w	ip, r0, r3
   d7d32:	fa20 f002 	lsr.w	r0, r0, r2
   d7d36:	fa01 fe03 	lsl.w	lr, r1, r3
   d7d3a:	ea40 000e 	orr.w	r0, r0, lr
   d7d3e:	fa21 f102 	lsr.w	r1, r1, r2
   d7d42:	4414      	add	r4, r2
   d7d44:	e6c1      	b.n	d7aca <__adddf3+0xe6>
   d7d46:	bf00      	nop

000d7d48 <__aeabi_dmul>:
   d7d48:	b570      	push	{r4, r5, r6, lr}
   d7d4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7d4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7d52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7d56:	bf1d      	ittte	ne
   d7d58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7d5c:	ea94 0f0c 	teqne	r4, ip
   d7d60:	ea95 0f0c 	teqne	r5, ip
   d7d64:	f000 f8de 	bleq	d7f24 <__aeabi_dmul+0x1dc>
   d7d68:	442c      	add	r4, r5
   d7d6a:	ea81 0603 	eor.w	r6, r1, r3
   d7d6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7d72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7d76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7d7a:	bf18      	it	ne
   d7d7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7d80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7d88:	d038      	beq.n	d7dfc <__aeabi_dmul+0xb4>
   d7d8a:	fba0 ce02 	umull	ip, lr, r0, r2
   d7d8e:	f04f 0500 	mov.w	r5, #0
   d7d92:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7d96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7d9a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7d9e:	f04f 0600 	mov.w	r6, #0
   d7da2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7da6:	f09c 0f00 	teq	ip, #0
   d7daa:	bf18      	it	ne
   d7dac:	f04e 0e01 	orrne.w	lr, lr, #1
   d7db0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7db4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7db8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7dbc:	d204      	bcs.n	d7dc8 <__aeabi_dmul+0x80>
   d7dbe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7dc2:	416d      	adcs	r5, r5
   d7dc4:	eb46 0606 	adc.w	r6, r6, r6
   d7dc8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7dcc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7dd0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7dd4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7dd8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7ddc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7de0:	bf88      	it	hi
   d7de2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7de6:	d81e      	bhi.n	d7e26 <__aeabi_dmul+0xde>
   d7de8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7dec:	bf08      	it	eq
   d7dee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7df2:	f150 0000 	adcs.w	r0, r0, #0
   d7df6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7dfa:	bd70      	pop	{r4, r5, r6, pc}
   d7dfc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7e00:	ea46 0101 	orr.w	r1, r6, r1
   d7e04:	ea40 0002 	orr.w	r0, r0, r2
   d7e08:	ea81 0103 	eor.w	r1, r1, r3
   d7e0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7e10:	bfc2      	ittt	gt
   d7e12:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7e16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7e1a:	bd70      	popgt	{r4, r5, r6, pc}
   d7e1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7e20:	f04f 0e00 	mov.w	lr, #0
   d7e24:	3c01      	subs	r4, #1
   d7e26:	f300 80ab 	bgt.w	d7f80 <__aeabi_dmul+0x238>
   d7e2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7e2e:	bfde      	ittt	le
   d7e30:	2000      	movle	r0, #0
   d7e32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7e36:	bd70      	pople	{r4, r5, r6, pc}
   d7e38:	f1c4 0400 	rsb	r4, r4, #0
   d7e3c:	3c20      	subs	r4, #32
   d7e3e:	da35      	bge.n	d7eac <__aeabi_dmul+0x164>
   d7e40:	340c      	adds	r4, #12
   d7e42:	dc1b      	bgt.n	d7e7c <__aeabi_dmul+0x134>
   d7e44:	f104 0414 	add.w	r4, r4, #20
   d7e48:	f1c4 0520 	rsb	r5, r4, #32
   d7e4c:	fa00 f305 	lsl.w	r3, r0, r5
   d7e50:	fa20 f004 	lsr.w	r0, r0, r4
   d7e54:	fa01 f205 	lsl.w	r2, r1, r5
   d7e58:	ea40 0002 	orr.w	r0, r0, r2
   d7e5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7e60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e68:	fa21 f604 	lsr.w	r6, r1, r4
   d7e6c:	eb42 0106 	adc.w	r1, r2, r6
   d7e70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7e74:	bf08      	it	eq
   d7e76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7e7a:	bd70      	pop	{r4, r5, r6, pc}
   d7e7c:	f1c4 040c 	rsb	r4, r4, #12
   d7e80:	f1c4 0520 	rsb	r5, r4, #32
   d7e84:	fa00 f304 	lsl.w	r3, r0, r4
   d7e88:	fa20 f005 	lsr.w	r0, r0, r5
   d7e8c:	fa01 f204 	lsl.w	r2, r1, r4
   d7e90:	ea40 0002 	orr.w	r0, r0, r2
   d7e94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7e9c:	f141 0100 	adc.w	r1, r1, #0
   d7ea0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7ea4:	bf08      	it	eq
   d7ea6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7eaa:	bd70      	pop	{r4, r5, r6, pc}
   d7eac:	f1c4 0520 	rsb	r5, r4, #32
   d7eb0:	fa00 f205 	lsl.w	r2, r0, r5
   d7eb4:	ea4e 0e02 	orr.w	lr, lr, r2
   d7eb8:	fa20 f304 	lsr.w	r3, r0, r4
   d7ebc:	fa01 f205 	lsl.w	r2, r1, r5
   d7ec0:	ea43 0302 	orr.w	r3, r3, r2
   d7ec4:	fa21 f004 	lsr.w	r0, r1, r4
   d7ec8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ecc:	fa21 f204 	lsr.w	r2, r1, r4
   d7ed0:	ea20 0002 	bic.w	r0, r0, r2
   d7ed4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7ed8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7edc:	bf08      	it	eq
   d7ede:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7ee2:	bd70      	pop	{r4, r5, r6, pc}
   d7ee4:	f094 0f00 	teq	r4, #0
   d7ee8:	d10f      	bne.n	d7f0a <__aeabi_dmul+0x1c2>
   d7eea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7eee:	0040      	lsls	r0, r0, #1
   d7ef0:	eb41 0101 	adc.w	r1, r1, r1
   d7ef4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ef8:	bf08      	it	eq
   d7efa:	3c01      	subeq	r4, #1
   d7efc:	d0f7      	beq.n	d7eee <__aeabi_dmul+0x1a6>
   d7efe:	ea41 0106 	orr.w	r1, r1, r6
   d7f02:	f095 0f00 	teq	r5, #0
   d7f06:	bf18      	it	ne
   d7f08:	4770      	bxne	lr
   d7f0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7f0e:	0052      	lsls	r2, r2, #1
   d7f10:	eb43 0303 	adc.w	r3, r3, r3
   d7f14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7f18:	bf08      	it	eq
   d7f1a:	3d01      	subeq	r5, #1
   d7f1c:	d0f7      	beq.n	d7f0e <__aeabi_dmul+0x1c6>
   d7f1e:	ea43 0306 	orr.w	r3, r3, r6
   d7f22:	4770      	bx	lr
   d7f24:	ea94 0f0c 	teq	r4, ip
   d7f28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7f2c:	bf18      	it	ne
   d7f2e:	ea95 0f0c 	teqne	r5, ip
   d7f32:	d00c      	beq.n	d7f4e <__aeabi_dmul+0x206>
   d7f34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7f38:	bf18      	it	ne
   d7f3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7f3e:	d1d1      	bne.n	d7ee4 <__aeabi_dmul+0x19c>
   d7f40:	ea81 0103 	eor.w	r1, r1, r3
   d7f44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f48:	f04f 0000 	mov.w	r0, #0
   d7f4c:	bd70      	pop	{r4, r5, r6, pc}
   d7f4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7f52:	bf06      	itte	eq
   d7f54:	4610      	moveq	r0, r2
   d7f56:	4619      	moveq	r1, r3
   d7f58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7f5c:	d019      	beq.n	d7f92 <__aeabi_dmul+0x24a>
   d7f5e:	ea94 0f0c 	teq	r4, ip
   d7f62:	d102      	bne.n	d7f6a <__aeabi_dmul+0x222>
   d7f64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7f68:	d113      	bne.n	d7f92 <__aeabi_dmul+0x24a>
   d7f6a:	ea95 0f0c 	teq	r5, ip
   d7f6e:	d105      	bne.n	d7f7c <__aeabi_dmul+0x234>
   d7f70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7f74:	bf1c      	itt	ne
   d7f76:	4610      	movne	r0, r2
   d7f78:	4619      	movne	r1, r3
   d7f7a:	d10a      	bne.n	d7f92 <__aeabi_dmul+0x24a>
   d7f7c:	ea81 0103 	eor.w	r1, r1, r3
   d7f80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7f84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7f8c:	f04f 0000 	mov.w	r0, #0
   d7f90:	bd70      	pop	{r4, r5, r6, pc}
   d7f92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7f96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7f9a:	bd70      	pop	{r4, r5, r6, pc}

000d7f9c <__aeabi_ddiv>:
   d7f9c:	b570      	push	{r4, r5, r6, lr}
   d7f9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7fa2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7fa6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7faa:	bf1d      	ittte	ne
   d7fac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7fb0:	ea94 0f0c 	teqne	r4, ip
   d7fb4:	ea95 0f0c 	teqne	r5, ip
   d7fb8:	f000 f8a7 	bleq	d810a <__aeabi_ddiv+0x16e>
   d7fbc:	eba4 0405 	sub.w	r4, r4, r5
   d7fc0:	ea81 0e03 	eor.w	lr, r1, r3
   d7fc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7fc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7fcc:	f000 8088 	beq.w	d80e0 <__aeabi_ddiv+0x144>
   d7fd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7fd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7fd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7fdc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7fe0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7fe4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7fe8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7fec:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7ff0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7ff4:	429d      	cmp	r5, r3
   d7ff6:	bf08      	it	eq
   d7ff8:	4296      	cmpeq	r6, r2
   d7ffa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7ffe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8002:	d202      	bcs.n	d800a <__aeabi_ddiv+0x6e>
   d8004:	085b      	lsrs	r3, r3, #1
   d8006:	ea4f 0232 	mov.w	r2, r2, rrx
   d800a:	1ab6      	subs	r6, r6, r2
   d800c:	eb65 0503 	sbc.w	r5, r5, r3
   d8010:	085b      	lsrs	r3, r3, #1
   d8012:	ea4f 0232 	mov.w	r2, r2, rrx
   d8016:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d801a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d801e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8022:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8026:	bf22      	ittt	cs
   d8028:	1ab6      	subcs	r6, r6, r2
   d802a:	4675      	movcs	r5, lr
   d802c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8030:	085b      	lsrs	r3, r3, #1
   d8032:	ea4f 0232 	mov.w	r2, r2, rrx
   d8036:	ebb6 0e02 	subs.w	lr, r6, r2
   d803a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d803e:	bf22      	ittt	cs
   d8040:	1ab6      	subcs	r6, r6, r2
   d8042:	4675      	movcs	r5, lr
   d8044:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8048:	085b      	lsrs	r3, r3, #1
   d804a:	ea4f 0232 	mov.w	r2, r2, rrx
   d804e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8052:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8056:	bf22      	ittt	cs
   d8058:	1ab6      	subcs	r6, r6, r2
   d805a:	4675      	movcs	r5, lr
   d805c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8060:	085b      	lsrs	r3, r3, #1
   d8062:	ea4f 0232 	mov.w	r2, r2, rrx
   d8066:	ebb6 0e02 	subs.w	lr, r6, r2
   d806a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d806e:	bf22      	ittt	cs
   d8070:	1ab6      	subcs	r6, r6, r2
   d8072:	4675      	movcs	r5, lr
   d8074:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8078:	ea55 0e06 	orrs.w	lr, r5, r6
   d807c:	d018      	beq.n	d80b0 <__aeabi_ddiv+0x114>
   d807e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8082:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8086:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d808a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d808e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8092:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8096:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d809a:	d1c0      	bne.n	d801e <__aeabi_ddiv+0x82>
   d809c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d80a0:	d10b      	bne.n	d80ba <__aeabi_ddiv+0x11e>
   d80a2:	ea41 0100 	orr.w	r1, r1, r0
   d80a6:	f04f 0000 	mov.w	r0, #0
   d80aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d80ae:	e7b6      	b.n	d801e <__aeabi_ddiv+0x82>
   d80b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d80b4:	bf04      	itt	eq
   d80b6:	4301      	orreq	r1, r0
   d80b8:	2000      	moveq	r0, #0
   d80ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d80be:	bf88      	it	hi
   d80c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d80c4:	f63f aeaf 	bhi.w	d7e26 <__aeabi_dmul+0xde>
   d80c8:	ebb5 0c03 	subs.w	ip, r5, r3
   d80cc:	bf04      	itt	eq
   d80ce:	ebb6 0c02 	subseq.w	ip, r6, r2
   d80d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d80d6:	f150 0000 	adcs.w	r0, r0, #0
   d80da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d80de:	bd70      	pop	{r4, r5, r6, pc}
   d80e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d80e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d80e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d80ec:	bfc2      	ittt	gt
   d80ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d80f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d80f6:	bd70      	popgt	{r4, r5, r6, pc}
   d80f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d80fc:	f04f 0e00 	mov.w	lr, #0
   d8100:	3c01      	subs	r4, #1
   d8102:	e690      	b.n	d7e26 <__aeabi_dmul+0xde>
   d8104:	ea45 0e06 	orr.w	lr, r5, r6
   d8108:	e68d      	b.n	d7e26 <__aeabi_dmul+0xde>
   d810a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d810e:	ea94 0f0c 	teq	r4, ip
   d8112:	bf08      	it	eq
   d8114:	ea95 0f0c 	teqeq	r5, ip
   d8118:	f43f af3b 	beq.w	d7f92 <__aeabi_dmul+0x24a>
   d811c:	ea94 0f0c 	teq	r4, ip
   d8120:	d10a      	bne.n	d8138 <__aeabi_ddiv+0x19c>
   d8122:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8126:	f47f af34 	bne.w	d7f92 <__aeabi_dmul+0x24a>
   d812a:	ea95 0f0c 	teq	r5, ip
   d812e:	f47f af25 	bne.w	d7f7c <__aeabi_dmul+0x234>
   d8132:	4610      	mov	r0, r2
   d8134:	4619      	mov	r1, r3
   d8136:	e72c      	b.n	d7f92 <__aeabi_dmul+0x24a>
   d8138:	ea95 0f0c 	teq	r5, ip
   d813c:	d106      	bne.n	d814c <__aeabi_ddiv+0x1b0>
   d813e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8142:	f43f aefd 	beq.w	d7f40 <__aeabi_dmul+0x1f8>
   d8146:	4610      	mov	r0, r2
   d8148:	4619      	mov	r1, r3
   d814a:	e722      	b.n	d7f92 <__aeabi_dmul+0x24a>
   d814c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8150:	bf18      	it	ne
   d8152:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8156:	f47f aec5 	bne.w	d7ee4 <__aeabi_dmul+0x19c>
   d815a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d815e:	f47f af0d 	bne.w	d7f7c <__aeabi_dmul+0x234>
   d8162:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8166:	f47f aeeb 	bne.w	d7f40 <__aeabi_dmul+0x1f8>
   d816a:	e712      	b.n	d7f92 <__aeabi_dmul+0x24a>

000d816c <__aeabi_d2f>:
   d816c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8170:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8174:	bf24      	itt	cs
   d8176:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d817a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d817e:	d90d      	bls.n	d819c <__aeabi_d2f+0x30>
   d8180:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8184:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8188:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d818c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8190:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8194:	bf08      	it	eq
   d8196:	f020 0001 	biceq.w	r0, r0, #1
   d819a:	4770      	bx	lr
   d819c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d81a0:	d121      	bne.n	d81e6 <__aeabi_d2f+0x7a>
   d81a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d81a6:	bfbc      	itt	lt
   d81a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d81ac:	4770      	bxlt	lr
   d81ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d81b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d81b6:	f1c2 0218 	rsb	r2, r2, #24
   d81ba:	f1c2 0c20 	rsb	ip, r2, #32
   d81be:	fa10 f30c 	lsls.w	r3, r0, ip
   d81c2:	fa20 f002 	lsr.w	r0, r0, r2
   d81c6:	bf18      	it	ne
   d81c8:	f040 0001 	orrne.w	r0, r0, #1
   d81cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d81d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d81d4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d81d8:	ea40 000c 	orr.w	r0, r0, ip
   d81dc:	fa23 f302 	lsr.w	r3, r3, r2
   d81e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d81e4:	e7cc      	b.n	d8180 <__aeabi_d2f+0x14>
   d81e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d81ea:	d107      	bne.n	d81fc <__aeabi_d2f+0x90>
   d81ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d81f0:	bf1e      	ittt	ne
   d81f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d81f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d81fa:	4770      	bxne	lr
   d81fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8200:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8204:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8208:	4770      	bx	lr
   d820a:	bf00      	nop

000d820c <__cxa_atexit>:
   d820c:	b510      	push	{r4, lr}
   d820e:	4c05      	ldr	r4, [pc, #20]	; (d8224 <__cxa_atexit+0x18>)
   d8210:	4613      	mov	r3, r2
   d8212:	b12c      	cbz	r4, d8220 <__cxa_atexit+0x14>
   d8214:	460a      	mov	r2, r1
   d8216:	4601      	mov	r1, r0
   d8218:	2002      	movs	r0, #2
   d821a:	f3af 8000 	nop.w
   d821e:	bd10      	pop	{r4, pc}
   d8220:	4620      	mov	r0, r4
   d8222:	bd10      	pop	{r4, pc}
   d8224:	00000000 	.word	0x00000000

000d8228 <memcmp>:
   d8228:	b510      	push	{r4, lr}
   d822a:	3901      	subs	r1, #1
   d822c:	4402      	add	r2, r0
   d822e:	4290      	cmp	r0, r2
   d8230:	d007      	beq.n	d8242 <memcmp+0x1a>
   d8232:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8236:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d823a:	42a3      	cmp	r3, r4
   d823c:	d0f7      	beq.n	d822e <memcmp+0x6>
   d823e:	1b18      	subs	r0, r3, r4
   d8240:	bd10      	pop	{r4, pc}
   d8242:	2000      	movs	r0, #0
   d8244:	bd10      	pop	{r4, pc}

000d8246 <memcpy>:
   d8246:	b510      	push	{r4, lr}
   d8248:	1e43      	subs	r3, r0, #1
   d824a:	440a      	add	r2, r1
   d824c:	4291      	cmp	r1, r2
   d824e:	d004      	beq.n	d825a <memcpy+0x14>
   d8250:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8254:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8258:	e7f8      	b.n	d824c <memcpy+0x6>
   d825a:	bd10      	pop	{r4, pc}

000d825c <memset>:
   d825c:	4402      	add	r2, r0
   d825e:	4603      	mov	r3, r0
   d8260:	4293      	cmp	r3, r2
   d8262:	d002      	beq.n	d826a <memset+0xe>
   d8264:	f803 1b01 	strb.w	r1, [r3], #1
   d8268:	e7fa      	b.n	d8260 <memset+0x4>
   d826a:	4770      	bx	lr

000d826c <srand>:
   d826c:	b538      	push	{r3, r4, r5, lr}
   d826e:	4b12      	ldr	r3, [pc, #72]	; (d82b8 <srand+0x4c>)
   d8270:	681c      	ldr	r4, [r3, #0]
   d8272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8274:	4605      	mov	r5, r0
   d8276:	b9d3      	cbnz	r3, d82ae <srand+0x42>
   d8278:	2018      	movs	r0, #24
   d827a:	f7fc fdbf 	bl	d4dfc <malloc>
   d827e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8282:	63a0      	str	r0, [r4, #56]	; 0x38
   d8284:	8003      	strh	r3, [r0, #0]
   d8286:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d828a:	8043      	strh	r3, [r0, #2]
   d828c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8290:	8083      	strh	r3, [r0, #4]
   d8292:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8296:	80c3      	strh	r3, [r0, #6]
   d8298:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d829c:	8103      	strh	r3, [r0, #8]
   d829e:	2305      	movs	r3, #5
   d82a0:	8143      	strh	r3, [r0, #10]
   d82a2:	230b      	movs	r3, #11
   d82a4:	8183      	strh	r3, [r0, #12]
   d82a6:	2201      	movs	r2, #1
   d82a8:	2300      	movs	r3, #0
   d82aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d82ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d82b0:	2200      	movs	r2, #0
   d82b2:	611d      	str	r5, [r3, #16]
   d82b4:	615a      	str	r2, [r3, #20]
   d82b6:	bd38      	pop	{r3, r4, r5, pc}
   d82b8:	2003e23c 	.word	0x2003e23c

000d82bc <strcmp>:
   d82bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d82c0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d82c4:	2a01      	cmp	r2, #1
   d82c6:	bf28      	it	cs
   d82c8:	429a      	cmpcs	r2, r3
   d82ca:	d0f7      	beq.n	d82bc <strcmp>
   d82cc:	1ad0      	subs	r0, r2, r3
   d82ce:	4770      	bx	lr

000d82d0 <strcpy>:
   d82d0:	4603      	mov	r3, r0
   d82d2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d82d6:	f803 2b01 	strb.w	r2, [r3], #1
   d82da:	2a00      	cmp	r2, #0
   d82dc:	d1f9      	bne.n	d82d2 <strcpy+0x2>
   d82de:	4770      	bx	lr

000d82e0 <strdup>:
   d82e0:	4b02      	ldr	r3, [pc, #8]	; (d82ec <strdup+0xc>)
   d82e2:	4601      	mov	r1, r0
   d82e4:	6818      	ldr	r0, [r3, #0]
   d82e6:	f000 b803 	b.w	d82f0 <_strdup_r>
   d82ea:	bf00      	nop
   d82ec:	2003e23c 	.word	0x2003e23c

000d82f0 <_strdup_r>:
   d82f0:	b570      	push	{r4, r5, r6, lr}
   d82f2:	4606      	mov	r6, r0
   d82f4:	4608      	mov	r0, r1
   d82f6:	460c      	mov	r4, r1
   d82f8:	f000 f80d 	bl	d8316 <strlen>
   d82fc:	1c45      	adds	r5, r0, #1
   d82fe:	4629      	mov	r1, r5
   d8300:	4630      	mov	r0, r6
   d8302:	f7fc fda3 	bl	d4e4c <_malloc_r>
   d8306:	4606      	mov	r6, r0
   d8308:	b118      	cbz	r0, d8312 <_strdup_r+0x22>
   d830a:	462a      	mov	r2, r5
   d830c:	4621      	mov	r1, r4
   d830e:	f7ff ff9a 	bl	d8246 <memcpy>
   d8312:	4630      	mov	r0, r6
   d8314:	bd70      	pop	{r4, r5, r6, pc}

000d8316 <strlen>:
   d8316:	4603      	mov	r3, r0
   d8318:	f813 2b01 	ldrb.w	r2, [r3], #1
   d831c:	2a00      	cmp	r2, #0
   d831e:	d1fb      	bne.n	d8318 <strlen+0x2>
   d8320:	1a18      	subs	r0, r3, r0
   d8322:	3801      	subs	r0, #1
   d8324:	4770      	bx	lr

000d8326 <strncmp>:
   d8326:	b530      	push	{r4, r5, lr}
   d8328:	b182      	cbz	r2, d834c <strncmp+0x26>
   d832a:	1e45      	subs	r5, r0, #1
   d832c:	3901      	subs	r1, #1
   d832e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8332:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8336:	42a3      	cmp	r3, r4
   d8338:	d106      	bne.n	d8348 <strncmp+0x22>
   d833a:	43ec      	mvns	r4, r5
   d833c:	4414      	add	r4, r2
   d833e:	42e0      	cmn	r0, r4
   d8340:	d001      	beq.n	d8346 <strncmp+0x20>
   d8342:	2b00      	cmp	r3, #0
   d8344:	d1f3      	bne.n	d832e <strncmp+0x8>
   d8346:	461c      	mov	r4, r3
   d8348:	1b18      	subs	r0, r3, r4
   d834a:	bd30      	pop	{r4, r5, pc}
   d834c:	4610      	mov	r0, r2
   d834e:	bd30      	pop	{r4, r5, pc}

000d8350 <strncpy>:
   d8350:	b510      	push	{r4, lr}
   d8352:	4603      	mov	r3, r0
   d8354:	b142      	cbz	r2, d8368 <strncpy+0x18>
   d8356:	f811 4b01 	ldrb.w	r4, [r1], #1
   d835a:	f803 4b01 	strb.w	r4, [r3], #1
   d835e:	3a01      	subs	r2, #1
   d8360:	2c00      	cmp	r4, #0
   d8362:	d1f7      	bne.n	d8354 <strncpy+0x4>
   d8364:	441a      	add	r2, r3
   d8366:	e000      	b.n	d836a <strncpy+0x1a>
   d8368:	bd10      	pop	{r4, pc}
   d836a:	4293      	cmp	r3, r2
   d836c:	d002      	beq.n	d8374 <strncpy+0x24>
   d836e:	f803 4b01 	strb.w	r4, [r3], #1
   d8372:	e7fa      	b.n	d836a <strncpy+0x1a>
   d8374:	bd10      	pop	{r4, pc}

000d8376 <strnlen>:
   d8376:	b510      	push	{r4, lr}
   d8378:	4603      	mov	r3, r0
   d837a:	4401      	add	r1, r0
   d837c:	428b      	cmp	r3, r1
   d837e:	d004      	beq.n	d838a <strnlen+0x14>
   d8380:	781a      	ldrb	r2, [r3, #0]
   d8382:	1c5c      	adds	r4, r3, #1
   d8384:	b10a      	cbz	r2, d838a <strnlen+0x14>
   d8386:	4623      	mov	r3, r4
   d8388:	e7f8      	b.n	d837c <strnlen+0x6>
   d838a:	1a18      	subs	r0, r3, r0
   d838c:	bd10      	pop	{r4, pc}

000d838e <link_code_end>:
	...

000d8390 <dynalib_user>:
   d8390:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d83a0:	0000 0000                                   ....

000d83a4 <_ZTV5Timer>:
	...
   d83ac:	4185 000d 41cd 000d 410d 000d 6572 6563     .A...A...A..rece
   d83bc:	7669 6465 2520 3a73 2520 0073 6544 6f74     ived %s: %s.Deto
   d83cc:	616e 6574 4200 6f6f 006d 4f42 4d4f 0021     nate.Boom.BOOM!.
   d83dc:	6f42 6d6f 615f 6b63 4400 7465 6e6f 7461     Boom_ack.Detonat
   d83ec:	5f65 6361 006b 6f42 6d6f 725f 7365 7465     e_ack.Boom_reset
   d83fc:	4200 4f4f 5f4d 6572 6573 0074 2e25 6632     .BOOM_reset.%.2f
   d840c:	7600 6c6f 6174 6567 7000 7261 6974 6c63     .voltage.particl
   d841c:	2f65 6564 6976 6563 6e2f 6d61 0065 7073     e/device/name.sp
   d842c:	7261 2f6b 6564 6976 6563 6e2f 6d61 0065     ark/device/name.
   d843c:	6564 5f76 616e 656d 203a 7325 000a 4156     dev_name: %s..VA
   d844c:	4952 4241 454c 4c5f 4241 4c45 203a 7325     RIABLE_LABEL: %s
   d845c:	000a 6577 6862 6f6f 006b 6255 6469 746f     ..webhook.Ubidot
   d846c:	0073 6e69 7564 7473 6972 6c61 612e 6970     s.industrial.api
   d847c:	752e 6962 6f64 7374 632e 6d6f 5b00 4157     .ubidots.com.[WA
   d848c:	4e52 4e49 5d47 5920 756f 2072 6f62 7261     RNING] Your boar
   d849c:	2064 6f64 7365 6e20 746f 7320 7075 6f70     d does not suppo
   d84ac:	7472 7420 6568 6d20 7365 4c68 6f6f 2870     rt the meshLoop(
   d84bc:	2029 656d 6874 646f 5b00 4157 4e52 4e49     ) method.[WARNIN
   d84cc:	5d47 5920 756f 2072 6f62 7261 2064 6f64     G] Your board do
   d84dc:	7365 6e20 746f 7320 7075 6f70 7472 7420     es not support t
   d84ec:	6568 7320 7465 6c43 756f 5064 6f72 6f74     he setCloudProto
   d84fc:	6f63 286c 2029 656d 6874 646f 5b00 4157     col() method.[WA
   d850c:	4e52 4e49 5d47 5920 756f 2072 6f62 7261     RNING] Your boar
   d851c:	2064 6f64 7365 6e20 746f 7320 7075 6f70     d does not suppo
   d852c:	7472 7420 6568 7320 6e65 2864 2029 656d     rt the send() me
   d853c:	6874 646f 5b00 6157 6e72 6e69 5d67 5920     thod.[Warning] Y
   d854c:	756f 2072 6f62 7261 2064 6f64 7365 6e20     our board does n
   d855c:	746f 7320 7075 6f70 7472 7420 6568 6720     ot support the g
   d856c:	7465 2928 6d20 7465 6f68 0064 6f59 2075     et() method.You 
   d857c:	7261 2065 6461 6964 676e 6d20 726f 2065     are adding more 
   d858c:	6874 6e61 7420 6568 6d20 7861 6d69 6d75     than the maximum
   d859c:	6f20 2066 6f63 736e 6365 7475 7669 2065      of consecutive 
   d85ac:	656b 2d79 6176 756c 7365 7020 6961 7372     key-values pairs
   d85bc:	2500 2573 3d73 7325 2500 2473 2500 2273     .%s%s=%s.%s$.%s"
   d85cc:	7325 3a22 2522 2273 2500 2c73 0000 0000     %s":"%s".%s,....

000d85dc <_ZTVN5spark13EthernetClassE>:
	...
   d85e4:	4ecb 000d 4ec1 000d 4eb7 000d 4ead 000d     .N...N...N...N..
   d85f4:	4ea1 000d 4e95 000d 4e89 000d 4e81 000d     .N...N...N...N..
   d8604:	4e77 000d 4e6d 000d 74cf 000d               wN..mN...t..

000d8610 <_ZTV8SPIClass>:
	...
   d8618:	4ee9 000d 4eeb 000d                         .N...N..

000d8620 <_ZTV3UDP>:
	...
   d8628:	468d 000d 46ad 000d 4f61 000d 508b 000d     .F...F..aO...P..
   d8638:	4f59 000d 4f77 000d 4f95 000d 4faf 000d     YO..wO...O...O..
   d8648:	4fd3 000d 506f 000d 5371 000d 5111 000d     .O..oP..qS...Q..
   d8658:	5291 000d 4f41 000d 5519 000d 5215 000d     .R..AO...U...R..
   d8668:	5149 000d 5547 000d 50b5 000d 4f4f 000d     IQ..GU...P..OO..
   d8678:	50f1 000d 4f55 000d 4fb1 000d fff0 ffff     .P..UO...O......
   d8688:	0000 0000 4fcb 000d                         .....O..

000d8690 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8698:	56a1 000d 56a7 000d 5893 000d 56b5 000d     .V...V...X...V..
   d86a8:	56a3 000d 6977 6972 676e 622e 656c 5300     .V..wiring.ble.S
   d86b8:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d86c8:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   d86d8:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   d86e8:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   d86f8:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   d8708:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   d8718:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   d8728:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   d8738:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   d8748:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   d8758:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   d8768:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   d8778:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   d8788:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   d8798:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   d87a8:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   d87b8:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   d87c8:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   d87d8:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d87e8:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   d87f8:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   d8808:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   d8818:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   d8828:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d8838:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d8848:	6465 002e 6162 6475 5300 7265 6169 006c     ed..baud.Serial.
   d8858:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   d8868:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   d8878:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   d8888:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   d8898:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   d88a8:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   d88b8:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   d88c8:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   d88d8:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   d88e8:	736c 3d20 0020 0a0d 6c00 006e 6e66 6300     ls = ....ln.fn.c
   d88f8:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
   d8908:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
   d8918:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
   d8928:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d8938:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d8948:	6100 6373 6974 656d 0000 0000               .asctime....

000d8954 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d895c:	5e89 000d 5e8f 000d 5ed3 000d 5e9d 000d     .^...^...^...^..
   d896c:	5e8b 000d                                   .^..

000d8970 <_ZTV9IPAddress>:
	...
   d8978:	6421 000d 6411 000d 6413 000d               !d...d...d..

000d8984 <_ZTV9USBSerial>:
	...
   d898c:	6525 000d 6575 000d 6583 000d 5bf5 000d     %e..ue...e...[..
   d899c:	6561 000d 6527 000d 653d 000d 656f 000d     ae..'e..=e..oe..
   d89ac:	6553 000d 6521 000d                         Se..!e..

000d89b4 <_ZTV11USARTSerial>:
	...
   d89bc:	6631 000d 6681 000d 668f 000d 5bf5 000d     1f...f...f...[..
   d89cc:	6645 000d 6667 000d 6653 000d 667b 000d     Ef..gf..Sf..{f..
   d89dc:	6633 000d 6637 000d                         3f..7f..

000d89e4 <_ZTV7TwoWire>:
	...
   d89ec:	675d 000d 67a7 000d 677f 000d 675f 000d     ]g...g...g.._g..
   d89fc:	6787 000d 678f 000d 6797 000d 679f 000d     .g...g...g...g..

000d8a0c <_ZTVN5spark9MeshClassE>:
	...
   d8a14:	6863 000d 6859 000d 684f 000d 471d 000d     ch..Yh..Oh...G..
   d8a24:	6843 000d 6837 000d 682b 000d 6823 000d     Ch..7h..+h..#h..
   d8a34:	6819 000d 680f 000d 74cf 000d 6666 3330     .h...h...t..ff03
   d8a44:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   d8a54:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   d8a64:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000d8a70 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8a78:	6f61 000d 6f67 000d 744f 000d 6f75 000d     ao..go..Ot..uo..
   d8a88:	6f63 000d                                   co..

000d8a8c <_ZTV9TCPClient>:
	...
   d8a94:	4571 000d 45a5 000d 6ed9 000d 6ef3 000d     qE...E...n...n..
   d8aa4:	72f5 000d 7047 000d 7019 000d 6f1d 000d     .r..Gp...p...o..
   d8ab4:	71d1 000d 70cd 000d 707b 000d 72c5 000d     .q...p..{p...r..
   d8ac4:	6f1f 000d 6f57 000d 6f05 000d 6f79 000d     .o..Wo...o..yo..
   d8ad4:	6ff9 000d 6572 7663 6520 7272 726f 3d20     .o..recv error =
   d8ae4:	2520 0064                                    %d.

000d8ae8 <_ZTVN5spark12NetworkClassE>:
	...
   d8af0:	7467 000d 7471 000d 747b 000d 7485 000d     gt..qt..{t...t..
   d8b00:	748f 000d 749b 000d 74a7 000d 74b3 000d     .t...t...t...t..
   d8b10:	74bb 000d 74c5 000d 74cf 000d               .t...t...t..

000d8b1c <_ZSt7nothrow>:
   d8b1c:	0000 0000                                   ....

000d8b20 <__sf_fake_stdin>:
	...

000d8b40 <__sf_fake_stdout>:
	...

000d8b60 <__sf_fake_stderr>:
	...
   d8b80:	0043                                        C.

000d8b82 <link_const_variable_data_end>:
	...

000d8b84 <link_constructors_location>:
   d8b84:	000d4499 	.word	0x000d4499
   d8b88:	000d45b9 	.word	0x000d45b9
   d8b8c:	000d45e1 	.word	0x000d45e1
   d8b90:	000d4657 	.word	0x000d4657
   d8b94:	000d4665 	.word	0x000d4665
   d8b98:	000d46c1 	.word	0x000d46c1
   d8b9c:	000d475d 	.word	0x000d475d
   d8ba0:	000d476d 	.word	0x000d476d
   d8ba4:	000d4795 	.word	0x000d4795
   d8ba8:	000d4ed5 	.word	0x000d4ed5
   d8bac:	000d4f29 	.word	0x000d4f29
   d8bb0:	000d5be5 	.word	0x000d5be5
   d8bb4:	000d5d39 	.word	0x000d5d39
   d8bb8:	000d5d49 	.word	0x000d5d49
   d8bbc:	000d5d89 	.word	0x000d5d89
   d8bc0:	000d6e89 	.word	0x000d6e89
   d8bc4:	000d759d 	.word	0x000d759d
   d8bc8:	000d767d 	.word	0x000d767d
   d8bcc:	000d7749 	.word	0x000d7749
   d8bd0:	000d77cd 	.word	0x000d77cd
   d8bd4:	000d7891 	.word	0x000d7891
   d8bd8:	000d7955 	.word	0x000d7955

000d8bdc <link_constructors_end>:
   d8bdc:	00000000 	.word	0x00000000
