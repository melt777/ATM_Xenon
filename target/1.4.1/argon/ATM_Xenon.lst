
e:/aacrs/02_12/markvisser/git_clone/ATM_XENON/ATM_Xenon/target/1.4.1/argon/ATM_Xenon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000087f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001c8e4  2**0
                  CONTENTS
  4 .data         000000a8  2003cd88  000dc810  0000cd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000019c0  2003ce30  2003ce30  0001ce30  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dc8b8  000dc8b8  0001c8b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc8e0  000dc8e0  0001c8e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0016b3d2  00000000  00000000  0001c8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001bc38  00000000  00000000  00187cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027d53  00000000  00000000  001a38ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003440  00000000  00000000  001cb641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005fe0  00000000  00000000  001cea81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00045b0f  00000000  00000000  001d4a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00045fff  00000000  00000000  0021a570  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011c018  00000000  00000000  0026056f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000faa4  00000000  00000000  0037c588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fde6 	bl	d9c02 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fe06 	bl	d9c4e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003cd88 	.word	0x2003cd88
   d404c:	000dc810 	.word	0x000dc810
   d4050:	2003ce30 	.word	0x2003ce30
   d4054:	2003ce30 	.word	0x2003ce30
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f9c9 	bl	d73f4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc80c 	.word	0x000dc80c
   d4084:	000dc7a4 	.word	0x000dc7a4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8c6 	b.w	d4218 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f943 	bl	d4318 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b97b 	b.w	d7390 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b8a1 	b.w	d61e0 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f002 b89f 	b.w	d61e0 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f002 b8a5 	b.w	d61f0 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f002 b8a3 	b.w	d61f0 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ba:	6803      	ldr	r3, [r0, #0]
   d40bc:	4718      	bx	r3

000d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40be:	2a01      	cmp	r2, #1
   d40c0:	d002      	beq.n	d40c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40c2:	2a02      	cmp	r2, #2
   d40c4:	d002      	beq.n	d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40c6:	e004      	b.n	d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c8:	6001      	str	r1, [r0, #0]
	      break;
   d40ca:	e002      	b.n	d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40cc:	680b      	ldr	r3, [r1, #0]
   d40ce:	b100      	cbz	r0, d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40d0:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40d2:	2000      	movs	r0, #0
   d40d4:	4770      	bx	lr
	...

000d40d8 <_Z14Name_of_DevicePKcS0_>:
char auth[] = "Jlx9iNCE2RGTdxNbScoY2adIgwEKpWif"; // authorisation token for blynk
char Device_Name_message [64];

/********************************************************************************************/
// used for getting the device name
void Name_of_Device(const char *topic, const char *data) {
   d40d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  strncpy(dev_name, data, sizeof(dev_name)-1);
   d40da:	4c09      	ldr	r4, [pc, #36]	; (d4100 <_Z14Name_of_DevicePKcS0_+0x28>)
char auth[] = "Jlx9iNCE2RGTdxNbScoY2adIgwEKpWif"; // authorisation token for blynk
char Device_Name_message [64];

/********************************************************************************************/
// used for getting the device name
void Name_of_Device(const char *topic, const char *data) {
   d40dc:	4605      	mov	r5, r0
  strncpy(dev_name, data, sizeof(dev_name)-1);
   d40de:	221f      	movs	r2, #31
   d40e0:	4620      	mov	r0, r4
   d40e2:	f005 fe3d 	bl	d9d60 <strncpy>
  Serial.printlnf("received %s: %s", topic, dev_name);
   d40e6:	f003 fd87 	bl	d7bf8 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40ea:	462b      	mov	r3, r5
   d40ec:	9400      	str	r4, [sp, #0]
   d40ee:	4a05      	ldr	r2, [pc, #20]	; (d4104 <_Z14Name_of_DevicePKcS0_+0x2c>)
   d40f0:	2101      	movs	r1, #1
   d40f2:	f003 f8b7 	bl	d7264 <_ZN5Print11printf_implEbPKcz>
  publishName = true;
   d40f6:	4b04      	ldr	r3, [pc, #16]	; (d4108 <_Z14Name_of_DevicePKcS0_+0x30>)
   d40f8:	2201      	movs	r2, #1
   d40fa:	701a      	strb	r2, [r3, #0]

}
   d40fc:	b003      	add	sp, #12
   d40fe:	bd30      	pop	{r4, r5, pc}
   d4100:	2003e279 	.word	0x2003e279
   d4104:	000db880 	.word	0x000db880
   d4108:	2003e278 	.word	0x2003e278

000d410c <_Z18cloudResetFunction6String>:
      softDelay(2000);
    }
} 

//  Remote Reset Function
int cloudResetFunction(String command) {
   d410c:	b508      	push	{r3, lr}
  resetFlag = true;
   d410e:	4b04      	ldr	r3, [pc, #16]	; (d4120 <_Z18cloudResetFunction6String+0x14>)
   d4110:	2201      	movs	r2, #1
   d4112:	701a      	strb	r2, [r3, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4114:	f001 fdaa 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
  rebootSync = millis();
   d4118:	4b02      	ldr	r3, [pc, #8]	; (d4124 <_Z18cloudResetFunction6String+0x18>)
   d411a:	6018      	str	r0, [r3, #0]
  return 0;
}
   d411c:	2000      	movs	r0, #0
   d411e:	bd08      	pop	{r3, pc}
   d4120:	2003e1e4 	.word	0x2003e1e4
   d4124:	2003e228 	.word	0x2003e228

000d4128 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4128:	6943      	ldr	r3, [r0, #20]
   d412a:	b113      	cbz	r3, d4132 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d412c:	6983      	ldr	r3, [r0, #24]
   d412e:	300c      	adds	r0, #12
   d4130:	4718      	bx	r3
   d4132:	4770      	bx	lr

000d4134 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4134:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4136:	2100      	movs	r1, #0
   d4138:	4604      	mov	r4, r0
   d413a:	4608      	mov	r0, r1
   d413c:	f001 fdf2 	bl	d5d24 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4140:	a902      	add	r1, sp, #8
   d4142:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4144:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4146:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d414a:	f001 fe03 	bl	d5d54 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d414e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4150:	b10c      	cbz	r4, d4156 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4152:	2301      	movs	r3, #1
   d4154:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4156:	2100      	movs	r1, #0
   d4158:	2001      	movs	r0, #1
   d415a:	f001 fde3 	bl	d5d24 <os_thread_scheduling>
            }
        }
        if (t) {
   d415e:	b12c      	cbz	r4, d416c <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	4620      	mov	r0, r4
   d4164:	689b      	ldr	r3, [r3, #8]
   d4166:	4798      	blx	r3
            t->running = false;
   d4168:	2300      	movs	r3, #0
   d416a:	7123      	strb	r3, [r4, #4]
        }
    }
   d416c:	b002      	add	sp, #8
   d416e:	bd10      	pop	{r4, pc}

000d4170 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4170:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4172:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4174:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4176:	b113      	cbz	r3, d417e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4178:	2203      	movs	r2, #3
   d417a:	4601      	mov	r1, r0
   d417c:	4798      	blx	r3
    }
   d417e:	4620      	mov	r0, r4
   d4180:	bd10      	pop	{r4, pc}

000d4182 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4182:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4184:	6880      	ldr	r0, [r0, #8]
   d4186:	2300      	movs	r3, #0
   d4188:	b138      	cbz	r0, d419a <_ZN5Timer5_stopEjb+0x18>
   d418a:	e88d 000a 	stmia.w	sp, {r1, r3}
   d418e:	2102      	movs	r1, #2
   d4190:	f001 fde8 	bl	d5d64 <os_timer_change>
   d4194:	fab0 f080 	clz	r0, r0
   d4198:	0940      	lsrs	r0, r0, #5
    }
   d419a:	b003      	add	sp, #12
   d419c:	f85d fb04 	ldr.w	pc, [sp], #4

000d41a0 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d41a0:	b538      	push	{r3, r4, r5, lr}
   d41a2:	4b10      	ldr	r3, [pc, #64]	; (d41e4 <_ZN5TimerD1Ev+0x44>)
   d41a4:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d41a6:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d41a8:	4604      	mov	r4, r0
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d41aa:	b1a3      	cbz	r3, d41d6 <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d41ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d41b0:	2200      	movs	r2, #0
   d41b2:	f7ff ffe6 	bl	d4182 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d41b6:	2100      	movs	r1, #0
   d41b8:	68a0      	ldr	r0, [r4, #8]
   d41ba:	f001 fe03 	bl	d5dc4 <os_timer_set_id>
            while (running) {
   d41be:	7923      	ldrb	r3, [r4, #4]
   d41c0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d41c4:	b113      	cbz	r3, d41cc <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d41c6:	f001 fd95 	bl	d5cf4 <os_thread_yield>
   d41ca:	e7f8      	b.n	d41be <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d41cc:	4629      	mov	r1, r5
   d41ce:	68a0      	ldr	r0, [r4, #8]
   d41d0:	f001 fdb8 	bl	d5d44 <os_timer_destroy>
            handle = nullptr;
   d41d4:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d41d6:	f104 000c 	add.w	r0, r4, #12
   d41da:	f7ff ffc9 	bl	d4170 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41de:	4620      	mov	r0, r4
   d41e0:	bd38      	pop	{r3, r4, r5, pc}
   d41e2:	bf00      	nop
   d41e4:	000db874 	.word	0x000db874

000d41e8 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d41e8:	b510      	push	{r4, lr}
   d41ea:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41ec:	f7ff ffd8 	bl	d41a0 <_ZN5TimerD1Ev>
   d41f0:	4620      	mov	r0, r4
   d41f2:	211c      	movs	r1, #28
   d41f4:	f004 fdde 	bl	d8db4 <_ZdlPvj>
   d41f8:	4620      	mov	r0, r4
   d41fa:	bd10      	pop	{r4, pc}

000d41fc <_ZN8particle13BleScanResultC1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d41fc:	b510      	push	{r4, lr}
   d41fe:	4604      	mov	r4, r0
   d4200:	f002 fc9a 	bl	d6b38 <_ZN8particle10BleAddressC1Ev>
   d4204:	f104 0008 	add.w	r0, r4, #8
   d4208:	f002 fd07 	bl	d6c1a <_ZN8particle18BleAdvertisingDataC1Ev>
   d420c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4210:	f002 fd03 	bl	d6c1a <_ZN8particle18BleAdvertisingDataC1Ev>
   d4214:	4620      	mov	r0, r4
   d4216:	bd10      	pop	{r4, pc}

000d4218 <setup>:
  Serial.printlnf("received %s: %s", topic, dev_name);
  publishName = true;

}

void setup() {
   d4218:	b530      	push	{r4, r5, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d421a:	2001      	movs	r0, #1
   d421c:	b085      	sub	sp, #20
   d421e:	f001 ff09 	bl	d6034 <set_system_mode>
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d4222:	2400      	movs	r4, #0
        conn_prop.size = sizeof(conn_prop);
   d4224:	2308      	movs	r3, #8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4226:	aa02      	add	r2, sp, #8
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4228:	2501      	movs	r5, #1
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d422a:	f644 6120 	movw	r1, #20000	; 0x4e20
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d422e:	9402      	str	r4, [sp, #8]
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4230:	4620      	mov	r0, r4

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4232:	f8ad 3008 	strh.w	r3, [sp, #8]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4236:	4623      	mov	r3, r4
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4238:	9503      	str	r5, [sp, #12]
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d423a:	f001 ffc1 	bl	d61c0 <spark_set_connection_property>
 
SYSTEM_MODE(AUTOMATIC);
Particle.keepAlive(20);
Serial.begin(115200);
   d423e:	f003 fcdb 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4242:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4246:	f003 fccb 	bl	d7be0 <_ZN9USBSerial5beginEl>
pinMode(led2, OUTPUT); // output for triggered led
   d424a:	4b16      	ldr	r3, [pc, #88]	; (d42a4 <setup+0x8c>)
   d424c:	4629      	mov	r1, r5
   d424e:	8818      	ldrh	r0, [r3, #0]
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4250:	4d15      	ldr	r5, [pc, #84]	; (d42a8 <setup+0x90>)
   d4252:	f004 fd1d 	bl	d8c90 <pinMode>
BLE.setTxPower(-8); // Use lower power // Use lower power -20, -16, -12, -8, -4, 0, 4, 8.
   d4256:	f002 fd5b 	bl	d6d10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d425a:	f06f 0107 	mvn.w	r1, #7
   d425e:	f002 fd75 	bl	d6d4c <_ZNK8particle14BleLocalDevice10setTxPowerEa>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4262:	4a12      	ldr	r2, [pc, #72]	; (d42ac <setup+0x94>)
   d4264:	4912      	ldr	r1, [pc, #72]	; (d42b0 <setup+0x98>)
   d4266:	4813      	ldr	r0, [pc, #76]	; (d42b4 <setup+0x9c>)
   d4268:	f003 f93c 	bl	d74e4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d426c:	4622      	mov	r2, r4
   d426e:	4621      	mov	r1, r4
   d4270:	4628      	mov	r0, r5
   d4272:	f7ff ff86 	bl	d4182 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4276:	68a8      	ldr	r0, [r5, #8]
   d4278:	b140      	cbz	r0, d428c <setup+0x74>
   d427a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d427e:	9300      	str	r3, [sp, #0]
   d4280:	9401      	str	r4, [sp, #4]
   d4282:	4623      	mov	r3, r4
   d4284:	4622      	mov	r2, r4
   d4286:	4621      	mov	r1, r4
   d4288:	f001 fd6c 	bl	d5d64 <os_timer_change>
Particle.function("reset", cloudResetFunction);//Remote Reset Particle Function, to reset device from the cloud
timer.start(); // start timer to send info to ubidots once per hour or whatever its set to
//ubidots.setDebug(true);  // Uncomment this line for printing debug messages
Mesh.subscribe("Detonate", DetonateAction);
   d428c:	4a0a      	ldr	r2, [pc, #40]	; (d42b8 <setup+0xa0>)
   d428e:	490b      	ldr	r1, [pc, #44]	; (d42bc <setup+0xa4>)
   d4290:	480b      	ldr	r0, [pc, #44]	; (d42c0 <setup+0xa8>)
   d4292:	f004 f8e7 	bl	d8464 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
pinMode(BATT, INPUT);
   d4296:	2100      	movs	r1, #0
   d4298:	2021      	movs	r0, #33	; 0x21
   d429a:	f004 fcf9 	bl	d8c90 <pinMode>

}
   d429e:	b005      	add	sp, #20
   d42a0:	bd30      	pop	{r4, r5, pc}
   d42a2:	bf00      	nop
   d42a4:	2003cd88 	.word	0x2003cd88
   d42a8:	2003e1e8 	.word	0x2003e1e8
   d42ac:	000db8e7 	.word	0x000db8e7
   d42b0:	000d410d 	.word	0x000d410d
   d42b4:	000d74b9 	.word	0x000d74b9
   d42b8:	000d4371 	.word	0x000d4371
   d42bc:	000db890 	.word	0x000db890
   d42c0:	2003e534 	.word	0x2003e534

000d42c4 <_Z9softDelaym>:
  rebootSync = millis();
  return 0;
}

//Softdelay function
inline void softDelay(uint32_t msDelay){
   d42c4:	b570      	push	{r4, r5, r6, lr}
   d42c6:	4606      	mov	r6, r0
   d42c8:	f001 fcd0 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d42cc:	4c06      	ldr	r4, [pc, #24]	; (d42e8 <_Z9softDelaym+0x24>)
   d42ce:	4605      	mov	r5, r0
   d42d0:	f001 fccc 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
 for (uint32_t ms = millis(); 
   d42d4:	1b40      	subs	r0, r0, r5
   d42d6:	42b0      	cmp	r0, r6
   d42d8:	d205      	bcs.n	d42e6 <_Z9softDelaym+0x22>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d42da:	f001 fcc7 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d42de:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d42e0:	f001 ff46 	bl	d6170 <spark_process>
   d42e4:	e7f4      	b.n	d42d0 <_Z9softDelaym+0xc>
   d42e6:	bd70      	pop	{r4, r5, r6, pc}
   d42e8:	2003e730 	.word	0x2003e730

000d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42ee:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42f0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42f2:	b17c      	cbz	r4, d4314 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42f4:	6863      	ldr	r3, [r4, #4]
   d42f6:	3b01      	subs	r3, #1
   d42f8:	6063      	str	r3, [r4, #4]
   d42fa:	b95b      	cbnz	r3, d4314 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42fc:	6823      	ldr	r3, [r4, #0]
   d42fe:	4620      	mov	r0, r4
   d4300:	689b      	ldr	r3, [r3, #8]
   d4302:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4304:	68a3      	ldr	r3, [r4, #8]
   d4306:	3b01      	subs	r3, #1
   d4308:	60a3      	str	r3, [r4, #8]
   d430a:	b91b      	cbnz	r3, d4314 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d430c:	6823      	ldr	r3, [r4, #0]
   d430e:	4620      	mov	r0, r4
   d4310:	68db      	ldr	r3, [r3, #12]
   d4312:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4314:	4628      	mov	r0, r5
   d4316:	bd38      	pop	{r3, r4, r5, pc}

000d4318 <loop>:
Mesh.subscribe("Detonate", DetonateAction);
pinMode(BATT, INPUT);

}

void loop() {
   d4318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
//  Remote Reset Function from the cload
  if ((resetFlag) && (millis() - rebootSync >=  rebootDelayMillis)) {
   d431a:	4b0f      	ldr	r3, [pc, #60]	; (d4358 <loop+0x40>)
   d431c:	781b      	ldrb	r3, [r3, #0]
   d431e:	b1c3      	cbz	r3, d4352 <loop+0x3a>
   d4320:	f001 fca4 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
   d4324:	4b0d      	ldr	r3, [pc, #52]	; (d435c <loop+0x44>)
   d4326:	681b      	ldr	r3, [r3, #0]
   d4328:	1ac0      	subs	r0, r0, r3
   d432a:	4b0d      	ldr	r3, [pc, #52]	; (d4360 <loop+0x48>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	4298      	cmp	r0, r3
   d4330:	d30f      	bcc.n	d4352 <loop+0x3a>
   d4332:	4b0c      	ldr	r3, [pc, #48]	; (d4364 <loop+0x4c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4334:	4a0c      	ldr	r2, [pc, #48]	; (d4368 <loop+0x50>)
   d4336:	781b      	ldrb	r3, [r3, #0]
   d4338:	f88d 3000 	strb.w	r3, [sp]
   d433c:	490b      	ldr	r1, [pc, #44]	; (d436c <loop+0x54>)
   d433e:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d4342:	a802      	add	r0, sp, #8
   d4344:	f003 f9de 	bl	d7704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4348:	a803      	add	r0, sp, #12
   d434a:	f7ff ffcf 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    // do things here  before reset and then push the button
    Particle.publish("Debug", "Remote Reset Initiated", 300, PRIVATE);
    System.reset();
   d434e:	f001 ffe9 	bl	d6324 <_ZN11SystemClass5resetEv>
  }
}
   d4352:	b005      	add	sp, #20
   d4354:	f85d fb04 	ldr.w	pc, [sp], #4
   d4358:	2003e1e4 	.word	0x2003e1e4
   d435c:	2003e228 	.word	0x2003e228
   d4360:	2003cd8c 	.word	0x2003cd8c
   d4364:	2003e205 	.word	0x2003e205
   d4368:	000db899 	.word	0x000db899
   d436c:	000db8b0 	.word	0x000db8b0

000d4370 <_Z14DetonateActionPKcS0_>:

//Custom Functions
void DetonateAction(const char *event, const char *data){
   d4370:	b530      	push	{r4, r5, lr}
   d4372:	460c      	mov	r4, r1
   d4374:	b085      	sub	sp, #20
    
   if (strcmp (data, "Boom")==0){ 
   d4376:	4924      	ldr	r1, [pc, #144]	; (d4408 <_Z14DetonateActionPKcS0_+0x98>)
   d4378:	4620      	mov	r0, r4
   d437a:	f005 fca7 	bl	d9ccc <strcmp>
   d437e:	4605      	mov	r5, r0
   d4380:	bb08      	cbnz	r0, d43c6 <_Z14DetonateActionPKcS0_+0x56>
      softDelay(3000);// wait 3 seconds 
   d4382:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4386:	f7ff ff9d 	bl	d42c4 <_Z9softDelaym>
      digitalWrite (led2, HIGH);
   d438a:	4b20      	ldr	r3, [pc, #128]	; (d440c <_Z14DetonateActionPKcS0_+0x9c>)
   d438c:	2101      	movs	r1, #1
   d438e:	8818      	ldrh	r0, [r3, #0]
   d4390:	f004 fc8f 	bl	d8cb2 <digitalWrite>
      DetonateSatus=1; // shows it has detonated
   d4394:	4b1e      	ldr	r3, [pc, #120]	; (d4410 <_Z14DetonateActionPKcS0_+0xa0>)
   d4396:	491f      	ldr	r1, [pc, #124]	; (d4414 <_Z14DetonateActionPKcS0_+0xa4>)
   d4398:	2201      	movs	r2, #1
   d439a:	701a      	strb	r2, [r3, #0]
   d439c:	4b1e      	ldr	r3, [pc, #120]	; (d4418 <_Z14DetonateActionPKcS0_+0xa8>)
   d439e:	781b      	ldrb	r3, [r3, #0]
   d43a0:	f88d 3000 	strb.w	r3, [sp]
   d43a4:	462a      	mov	r2, r5
   d43a6:	233c      	movs	r3, #60	; 0x3c
   d43a8:	a802      	add	r0, sp, #8
   d43aa:	f003 f9ab 	bl	d7704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43ae:	a803      	add	r0, sp, #12
   d43b0:	f7ff ff9c 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     
      Particle.publish("BOOM!",PRIVATE);
      Mesh.publish ("Detonate_ack","Boom_ack"); // publish to all subscriber to detonate
   d43b4:	4a19      	ldr	r2, [pc, #100]	; (d441c <_Z14DetonateActionPKcS0_+0xac>)
   d43b6:	491a      	ldr	r1, [pc, #104]	; (d4420 <_Z14DetonateActionPKcS0_+0xb0>)
   d43b8:	481a      	ldr	r0, [pc, #104]	; (d4424 <_Z14DetonateActionPKcS0_+0xb4>)
   d43ba:	f003 ffdb 	bl	d8374 <_ZN5spark11MeshPublish7publishEPKcS2_>
      softDelay(3000);
   d43be:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d43c2:	f7ff ff7f 	bl	d42c4 <_Z9softDelaym>
    }
   //Serial.println (data);
    if (strcmp (data, "Boom_reset")==0){  // turn led off as well as detonator voltage
   d43c6:	4620      	mov	r0, r4
   d43c8:	4917      	ldr	r1, [pc, #92]	; (d4428 <_Z14DetonateActionPKcS0_+0xb8>)
   d43ca:	f005 fc7f 	bl	d9ccc <strcmp>
   d43ce:	4604      	mov	r4, r0
   d43d0:	b9c0      	cbnz	r0, d4404 <_Z14DetonateActionPKcS0_+0x94>
      digitalWrite (led2, LOW);
   d43d2:	4b0e      	ldr	r3, [pc, #56]	; (d440c <_Z14DetonateActionPKcS0_+0x9c>)
   d43d4:	4601      	mov	r1, r0
   d43d6:	8818      	ldrh	r0, [r3, #0]
   d43d8:	f004 fc6b 	bl	d8cb2 <digitalWrite>
      DetonateSatus=1; // shows it has detonated
   d43dc:	4b0c      	ldr	r3, [pc, #48]	; (d4410 <_Z14DetonateActionPKcS0_+0xa0>)
   d43de:	4913      	ldr	r1, [pc, #76]	; (d442c <_Z14DetonateActionPKcS0_+0xbc>)
   d43e0:	2201      	movs	r2, #1
   d43e2:	701a      	strb	r2, [r3, #0]
   d43e4:	4b0c      	ldr	r3, [pc, #48]	; (d4418 <_Z14DetonateActionPKcS0_+0xa8>)
   d43e6:	781b      	ldrb	r3, [r3, #0]
   d43e8:	f88d 3000 	strb.w	r3, [sp]
   d43ec:	4622      	mov	r2, r4
   d43ee:	233c      	movs	r3, #60	; 0x3c
   d43f0:	a802      	add	r0, sp, #8
   d43f2:	f003 f987 	bl	d7704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43f6:	a803      	add	r0, sp, #12
   d43f8:	f7ff ff78 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("BOOM_reset",PRIVATE);
      softDelay(2000);
   d43fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4400:	f7ff ff60 	bl	d42c4 <_Z9softDelaym>
    }
} 
   d4404:	b005      	add	sp, #20
   d4406:	bd30      	pop	{r4, r5, pc}
   d4408:	000db8b6 	.word	0x000db8b6
   d440c:	2003cd88 	.word	0x2003cd88
   d4410:	2003e204 	.word	0x2003e204
   d4414:	000db8bb 	.word	0x000db8bb
   d4418:	2003e205 	.word	0x2003e205
   d441c:	000db8c1 	.word	0x000db8c1
   d4420:	000db8ca 	.word	0x000db8ca
   d4424:	2003e534 	.word	0x2003e534
   d4428:	000db8d7 	.word	0x000db8d7
   d442c:	000db8e2 	.word	0x000db8e2

000d4430 <_Z22timerUbidotInformationv>:
      millis() - ms < msDelay;  
       Particle.process());
}

// get called by timer to send batt voltages a up to ubidot
void timerUbidotInformation(void){
   d4430:	b530      	push	{r4, r5, lr}
    
  float voltage = analogRead(BATT) * 0.0011224;
   d4432:	2021      	movs	r0, #33	; 0x21
      millis() - ms < msDelay;  
       Particle.process());
}

// get called by timer to send batt voltages a up to ubidot
void timerUbidotInformation(void){
   d4434:	b08b      	sub	sp, #44	; 0x2c
    
  float voltage = analogRead(BATT) * 0.0011224;
   d4436:	f004 fc55 	bl	d8ce4 <analogRead>
   d443a:	f005 f825 	bl	d9488 <__aeabi_i2d>
   d443e:	a32b      	add	r3, pc, #172	; (adr r3, d44ec <_Z22timerUbidotInformationv+0xbc>)
   d4440:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4444:	f005 f886 	bl	d9554 <__aeabi_dmul>
   d4448:	f005 fb66 	bl	d9b18 <__aeabi_d2f>
   d444c:	9003      	str	r0, [sp, #12]
  Particle.publish("voltage", String::format("%.2f",voltage), PRIVATE);
   d444e:	f005 f82d 	bl	d94ac <__aeabi_f2d>
   d4452:	4602      	mov	r2, r0
   d4454:	460b      	mov	r3, r1
   d4456:	a806      	add	r0, sp, #24
   d4458:	491b      	ldr	r1, [pc, #108]	; (d44c8 <_Z22timerUbidotInformationv+0x98>)
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d445a:	4d1c      	ldr	r5, [pc, #112]	; (d44cc <_Z22timerUbidotInformationv+0x9c>)
   d445c:	f002 fb14 	bl	d6a88 <_ZN6String6formatEPKcz>
   d4460:	4b1b      	ldr	r3, [pc, #108]	; (d44d0 <_Z22timerUbidotInformationv+0xa0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4462:	9a06      	ldr	r2, [sp, #24]
   d4464:	781b      	ldrb	r3, [r3, #0]
   d4466:	491b      	ldr	r1, [pc, #108]	; (d44d4 <_Z22timerUbidotInformationv+0xa4>)
   d4468:	f88d 3000 	strb.w	r3, [sp]
   d446c:	a804      	add	r0, sp, #16
   d446e:	233c      	movs	r3, #60	; 0x3c
   d4470:	f003 f948 	bl	d7704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4474:	a805      	add	r0, sp, #20
   d4476:	f7ff ff39 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d447a:	2400      	movs	r4, #0
   d447c:	a806      	add	r0, sp, #24
   d447e:	f002 fa8e 	bl	d699e <_ZN6StringD1Ev>
   d4482:	9401      	str	r4, [sp, #4]
   d4484:	9400      	str	r4, [sp, #0]
   d4486:	4622      	mov	r2, r4
   d4488:	2301      	movs	r3, #1
   d448a:	4913      	ldr	r1, [pc, #76]	; (d44d8 <_Z22timerUbidotInformationv+0xa8>)
   d448c:	4628      	mov	r0, r5
   d448e:	f001 fe8f 	bl	d61b0 <spark_subscribe>
   d4492:	4b12      	ldr	r3, [pc, #72]	; (d44dc <_Z22timerUbidotInformationv+0xac>)
   d4494:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4496:	f88d 3000 	strb.w	r3, [sp]
   d449a:	4622      	mov	r2, r4
   d449c:	233c      	movs	r3, #60	; 0x3c
   d449e:	4629      	mov	r1, r5
   d44a0:	a806      	add	r0, sp, #24
  // get the device name         
  Particle.subscribe("particle/device/name", Name_of_Device);
  Particle.publish("particle/device/name");  // ask the cloud for the name to be sent to you
   ubidots.add(dev_name, voltage);
   d44a2:	4c0f      	ldr	r4, [pc, #60]	; (d44e0 <_Z22timerUbidotInformationv+0xb0>)
   d44a4:	f003 f92e 	bl	d7704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d44a8:	a807      	add	r0, sp, #28
   d44aa:	f7ff ff1f 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44ae:	ed9d 0a03 	vldr	s0, [sp, #12]
   d44b2:	490c      	ldr	r1, [pc, #48]	; (d44e4 <_Z22timerUbidotInformationv+0xb4>)
   d44b4:	4620      	mov	r0, r4
   d44b6:	f000 fbdc 	bl	d4c72 <_ZN7Ubidots3addEPcf>
  ubidots.meshPublishToUbidots("Ubidots"); // webhook its publishing to on particle consol
   d44ba:	490b      	ldr	r1, [pc, #44]	; (d44e8 <_Z22timerUbidotInformationv+0xb8>)
   d44bc:	4620      	mov	r0, r4
   d44be:	f000 fbe1 	bl	d4c84 <_ZN7Ubidots20meshPublishToUbidotsEPKc>
}
   d44c2:	b00b      	add	sp, #44	; 0x2c
   d44c4:	bd30      	pop	{r4, r5, pc}
   d44c6:	bf00      	nop
   d44c8:	000db8ed 	.word	0x000db8ed
   d44cc:	000db8fa 	.word	0x000db8fa
   d44d0:	2003e205 	.word	0x2003e205
   d44d4:	000db8f2 	.word	0x000db8f2
   d44d8:	000d40d9 	.word	0x000d40d9
   d44dc:	2003e299 	.word	0x2003e299
   d44e0:	2003e268 	.word	0x2003e268
   d44e4:	2003e279 	.word	0x2003e279
   d44e8:	000db90f 	.word	0x000db90f
   d44ec:	d2c10294 	.word	0xd2c10294
   d44f0:	3f5263af 	.word	0x3f5263af

000d44f4 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d44f4:	b510      	push	{r4, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d44f6:	4b04      	ldr	r3, [pc, #16]	; (d4508 <_ZN22BlynkTransportParticleD1Ev+0x14>)
   d44f8:	4604      	mov	r4, r0
   d44fa:	f840 3b18 	str.w	r3, [r0], #24
   d44fe:	f7ff fef5 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4502:	4620      	mov	r0, r4
   d4504:	bd10      	pop	{r4, pc}
   d4506:	bf00      	nop
   d4508:	000dc520 	.word	0x000dc520

000d450c <_GLOBAL__sub_I_Blynk>:
   d450c:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d450e:	4b3e      	ldr	r3, [pc, #248]	; (d4608 <_GLOBAL__sub_I_Blynk+0xfc>)
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d4510:	4d3e      	ldr	r5, [pc, #248]	; (d460c <_GLOBAL__sub_I_Blynk+0x100>)
   d4512:	2400      	movs	r4, #0
   d4514:	701c      	strb	r4, [r3, #0]
   d4516:	4b3e      	ldr	r3, [pc, #248]	; (d4610 <_GLOBAL__sub_I_Blynk+0x104>)
   d4518:	b088      	sub	sp, #32
   d451a:	2201      	movs	r2, #1
   d451c:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d451e:	f001 fb25 	bl	d5b6c <HAL_Pin_Map>
   d4522:	4628      	mov	r0, r5
   d4524:	f004 fa90 	bl	d8a48 <_ZN9TCPClientC1Ev>
   d4528:	f105 001c 	add.w	r0, r5, #28
   d452c:	f003 faa6 	bl	d7a7c <_ZN9IPAddressC1Ev>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4530:	4a38      	ldr	r2, [pc, #224]	; (d4614 <_GLOBAL__sub_I_Blynk+0x108>)
   d4532:	4939      	ldr	r1, [pc, #228]	; (d4618 <_GLOBAL__sub_I_Blynk+0x10c>)
   d4534:	636c      	str	r4, [r5, #52]	; 0x34
   d4536:	4628      	mov	r0, r5
   d4538:	872c      	strh	r4, [r5, #56]	; 0x38
   d453a:	f004 fc2d 	bl	d8d98 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d453e:	4b37      	ldr	r3, [pc, #220]	; (d461c <_GLOBAL__sub_I_Blynk+0x110>)
   d4540:	601d      	str	r5, [r3, #0]
   d4542:	605c      	str	r4, [r3, #4]
   d4544:	609c      	str	r4, [r3, #8]
   d4546:	60dc      	str	r4, [r3, #12]
   d4548:	611c      	str	r4, [r3, #16]
   d454a:	615c      	str	r4, [r3, #20]
   d454c:	831c      	strh	r4, [r3, #24]
   d454e:	835c      	strh	r4, [r3, #26]
   d4550:	771c      	strb	r4, [r3, #28]
   d4552:	775c      	strb	r4, [r3, #29]
   d4554:	f001 fb8a 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
#define Xenon

/********************************************************************************************/
//Ubidots
const char* WEBHOOK_NAME = "Ubidots";
Ubidots ubidots("webhook", UBI_PARTICLE);
   d4558:	2203      	movs	r2, #3
   d455a:	4931      	ldr	r1, [pc, #196]	; (d4620 <_GLOBAL__sub_I_Blynk+0x114>)
   d455c:	4831      	ldr	r0, [pc, #196]	; (d4624 <_GLOBAL__sub_I_Blynk+0x118>)
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d455e:	4d32      	ldr	r5, [pc, #200]	; (d4628 <_GLOBAL__sub_I_Blynk+0x11c>)
   d4560:	f000 fb5a 	bl	d4c18 <_ZN7UbidotsC1EPc11IotProtocol>
   d4564:	4a2b      	ldr	r2, [pc, #172]	; (d4614 <_GLOBAL__sub_I_Blynk+0x108>)
   d4566:	4931      	ldr	r1, [pc, #196]	; (d462c <_GLOBAL__sub_I_Blynk+0x120>)
   d4568:	482e      	ldr	r0, [pc, #184]	; (d4624 <_GLOBAL__sub_I_Blynk+0x118>)
   d456a:	f004 fc15 	bl	d8d98 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d456e:	4b30      	ldr	r3, [pc, #192]	; (d4630 <_GLOBAL__sub_I_Blynk+0x124>)
   d4570:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4572:	ae04      	add	r6, sp, #16
   d4574:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4578:	4b2e      	ldr	r3, [pc, #184]	; (d4634 <_GLOBAL__sub_I_Blynk+0x128>)
   d457a:	602b      	str	r3, [r5, #0]
   d457c:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d457e:	f105 030c 	add.w	r3, r5, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4582:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4586:	e893 0003 	ldmia.w	r3, {r0, r1}
   d458a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d458e:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4592:	e883 0003 	stmia.w	r3, {r0, r1}
   d4596:	4b28      	ldr	r3, [pc, #160]	; (d4638 <_GLOBAL__sub_I_Blynk+0x12c>)
   d4598:	616b      	str	r3, [r5, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d459a:	69ab      	ldr	r3, [r5, #24]
   d459c:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d459e:	4b27      	ldr	r3, [pc, #156]	; (d463c <_GLOBAL__sub_I_Blynk+0x130>)
   d45a0:	61ab      	str	r3, [r5, #24]
   d45a2:	712c      	strb	r4, [r5, #4]
   d45a4:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d45a6:	462b      	mov	r3, r5
   d45a8:	4a25      	ldr	r2, [pc, #148]	; (d4640 <_GLOBAL__sub_I_Blynk+0x134>)
   d45aa:	9401      	str	r4, [sp, #4]
   d45ac:	f242 7110 	movw	r1, #10000	; 0x2710
   d45b0:	f105 0008 	add.w	r0, r5, #8
   d45b4:	9400      	str	r4, [sp, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d45b6:	9406      	str	r4, [sp, #24]
   d45b8:	f001 fbbc 	bl	d5d34 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d45bc:	4630      	mov	r0, r6
   d45be:	f7ff fdd7 	bl	d4170 <_ZNSt14_Function_baseD1Ev>

  // float value = 0; // variable
 // int EM_BEACON1_BATT = 0;
 // int EM_BEACON2_BATT = 0;

 Timer timer(10000, timerUbidotInformation);// 5min timer to send info to ubidots
   d45c2:	4628      	mov	r0, r5
   d45c4:	4a13      	ldr	r2, [pc, #76]	; (d4614 <_GLOBAL__sub_I_Blynk+0x108>)
   d45c6:	491f      	ldr	r1, [pc, #124]	; (d4644 <_GLOBAL__sub_I_Blynk+0x138>)
 
/********************************************************************************************/
//BLE 
#define SCAN_RESULT_COUNT 30
BleScanResult results[SCAN_RESULT_COUNT];
   d45c8:	4e1f      	ldr	r6, [pc, #124]	; (d4648 <_GLOBAL__sub_I_Blynk+0x13c>)

  // float value = 0; // variable
 // int EM_BEACON1_BATT = 0;
 // int EM_BEACON2_BATT = 0;

 Timer timer(10000, timerUbidotInformation);// 5min timer to send info to ubidots
   d45ca:	f004 fbe5 	bl	d8d98 <__aeabi_atexit>
 
/********************************************************************************************/
//BLE 
#define SCAN_RESULT_COUNT 30
BleScanResult results[SCAN_RESULT_COUNT];
   d45ce:	f640 15d8 	movw	r5, #2520	; 0x9d8
   d45d2:	1930      	adds	r0, r6, r4
   d45d4:	3454      	adds	r4, #84	; 0x54
   d45d6:	f7ff fe11 	bl	d41fc <_ZN8particle13BleScanResultC1Ev>
   d45da:	42ac      	cmp	r4, r5
   d45dc:	d1f9      	bne.n	d45d2 <_GLOBAL__sub_I_Blynk+0xc6>
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d45de:	4e1b      	ldr	r6, [pc, #108]	; (d464c <_GLOBAL__sub_I_Blynk+0x140>)
 Timer timer(10000, timerUbidotInformation);// 5min timer to send info to ubidots
 
/********************************************************************************************/
//BLE 
#define SCAN_RESULT_COUNT 30
BleScanResult results[SCAN_RESULT_COUNT];
   d45e0:	2400      	movs	r4, #0
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d45e2:	f640 15d8 	movw	r5, #2520	; 0x9d8
   d45e6:	1930      	adds	r0, r6, r4
   d45e8:	3454      	adds	r4, #84	; 0x54
   d45ea:	f7ff fe07 	bl	d41fc <_ZN8particle13BleScanResultC1Ev>
   d45ee:	42ac      	cmp	r4, r5
   d45f0:	d1f9      	bne.n	d45e6 <_GLOBAL__sub_I_Blynk+0xda>
   d45f2:	f001 fb3b 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>

/********************************************************************************************/
//setup remote cloud reset
#define DELAY_BEFORE_REBOOT 2000
unsigned int rebootDelayMillis = DELAY_BEFORE_REBOOT;
unsigned long rebootSync = millis();
   d45f6:	4b16      	ldr	r3, [pc, #88]	; (d4650 <_GLOBAL__sub_I_Blynk+0x144>)
/********************************************************************************************
*********************************************************************************************
*********************************************************************************************/
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
   d45f8:	2100      	movs	r1, #0

/********************************************************************************************/
//setup remote cloud reset
#define DELAY_BEFORE_REBOOT 2000
unsigned int rebootDelayMillis = DELAY_BEFORE_REBOOT;
unsigned long rebootSync = millis();
   d45fa:	6018      	str	r0, [r3, #0]
/********************************************************************************************
*********************************************************************************************
*********************************************************************************************/
int led2 = D7;
bool DetonateSatus = 0; // holds the status for detonation.
SYSTEM_THREAD(ENABLED);
   d45fc:	2001      	movs	r0, #1
   d45fe:	f001 fd29 	bl	d6054 <system_thread_set_state>
  // get the device name         
  Particle.subscribe("particle/device/name", Name_of_Device);
  Particle.publish("particle/device/name");  // ask the cloud for the name to be sent to you
   ubidots.add(dev_name, voltage);
  ubidots.meshPublishToUbidots("Ubidots"); // webhook its publishing to on particle consol
}
   d4602:	b008      	add	sp, #32
   d4604:	bd70      	pop	{r4, r5, r6, pc}
   d4606:	bf00      	nop
   d4608:	2003e299 	.word	0x2003e299
   d460c:	2003e22c 	.word	0x2003e22c
   d4610:	2003e205 	.word	0x2003e205
   d4614:	2003ce30 	.word	0x2003ce30
   d4618:	000d44f5 	.word	0x000d44f5
   d461c:	2003e208 	.word	0x2003e208
   d4620:	000db917 	.word	0x000db917
   d4624:	2003e268 	.word	0x2003e268
   d4628:	2003e1e8 	.word	0x2003e1e8
   d462c:	000d4c35 	.word	0x000d4c35
   d4630:	000d4431 	.word	0x000d4431
   d4634:	000db874 	.word	0x000db874
   d4638:	000d40bf 	.word	0x000d40bf
   d463c:	000d40bb 	.word	0x000d40bb
   d4640:	000d4135 	.word	0x000d4135
   d4644:	000d41a1 	.word	0x000d41a1
   d4648:	2003d80c 	.word	0x2003d80c
   d464c:	2003ce34 	.word	0x2003ce34
   d4650:	2003e228 	.word	0x2003e228

000d4654 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d4654:	7501      	strb	r1, [r0, #20]
   d4656:	4770      	bx	lr

000d4658 <_ZN9TCPClientD1Ev>:
   d4658:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d465a:	6984      	ldr	r4, [r0, #24]
   d465c:	4b0a      	ldr	r3, [pc, #40]	; (d4688 <_ZN9TCPClientD1Ev+0x30>)
   d465e:	6003      	str	r3, [r0, #0]
   d4660:	4605      	mov	r5, r0
   d4662:	b17c      	cbz	r4, d4684 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4664:	6863      	ldr	r3, [r4, #4]
   d4666:	3b01      	subs	r3, #1
   d4668:	6063      	str	r3, [r4, #4]
   d466a:	b95b      	cbnz	r3, d4684 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d466c:	6823      	ldr	r3, [r4, #0]
   d466e:	4620      	mov	r0, r4
   d4670:	689b      	ldr	r3, [r3, #8]
   d4672:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4674:	68a3      	ldr	r3, [r4, #8]
   d4676:	3b01      	subs	r3, #1
   d4678:	60a3      	str	r3, [r4, #8]
   d467a:	b91b      	cbnz	r3, d4684 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d467c:	6823      	ldr	r3, [r4, #0]
   d467e:	4620      	mov	r0, r4
   d4680:	68db      	ldr	r3, [r3, #12]
   d4682:	4798      	blx	r3
   d4684:	4628      	mov	r0, r5
   d4686:	bd38      	pop	{r3, r4, r5, pc}
   d4688:	000dc520 	.word	0x000dc520

000d468c <_ZN9TCPClientD0Ev>:
   d468c:	b510      	push	{r4, lr}
   d468e:	4604      	mov	r4, r0
   d4690:	f7ff ffe2 	bl	d4658 <_ZN9TCPClientD1Ev>
   d4694:	4620      	mov	r0, r4
   d4696:	211c      	movs	r1, #28
   d4698:	f004 fb8c 	bl	d8db4 <_ZdlPvj>
   d469c:	4620      	mov	r0, r4
   d469e:	bd10      	pop	{r4, pc}

000d46a0 <_ZN6UbiTCPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
   d46a0:	b530      	push	{r4, r5, lr}
               const char* token) {
   d46a2:	4d06      	ldr	r5, [pc, #24]	; (d46bc <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d46a4:	6005      	str	r5, [r0, #0]
   d46a6:	2500      	movs	r5, #0
   d46a8:	7505      	strb	r5, [r0, #20]
  _host = host;
  _user_agent = user_agent;
   d46aa:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
   d46ac:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d46b0:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
   d46b2:	6185      	str	r5, [r0, #24]
  _host = host;
   d46b4:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d46b6:	60c3      	str	r3, [r0, #12]
  _port = port;
   d46b8:	6102      	str	r2, [r0, #16]
}
   d46ba:	bd30      	pop	{r4, r5, pc}
   d46bc:	000dba38 	.word	0x000dba38

000d46c0 <_ZN6UbiTCP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiTCP::reconnect(const char* host, const int port) {
   d46c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46c4:	460d      	mov	r5, r1
   d46c6:	4690      	mov	r8, r2
   d46c8:	4607      	mov	r7, r0
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
   d46ca:	f003 fa95 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d46ce:	491b      	ldr	r1, [pc, #108]	; (d473c <_ZN6UbiTCP9reconnectEPKci+0x7c>)
   d46d0:	f002 fd61 	bl	d7196 <_ZN5Print7printlnEPKc>
   d46d4:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d46d6:	481a      	ldr	r0, [pc, #104]	; (d4740 <_ZN6UbiTCP9reconnectEPKci+0x80>)
   d46d8:	b2e6      	uxtb	r6, r4
   d46da:	f004 f971 	bl	d89c0 <_ZN9TCPClient6statusEv>
   d46de:	bb50      	cbnz	r0, d4736 <_ZN6UbiTCP9reconnectEPKci+0x76>
   d46e0:	2c05      	cmp	r4, #5
   d46e2:	d101      	bne.n	d46e8 <_ZN6UbiTCP9reconnectEPKci+0x28>
   d46e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (_debug) {
   d46e8:	7d3b      	ldrb	r3, [r7, #20]
   d46ea:	b1a3      	cbz	r3, d4716 <_ZN6UbiTCP9reconnectEPKci+0x56>
      Serial.print("Trying to connect to ");
   d46ec:	f003 fa84 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d46f0:	4914      	ldr	r1, [pc, #80]	; (d4744 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d46f2:	f002 fd3d 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(host);
   d46f6:	f003 fa7f 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d46fa:	4629      	mov	r1, r5
   d46fc:	f002 fd38 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d4700:	f003 fa7a 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4704:	4910      	ldr	r1, [pc, #64]	; (d4748 <_ZN6UbiTCP9reconnectEPKci+0x88>)
   d4706:	f002 fd33 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d470a:	f003 fa75 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d470e:	220a      	movs	r2, #10
   d4710:	4631      	mov	r1, r6
   d4712:	f002 fd79 	bl	d7208 <_ZN5Print7printlnEhi>
    }
    _client_tcp_ubi.stop();
   d4716:	480a      	ldr	r0, [pc, #40]	; (d4740 <_ZN6UbiTCP9reconnectEPKci+0x80>)
   d4718:	f004 f8de 	bl	d88d8 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d471c:	2300      	movs	r3, #0
   d471e:	fa1f f288 	uxth.w	r2, r8
   d4722:	4629      	mov	r1, r5
   d4724:	4806      	ldr	r0, [pc, #24]	; (d4740 <_ZN6UbiTCP9reconnectEPKci+0x80>)
   d4726:	f003 ffdb 	bl	d86e0 <_ZN9TCPClient7connectEPKctm>
    attempts += 1;
    delay(1000);
   d472a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d472e:	f002 fde9 	bl	d7304 <delay>
   d4732:	3401      	adds	r4, #1
 */

void UbiTCP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d4734:	e7cf      	b.n	d46d6 <_ZN6UbiTCP9reconnectEPKci+0x16>
   d4736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d473a:	bf00      	nop
   d473c:	000db92a 	.word	0x000db92a
   d4740:	2003e29c 	.word	0x2003e29c
   d4744:	000db942 	.word	0x000db942
   d4748:	000db958 	.word	0x000db958

000d474c <_ZN6UbiTCP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiTCP::waitServerAnswer() {
   d474c:	b570      	push	{r4, r5, r6, lr}
   d474e:	4605      	mov	r5, r0
  int timeout = 0;
   d4750:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d4752:	480d      	ldr	r0, [pc, #52]	; (d4788 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
   d4754:	f004 f8d8 	bl	d8908 <_ZN9TCPClient9availableEv>
   d4758:	4606      	mov	r6, r0
   d475a:	b910      	cbnz	r0, d4762 <_ZN6UbiTCP16waitServerAnswerEv+0x16>
   d475c:	69ab      	ldr	r3, [r5, #24]
   d475e:	429c      	cmp	r4, r3
   d4760:	db01      	blt.n	d4766 <_ZN6UbiTCP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
   d4762:	2001      	movs	r0, #1
   d4764:	bd70      	pop	{r4, r5, r6, pc}

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
   d4766:	2001      	movs	r0, #1
   d4768:	f002 fdcc 	bl	d7304 <delay>
    if (timeout > _timeout - 1) {
   d476c:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
   d476e:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
   d4770:	429c      	cmp	r4, r3
   d4772:	dbee      	blt.n	d4752 <_ZN6UbiTCP16waitServerAnswerEv+0x6>
      if (_debug) {
   d4774:	7d28      	ldrb	r0, [r5, #20]
   d4776:	b130      	cbz	r0, d4786 <_ZN6UbiTCP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
   d4778:	f003 fa3e 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d477c:	4903      	ldr	r1, [pc, #12]	; (d478c <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d477e:	f002 fd0a 	bl	d7196 <_ZN5Print7printlnEPKc>
   d4782:	4630      	mov	r0, r6
   d4784:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
   d4786:	bd70      	pop	{r4, r5, r6, pc}
   d4788:	2003e29c 	.word	0x2003e29c
   d478c:	000db96c 	.word	0x000db96c

000d4790 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d4790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int j = 0;

  if (_debug) {
   d4794:	7d03      	ldrb	r3, [r0, #20]
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d4796:	4606      	mov	r6, r0
   d4798:	4688      	mov	r8, r1
   d479a:	4615      	mov	r5, r2
  int j = 0;

  if (_debug) {
   d479c:	b14b      	cbz	r3, d47b2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d479e:	f003 fa2b 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d47a2:	4926      	ldr	r1, [pc, #152]	; (d483c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
   d47a4:	f002 fcf7 	bl	d7196 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d47a8:	f003 fa26 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d47ac:	4924      	ldr	r1, [pc, #144]	; (d4840 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d47ae:	f002 fcf2 	bl	d7196 <_ZN5Print7printlnEPKc>
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d47b2:	2400      	movs	r4, #0
    if (_debug) {
      Serial.write(c);
    }
    response[j] = c;
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
   d47b4:	f240 29bb 	movw	r9, #699	; 0x2bb
  if (_debug) {
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
   d47b8:	4822      	ldr	r0, [pc, #136]	; (d4844 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d47ba:	f004 f8a5 	bl	d8908 <_ZN9TCPClient9availableEv>
   d47be:	b178      	cbz	r0, d47e0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x50>
    char c = _client_tcp_ubi.read();
   d47c0:	4820      	ldr	r0, [pc, #128]	; (d4844 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d47c2:	f003 ff4a 	bl	d865a <_ZN9TCPClient4readEv>
    if (_debug) {
   d47c6:	7d33      	ldrb	r3, [r6, #20]
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
    char c = _client_tcp_ubi.read();
   d47c8:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d47ca:	b12b      	cbz	r3, d47d8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x48>
      Serial.write(c);
   d47cc:	f003 fa14 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d47d0:	6803      	ldr	r3, [r0, #0]
   d47d2:	4639      	mov	r1, r7
   d47d4:	689b      	ldr	r3, [r3, #8]
   d47d6:	4798      	blx	r3
    }
    response[j] = c;
   d47d8:	552f      	strb	r7, [r5, r4]
    j++;
   d47da:	3401      	adds	r4, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d47dc:	454c      	cmp	r4, r9
   d47de:	d1eb      	bne.n	d47b8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x28>
      break;
    }
  }

  if (_debug) {
   d47e0:	7d33      	ldrb	r3, [r6, #20]
   d47e2:	b123      	cbz	r3, d47ee <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x5e>
    Serial.println("\n----------");
   d47e4:	f003 fa08 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d47e8:	4917      	ldr	r1, [pc, #92]	; (d4848 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d47ea:	f002 fcd4 	bl	d7196 <_ZN5Print7printlnEPKc>
  }

  response[j] = '\0';
   d47ee:	2300      	movs	r3, #0
   d47f0:	552b      	strb	r3, [r5, r4]
  float result = ERROR_VALUE;

  // POST
  if (request_type == "POST") {
   d47f2:	4b16      	ldr	r3, [pc, #88]	; (d484c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d47f4:	4598      	cmp	r8, r3
   d47f6:	d10d      	bne.n	d4814 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x84>
    char* pch = strstr(response, "OK");
   d47f8:	4915      	ldr	r1, [pc, #84]	; (d4850 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d47fa:	4628      	mov	r0, r5
   d47fc:	f005 facf 	bl	d9d9e <strstr>
    if (pch != NULL) {
      result = 1;
   d4800:	eddf 7a14 	vldr	s15, [pc, #80]	; d4854 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d4804:	2800      	cmp	r0, #0
   d4806:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d480a:	bf08      	it	eq
   d480c:	eeb0 0a67 	vmoveq.f32	s0, s15
   d4810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    return result;
  }

  // LV
  char* pch = strchr(response, '|');
   d4814:	217c      	movs	r1, #124	; 0x7c
   d4816:	4628      	mov	r0, r5
   d4818:	f005 fa4a 	bl	d9cb0 <strchr>
  if (pch != NULL) {
   d481c:	b150      	cbz	r0, d4834 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa4>
    result = atof(pch + 1);
   d481e:	3001      	adds	r0, #1
   d4820:	f005 f9ca 	bl	d9bb8 <atof>
   d4824:	ec51 0b10 	vmov	r0, r1, d0
   d4828:	f005 f976 	bl	d9b18 <__aeabi_d2f>
   d482c:	ee00 0a10 	vmov	s0, r0
   d4830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (_debug) {
    Serial.println("\n----------");
  }

  response[j] = '\0';
  float result = ERROR_VALUE;
   d4834:	ed9f 0a07 	vldr	s0, [pc, #28]	; d4854 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
  if (pch != NULL) {
    result = atof(pch + 1);
  }

  return result;
}
   d4838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d483c:	000db9b3 	.word	0x000db9b3
   d4840:	000db99f 	.word	0x000db99f
   d4844:	2003e29c 	.word	0x2003e29c
   d4848:	000db9b2 	.word	0x000db9b2
   d484c:	000db9be 	.word	0x000db9be
   d4850:	000db9c3 	.word	0x000db9c3
   d4854:	cda2425f 	.word	0xcda2425f

000d4858 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
   d4858:	b570      	push	{r4, r5, r6, lr}
   d485a:	ed2d 8b02 	vpush	{d8}
   d485e:	4604      	mov	r4, r0
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4860:	6841      	ldr	r1, [r0, #4]
   d4862:	4822      	ldr	r0, [pc, #136]	; (d48ec <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4864:	f242 3234 	movw	r2, #9012	; 0x2334
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
   d4868:	461d      	mov	r5, r3
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d486a:	2300      	movs	r3, #0
   d486c:	f003 ff38 	bl	d86e0 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d4870:	4620      	mov	r0, r4
   d4872:	f242 3234 	movw	r2, #9012	; 0x2334
   d4876:	6861      	ldr	r1, [r4, #4]
   d4878:	f7ff ff22 	bl	d46c0 <_ZN6UbiTCP9reconnectEPKci>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
   d487c:	481b      	ldr	r0, [pc, #108]	; (d48ec <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d487e:	f003 fe58 	bl	d8532 <_ZN9TCPClient9connectedEv>
   d4882:	b330      	cbz	r0, d48d2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x7a>
    _client_tcp_ubi.print(payload);
   d4884:	4629      	mov	r1, r5
   d4886:	4819      	ldr	r0, [pc, #100]	; (d48ec <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4888:	f002 fc72 	bl	d7170 <_ZN5Print5printEPKc>
    _client_tcp_ubi.stop();
    return false;
  }

  /* Waits for the host's answer */
  if (!waitServerAnswer()) {
   d488c:	4620      	mov	r0, r4
   d488e:	f7ff ff5d 	bl	d474c <_ZN6UbiTCP16waitServerAnswerEv>
   d4892:	4605      	mov	r5, r0
   d4894:	b920      	cbnz	r0, d48a0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x48>
    _client_tcp_ubi.stop();
   d4896:	4815      	ldr	r0, [pc, #84]	; (d48ec <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4898:	f004 f81e 	bl	d88d8 <_ZN9TCPClient4stopEv>
    return false;
   d489c:	2500      	movs	r5, #0
   d489e:	e021      	b.n	d48e4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
   d48a0:	2064      	movs	r0, #100	; 0x64
   d48a2:	f001 fc9d 	bl	d61e0 <malloc>

  float value = parseTCPAnswer("POST", response);
   d48a6:	4912      	ldr	r1, [pc, #72]	; (d48f0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d48a8:	4602      	mov	r2, r0
    _client_tcp_ubi.stop();
    return false;
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
   d48aa:	4606      	mov	r6, r0

  float value = parseTCPAnswer("POST", response);
   d48ac:	4620      	mov	r0, r4
   d48ae:	f7ff ff6f 	bl	d4790 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d48b2:	4630      	mov	r0, r6
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);

  float value = parseTCPAnswer("POST", response);
   d48b4:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d48b8:	f001 fc9a 	bl	d61f0 <free>
  if (value != ERROR_VALUE) {
   d48bc:	eddf 7a0d 	vldr	s15, [pc, #52]	; d48f4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d48c0:	eeb4 8a67 	vcmp.f32	s16, s15
   d48c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48c8:	d0e5      	beq.n	d4896 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d48ca:	4808      	ldr	r0, [pc, #32]	; (d48ec <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d48cc:	f004 f804 	bl	d88d8 <_ZN9TCPClient4stopEv>
   d48d0:	e008      	b.n	d48e4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
    _client_tcp_ubi.print(payload);
  } else {
    if (_debug) {
   d48d2:	7d23      	ldrb	r3, [r4, #20]
   d48d4:	2b00      	cmp	r3, #0
   d48d6:	d0de      	beq.n	d4896 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d48d8:	f003 f98e 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d48dc:	4906      	ldr	r1, [pc, #24]	; (d48f8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d48de:	f002 fc5a 	bl	d7196 <_ZN5Print7printlnEPKc>
   d48e2:	e7d8      	b.n	d4896 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    return true;
  }

  _client_tcp_ubi.stop();
  return false;
}
   d48e4:	ecbd 8b02 	vpop	{d8}
   d48e8:	4628      	mov	r0, r5
   d48ea:	bd70      	pop	{r4, r5, r6, pc}
   d48ec:	2003e29c 	.word	0x2003e29c
   d48f0:	000db9be 	.word	0x000db9be
   d48f4:	cda2425f 	.word	0xcda2425f
   d48f8:	000db9c6 	.word	0x000db9c6

000d48fc <_ZN6UbiTCP3getEPKcS1_>:

float UbiTCP::get(const char* device_label, const char* variable_label) {
   d48fc:	b570      	push	{r4, r5, r6, lr}
   d48fe:	ed2d 8b02 	vpush	{d8}
   d4902:	4604      	mov	r4, r0
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4904:	2300      	movs	r3, #0

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
   d4906:	460e      	mov	r6, r1
   d4908:	4615      	mov	r5, r2
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d490a:	6841      	ldr	r1, [r0, #4]
   d490c:	4849      	ldr	r0, [pc, #292]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d490e:	f242 3234 	movw	r2, #9012	; 0x2334
   d4912:	f003 fee5 	bl	d86e0 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d4916:	4620      	mov	r0, r4
   d4918:	f242 3234 	movw	r2, #9012	; 0x2334
   d491c:	6861      	ldr	r1, [r4, #4]
   d491e:	f7ff fecf 	bl	d46c0 <_ZN6UbiTCP9reconnectEPKci>

  if (_client_tcp_ubi.connected()) {
   d4922:	4844      	ldr	r0, [pc, #272]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4924:	f003 fe05 	bl	d8532 <_ZN9TCPClient9connectedEv>
   d4928:	2800      	cmp	r0, #0
   d492a:	d077      	beq.n	d4a1c <_ZN6UbiTCP3getEPKcS1_+0x120>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_tcp_ubi.print(_user_agent);
   d492c:	68a1      	ldr	r1, [r4, #8]
   d492e:	4841      	ldr	r0, [pc, #260]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4930:	f002 fc1e 	bl	d7170 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|LV|");
   d4934:	4940      	ldr	r1, [pc, #256]	; (d4a38 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d4936:	483f      	ldr	r0, [pc, #252]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4938:	f002 fc1a 	bl	d7170 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(_token);
   d493c:	68e1      	ldr	r1, [r4, #12]
   d493e:	483d      	ldr	r0, [pc, #244]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4940:	f002 fc16 	bl	d7170 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|");
   d4944:	493d      	ldr	r1, [pc, #244]	; (d4a3c <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d4946:	483b      	ldr	r0, [pc, #236]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4948:	f002 fc12 	bl	d7170 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(device_label);
   d494c:	4631      	mov	r1, r6
   d494e:	4839      	ldr	r0, [pc, #228]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4950:	f002 fc0e 	bl	d7170 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(":");
   d4954:	493a      	ldr	r1, [pc, #232]	; (d4a40 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d4956:	4837      	ldr	r0, [pc, #220]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4958:	f002 fc0a 	bl	d7170 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(variable_label);
   d495c:	4629      	mov	r1, r5
   d495e:	4835      	ldr	r0, [pc, #212]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4960:	f002 fc06 	bl	d7170 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|end");
   d4964:	4937      	ldr	r1, [pc, #220]	; (d4a44 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d4966:	4833      	ldr	r0, [pc, #204]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d4968:	f002 fc02 	bl	d7170 <_ZN5Print5printEPKc>

    if (_debug) {
   d496c:	7d23      	ldrb	r3, [r4, #20]
   d496e:	b3b3      	cbz	r3, d49de <_ZN6UbiTCP3getEPKcS1_+0xe2>
      Serial.println("----");
   d4970:	f003 f942 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4974:	4934      	ldr	r1, [pc, #208]	; (d4a48 <_ZN6UbiTCP3getEPKcS1_+0x14c>)
   d4976:	f002 fc0e 	bl	d7196 <_ZN5Print7printlnEPKc>
      Serial.println("Payload for request:");
   d497a:	f003 f93d 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d497e:	4933      	ldr	r1, [pc, #204]	; (d4a4c <_ZN6UbiTCP3getEPKcS1_+0x150>)
   d4980:	f002 fc09 	bl	d7196 <_ZN5Print7printlnEPKc>
      Serial.print(_user_agent);
   d4984:	f003 f938 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4988:	68a1      	ldr	r1, [r4, #8]
   d498a:	f002 fbf1 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("|LV|");
   d498e:	f003 f933 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4992:	4929      	ldr	r1, [pc, #164]	; (d4a38 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d4994:	f002 fbec 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d4998:	f003 f92e 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d499c:	68e1      	ldr	r1, [r4, #12]
   d499e:	f002 fbe7 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("|");
   d49a2:	f003 f929 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d49a6:	4925      	ldr	r1, [pc, #148]	; (d4a3c <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d49a8:	f002 fbe2 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d49ac:	f003 f924 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d49b0:	4631      	mov	r1, r6
   d49b2:	f002 fbdd 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(":");
   d49b6:	f003 f91f 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d49ba:	4921      	ldr	r1, [pc, #132]	; (d4a40 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d49bc:	f002 fbd8 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d49c0:	f003 f91a 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d49c4:	4629      	mov	r1, r5
   d49c6:	f002 fbd3 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("|end");
   d49ca:	f003 f915 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d49ce:	491d      	ldr	r1, [pc, #116]	; (d4a44 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d49d0:	f002 fbce 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.println("\n----");
   d49d4:	f003 f910 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d49d8:	491d      	ldr	r1, [pc, #116]	; (d4a50 <_ZN6UbiTCP3getEPKcS1_+0x154>)
   d49da:	f002 fbdc 	bl	d7196 <_ZN5Print7printlnEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
   d49de:	4620      	mov	r0, r4
   d49e0:	f7ff feb4 	bl	d474c <_ZN6UbiTCP16waitServerAnswerEv>
   d49e4:	b928      	cbnz	r0, d49f2 <_ZN6UbiTCP3getEPKcS1_+0xf6>
      _client_tcp_ubi.stop();
   d49e6:	4813      	ldr	r0, [pc, #76]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d49e8:	f003 ff76 	bl	d88d8 <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
   d49ec:	ed9f 0a19 	vldr	s0, [pc, #100]	; d4a54 <_ZN6UbiTCP3getEPKcS1_+0x158>
   d49f0:	e01d      	b.n	d4a2e <_ZN6UbiTCP3getEPKcS1_+0x132>
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d49f2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d49f6:	f001 fbf3 	bl	d61e0 <malloc>
    float value = parseTCPAnswer("LV", response);
   d49fa:	4917      	ldr	r1, [pc, #92]	; (d4a58 <_ZN6UbiTCP3getEPKcS1_+0x15c>)
   d49fc:	4602      	mov	r2, r0
      _client_tcp_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d49fe:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fec5 	bl	d4790 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d4a06:	480b      	ldr	r0, [pc, #44]	; (d4a34 <_ZN6UbiTCP3getEPKcS1_+0x138>)
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
    float value = parseTCPAnswer("LV", response);
   d4a08:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d4a0c:	f003 ff64 	bl	d88d8 <_ZN9TCPClient4stopEv>
    free(response);
   d4a10:	4628      	mov	r0, r5
   d4a12:	f001 fbed 	bl	d61f0 <free>
    return value;
   d4a16:	eeb0 0a48 	vmov.f32	s0, s16
   d4a1a:	e008      	b.n	d4a2e <_ZN6UbiTCP3getEPKcS1_+0x132>
  }

  if (_debug) {
   d4a1c:	7d23      	ldrb	r3, [r4, #20]
   d4a1e:	2b00      	cmp	r3, #0
   d4a20:	d0e1      	beq.n	d49e6 <_ZN6UbiTCP3getEPKcS1_+0xea>
    Serial.println("ERROR could not connect to the server");
   d4a22:	f003 f8e9 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4a26:	490d      	ldr	r1, [pc, #52]	; (d4a5c <_ZN6UbiTCP3getEPKcS1_+0x160>)
   d4a28:	f002 fbb5 	bl	d7196 <_ZN5Print7printlnEPKc>
   d4a2c:	e7db      	b.n	d49e6 <_ZN6UbiTCP3getEPKcS1_+0xea>
  }

  _client_tcp_ubi.stop();
  return ERROR_VALUE;
}
   d4a2e:	ecbd 8b02 	vpop	{d8}
   d4a32:	bd70      	pop	{r4, r5, r6, pc}
   d4a34:	2003e29c 	.word	0x2003e29c
   d4a38:	000db9e4 	.word	0x000db9e4
   d4a3c:	000db9e7 	.word	0x000db9e7
   d4a40:	000dbb24 	.word	0x000dbb24
   d4a44:	000dbb62 	.word	0x000dbb62
   d4a48:	000db9ff 	.word	0x000db9ff
   d4a4c:	000db9e9 	.word	0x000db9e9
   d4a50:	000db9fe 	.word	0x000db9fe
   d4a54:	cda2425f 	.word	0xcda2425f
   d4a58:	000dba04 	.word	0x000dba04
   d4a5c:	000dba07 	.word	0x000dba07

000d4a60 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d4a60:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d4a62:	4c06      	ldr	r4, [pc, #24]	; (d4a7c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d4a64:	f001 f882 	bl	d5b6c <HAL_Pin_Map>
   d4a68:	4620      	mov	r0, r4
   d4a6a:	f003 ffed 	bl	d8a48 <_ZN9TCPClientC1Ev>
   d4a6e:	4620      	mov	r0, r4
   d4a70:	4a03      	ldr	r2, [pc, #12]	; (d4a80 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d4a72:	4904      	ldr	r1, [pc, #16]	; (d4a84 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
   d4a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4a78:	f004 b98e 	b.w	d8d98 <__aeabi_atexit>
   d4a7c:	2003e29c 	.word	0x2003e29c
   d4a80:	2003ce30 	.word	0x2003ce30
   d4a84:	000d4659 	.word	0x000d4659

000d4a88 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d4a88:	b538      	push	{r3, r4, r5, lr}
   d4a8a:	4604      	mov	r4, r0
  _dirty = true;
   d4a8c:	2001      	movs	r0, #1
   d4a8e:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d4a90:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a94:	68e5      	ldr	r5, [r4, #12]
   d4a96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4a9a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d4a9e:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d4aa2:	68e0      	ldr	r0, [r4, #12]
   d4aa4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d4aa8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d4aac:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d4ab0:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d4ab4:	68e0      	ldr	r0, [r4, #12]
   d4ab6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d4aba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d4abe:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d4ac0:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d4ac4:	68e1      	ldr	r1, [r4, #12]
   d4ac6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d4aca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d4ace:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d4ad0:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d4ad4:	68e2      	ldr	r2, [r4, #12]
   d4ad6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4ada:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4ade:	9a04      	ldr	r2, [sp, #16]
   d4ae0:	611a      	str	r2, [r3, #16]
  _current_value++;
   d4ae2:	7c23      	ldrb	r3, [r4, #16]
   d4ae4:	3301      	adds	r3, #1
   d4ae6:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d4ae8:	2b0a      	cmp	r3, #10
  (_dots + _current_value)->variable_label = variable_label;
  (_dots + _current_value)->dot_value = value;
  (_dots + _current_value)->dot_context = context;
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
  _current_value++;
   d4aea:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d4aec:	dd08      	ble.n	d4b00 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d4aee:	7ca3      	ldrb	r3, [r4, #18]
   d4af0:	b123      	cbz	r3, d4afc <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(
   d4af2:	f003 f881 	bl	d7bf8 <_Z16_fetch_usbserialv>
          F("You are sending more than the maximum of consecutive variables"));
   d4af6:	4903      	ldr	r1, [pc, #12]	; (d4b04 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d4af8:	f002 fb4d 	bl	d7196 <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d4afc:	230a      	movs	r3, #10
   d4afe:	7423      	strb	r3, [r4, #16]
   d4b00:	bd38      	pop	{r3, r4, r5, pc}
   d4b02:	bf00      	nop
   d4b04:	000dba44 	.word	0x000dba44

000d4b08 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4b08:	b570      	push	{r4, r5, r6, lr}
   d4b0a:	4606      	mov	r6, r0
   d4b0c:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d4b0e:	b184      	cbz	r4, d4b32 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
   d4b10:	68e1      	ldr	r1, [r4, #12]
   d4b12:	4630      	mov	r0, r6
   d4b14:	f7ff fff8 	bl	d4b08 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4b18:	69e3      	ldr	r3, [r4, #28]
   d4b1a:	68a5      	ldr	r5, [r4, #8]
   d4b1c:	b123      	cbz	r3, d4b28 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b1e:	f104 0114 	add.w	r1, r4, #20
   d4b22:	2203      	movs	r2, #3
   d4b24:	4608      	mov	r0, r1
   d4b26:	4798      	blx	r3
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4b28:	4620      	mov	r0, r4
   d4b2a:	f7ff faba 	bl	d40a2 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d4b2e:	462c      	mov	r4, r5
   d4b30:	e7ed      	b.n	d4b0e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
   d4b32:	bd70      	pop	{r4, r5, r6, pc}

000d4b34 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
                                       IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
   d4b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b36:	b08d      	sub	sp, #52	; 0x34
   d4b38:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4b3a:	a801      	add	r0, sp, #4
   d4b3c:	460d      	mov	r5, r1
   d4b3e:	4617      	mov	r7, r2
   d4b40:	461e      	mov	r6, r3
   d4b42:	f001 fb25 	bl	d6190 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d4b46:	9803      	ldr	r0, [sp, #12]
   d4b48:	3001      	adds	r0, #1
   d4b4a:	f7ff faa8 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d4b4e:	9901      	ldr	r1, [sp, #4]
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d4b50:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d4b52:	f005 f8c5 	bl	d9ce0 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
   d4b56:	462a      	mov	r2, r5
   d4b58:	4633      	mov	r3, r6
   d4b5a:	4639      	mov	r1, r7
void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
   d4b5c:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d4b5e:	a805      	add	r0, sp, #20
   d4b60:	f000 fd70 	bl	d5644 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d4b64:	20c8      	movs	r0, #200	; 0xc8
   d4b66:	f001 fb3b 	bl	d61e0 <malloc>
   d4b6a:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d4b6c:	a805      	add	r0, sp, #20
   d4b6e:	f000 fc77 	bl	d5460 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
   d4b72:	2300      	movs	r3, #0
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
   d4b74:	6060      	str	r0, [r4, #4]
  _token = token;
  _current_value = 0;
   d4b76:	7423      	strb	r3, [r4, #16]

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d4b78:	9908      	ldr	r1, [sp, #32]
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
   d4b7a:	60a5      	str	r5, [r4, #8]
   d4b7c:	a806      	add	r0, sp, #24
   d4b7e:	f7ff ffc3 	bl	d4b08 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
   d4b82:	a801      	add	r0, sp, #4
   d4b84:	f001 ff0b 	bl	d699e <_ZN6StringD1Ev>
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
  _current_value = 0;
}
   d4b88:	b00d      	add	sp, #52	; 0x34
   d4b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b8c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
   d4b8c:	b538      	push	{r3, r4, r5, lr}
                                       IotProtocol iot_protocol) {
   d4b8e:	2500      	movs	r5, #0

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
   d4b90:	4604      	mov	r4, r0
                                       IotProtocol iot_protocol) {
   d4b92:	7405      	strb	r5, [r0, #16]
   d4b94:	7445      	strb	r5, [r0, #17]
  builder(token, server, iot_protocol);
   d4b96:	f7ff ffcd 	bl	d4b34 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d4b9a:	4620      	mov	r0, r4
   d4b9c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4ba0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
   d4ba0:	4b02      	ldr	r3, [pc, #8]	; (d4bac <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
   d4ba2:	2200      	movs	r2, #0
   d4ba4:	701a      	strb	r2, [r3, #0]
   d4ba6:	f000 bfe1 	b.w	d5b6c <HAL_Pin_Map>
   d4baa:	bf00      	nop
   d4bac:	2003e2b8 	.word	0x2003e2b8

000d4bb0 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d4bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4bb4:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d4bb6:	2050      	movs	r0, #80	; 0x50
Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
   d4bb8:	7323      	strb	r3, [r4, #12]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d4bba:	460d      	mov	r5, r1
   d4bbc:	4616      	mov	r6, r2
   d4bbe:	461f      	mov	r7, r3
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d4bc0:	f001 fb0e 	bl	d61e0 <malloc>
   d4bc4:	60a0      	str	r0, [r4, #8]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d4bc6:	f44f 7082 	mov.w	r0, #260	; 0x104
   d4bca:	f7ff fa66 	bl	d409a <_Znwj>
   d4bce:	4680      	mov	r8, r0
   d4bd0:	b110      	cbz	r0, d4bd8 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d4bd2:	4629      	mov	r1, r5
   d4bd4:	f000 fdbc 	bl	d5750 <_ZN7UbiMeshC1EPc>
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d4bd8:	7b23      	ldrb	r3, [r4, #12]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d4bda:	f8c4 8000 	str.w	r8, [r4]
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d4bde:	2b04      	cmp	r3, #4
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d4be0:	f04f 0014 	mov.w	r0, #20
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d4be4:	d00c      	beq.n	d4c00 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x50>
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d4be6:	f7ff fa58 	bl	d409a <_Znwj>
   d4bea:	4680      	mov	r8, r0
   d4bec:	b120      	cbz	r0, d4bf8 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x48>
   d4bee:	463b      	mov	r3, r7
   d4bf0:	4632      	mov	r2, r6
   d4bf2:	4629      	mov	r1, r5
   d4bf4:	f7ff ffca 	bl	d4b8c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d4bf8:	f8c4 8004 	str.w	r8, [r4, #4]
   d4bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
    // Default is TCP
    _cloudProtocol = new UbiProtocolHandler(token, server, UBI_TCP);
   d4c00:	f7ff fa4b 	bl	d409a <_Znwj>
   d4c04:	4607      	mov	r7, r0
   d4c06:	b120      	cbz	r0, d4c12 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x62>
   d4c08:	2301      	movs	r3, #1
   d4c0a:	4632      	mov	r2, r6
   d4c0c:	4629      	mov	r1, r5
   d4c0e:	f7ff ffbd 	bl	d4b8c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d4c12:	6067      	str	r7, [r4, #4]
   d4c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4c18 <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
   d4c18:	b510      	push	{r4, lr}
   d4c1a:	2300      	movs	r3, #0
   d4c1c:	4604      	mov	r4, r0
   d4c1e:	7343      	strb	r3, [r0, #13]
   d4c20:	7383      	strb	r3, [r0, #14]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
   d4c22:	4613      	mov	r3, r2
   d4c24:	4a02      	ldr	r2, [pc, #8]	; (d4c30 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d4c26:	f7ff ffc3 	bl	d4bb0 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	bd10      	pop	{r4, pc}
   d4c2e:	bf00      	nop
   d4c30:	000dbb77 	.word	0x000dbb77

000d4c34 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d4c34:	b538      	push	{r3, r4, r5, lr}
   d4c36:	4604      	mov	r4, r0
  free(_context);
   d4c38:	6880      	ldr	r0, [r0, #8]
   d4c3a:	f001 fad9 	bl	d61f0 <free>
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  delete _protocolMesh;
   d4c3e:	6825      	ldr	r5, [r4, #0]
   d4c40:	b13d      	cbz	r5, d4c52 <_ZN7UbidotsD1Ev+0x1e>
   d4c42:	4628      	mov	r0, r5
   d4c44:	f000 fd9c 	bl	d5780 <_ZN7UbiMeshD1Ev>
   d4c48:	f44f 7182 	mov.w	r1, #260	; 0x104
   d4c4c:	4628      	mov	r0, r5
   d4c4e:	f004 f8b1 	bl	d8db4 <_ZdlPvj>
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
#endif
}
   d4c52:	4620      	mov	r0, r4
   d4c54:	bd38      	pop	{r3, r4, r5, pc}

000d4c56 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d4c56:	b430      	push	{r4, r5}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
   d4c58:	7b05      	ldrb	r5, [r0, #12]
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d4c5a:	9c02      	ldr	r4, [sp, #8]
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
   d4c5c:	2d04      	cmp	r5, #4
   d4c5e:	d103      	bne.n	d4c68 <_ZN7Ubidots3addEPcfS0_mj+0x12>
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
   d4c60:	6800      	ldr	r0, [r0, #0]
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
   d4c62:	bc30      	pop	{r4, r5}
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
   d4c64:	f000 bd94 	b.w	d5790 <_ZN7UbiMesh3addEPKcfS1_mj>
  } else {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
   d4c68:	9402      	str	r4, [sp, #8]
   d4c6a:	6840      	ldr	r0, [r0, #4]
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
   d4c6c:	bc30      	pop	{r4, r5}
  if (_iotProtocol == UBI_MESH) {
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
  } else {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
   d4c6e:	f7ff bf0b 	b.w	d4a88 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d4c72 <_ZN7Ubidots3addEPcf>:
 * datalogger. Default NULL
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void Ubidots::add(char* variable_label, float value) {
   d4c72:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
   d4c74:	2300      	movs	r3, #0
   d4c76:	9300      	str	r3, [sp, #0]
   d4c78:	461a      	mov	r2, r3
   d4c7a:	f7ff ffec 	bl	d4c56 <_ZN7Ubidots3addEPcfS0_mj>
}
   d4c7e:	b003      	add	sp, #12
   d4c80:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c84 <_ZN7Ubidots20meshPublishToUbidotsEPKc>:
}

bool Ubidots::meshPublishToUbidots(const char* device_label) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  return _protocolMesh->meshPublishToUbidots(device_label);
   d4c84:	6800      	ldr	r0, [r0, #0]
   d4c86:	f000 be49 	b.w	d591c <_ZN7UbiMesh20meshPublishToUbidotsEPKc>

000d4c8a <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
      }
    }
  }
   d4c8a:	b508      	push	{r3, lr}
   d4c8c:	f000 ff6e 	bl	d5b6c <HAL_Pin_Map>
   d4c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4c94:	f000 bfea 	b.w	d5c6c <HAL_Timer_Get_Milli_Seconds>

000d4c98 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

   d4c98:	7501      	strb	r1, [r0, #20]
   d4c9a:	4770      	bx	lr

000d4c9c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>:
    attempts += 1;
    delay(1000);
  }
}

float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d4c9c:	b570      	push	{r4, r5, r6, lr}
   d4c9e:	4604      	mov	r4, r0
  float result = ERROR_VALUE;

  // LV
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d4ca0:	2014      	movs	r0, #20
   d4ca2:	f001 fa9d 	bl	d61e0 <malloc>
   d4ca6:	4606      	mov	r6, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d4ca8:	2014      	movs	r0, #20
   d4caa:	f001 fa99 	bl	d61e0 <malloc>
   d4cae:	4605      	mov	r5, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d4cb0:	4620      	mov	r0, r4
   d4cb2:	f005 f838 	bl	d9d26 <strlen>
   d4cb6:	4622      	mov	r2, r4

    for (int i = 0; i < len - 2; i++) {
   d4cb8:	2300      	movs	r3, #0
   d4cba:	3802      	subs	r0, #2
   d4cbc:	4298      	cmp	r0, r3
   d4cbe:	dd17      	ble.n	d4cf0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') &&
   d4cc0:	f812 1b01 	ldrb.w	r1, [r2], #1
   d4cc4:	290d      	cmp	r1, #13
   d4cc6:	d111      	bne.n	d4cec <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d4cc8:	7811      	ldrb	r1, [r2, #0]
   d4cca:	290a      	cmp	r1, #10
   d4ccc:	d10e      	bne.n	d4cec <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d4cce:	7851      	ldrb	r1, [r2, #1]
   d4cd0:	290d      	cmp	r1, #13
   d4cd2:	d10b      	bne.n	d4cec <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d4cd4:	7891      	ldrb	r1, [r2, #2]
   d4cd6:	290a      	cmp	r1, #10
   d4cd8:	d108      	bne.n	d4cec <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
          (data[i + 3] == '\n')) {
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d4cda:	1d19      	adds	r1, r3, #4
   d4cdc:	2214      	movs	r2, #20
   d4cde:	4421      	add	r1, r4
   d4ce0:	4630      	mov	r0, r6
   d4ce2:	f005 f83d 	bl	d9d60 <strncpy>
        parsed[20] = '\0';
   d4ce6:	2300      	movs	r3, #0
   d4ce8:	7533      	strb	r3, [r6, #20]
   d4cea:	e001      	b.n	d4cf0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
    char* dst = (char*)malloc(sizeof(char) * 20);
    int len = strlen(data);  // Length of the answer char array from the server

    for (int i = 0; i < len - 2; i++) {
   d4cec:	3301      	adds	r3, #1
   d4cee:	e7e5      	b.n	d4cbc <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x20>
    /* Extracts the the value */

    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
   d4cf0:	210a      	movs	r1, #10
   d4cf2:	4630      	mov	r0, r6
   d4cf4:	f004 ffdc 	bl	d9cb0 <strchr>
    if (pch == NULL) {
   d4cf8:	4604      	mov	r4, r0
   d4cfa:	b300      	cbz	r0, d4d3e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa2>
      return result;
    }

    char* pch2 = strchr(pch + 1, '\n');
   d4cfc:	210a      	movs	r1, #10
   d4cfe:	3001      	adds	r0, #1
   d4d00:	f004 ffd6 	bl	d9cb0 <strchr>

    if (pch2 == NULL) {
   d4d04:	b1d8      	cbz	r0, d4d3e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa2>
      return result;
    }

    index = (int)(pch2 - pch - 1);

    sprintf(dst, "%s", pch);
   d4d06:	4621      	mov	r1, r4
   d4d08:	4628      	mov	r0, r5
   d4d0a:	f004 ffe9 	bl	d9ce0 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d4d0e:	4628      	mov	r0, r5
   d4d10:	f005 f809 	bl	d9d26 <strlen>
   d4d14:	4428      	add	r0, r5
   d4d16:	2300      	movs	r3, #0
   d4d18:	f800 3c01 	strb.w	r3, [r0, #-1]

    float result = atof(dst);
   d4d1c:	4628      	mov	r0, r5
   d4d1e:	f004 ff4b 	bl	d9bb8 <atof>
   d4d22:	ec51 0b10 	vmov	r0, r1, d0
   d4d26:	f004 fef7 	bl	d9b18 <__aeabi_d2f>
   d4d2a:	4604      	mov	r4, r0

    free(dst);
   d4d2c:	4628      	mov	r0, r5
   d4d2e:	f001 fa5f 	bl	d61f0 <free>
    free(parsed);
   d4d32:	4630      	mov	r0, r6
   d4d34:	f001 fa5c 	bl	d61f0 <free>
    return result;
   d4d38:	ee00 4a10 	vmov	s0, r4
   d4d3c:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
    if (pch == NULL) {
      return result;
   d4d3e:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4d44 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa8>
    free(parsed);
    return result;
  }

  return ERROR_VALUE;
}
   d4d42:	bd70      	pop	{r4, r5, r6, pc}
   d4d44:	cda2425f 	.word	0xcda2425f

000d4d48 <_ZN7UbiHTTPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
   d4d48:	b530      	push	{r4, r5, lr}
                 const char* token) {
   d4d4a:	4d07      	ldr	r5, [pc, #28]	; (d4d68 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d4d4c:	6005      	str	r5, [r0, #0]
   d4d4e:	2500      	movs	r5, #0
   d4d50:	7505      	strb	r5, [r0, #20]
   d4d52:	f241 3588 	movw	r5, #5000	; 0x1388
   d4d56:	6185      	str	r5, [r0, #24]
  _host = host;
  _user_agent = user_agent;
   d4d58:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
   d4d5a:	2505      	movs	r5, #5
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d4d5c:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
   d4d5e:	7705      	strb	r5, [r0, #28]
  _host = host;
   d4d60:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d4d62:	60c3      	str	r3, [r0, #12]
  _port = port;
   d4d64:	6102      	str	r2, [r0, #16]
}
   d4d66:	bd30      	pop	{r4, r5, pc}
   d4d68:	000dbca0 	.word	0x000dbca0

000d4d6c <_ZN7UbiHTTP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
   d4d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d70:	4605      	mov	r5, r0
   d4d72:	460f      	mov	r7, r1
   d4d74:	4690      	mov	r8, r2
   d4d76:	2400      	movs	r4, #0
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d4d78:	481b      	ldr	r0, [pc, #108]	; (d4de8 <_ZN7UbiHTTP9reconnectEPKci+0x7c>)
   d4d7a:	b2e6      	uxtb	r6, r4
   d4d7c:	f003 fbd9 	bl	d8532 <_ZN9TCPClient9connectedEv>
   d4d80:	bb78      	cbnz	r0, d4de2 <_ZN7UbiHTTP9reconnectEPKci+0x76>
   d4d82:	7f2b      	ldrb	r3, [r5, #28]
   d4d84:	42b3      	cmp	r3, r6
   d4d86:	d801      	bhi.n	d4d8c <_ZN7UbiHTTP9reconnectEPKci+0x20>
   d4d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (_debug) {
   d4d8c:	7d2b      	ldrb	r3, [r5, #20]
   d4d8e:	b1a3      	cbz	r3, d4dba <_ZN7UbiHTTP9reconnectEPKci+0x4e>
      Serial.print("Trying to connect to ");
   d4d90:	f002 ff32 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4d94:	4915      	ldr	r1, [pc, #84]	; (d4dec <_ZN7UbiHTTP9reconnectEPKci+0x80>)
   d4d96:	f002 f9eb 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(host);
   d4d9a:	f002 ff2d 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4d9e:	4639      	mov	r1, r7
   d4da0:	f002 f9e6 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d4da4:	f002 ff28 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4da8:	4911      	ldr	r1, [pc, #68]	; (d4df0 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
   d4daa:	f002 f9e1 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d4dae:	f002 ff23 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4db2:	220a      	movs	r2, #10
   d4db4:	4631      	mov	r1, r6
   d4db6:	f002 fa27 	bl	d7208 <_ZN5Print7printlnEhi>
    }
    _client_http_ubi.connect(host, port);
   d4dba:	2300      	movs	r3, #0
   d4dbc:	fa1f f288 	uxth.w	r2, r8
   d4dc0:	4639      	mov	r1, r7
   d4dc2:	4809      	ldr	r0, [pc, #36]	; (d4de8 <_ZN7UbiHTTP9reconnectEPKci+0x7c>)
   d4dc4:	f003 fc8c 	bl	d86e0 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d4dc8:	7d2b      	ldrb	r3, [r5, #20]
   d4dca:	b123      	cbz	r3, d4dd6 <_ZN7UbiHTTP9reconnectEPKci+0x6a>
      Serial.println("Attempt finished");
   d4dcc:	f002 ff14 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4dd0:	4908      	ldr	r1, [pc, #32]	; (d4df4 <_ZN7UbiHTTP9reconnectEPKci+0x88>)
   d4dd2:	f002 f9e0 	bl	d7196 <_ZN5Print7printlnEPKc>
    }
    attempts += 1;
    delay(1000);
   d4dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4dda:	f002 fa93 	bl	d7304 <delay>
   d4dde:	3401      	adds	r4, #1
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d4de0:	e7ca      	b.n	d4d78 <_ZN7UbiHTTP9reconnectEPKci+0xc>
   d4de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4de6:	bf00      	nop
   d4de8:	2003e2bc 	.word	0x2003e2bc
   d4dec:	000db942 	.word	0x000db942
   d4df0:	000db958 	.word	0x000db958
   d4df4:	000dbcac 	.word	0x000dbcac

000d4df8 <_ZN7UbiHTTP16readServerAnswerEPc>:

/**
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
   d4df8:	b570      	push	{r4, r5, r6, lr}
   d4dfa:	1e4d      	subs	r5, r1, #1
   d4dfc:	460c      	mov	r4, r1
   d4dfe:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d4e02:	4606      	mov	r6, r0
   d4e04:	462b      	mov	r3, r5
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
    response[i] = '\0';
   d4e06:	2100      	movs	r1, #0
   d4e08:	f803 1f01 	strb.w	r1, [r3, #1]!
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d4e0c:	4293      	cmp	r3, r2
   d4e0e:	d1fb      	bne.n	d4e08 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
    response[i] = '\0';
  }

  if (_debug) {
   d4e10:	7d33      	ldrb	r3, [r6, #20]
   d4e12:	b14b      	cbz	r3, d4e28 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d4e14:	f002 fef0 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4e18:	4913      	ldr	r1, [pc, #76]	; (d4e68 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
   d4e1a:	f002 f9bc 	bl	d7196 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d4e1e:	f002 feeb 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4e22:	4912      	ldr	r1, [pc, #72]	; (d4e6c <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d4e24:	f002 f9b7 	bl	d7196 <_ZN5Print7printlnEPKc>
   d4e28:	f204 24ba 	addw	r4, r4, #698	; 0x2ba
  }

  int j = 0;

  while (_client_http_ubi.available()) {
   d4e2c:	4810      	ldr	r0, [pc, #64]	; (d4e70 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d4e2e:	f003 fd6b 	bl	d8908 <_ZN9TCPClient9availableEv>
   d4e32:	b940      	cbnz	r0, d4e46 <_ZN7UbiHTTP16readServerAnswerEPc+0x4e>
    if (j >= MAX_BUFFER_SIZE - 1) {
      break;
    }
  }

  if (_debug) {
   d4e34:	7d33      	ldrb	r3, [r6, #20]
   d4e36:	b1b3      	cbz	r3, d4e66 <_ZN7UbiHTTP16readServerAnswerEPc+0x6e>
    Serial.println("\n----------");
   d4e38:	f002 fede 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4e3c:	490d      	ldr	r1, [pc, #52]	; (d4e74 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
  }
}
   d4e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      break;
    }
  }

  if (_debug) {
    Serial.println("\n----------");
   d4e42:	f002 b9a8 	b.w	d7196 <_ZN5Print7printlnEPKc>
  }

  int j = 0;

  while (_client_http_ubi.available()) {
    response[j] = (char)_client_http_ubi.read();
   d4e46:	480a      	ldr	r0, [pc, #40]	; (d4e70 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d4e48:	f003 fc07 	bl	d865a <_ZN9TCPClient4readEv>
   d4e4c:	f805 0f01 	strb.w	r0, [r5, #1]!
    if (_debug) {
   d4e50:	7d33      	ldrb	r3, [r6, #20]
   d4e52:	b12b      	cbz	r3, d4e60 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
      Serial.write(response[j]);
   d4e54:	f002 fed0 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4e58:	6803      	ldr	r3, [r0, #0]
   d4e5a:	7829      	ldrb	r1, [r5, #0]
   d4e5c:	689b      	ldr	r3, [r3, #8]
   d4e5e:	4798      	blx	r3
    }
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
   d4e60:	42a5      	cmp	r5, r4
   d4e62:	d1e3      	bne.n	d4e2c <_ZN7UbiHTTP16readServerAnswerEPc+0x34>
   d4e64:	e7e6      	b.n	d4e34 <_ZN7UbiHTTP16readServerAnswerEPc+0x3c>
   d4e66:	bd70      	pop	{r4, r5, r6, pc}
   d4e68:	000db9b3 	.word	0x000db9b3
   d4e6c:	000db99f 	.word	0x000db99f
   d4e70:	2003e2bc 	.word	0x2003e2bc
   d4e74:	000db9b2 	.word	0x000db9b2

000d4e78 <_ZN7UbiHTTP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiHTTP::waitServerAnswer() {
   d4e78:	b570      	push	{r4, r5, r6, lr}
   d4e7a:	4605      	mov	r5, r0
  int timeout = 0;
   d4e7c:	2400      	movs	r4, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d4e7e:	480d      	ldr	r0, [pc, #52]	; (d4eb4 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
   d4e80:	f003 fd42 	bl	d8908 <_ZN9TCPClient9availableEv>
   d4e84:	4606      	mov	r6, r0
   d4e86:	b910      	cbnz	r0, d4e8e <_ZN7UbiHTTP16waitServerAnswerEv+0x16>
   d4e88:	69ab      	ldr	r3, [r5, #24]
   d4e8a:	429c      	cmp	r4, r3
   d4e8c:	db01      	blt.n	d4e92 <_ZN7UbiHTTP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
   d4e8e:	2001      	movs	r0, #1
   d4e90:	bd70      	pop	{r4, r5, r6, pc}

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
   d4e92:	2001      	movs	r0, #1
   d4e94:	f002 fa36 	bl	d7304 <delay>
    if (timeout > _timeout - 1) {
   d4e98:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
   d4e9a:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
   d4e9c:	429c      	cmp	r4, r3
   d4e9e:	dbee      	blt.n	d4e7e <_ZN7UbiHTTP16waitServerAnswerEv+0x6>
      if (_debug) {
   d4ea0:	7d28      	ldrb	r0, [r5, #20]
   d4ea2:	b130      	cbz	r0, d4eb2 <_ZN7UbiHTTP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
   d4ea4:	f002 fea8 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4ea8:	4903      	ldr	r1, [pc, #12]	; (d4eb8 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d4eaa:	f002 f974 	bl	d7196 <_ZN5Print7printlnEPKc>
   d4eae:	4630      	mov	r0, r6
   d4eb0:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
   d4eb2:	bd70      	pop	{r4, r5, r6, pc}
   d4eb4:	2003e2bc 	.word	0x2003e2bc
   d4eb8:	000db96c 	.word	0x000db96c

000d4ebc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
   d4ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ebe:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d4ec0:	6902      	ldr	r2, [r0, #16]
   d4ec2:	6841      	ldr	r1, [r0, #4]
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
   d4ec4:	4604      	mov	r4, r0
   d4ec6:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d4ec8:	f7ff ff50 	bl	d4d6c <_ZN7UbiHTTP9reconnectEPKci>
  bool result = false;

  if (_client_http_ubi.connected()) {  // Connect to the host
   d4ecc:	4878      	ldr	r0, [pc, #480]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4ece:	f003 fb30 	bl	d8532 <_ZN9TCPClient9connectedEv>
   d4ed2:	4606      	mov	r6, r0
   d4ed4:	2800      	cmp	r0, #0
   d4ed6:	f000 80dc 	beq.w	d5092 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1d6>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d4eda:	4976      	ldr	r1, [pc, #472]	; (d50b4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d4edc:	4874      	ldr	r0, [pc, #464]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4ede:	f002 f947 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d4ee2:	4639      	mov	r1, r7
   d4ee4:	4872      	ldr	r0, [pc, #456]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4ee6:	f002 f943 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d4eea:	4973      	ldr	r1, [pc, #460]	; (d50b8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d4eec:	4870      	ldr	r0, [pc, #448]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4eee:	f002 f93f 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d4ef2:	4972      	ldr	r1, [pc, #456]	; (d50bc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d4ef4:	486e      	ldr	r0, [pc, #440]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4ef6:	f002 f93b 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d4efa:	6861      	ldr	r1, [r4, #4]
   d4efc:	486c      	ldr	r0, [pc, #432]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4efe:	f002 f937 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d4f02:	496f      	ldr	r1, [pc, #444]	; (d50c0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d4f04:	486a      	ldr	r0, [pc, #424]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f06:	f002 f933 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d4f0a:	496e      	ldr	r1, [pc, #440]	; (d50c4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d4f0c:	4868      	ldr	r0, [pc, #416]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f0e:	f002 f92f 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d4f12:	68a1      	ldr	r1, [r4, #8]
   d4f14:	4866      	ldr	r0, [pc, #408]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f16:	f002 f92b 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d4f1a:	4969      	ldr	r1, [pc, #420]	; (d50c0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d4f1c:	4864      	ldr	r0, [pc, #400]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f1e:	f002 f927 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d4f22:	4969      	ldr	r1, [pc, #420]	; (d50c8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d4f24:	4862      	ldr	r0, [pc, #392]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f26:	f002 f923 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d4f2a:	68e1      	ldr	r1, [r4, #12]
   d4f2c:	4860      	ldr	r0, [pc, #384]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f2e:	f002 f91f 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d4f32:	4963      	ldr	r1, [pc, #396]	; (d50c0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d4f34:	485e      	ldr	r0, [pc, #376]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f36:	f002 f91b 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d4f3a:	4964      	ldr	r1, [pc, #400]	; (d50cc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d4f3c:	485c      	ldr	r0, [pc, #368]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f3e:	f002 f917 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d4f42:	4963      	ldr	r1, [pc, #396]	; (d50d0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d4f44:	485a      	ldr	r0, [pc, #360]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f46:	f002 f913 	bl	d7170 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d4f4a:	4628      	mov	r0, r5
   d4f4c:	f004 feeb 	bl	d9d26 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d4f50:	4960      	ldr	r1, [pc, #384]	; (d50d4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    _client_http_ubi.print(F("X-Auth-Token: "));
    _client_http_ubi.print(_token);
    _client_http_ubi.print(F("\r\n"));
    _client_http_ubi.print(F("Connection: close\r\n"));
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
    int content_length = strlen(payload);
   d4f52:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d4f54:	4856      	ldr	r0, [pc, #344]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f56:	f002 f90b 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(content_length);
   d4f5a:	220a      	movs	r2, #10
   d4f5c:	4631      	mov	r1, r6
   d4f5e:	4854      	ldr	r0, [pc, #336]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f60:	f002 f97e 	bl	d7260 <_ZN5Print5printEii>
    _client_http_ubi.print(F("\r\n\r\n"));
   d4f64:	495c      	ldr	r1, [pc, #368]	; (d50d8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d4f66:	4852      	ldr	r0, [pc, #328]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f68:	f002 f902 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d4f6c:	4629      	mov	r1, r5
   d4f6e:	4850      	ldr	r0, [pc, #320]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f70:	f002 f8fe 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d4f74:	4952      	ldr	r1, [pc, #328]	; (d50c0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d4f76:	484e      	ldr	r0, [pc, #312]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f78:	f002 f8fa 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d4f7c:	484c      	ldr	r0, [pc, #304]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d4f7e:	f003 fad7 	bl	d8530 <_ZN9TCPClient5flushEv>

    if (_debug) {
   d4f82:	7d23      	ldrb	r3, [r4, #20]
   d4f84:	2b00      	cmp	r3, #0
   d4f86:	d069      	beq.n	d505c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d4f88:	f002 fe36 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4f8c:	4953      	ldr	r1, [pc, #332]	; (d50dc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d4f8e:	f002 f902 	bl	d7196 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d4f92:	f002 fe31 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4f96:	4947      	ldr	r1, [pc, #284]	; (d50b4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d4f98:	f002 f8ea 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d4f9c:	f002 fe2c 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4fa0:	4639      	mov	r1, r7
   d4fa2:	f002 f8e5 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d4fa6:	f002 fe27 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4faa:	4943      	ldr	r1, [pc, #268]	; (d50b8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d4fac:	f002 f8e0 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d4fb0:	f002 fe22 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4fb4:	4941      	ldr	r1, [pc, #260]	; (d50bc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d4fb6:	f002 f8db 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d4fba:	f002 fe1d 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4fbe:	6861      	ldr	r1, [r4, #4]
   d4fc0:	f002 f8d6 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d4fc4:	f002 fe18 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4fc8:	493d      	ldr	r1, [pc, #244]	; (d50c0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d4fca:	f002 f8d1 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d4fce:	f002 fe13 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4fd2:	493c      	ldr	r1, [pc, #240]	; (d50c4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d4fd4:	f002 f8cc 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d4fd8:	f002 fe0e 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4fdc:	68a1      	ldr	r1, [r4, #8]
   d4fde:	f002 f8c7 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d4fe2:	f002 fe09 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4fe6:	4936      	ldr	r1, [pc, #216]	; (d50c0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d4fe8:	f002 f8c2 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d4fec:	f002 fe04 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4ff0:	4935      	ldr	r1, [pc, #212]	; (d50c8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d4ff2:	f002 f8bd 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d4ff6:	f002 fdff 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d4ffa:	68e1      	ldr	r1, [r4, #12]
   d4ffc:	f002 f8b8 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5000:	f002 fdfa 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5004:	492e      	ldr	r1, [pc, #184]	; (d50c0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5006:	f002 f8b3 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d500a:	f002 fdf5 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d500e:	492f      	ldr	r1, [pc, #188]	; (d50cc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d5010:	f002 f8ae 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d5014:	f002 fdf0 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5018:	492d      	ldr	r1, [pc, #180]	; (d50d0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d501a:	f002 f8a9 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d501e:	f002 fdeb 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5022:	492c      	ldr	r1, [pc, #176]	; (d50d4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d5024:	f002 f8a4 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d5028:	f002 fde6 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d502c:	220a      	movs	r2, #10
   d502e:	4631      	mov	r1, r6
   d5030:	f002 f916 	bl	d7260 <_ZN5Print5printEii>
      Serial.print("\r\n\r\n");
   d5034:	f002 fde0 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5038:	4927      	ldr	r1, [pc, #156]	; (d50d8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d503a:	f002 f899 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d503e:	f002 fddb 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5042:	4629      	mov	r1, r5
   d5044:	f002 f894 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5048:	f002 fdd6 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d504c:	491c      	ldr	r1, [pc, #112]	; (d50c0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d504e:	f002 f88f 	bl	d7170 <_ZN5Print5printEPKc>

      Serial.println("waiting for server answer ...");
   d5052:	f002 fdd1 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5056:	4922      	ldr	r1, [pc, #136]	; (d50e0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d5058:	f002 f89d 	bl	d7196 <_ZN5Print7printlnEPKc>
    }

    /* Reads the response from the server */
    waitServerAnswer();
   d505c:	4620      	mov	r0, r4
   d505e:	f7ff ff0b 	bl	d4e78 <_ZN7UbiHTTP16waitServerAnswerEv>

    if (_debug) {
   d5062:	7d23      	ldrb	r3, [r4, #20]
   d5064:	b90b      	cbnz	r3, d506a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ae>
        char c = _client_http_ubi.read();
        Serial.print(c);
      }
    }

    result = true;
   d5066:	2401      	movs	r4, #1
   d5068:	e01d      	b.n	d50a6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ea>

    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
   d506a:	f002 fdc5 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d506e:	491d      	ldr	r1, [pc, #116]	; (d50e4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
   d5070:	f002 f891 	bl	d7196 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d5074:	480e      	ldr	r0, [pc, #56]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5076:	f003 fc47 	bl	d8908 <_ZN9TCPClient9availableEv>
   d507a:	2800      	cmp	r0, #0
   d507c:	d0f3      	beq.n	d5066 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d507e:	480c      	ldr	r0, [pc, #48]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5080:	f003 faeb 	bl	d865a <_ZN9TCPClient4readEv>
   d5084:	4604      	mov	r4, r0
        Serial.print(c);
   d5086:	f002 fdb7 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d508a:	b2e1      	uxtb	r1, r4
   d508c:	f002 f874 	bl	d7178 <_ZN5Print5printEc>
    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
      while (_client_http_ubi.available()) {
   d5090:	e7f0      	b.n	d5074 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b8>
    }

    result = true;

  } else {
    if (_debug) {
   d5092:	7d23      	ldrb	r3, [r4, #20]
   d5094:	b133      	cbz	r3, d50a4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e8>
      Serial.println("Could not send data to ubidots using HTTP");
   d5096:	f002 fdaf 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d509a:	4913      	ldr	r1, [pc, #76]	; (d50e8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d509c:	f002 f87b 	bl	d7196 <_ZN5Print7printlnEPKc>
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
  reconnect(_host, _port);
  bool result = false;
   d50a0:	4634      	mov	r4, r6
   d50a2:	e000      	b.n	d50a6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ea>
   d50a4:	461c      	mov	r4, r3
    if (_debug) {
      Serial.println("Could not send data to ubidots using HTTP");
    }
  }

  _client_http_ubi.stop();
   d50a6:	4802      	ldr	r0, [pc, #8]	; (d50b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d50a8:	f003 fc16 	bl	d88d8 <_ZN9TCPClient4stopEv>
  return result;
}
   d50ac:	4620      	mov	r0, r4
   d50ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d50b0:	2003e2bc 	.word	0x2003e2bc
   d50b4:	000dbcbd 	.word	0x000dbcbd
   d50b8:	000dbcd5 	.word	0x000dbcd5
   d50bc:	000dbce1 	.word	0x000dbce1
   d50c0:	000dbe05 	.word	0x000dbe05
   d50c4:	000dbce8 	.word	0x000dbce8
   d50c8:	000dbcf5 	.word	0x000dbcf5
   d50cc:	000dbd04 	.word	0x000dbd04
   d50d0:	000dbd18 	.word	0x000dbd18
   d50d4:	000dbd39 	.word	0x000dbd39
   d50d8:	000dbe03 	.word	0x000dbe03
   d50dc:	000dbd4a 	.word	0x000dbd4a
   d50e0:	000dbd66 	.word	0x000dbd66
   d50e4:	000dbd84 	.word	0x000dbd84
   d50e8:	000dbda0 	.word	0x000dbda0

000d50ec <_ZN7UbiHTTP3getEPKcS1_>:

float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d50ec:	b570      	push	{r4, r5, r6, lr}
   d50ee:	ed2d 8b02 	vpush	{d8}
   d50f2:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d50f4:	2300      	movs	r3, #0

  _client_http_ubi.stop();
  return result;
}

float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d50f6:	460e      	mov	r6, r1
   d50f8:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d50fa:	6841      	ldr	r1, [r0, #4]
   d50fc:	4868      	ldr	r0, [pc, #416]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d50fe:	2250      	movs	r2, #80	; 0x50
   d5100:	f003 faee 	bl	d86e0 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d5104:	4620      	mov	r0, r4
   d5106:	2250      	movs	r2, #80	; 0x50
   d5108:	6861      	ldr	r1, [r4, #4]
   d510a:	f7ff fe2f 	bl	d4d6c <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d510e:	4864      	ldr	r0, [pc, #400]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5110:	f003 fa0f 	bl	d8532 <_ZN9TCPClient9connectedEv>
   d5114:	2800      	cmp	r0, #0
   d5116:	f000 80b4 	beq.w	d5282 <_ZN7UbiHTTP3getEPKcS1_+0x196>
    /* Builds the request GET - Please reference this link to know all the
     * request's structures HTTPS://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d511a:	4962      	ldr	r1, [pc, #392]	; (d52a4 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d511c:	4860      	ldr	r0, [pc, #384]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d511e:	f002 f827 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5122:	4631      	mov	r1, r6
   d5124:	485e      	ldr	r0, [pc, #376]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5126:	f002 f823 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d512a:	495f      	ldr	r1, [pc, #380]	; (d52a8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d512c:	485c      	ldr	r0, [pc, #368]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d512e:	f002 f81f 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d5132:	4629      	mov	r1, r5
   d5134:	485a      	ldr	r0, [pc, #360]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5136:	f002 f81b 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d513a:	495c      	ldr	r1, [pc, #368]	; (d52ac <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d513c:	4858      	ldr	r0, [pc, #352]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d513e:	f002 f817 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d5142:	495b      	ldr	r1, [pc, #364]	; (d52b0 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5144:	4856      	ldr	r0, [pc, #344]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5146:	f002 f813 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d514a:	495a      	ldr	r1, [pc, #360]	; (d52b4 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d514c:	4854      	ldr	r0, [pc, #336]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d514e:	f002 f80f 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(UBIDOTS_HTTP_PORT);
   d5152:	220a      	movs	r2, #10
   d5154:	2150      	movs	r1, #80	; 0x50
   d5156:	4852      	ldr	r0, [pc, #328]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5158:	f002 f882 	bl	d7260 <_ZN5Print5printEii>
    _client_http_ubi.print("\r\n");
   d515c:	4956      	ldr	r1, [pc, #344]	; (d52b8 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d515e:	4850      	ldr	r0, [pc, #320]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5160:	f002 f806 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d5164:	4955      	ldr	r1, [pc, #340]	; (d52bc <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5166:	484e      	ldr	r0, [pc, #312]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5168:	f002 f802 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d516c:	68a1      	ldr	r1, [r4, #8]
   d516e:	484c      	ldr	r0, [pc, #304]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5170:	f001 fffe 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5174:	4950      	ldr	r1, [pc, #320]	; (d52b8 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5176:	484a      	ldr	r0, [pc, #296]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5178:	f001 fffa 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d517c:	4950      	ldr	r1, [pc, #320]	; (d52c0 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d517e:	4848      	ldr	r0, [pc, #288]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5180:	f001 fff6 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d5184:	68e1      	ldr	r1, [r4, #12]
   d5186:	4846      	ldr	r0, [pc, #280]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5188:	f001 fff2 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d518c:	494a      	ldr	r1, [pc, #296]	; (d52b8 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d518e:	4844      	ldr	r0, [pc, #272]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5190:	f001 ffee 	bl	d7170 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d5194:	494b      	ldr	r1, [pc, #300]	; (d52c4 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d5196:	4842      	ldr	r0, [pc, #264]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5198:	f001 ffea 	bl	d7170 <_ZN5Print5printEPKc>

    if (_debug) {
   d519c:	7d23      	ldrb	r3, [r4, #20]
   d519e:	2b00      	cmp	r3, #0
   d51a0:	d050      	beq.n	d5244 <_ZN7UbiHTTP3getEPKcS1_+0x158>
      Serial.print("GET /api/v1.6/devices/");
   d51a2:	f002 fd29 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d51a6:	493f      	ldr	r1, [pc, #252]	; (d52a4 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d51a8:	f001 ffe2 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d51ac:	f002 fd24 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d51b0:	4631      	mov	r1, r6
   d51b2:	f001 ffdd 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("/");
   d51b6:	f002 fd1f 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d51ba:	493b      	ldr	r1, [pc, #236]	; (d52a8 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d51bc:	f001 ffd8 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d51c0:	f002 fd1a 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d51c4:	4629      	mov	r1, r5
   d51c6:	f001 ffd3 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d51ca:	f002 fd15 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d51ce:	4937      	ldr	r1, [pc, #220]	; (d52ac <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d51d0:	f001 ffce 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d51d4:	f002 fd10 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d51d8:	4935      	ldr	r1, [pc, #212]	; (d52b0 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d51da:	f001 ffc9 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d51de:	f002 fd0b 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d51e2:	4934      	ldr	r1, [pc, #208]	; (d52b4 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d51e4:	f001 ffc4 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(UBIDOTS_HTTP_PORT);
   d51e8:	f002 fd06 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d51ec:	220a      	movs	r2, #10
   d51ee:	2150      	movs	r1, #80	; 0x50
   d51f0:	f002 f836 	bl	d7260 <_ZN5Print5printEii>
      Serial.print("\r\n");
   d51f4:	f002 fd00 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d51f8:	492f      	ldr	r1, [pc, #188]	; (d52b8 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d51fa:	f001 ffb9 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d51fe:	f002 fcfb 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5202:	492e      	ldr	r1, [pc, #184]	; (d52bc <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5204:	f001 ffb4 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5208:	f002 fcf6 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d520c:	68a1      	ldr	r1, [r4, #8]
   d520e:	f001 ffaf 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5212:	f002 fcf1 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5216:	4928      	ldr	r1, [pc, #160]	; (d52b8 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5218:	f001 ffaa 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d521c:	f002 fcec 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5220:	4927      	ldr	r1, [pc, #156]	; (d52c0 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d5222:	f001 ffa5 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5226:	f002 fce7 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d522a:	68e1      	ldr	r1, [r4, #12]
   d522c:	f001 ffa0 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5230:	f002 fce2 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5234:	4920      	ldr	r1, [pc, #128]	; (d52b8 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5236:	f001 ff9b 	bl	d7170 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d523a:	f002 fcdd 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d523e:	4921      	ldr	r1, [pc, #132]	; (d52c4 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d5240:	f001 ff96 	bl	d7170 <_ZN5Print5printEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
   d5244:	4620      	mov	r0, r4
   d5246:	f7ff fe17 	bl	d4e78 <_ZN7UbiHTTP16waitServerAnswerEv>
   d524a:	b928      	cbnz	r0, d5258 <_ZN7UbiHTTP3getEPKcS1_+0x16c>
      _client_http_ubi.stop();
   d524c:	4814      	ldr	r0, [pc, #80]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
      return ERROR_VALUE;
   d524e:	ed9f 8a1e 	vldr	s16, [pc, #120]	; d52c8 <_ZN7UbiHTTP3getEPKcS1_+0x1dc>
      Serial.print("Content-Type: application/json\r\n\r\n");
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
      _client_http_ubi.stop();
   d5252:	f003 fb41 	bl	d88d8 <_ZN9TCPClient4stopEv>
   d5256:	e01d      	b.n	d5294 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5258:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d525c:	f000 ffc0 	bl	d61e0 <malloc>
    readServerAnswer(response);
   d5260:	4601      	mov	r1, r0
      _client_http_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5262:	4605      	mov	r5, r0
    readServerAnswer(response);
   d5264:	4620      	mov	r0, r4
   d5266:	f7ff fdc7 	bl	d4df8 <_ZN7UbiHTTP16readServerAnswerEPc>
   d526a:	4628      	mov	r0, r5
   d526c:	f7ff fd16 	bl	d4c9c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>

    /* Parses the answer */
    float value = parseHttpAnswer("LV", response);
    _client_http_ubi.stop();
   d5270:	480b      	ldr	r0, [pc, #44]	; (d52a0 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5272:	eeb0 8a40 	vmov.f32	s16, s0
   d5276:	f003 fb2f 	bl	d88d8 <_ZN9TCPClient4stopEv>
    free(response);
   d527a:	4628      	mov	r0, r5
   d527c:	f000 ffb8 	bl	d61f0 <free>
   d5280:	e008      	b.n	d5294 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>
    return value;
  }

  if (_debug) {
   d5282:	7d23      	ldrb	r3, [r4, #20]
   d5284:	2b00      	cmp	r3, #0
   d5286:	d0e1      	beq.n	d524c <_ZN7UbiHTTP3getEPKcS1_+0x160>
    Serial.println("Connection Failed ubidots - Try Again");
   d5288:	f002 fcb6 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d528c:	490f      	ldr	r1, [pc, #60]	; (d52cc <_ZN7UbiHTTP3getEPKcS1_+0x1e0>)
   d528e:	f001 ff82 	bl	d7196 <_ZN5Print7printlnEPKc>
   d5292:	e7db      	b.n	d524c <_ZN7UbiHTTP3getEPKcS1_+0x160>
  }

  _client_http_ubi.stop();
  return ERROR_VALUE;
}
   d5294:	eeb0 0a48 	vmov.f32	s0, s16
   d5298:	ecbd 8b02 	vpop	{d8}
   d529c:	bd70      	pop	{r4, r5, r6, pc}
   d529e:	bf00      	nop
   d52a0:	2003e2bc 	.word	0x2003e2bc
   d52a4:	000dbdca 	.word	0x000dbdca
   d52a8:	000dbddf 	.word	0x000dbddf
   d52ac:	000dbde1 	.word	0x000dbde1
   d52b0:	000dbcd5 	.word	0x000dbcd5
   d52b4:	000dbce1 	.word	0x000dbce1
   d52b8:	000dbe05 	.word	0x000dbe05
   d52bc:	000dbce8 	.word	0x000dbce8
   d52c0:	000dbcf5 	.word	0x000dbcf5
   d52c4:	000dbde5 	.word	0x000dbde5
   d52c8:	cda2425f 	.word	0xcda2425f
   d52cc:	000dbe08 	.word	0x000dbe08

000d52d0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d52d0:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d52d2:	4c06      	ldr	r4, [pc, #24]	; (d52ec <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d52d4:	f000 fc4a 	bl	d5b6c <HAL_Pin_Map>
   d52d8:	4620      	mov	r0, r4
   d52da:	f003 fbb5 	bl	d8a48 <_ZN9TCPClientC1Ev>
   d52de:	4620      	mov	r0, r4
   d52e0:	4a03      	ldr	r2, [pc, #12]	; (d52f0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d52e2:	4904      	ldr	r1, [pc, #16]	; (d52f4 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
   d52e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d52e8:	f003 bd56 	b.w	d8d98 <__aeabi_atexit>
   d52ec:	2003e2bc 	.word	0x2003e2bc
   d52f0:	2003ce30 	.word	0x2003ce30
   d52f4:	000d4659 	.word	0x000d4659

000d52f8 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
   d52f8:	6803      	ldr	r3, [r0, #0]
   d52fa:	4718      	bx	r3

000d52fc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d52fc:	2a01      	cmp	r2, #1
   d52fe:	d002      	beq.n	d5306 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
   d5300:	2a02      	cmp	r2, #2
   d5302:	d002      	beq.n	d530a <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
   d5304:	e004      	b.n	d5310 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5306:	6001      	str	r1, [r0, #0]
	      break;
   d5308:	e002      	b.n	d5310 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d530a:	680b      	ldr	r3, [r1, #0]
   d530c:	b100      	cbz	r0, d5310 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
   d530e:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5310:	2000      	movs	r0, #0
   d5312:	4770      	bx	lr

000d5314 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d5314:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance =
      new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5316:	201c      	movs	r0, #28
   d5318:	f7fe febf 	bl	d409a <_Znwj>
   d531c:	4604      	mov	r4, r0
   d531e:	b148      	cbz	r0, d5334 <_Z10builderTcpv+0x20>
   d5320:	4b06      	ldr	r3, [pc, #24]	; (d533c <_Z10builderTcpv+0x28>)
   d5322:	4907      	ldr	r1, [pc, #28]	; (d5340 <_Z10builderTcpv+0x2c>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	9300      	str	r3, [sp, #0]
   d5328:	f242 3234 	movw	r2, #9012	; 0x2334
   d532c:	4b05      	ldr	r3, [pc, #20]	; (d5344 <_Z10builderTcpv+0x30>)
   d532e:	6809      	ldr	r1, [r1, #0]
   d5330:	f7ff f9b6 	bl	d46a0 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d5334:	4620      	mov	r0, r4
   d5336:	b002      	add	sp, #8
   d5338:	bd10      	pop	{r4, pc}
   d533a:	bf00      	nop
   d533c:	2003e310 	.word	0x2003e310
   d5340:	2003e314 	.word	0x2003e314
   d5344:	000dbb26 	.word	0x000dbb26

000d5348 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d5348:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance =
      new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d534a:	2020      	movs	r0, #32
   d534c:	f7fe fea5 	bl	d409a <_Znwj>
   d5350:	4604      	mov	r4, r0
   d5352:	b140      	cbz	r0, d5366 <_Z11builderHttpv+0x1e>
   d5354:	4b05      	ldr	r3, [pc, #20]	; (d536c <_Z11builderHttpv+0x24>)
   d5356:	4906      	ldr	r1, [pc, #24]	; (d5370 <_Z11builderHttpv+0x28>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	9300      	str	r3, [sp, #0]
   d535c:	2250      	movs	r2, #80	; 0x50
   d535e:	4b05      	ldr	r3, [pc, #20]	; (d5374 <_Z11builderHttpv+0x2c>)
   d5360:	6809      	ldr	r1, [r1, #0]
   d5362:	f7ff fcf1 	bl	d4d48 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d5366:	4620      	mov	r0, r4
   d5368:	b002      	add	sp, #8
   d536a:	bd10      	pop	{r4, pc}
   d536c:	2003e310 	.word	0x2003e310
   d5370:	2003e314 	.word	0x2003e314
   d5374:	000dbb26 	.word	0x000dbb26

000d5378 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d5378:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance =
      new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d537a:	201c      	movs	r0, #28
   d537c:	f7fe fe8d 	bl	d409a <_Znwj>
   d5380:	4604      	mov	r4, r0
   d5382:	b148      	cbz	r0, d5398 <_Z10builderUdpv+0x20>
   d5384:	4b06      	ldr	r3, [pc, #24]	; (d53a0 <_Z10builderUdpv+0x28>)
   d5386:	4907      	ldr	r1, [pc, #28]	; (d53a4 <_Z10builderUdpv+0x2c>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	9300      	str	r3, [sp, #0]
   d538c:	f242 3234 	movw	r2, #9012	; 0x2334
   d5390:	4b05      	ldr	r3, [pc, #20]	; (d53a8 <_Z10builderUdpv+0x30>)
   d5392:	6809      	ldr	r1, [r1, #0]
   d5394:	f000 fad8 	bl	d5948 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d5398:	4620      	mov	r0, r4
   d539a:	b002      	add	sp, #8
   d539c:	bd10      	pop	{r4, pc}
   d539e:	bf00      	nop
   d53a0:	2003e310 	.word	0x2003e310
   d53a4:	2003e314 	.word	0x2003e314
   d53a8:	000dbb26 	.word	0x000dbb26

000d53ac <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d53ac:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d53ae:	2014      	movs	r0, #20
   d53b0:	f7fe fe73 	bl	d409a <_Znwj>
   d53b4:	4604      	mov	r4, r0
   d53b6:	b140      	cbz	r0, d53ca <_Z15builderParticlev+0x1e>
   d53b8:	4b05      	ldr	r3, [pc, #20]	; (d53d0 <_Z15builderParticlev+0x24>)
   d53ba:	4906      	ldr	r1, [pc, #24]	; (d53d4 <_Z15builderParticlev+0x28>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	9300      	str	r3, [sp, #0]
   d53c0:	2300      	movs	r3, #0
   d53c2:	461a      	mov	r2, r3
   d53c4:	6809      	ldr	r1, [r1, #0]
   d53c6:	f000 fb59 	bl	d5a7c <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
   d53ca:	4620      	mov	r0, r4
   d53cc:	b002      	add	sp, #8
   d53ce:	bd10      	pop	{r4, pc}
   d53d0:	2003e310 	.word	0x2003e310
   d53d4:	2003e314 	.word	0x2003e314

000d53d8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d53d8:	b510      	push	{r4, lr}
   d53da:	4b06      	ldr	r3, [pc, #24]	; (d53f4 <_ZN3UDPD1Ev+0x1c>)
   d53dc:	6003      	str	r3, [r0, #0]
   d53de:	3364      	adds	r3, #100	; 0x64
   d53e0:	4604      	mov	r4, r0
   d53e2:	6103      	str	r3, [r0, #16]
   d53e4:	f001 f845 	bl	d6472 <_ZN3UDP4stopEv>
   d53e8:	4620      	mov	r0, r4
   d53ea:	f001 fa6b 	bl	d68c4 <_ZN3UDP13releaseBufferEv>
   d53ee:	4620      	mov	r0, r4
   d53f0:	bd10      	pop	{r4, pc}
   d53f2:	bf00      	nop
   d53f4:	000dc0b8 	.word	0x000dc0b8

000d53f8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d53f8:	b510      	push	{r4, lr}
   d53fa:	b086      	sub	sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53fc:	2300      	movs	r3, #0
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d53fe:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5400:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d5402:	b121      	cbz	r1, d540e <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5404:	4b0f      	ldr	r3, [pc, #60]	; (d5444 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x4c>)
   d5406:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d5408:	4b0f      	ldr	r3, [pc, #60]	; (d5448 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x50>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d540a:	9102      	str	r1, [sp, #8]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d540c:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d540e:	ab02      	add	r3, sp, #8
   d5410:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5414:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5418:	e894 0003 	ldmia.w	r4, {r0, r1}
   d541c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5420:	e89d 0003 	ldmia.w	sp, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5424:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5426:	e884 0003 	stmia.w	r4, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d542a:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d542c:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d542e:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5430:	9104      	str	r1, [sp, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5432:	4618      	mov	r0, r3
   d5434:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5436:	60e2      	str	r2, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5438:	9105      	str	r1, [sp, #20]
   d543a:	f7fe fe99 	bl	d4170 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d543e:	4620      	mov	r0, r4
   d5440:	b006      	add	sp, #24
   d5442:	bd10      	pop	{r4, pc}
   d5444:	000d52f9 	.word	0x000d52f9
   d5448:	000d52fd 	.word	0x000d52fd

000d544c <_ZN3UDPD0Ev>:
   d544c:	b510      	push	{r4, lr}
   d544e:	4604      	mov	r4, r0
   d5450:	f7ff ffc2 	bl	d53d8 <_ZN3UDPD1Ev>
   d5454:	4620      	mov	r0, r4
   d5456:	214c      	movs	r1, #76	; 0x4c
   d5458:	f003 fcac 	bl	d8db4 <_ZdlPvj>
   d545c:	4620      	mov	r0, r4
   d545e:	bd10      	pop	{r4, pc}

000d5460 <_ZN10UbiBuilder7builderEv>:
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
}

UbiProtocol* UbiBuilder::builder() {
   d5460:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d5462:	f100 0108 	add.w	r1, r0, #8
   d5466:	68c2      	ldr	r2, [r0, #12]
   d5468:	460b      	mov	r3, r1
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d546a:	b14a      	cbz	r2, d5480 <_ZN10UbiBuilder7builderEv+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d546c:	7804      	ldrb	r4, [r0, #0]
   d546e:	7c15      	ldrb	r5, [r2, #16]
   d5470:	42a5      	cmp	r5, r4
   d5472:	bf36      	itet	cc
   d5474:	68d4      	ldrcc	r4, [r2, #12]
   d5476:	6894      	ldrcs	r4, [r2, #8]
   d5478:	461a      	movcc	r2, r3
   d547a:	4613      	mov	r3, r2
   d547c:	4622      	mov	r2, r4
   d547e:	e7f4      	b.n	d546a <_ZN10UbiBuilder7builderEv+0xa>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d5480:	4299      	cmp	r1, r3
   d5482:	d004      	beq.n	d548e <_ZN10UbiBuilder7builderEv+0x2e>
   d5484:	7800      	ldrb	r0, [r0, #0]
   d5486:	7c1a      	ldrb	r2, [r3, #16]
   d5488:	4290      	cmp	r0, r2
   d548a:	bf38      	it	cc
   d548c:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d548e:	69da      	ldr	r2, [r3, #28]
   d5490:	b90a      	cbnz	r2, d5496 <_ZN10UbiBuilder7builderEv+0x36>
	__throw_bad_function_call();
   d5492:	f003 fd5b 	bl	d8f4c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5496:	6a1a      	ldr	r2, [r3, #32]
   d5498:	f103 0014 	add.w	r0, r3, #20
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}
   d549c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d54a0:	4710      	bx	r2

000d54a2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d54a2:	688b      	ldr	r3, [r1, #8]
   d54a4:	b570      	push	{r4, r5, r6, lr}
   d54a6:	4616      	mov	r6, r2
   d54a8:	4604      	mov	r4, r0
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d54aa:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d54ac:	2201      	movs	r2, #1
      while (__x != 0)
   d54ae:	b15b      	cbz	r3, d54c8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
   d54b0:	7830      	ldrb	r0, [r6, #0]
   d54b2:	7c1a      	ldrb	r2, [r3, #16]
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   d54b4:	4290      	cmp	r0, r2
   d54b6:	bf34      	ite	cc
   d54b8:	6898      	ldrcc	r0, [r3, #8]
   d54ba:	68d8      	ldrcs	r0, [r3, #12]
   d54bc:	461d      	mov	r5, r3
   d54be:	bf34      	ite	cc
   d54c0:	2201      	movcc	r2, #1
   d54c2:	2200      	movcs	r2, #0
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d54c4:	4603      	mov	r3, r0
   d54c6:	e7f2      	b.n	d54ae <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d54c8:	b132      	cbz	r2, d54d8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
	{
	  if (__j == begin())
   d54ca:	68ca      	ldr	r2, [r1, #12]
   d54cc:	4295      	cmp	r5, r2
   d54ce:	d00a      	beq.n	d54e6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x44>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d54d0:	4628      	mov	r0, r5
   d54d2:	f003 fcd6 	bl	d8e82 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d54d6:	e000      	b.n	d54da <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x38>
   d54d8:	4628      	mov	r0, r5
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d54da:	7833      	ldrb	r3, [r6, #0]
   d54dc:	7c02      	ldrb	r2, [r0, #16]
   d54de:	429a      	cmp	r2, r3
   d54e0:	f04f 0300 	mov.w	r3, #0
   d54e4:	d202      	bcs.n	d54ec <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4a>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d54e6:	e884 0028 	stmia.w	r4, {r3, r5}
   d54ea:	e001      	b.n	d54f0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
   d54ec:	e884 0009 	stmia.w	r4, {r0, r3}
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   d54f0:	4620      	mov	r0, r4
   d54f2:	bd70      	pop	{r4, r5, r6, pc}

000d54f4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d54f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d54f8:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d54fa:	2024      	movs	r0, #36	; 0x24
   d54fc:	461f      	mov	r7, r3
   d54fe:	460c      	mov	r4, r1
   d5500:	f7fe fdcb 	bl	d409a <_Znwj>
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   d5504:	683b      	ldr	r3, [r7, #0]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5506:	f110 0810 	adds.w	r8, r0, #16
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d550a:	bf1c      	itt	ne
   d550c:	781b      	ldrbne	r3, [r3, #0]
   d550e:	7403      	strbne	r3, [r0, #16]
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d5510:	f106 0704 	add.w	r7, r6, #4
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5514:	bf1c      	itt	ne
   d5516:	2300      	movne	r3, #0
   d5518:	61c3      	strne	r3, [r0, #28]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   d551a:	42a7      	cmp	r7, r4
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d551c:	4605      	mov	r5, r0
   d551e:	d108      	bne.n	d5532 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x3e>
	{
	  if (size() > 0
   d5520:	6973      	ldr	r3, [r6, #20]
   d5522:	2b00      	cmp	r3, #0
   d5524:	d05c      	beq.n	d55e0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d5526:	6931      	ldr	r1, [r6, #16]
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
   d5528:	7c03      	ldrb	r3, [r0, #16]
   d552a:	7c0a      	ldrb	r2, [r1, #16]
   d552c:	429a      	cmp	r2, r3
   d552e:	d33a      	bcc.n	d55a6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb2>
   d5530:	e056      	b.n	d55e0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
   d5532:	f890 9010 	ldrb.w	r9, [r0, #16]
   d5536:	7c23      	ldrb	r3, [r4, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d5538:	4599      	cmp	r9, r3
   d553a:	d217      	bcs.n	d556c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x78>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
   d553c:	68f3      	ldr	r3, [r6, #12]
   d553e:	42a3      	cmp	r3, r4
   d5540:	4620      	mov	r0, r4
   d5542:	d011      	beq.n	d5568 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d5544:	f003 fc9d 	bl	d8e82 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d5548:	7c03      	ldrb	r3, [r0, #16]
   d554a:	454b      	cmp	r3, r9
   d554c:	d205      	bcs.n	d555a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x66>
	    {
	      if (_S_right(__before._M_node) == 0)
   d554e:	68c3      	ldr	r3, [r0, #12]
   d5550:	2b00      	cmp	r3, #0
   d5552:	bf14      	ite	ne
   d5554:	4620      	movne	r0, r4
   d5556:	2400      	moveq	r4, #0
   d5558:	e006      	b.n	d5568 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
		return _Res(0, __before._M_node);
	      else
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
   d555a:	4668      	mov	r0, sp
   d555c:	4642      	mov	r2, r8
   d555e:	4631      	mov	r1, r6
   d5560:	f7ff ff9f 	bl	d54a2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5564:	9c00      	ldr	r4, [sp, #0]
   d5566:	9801      	ldr	r0, [sp, #4]
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
   d5568:	4601      	mov	r1, r0
   d556a:	e01a      	b.n	d55a2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d556c:	d92f      	bls.n	d55ce <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
   d556e:	6933      	ldr	r3, [r6, #16]
   d5570:	42a3      	cmp	r3, r4
   d5572:	d013      	beq.n	d559c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xa8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d5574:	4620      	mov	r0, r4
   d5576:	f003 fc71 	bl	d8e5c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d557a:	7c03      	ldrb	r3, [r0, #16]
   d557c:	454b      	cmp	r3, r9
   d557e:	d905      	bls.n	d558c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x98>
	    {
	      if (_S_right(__pos._M_node) == 0)
   d5580:	68e3      	ldr	r3, [r4, #12]
   d5582:	2b00      	cmp	r3, #0
   d5584:	bf14      	ite	ne
   d5586:	4604      	movne	r4, r0
   d5588:	2000      	moveq	r0, #0
   d558a:	e008      	b.n	d559e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>
		return _Res(0, __pos._M_node);
	      else
		return _Res(__after._M_node, __after._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
   d558c:	4668      	mov	r0, sp
   d558e:	4642      	mov	r2, r8
   d5590:	4631      	mov	r1, r6
   d5592:	f7ff ff86 	bl	d54a2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5596:	e89d 0011 	ldmia.w	sp, {r0, r4}
   d559a:	e000      	b.n	d559e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d559c:	2000      	movs	r0, #0
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
   d559e:	4621      	mov	r1, r4
   d55a0:	4604      	mov	r4, r0

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   d55a2:	b1a1      	cbz	r1, d55ce <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
   d55a4:	b944      	cbnz	r4, d55b8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
   d55a6:	428f      	cmp	r7, r1
   d55a8:	d006      	beq.n	d55b8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
   d55aa:	7c08      	ldrb	r0, [r1, #16]
   d55ac:	7c2b      	ldrb	r3, [r5, #16]
   d55ae:	4283      	cmp	r3, r0
   d55b0:	bf2c      	ite	cs
   d55b2:	2000      	movcs	r0, #0
   d55b4:	2001      	movcc	r0, #1
   d55b6:	e000      	b.n	d55ba <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc6>
   d55b8:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d55ba:	463b      	mov	r3, r7
   d55bc:	460a      	mov	r2, r1
   d55be:	4629      	mov	r1, r5
   d55c0:	f003 fc61 	bl	d8e86 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
   d55c4:	6973      	ldr	r3, [r6, #20]
   d55c6:	3301      	adds	r3, #1
   d55c8:	6173      	str	r3, [r6, #20]
   d55ca:	4628      	mov	r0, r5
   d55cc:	e010      	b.n	d55f0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55ce:	f105 0014 	add.w	r0, r5, #20
   d55d2:	f7fe fdcd 	bl	d4170 <_ZNSt14_Function_baseD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d55d6:	4628      	mov	r0, r5
   d55d8:	f7fe fd63 	bl	d40a2 <_ZdlPv>

	    if (__res.second)
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
	    return iterator(static_cast<_Link_type>(__res.first));
   d55dc:	4620      	mov	r0, r4
   d55de:	e007      	b.n	d55f0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   d55e0:	4631      	mov	r1, r6
   d55e2:	4642      	mov	r2, r8
   d55e4:	4668      	mov	r0, sp
   d55e6:	f7ff ff5c 	bl	d54a2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d55ea:	9c00      	ldr	r4, [sp, #0]
   d55ec:	9901      	ldr	r1, [sp, #4]
   d55ee:	e7d8      	b.n	d55a2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
   d55f0:	b003      	add	sp, #12
   d55f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d55f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d55f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d55fa:	1d04      	adds	r4, r0, #4
   d55fc:	6883      	ldr	r3, [r0, #8]
   d55fe:	460a      	mov	r2, r1
   d5600:	4621      	mov	r1, r4
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d5602:	b14b      	cbz	r3, d5618 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5604:	7815      	ldrb	r5, [r2, #0]
   d5606:	7c1e      	ldrb	r6, [r3, #16]
   d5608:	42ae      	cmp	r6, r5
   d560a:	bf36      	itet	cc
   d560c:	68dd      	ldrcc	r5, [r3, #12]
   d560e:	689d      	ldrcs	r5, [r3, #8]
   d5610:	460b      	movcc	r3, r1
   d5612:	4619      	mov	r1, r3
   d5614:	462b      	mov	r3, r5
   d5616:	e7f4      	b.n	d5602 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d5618:	428c      	cmp	r4, r1
   d561a:	d003      	beq.n	d5624 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2c>
   d561c:	7814      	ldrb	r4, [r2, #0]
   d561e:	7c0b      	ldrb	r3, [r1, #16]
   d5620:	429c      	cmp	r4, r3
   d5622:	d208      	bcs.n	d5636 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x3e>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5624:	ab04      	add	r3, sp, #16
   d5626:	f843 2d04 	str.w	r2, [r3, #-4]!
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d562a:	aa02      	add	r2, sp, #8
   d562c:	9200      	str	r2, [sp, #0]
   d562e:	4a04      	ldr	r2, [pc, #16]	; (d5640 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x48>)
   d5630:	f7ff ff60 	bl	d54f4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
   d5634:	4601      	mov	r1, r0
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
   d5636:	f101 0014 	add.w	r0, r1, #20
      }
   d563a:	b004      	add	sp, #16
   d563c:	bd70      	pop	{r4, r5, r6, pc}
   d563e:	bf00      	nop
   d5640:	000dbe2e 	.word	0x000dbe2e

000d5644 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
#include "UbiProtocol.h"
#include "UbiTcp.h"
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
   d5644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5648:	4604      	mov	r4, r0
   d564a:	461d      	mov	r5, r3
   d564c:	4689      	mov	r9, r1
   d564e:	4690      	mov	r8, r2
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d5650:	2100      	movs	r1, #0
   d5652:	2210      	movs	r2, #16
   d5654:	3008      	adds	r0, #8
   d5656:	f004 fafa 	bl	d9c4e <memset>
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
   d565a:	7025      	strb	r5, [r4, #0]
  command_list[UBI_TCP] = &builderTcp;
   d565c:	ad02      	add	r5, sp, #8
   d565e:	2301      	movs	r3, #1
   d5660:	f805 3d01 	strb.w	r3, [r5, #-1]!
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d5664:	f104 0208 	add.w	r2, r4, #8
   d5668:	1d26      	adds	r6, r4, #4
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d566a:	2700      	movs	r7, #0
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d566c:	6122      	str	r2, [r4, #16]
	    this->_M_header._M_right = &this->_M_header;
   d566e:	6162      	str	r2, [r4, #20]
   d5670:	4629      	mov	r1, r5
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d5672:	61a7      	str	r7, [r4, #24]
   d5674:	4630      	mov	r0, r6
   d5676:	f7ff ffbf 	bl	d55f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d567a:	4915      	ldr	r1, [pc, #84]	; (d56d0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d567c:	f7ff febc 	bl	d53f8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_HTTP] = &builderHttp;
   d5680:	4629      	mov	r1, r5
   d5682:	4630      	mov	r0, r6
   d5684:	f88d 7007 	strb.w	r7, [sp, #7]
   d5688:	f7ff ffb6 	bl	d55f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d568c:	4911      	ldr	r1, [pc, #68]	; (d56d4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d568e:	f7ff feb3 	bl	d53f8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_UDP] = &builderUdp;
   d5692:	2302      	movs	r3, #2
   d5694:	4629      	mov	r1, r5
   d5696:	4630      	mov	r0, r6
   d5698:	f88d 3007 	strb.w	r3, [sp, #7]
   d569c:	f7ff ffac 	bl	d55f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d56a0:	490d      	ldr	r1, [pc, #52]	; (d56d8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d56a2:	f7ff fea9 	bl	d53f8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_PARTICLE] = &builderParticle;
   d56a6:	2303      	movs	r3, #3
   d56a8:	4629      	mov	r1, r5
   d56aa:	4630      	mov	r0, r6
   d56ac:	f88d 3007 	strb.w	r3, [sp, #7]
   d56b0:	f7ff ffa2 	bl	d55f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d56b4:	4909      	ldr	r1, [pc, #36]	; (d56dc <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d56b6:	f7ff fe9f 	bl	d53f8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  _host = host;
   d56ba:	4b09      	ldr	r3, [pc, #36]	; (d56e0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
   d56bc:	f8c3 9000 	str.w	r9, [r3]
  _token = token;
   d56c0:	4b08      	ldr	r3, [pc, #32]	; (d56e4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0xa0>)
}
   d56c2:	4620      	mov	r0, r4
  command_list[UBI_TCP] = &builderTcp;
  command_list[UBI_HTTP] = &builderHttp;
  command_list[UBI_UDP] = &builderUdp;
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
   d56c4:	f8c3 8000 	str.w	r8, [r3]
}
   d56c8:	b003      	add	sp, #12
   d56ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d56ce:	bf00      	nop
   d56d0:	000d5315 	.word	0x000d5315
   d56d4:	000d5349 	.word	0x000d5349
   d56d8:	000d5379 	.word	0x000d5379
   d56dc:	000d53ad 	.word	0x000d53ad
   d56e0:	2003e314 	.word	0x2003e314
   d56e4:	2003e310 	.word	0x2003e310

000d56e8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
   d56e8:	b570      	push	{r4, r5, r6, lr}
   d56ea:	4d10      	ldr	r5, [pc, #64]	; (d572c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d56ec:	4c10      	ldr	r4, [pc, #64]	; (d5730 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d56ee:	4e11      	ldr	r6, [pc, #68]	; (d5734 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d56f0:	f000 fa3c 	bl	d5b6c <HAL_Pin_Map>
   d56f4:	4628      	mov	r0, r5
   d56f6:	f003 f9a7 	bl	d8a48 <_ZN9TCPClientC1Ev>
   d56fa:	4628      	mov	r0, r5
   d56fc:	4d0e      	ldr	r5, [pc, #56]	; (d5738 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d56fe:	4622      	mov	r2, r4
   d5700:	4631      	mov	r1, r6
   d5702:	f003 fb49 	bl	d8d98 <__aeabi_atexit>
   d5706:	4628      	mov	r0, r5
   d5708:	f003 f99e 	bl	d8a48 <_ZN9TCPClientC1Ev>
   d570c:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d570e:	4d0b      	ldr	r5, [pc, #44]	; (d573c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
   d5710:	4622      	mov	r2, r4
   d5712:	4631      	mov	r1, r6
   d5714:	f003 fb40 	bl	d8d98 <__aeabi_atexit>
   d5718:	4628      	mov	r0, r5
   d571a:	f001 f8b5 	bl	d6888 <_ZN3UDPC1Ev>
   d571e:	4622      	mov	r2, r4
   d5720:	4628      	mov	r0, r5
   d5722:	4907      	ldr	r1, [pc, #28]	; (d5740 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
   d5724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5728:	f003 bb36 	b.w	d8d98 <__aeabi_atexit>
   d572c:	2003e2f4 	.word	0x2003e2f4
   d5730:	2003ce30 	.word	0x2003ce30
   d5734:	000d4659 	.word	0x000d4659
   d5738:	2003e2d8 	.word	0x2003e2d8
   d573c:	2003e318 	.word	0x2003e318
   d5740:	000d53d9 	.word	0x000d53d9

000d5744 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5744:	2200      	movs	r2, #0
   d5746:	4611      	mov	r1, r2
   d5748:	6840      	ldr	r0, [r0, #4]
   d574a:	f000 bcd1 	b.w	d60f0 <network_ready>
	...

000d5750 <_ZN7UbiMeshC1EPc>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d5750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  _tokenMesh = token;
   d5752:	4b0a      	ldr	r3, [pc, #40]	; (d577c <_ZN7UbiMeshC1EPc+0x2c>)

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d5754:	4604      	mov	r4, r0
   d5756:	4668      	mov	r0, sp
  _tokenMesh = token;
   d5758:	6019      	str	r1, [r3, #0]
   d575a:	f000 fd19 	bl	d6190 <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d575e:	9802      	ldr	r0, [sp, #8]
   d5760:	3001      	adds	r0, #1
   d5762:	f7fe fc9c 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d5766:	9900      	ldr	r1, [sp, #0]
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d5768:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d576a:	f004 fab9 	bl	d9ce0 <strcpy>
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
   d576e:	4668      	mov	r0, sp
   d5770:	f001 f915 	bl	d699e <_ZN6StringD1Ev>
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
};
   d5774:	4620      	mov	r0, r4
   d5776:	b004      	add	sp, #16
   d5778:	bd10      	pop	{r4, pc}
   d577a:	bf00      	nop
   d577c:	2003e36c 	.word	0x2003e36c

000d5780 <_ZN7UbiMeshD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

UbiMesh::~UbiMesh() { delete[] _default_device_label; }
   d5780:	b510      	push	{r4, lr}
   d5782:	4604      	mov	r4, r0
   d5784:	6800      	ldr	r0, [r0, #0]
   d5786:	b108      	cbz	r0, d578c <_ZN7UbiMeshD1Ev+0xc>
   d5788:	f7fe fc8d 	bl	d40a6 <_ZdaPv>
   d578c:	4620      	mov	r0, r4
   d578e:	bd10      	pop	{r4, pc}

000d5790 <_ZN7UbiMesh3addEPKcfS1_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void UbiMesh::add(const char* variable_label, float value, const char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d5790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5794:	b0a4      	sub	sp, #144	; 0x90
   d5796:	4606      	mov	r6, r0
   d5798:	4689      	mov	r9, r1
   d579a:	ee10 aa10 	vmov	sl, s0
   d579e:	461f      	mov	r7, r3
   d57a0:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
  char _context[100];
  char _dot_timestamp_seconds[11];
  char _dot_timestamp_millis[4];

  if (context != NULL && strlen(context) > 100) {
   d57a4:	4615      	mov	r5, r2
   d57a6:	ac0b      	add	r4, sp, #44	; 0x2c
   d57a8:	b152      	cbz	r2, d57c0 <_ZN7UbiMesh3addEPKcfS1_mj+0x30>
   d57aa:	4610      	mov	r0, r2
   d57ac:	f004 fabb 	bl	d9d26 <strlen>
   d57b0:	2864      	cmp	r0, #100	; 0x64
   d57b2:	d907      	bls.n	d57c4 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
    Serial.println("[WARNING] Your Mesh context length must be lower than 100");
   d57b4:	f002 fa20 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d57b8:	491a      	ldr	r1, [pc, #104]	; (d5824 <_ZN7UbiMesh3addEPKcfS1_mj+0x94>)
   d57ba:	f001 fcec 	bl	d7196 <_ZN5Print7printlnEPKc>
   d57be:	e001      	b.n	d57c4 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
  }

  context != NULL ? sprintf(_context, "%s", context)
                  : sprintf(_context, "%s", " ");
   d57c0:	4919      	ldr	r1, [pc, #100]	; (d5828 <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d57c2:	e000      	b.n	d57c6 <_ZN7UbiMesh3addEPKcfS1_mj+0x36>
   d57c4:	4629      	mov	r1, r5
   d57c6:	4620      	mov	r0, r4
   d57c8:	f004 fa8a 	bl	d9ce0 <strcpy>
   d57cc:	ad08      	add	r5, sp, #32

  dot_timestamp_seconds != NULL
      ? sprintf(_dot_timestamp_seconds, "%lu", dot_timestamp_seconds)
      : sprintf(_dot_timestamp_seconds, "%s", " ");
   d57ce:	b12f      	cbz	r7, d57dc <_ZN7UbiMesh3addEPKcfS1_mj+0x4c>
   d57d0:	463a      	mov	r2, r7
   d57d2:	4916      	ldr	r1, [pc, #88]	; (d582c <_ZN7UbiMesh3addEPKcfS1_mj+0x9c>)
   d57d4:	4628      	mov	r0, r5
   d57d6:	f000 fd1b 	bl	d6210 <sprintf>
   d57da:	e003      	b.n	d57e4 <_ZN7UbiMesh3addEPKcfS1_mj+0x54>
   d57dc:	4912      	ldr	r1, [pc, #72]	; (d5828 <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d57de:	4628      	mov	r0, r5
   d57e0:	f004 fa7e 	bl	d9ce0 <strcpy>
   d57e4:	af07      	add	r7, sp, #28

  dot_timestamp_millis != NULL
      ? sprintf(_dot_timestamp_millis, "%d", dot_timestamp_millis)
      : sprintf(_dot_timestamp_millis, "%s", " ");
   d57e6:	f1b8 0f00 	cmp.w	r8, #0
   d57ea:	d005      	beq.n	d57f8 <_ZN7UbiMesh3addEPKcfS1_mj+0x68>
   d57ec:	4642      	mov	r2, r8
   d57ee:	4910      	ldr	r1, [pc, #64]	; (d5830 <_ZN7UbiMesh3addEPKcfS1_mj+0xa0>)
   d57f0:	4638      	mov	r0, r7
   d57f2:	f000 fd0d 	bl	d6210 <sprintf>
   d57f6:	e003      	b.n	d5800 <_ZN7UbiMesh3addEPKcfS1_mj+0x70>
   d57f8:	490b      	ldr	r1, [pc, #44]	; (d5828 <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d57fa:	4638      	mov	r0, r7
   d57fc:	f004 fa70 	bl	d9ce0 <strcpy>

  sprintf(_meshPayload, "%s|%f|%s|%s|%s", variable_label, value, _context,
          _dot_timestamp_seconds, _dot_timestamp_millis);
   d5800:	4650      	mov	r0, sl
   d5802:	9704      	str	r7, [sp, #16]
   d5804:	9503      	str	r5, [sp, #12]
   d5806:	9402      	str	r4, [sp, #8]
   d5808:	f003 fe50 	bl	d94ac <__aeabi_f2d>
   d580c:	3604      	adds	r6, #4
   d580e:	e9cd 0100 	strd	r0, r1, [sp]
   d5812:	464a      	mov	r2, r9
   d5814:	4907      	ldr	r1, [pc, #28]	; (d5834 <_ZN7UbiMesh3addEPKcfS1_mj+0xa4>)
   d5816:	4630      	mov	r0, r6
   d5818:	f000 fcfa 	bl	d6210 <sprintf>
}
   d581c:	b024      	add	sp, #144	; 0x90
   d581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5822:	bf00      	nop
   d5824:	000dbe2f 	.word	0x000dbe2f
   d5828:	000dc35e 	.word	0x000dc35e
   d582c:	000dbaf0 	.word	0x000dbaf0
   d5830:	000dc571 	.word	0x000dc571
   d5834:	000dbe69 	.word	0x000dbe69

000d5838 <_ZN7UbiMesh14_MeshReconnectEi>:

/*
  Checks Mesh network connection status
*/

bool UbiMesh::_MeshReconnect(int timeout) {
   d5838:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  int _timeout = 0;

  // Waits up to the set timeout to begin a socket exchange
  while (!Mesh.ready() && _timeout < 5000) {
   d583a:	4d11      	ldr	r5, [pc, #68]	; (d5880 <_ZN7UbiMesh14_MeshReconnectEi+0x48>)

/*
  Checks Mesh network connection status
*/

bool UbiMesh::_MeshReconnect(int timeout) {
   d583c:	f241 3489 	movw	r4, #5001	; 0x1389
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  int _timeout = 0;

  // Waits up to the set timeout to begin a socket exchange
  while (!Mesh.ready() && _timeout < 5000) {
   d5840:	480f      	ldr	r0, [pc, #60]	; (d5880 <_ZN7UbiMesh14_MeshReconnectEi+0x48>)
   d5842:	f7ff ff7f 	bl	d5744 <_ZN5spark9MeshClass5readyEv>
   d5846:	4603      	mov	r3, r0
   d5848:	b950      	cbnz	r0, d5860 <_ZN7UbiMesh14_MeshReconnectEi+0x28>
   d584a:	3c01      	subs	r4, #1
   d584c:	d008      	beq.n	d5860 <_ZN7UbiMesh14_MeshReconnectEi+0x28>
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d584e:	4602      	mov	r2, r0
   d5850:	4601      	mov	r1, r0
   d5852:	6868      	ldr	r0, [r5, #4]
   d5854:	f000 fc34 	bl	d60c0 <network_connect>
    Mesh.connect();
    _timeout++;
    delay(1);
   d5858:	2001      	movs	r0, #1
   d585a:	f001 fd53 	bl	d7304 <delay>
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  int _timeout = 0;

  // Waits up to the set timeout to begin a socket exchange
  while (!Mesh.ready() && _timeout < 5000) {
   d585e:	e7ef      	b.n	d5840 <_ZN7UbiMesh14_MeshReconnectEi+0x8>
    Mesh.connect();
    _timeout++;
    delay(1);
  }

  if (!Mesh.ready()) {
   d5860:	4807      	ldr	r0, [pc, #28]	; (d5880 <_ZN7UbiMesh14_MeshReconnectEi+0x48>)
   d5862:	f7ff ff6f 	bl	d5744 <_ZN5spark9MeshClass5readyEv>
   d5866:	4604      	mov	r4, r0
   d5868:	b938      	cbnz	r0, d587a <_ZN7UbiMesh14_MeshReconnectEi+0x42>
    if (_debugMesh) {
   d586a:	4b06      	ldr	r3, [pc, #24]	; (d5884 <_ZN7UbiMesh14_MeshReconnectEi+0x4c>)
   d586c:	781b      	ldrb	r3, [r3, #0]
   d586e:	b123      	cbz	r3, d587a <_ZN7UbiMesh14_MeshReconnectEi+0x42>
      Serial.println(
   d5870:	f002 f9c2 	bl	d7bf8 <_Z16_fetch_usbserialv>
          "A problem has raised with the device trying to open a Mesh"
          "socket");
   d5874:	4904      	ldr	r1, [pc, #16]	; (d5888 <_ZN7UbiMesh14_MeshReconnectEi+0x50>)
   d5876:	f001 fc8e 	bl	d7196 <_ZN5Print7printlnEPKc>

  return true;
#else
  return false;
#endif
}
   d587a:	4620      	mov	r0, r4
   d587c:	bd38      	pop	{r3, r4, r5, pc}
   d587e:	bf00      	nop
   d5880:	2003e52c 	.word	0x2003e52c
   d5884:	2003e364 	.word	0x2003e364
   d5888:	000dbe78 	.word	0x000dbe78

000d588c <_ZN7UbiMesh11meshPublishEPKcS1_i>:

bool UbiMesh::meshPublish(const char* channel, const char* data) {
  return meshPublish(channel, data, 5000);
}

bool UbiMesh::meshPublish(const char* channel, const char* data, int timeout) {
   d588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d588e:	4606      	mov	r6, r0
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (!Mesh.ready()) {
   d5890:	480b      	ldr	r0, [pc, #44]	; (d58c0 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x34>)

bool UbiMesh::meshPublish(const char* channel, const char* data) {
  return meshPublish(channel, data, 5000);
}

bool UbiMesh::meshPublish(const char* channel, const char* data, int timeout) {
   d5892:	460c      	mov	r4, r1
   d5894:	4615      	mov	r5, r2
   d5896:	461f      	mov	r7, r3
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (!Mesh.ready()) {
   d5898:	f7ff ff54 	bl	d5744 <_ZN5spark9MeshClass5readyEv>
   d589c:	b918      	cbnz	r0, d58a6 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x1a>
    _MeshReconnect(timeout);
   d589e:	4639      	mov	r1, r7
   d58a0:	4630      	mov	r0, r6
   d58a2:	f7ff ffc9 	bl	d5838 <_ZN7UbiMesh14_MeshReconnectEi>
  }
  if (!Mesh.ready()) {
   d58a6:	4806      	ldr	r0, [pc, #24]	; (d58c0 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x34>)
   d58a8:	f7ff ff4c 	bl	d5744 <_ZN5spark9MeshClass5readyEv>
   d58ac:	b138      	cbz	r0, d58be <_ZN7UbiMesh11meshPublishEPKcS1_i+0x32>
    return false;
  }

  bool result = Mesh.publish(channel, data);
   d58ae:	462a      	mov	r2, r5
   d58b0:	4621      	mov	r1, r4
   d58b2:	4804      	ldr	r0, [pc, #16]	; (d58c4 <_ZN7UbiMesh11meshPublishEPKcS1_i+0x38>)
   d58b4:	f002 fd5e 	bl	d8374 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d58b8:	3000      	adds	r0, #0
   d58ba:	bf18      	it	ne
   d58bc:	2001      	movne	r0, #1
  return result;
#else
  return false;
#endif
}
   d58be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d58c0:	2003e52c 	.word	0x2003e52c
   d58c4:	2003e534 	.word	0x2003e534

000d58c8 <_ZN7UbiMesh11meshPublishEPKcS1_>:
/**************************************************************************
 * Mesh handler functions
 ***************************************************************************/

bool UbiMesh::meshPublish(const char* channel, const char* data) {
  return meshPublish(channel, data, 5000);
   d58c8:	f241 3388 	movw	r3, #5000	; 0x1388
   d58cc:	f7ff bfde 	b.w	d588c <_ZN7UbiMesh11meshPublishEPKcS1_i>

000d58d0 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_>:
bool UbiMesh::meshPublishToUbidots(const char* device_label) {
  return meshPublishToUbidots(device_label, device_label);
}

bool UbiMesh::meshPublishToUbidots(const char* device_label,
                                   const char* device_name) {
   d58d0:	b530      	push	{r4, r5, lr}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (strlen(_meshPayload) <= 0) {
   d58d2:	7905      	ldrb	r5, [r0, #4]
bool UbiMesh::meshPublishToUbidots(const char* device_label) {
  return meshPublishToUbidots(device_label, device_label);
}

bool UbiMesh::meshPublishToUbidots(const char* device_label,
                                   const char* device_name) {
   d58d4:	b0c3      	sub	sp, #268	; 0x10c
   d58d6:	4604      	mov	r4, r0
   d58d8:	4613      	mov	r3, r2
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_XENON || PLATFORM_ID == PLATFORM_XENON_SOM
  if (strlen(_meshPayload) <= 0) {
   d58da:	b94d      	cbnz	r5, d58f0 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x20>
    if (_debugMesh) {
   d58dc:	4b0b      	ldr	r3, [pc, #44]	; (d590c <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x3c>)
   d58de:	7818      	ldrb	r0, [r3, #0]
   d58e0:	b190      	cbz	r0, d5908 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x38>
      Serial.println(
   d58e2:	f002 f989 	bl	d7bf8 <_Z16_fetch_usbserialv>
          "You have not added any variable value, please call the add()"
          "method first");
   d58e6:	490a      	ldr	r1, [pc, #40]	; (d5910 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x40>)
   d58e8:	f001 fc55 	bl	d7196 <_ZN5Print7printlnEPKc>
   d58ec:	4628      	mov	r0, r5
   d58ee:	e00b      	b.n	d5908 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x38>
    }
    return false;
  }
  char payload[256];
  sprintf(payload, "%s|%s|%s", device_label, device_name, _meshPayload);
   d58f0:	1d02      	adds	r2, r0, #4
   d58f2:	9200      	str	r2, [sp, #0]
   d58f4:	a802      	add	r0, sp, #8
   d58f6:	460a      	mov	r2, r1
   d58f8:	4906      	ldr	r1, [pc, #24]	; (d5914 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x44>)
   d58fa:	f000 fc89 	bl	d6210 <sprintf>
  return meshPublish(UBIDOTS_MESH_CHANNEL, payload);
   d58fe:	aa02      	add	r2, sp, #8
   d5900:	4905      	ldr	r1, [pc, #20]	; (d5918 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_+0x48>)
   d5902:	4620      	mov	r0, r4
   d5904:	f7ff ffe0 	bl	d58c8 <_ZN7UbiMesh11meshPublishEPKcS1_>
#else
  Serial.println(
      "[WARNING] Your device does not support to publish using Mesh");
#endif
}
   d5908:	b043      	add	sp, #268	; 0x10c
   d590a:	bd30      	pop	{r4, r5, pc}
   d590c:	2003e364 	.word	0x2003e364
   d5910:	000dbeb9 	.word	0x000dbeb9
   d5914:	000dbe6f 	.word	0x000dbe6f
   d5918:	000dbf02 	.word	0x000dbf02

000d591c <_ZN7UbiMesh20meshPublishToUbidotsEPKc>:
bool UbiMesh::meshPublishToUbidots() {
  return meshPublishToUbidots(_default_device_label);
}

bool UbiMesh::meshPublishToUbidots(const char* device_label) {
  return meshPublishToUbidots(device_label, device_label);
   d591c:	460a      	mov	r2, r1
   d591e:	f7ff bfd7 	b.w	d58d0 <_ZN7UbiMesh20meshPublishToUbidotsEPKcS1_>
	...

000d5924 <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
   d5924:	b508      	push	{r3, lr}
   d5926:	f000 f921 	bl	d5b6c <HAL_Pin_Map>
   d592a:	f000 f99f 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
typedef std::map<uint8_t, char*> meshMap;
static IotProtocol iotProtocolMesh = UBI_UDP;
static char* _tokenMesh;
static bool _debugMesh = false;
static int _throttlingTime = 20000;
static unsigned long time_now = millis();
   d592e:	4b01      	ldr	r3, [pc, #4]	; (d5934 <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv+0x10>)
   d5930:	6018      	str	r0, [r3, #0]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	2003e368 	.word	0x2003e368

000d5938 <_ZN6UbiUDP3getEPKcS1_>:
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) {
  return ERROR_VALUE;
}
   d5938:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5940 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d593c:	4770      	bx	lr
   d593e:	bf00      	nop
   d5940:	cda2425f 	.word	0xcda2425f

000d5944 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d5944:	7501      	strb	r1, [r0, #20]
   d5946:	4770      	bx	lr

000d5948 <_ZN6UbiUDPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
   d5948:	b530      	push	{r4, r5, lr}
               const char *token) {
   d594a:	4d06      	ldr	r5, [pc, #24]	; (d5964 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d594c:	6005      	str	r5, [r0, #0]
   d594e:	2500      	movs	r5, #0
   d5950:	7505      	strb	r5, [r0, #20]
  _host = host;
  _user_agent = user_agent;
   d5952:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
   d5954:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d5958:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
   d595a:	6185      	str	r5, [r0, #24]
  _host = host;
   d595c:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d595e:	60c3      	str	r3, [r0, #12]
  _port = port;
   d5960:	6102      	str	r2, [r0, #16]
}
   d5962:	bd30      	pop	{r4, r5, pc}
   d5964:	000dc04c 	.word	0x000dc04c

000d5968 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d5968:	b510      	push	{r4, lr}
   d596a:	4c06      	ldr	r4, [pc, #24]	; (d5984 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d596c:	f000 f8fe 	bl	d5b6c <HAL_Pin_Map>
   d5970:	4620      	mov	r0, r4
   d5972:	f000 ff89 	bl	d6888 <_ZN3UDPC1Ev>
   d5976:	4620      	mov	r0, r4
   d5978:	4a03      	ldr	r2, [pc, #12]	; (d5988 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d597a:	4904      	ldr	r1, [pc, #16]	; (d598c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
   d597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5980:	f003 ba0a 	b.w	d8d98 <__aeabi_atexit>
   d5984:	2003e370 	.word	0x2003e370
   d5988:	2003ce30 	.word	0x2003ce30
   d598c:	000d53d9 	.word	0x000d53d9

000d5990 <_ZN6UbiUDP11getServerIpEv>:

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
   d5990:	b510      	push	{r4, lr}
   d5992:	4604      	mov	r4, r0
#if (PLATFORM_ID == 12 || PLATFORM_ID == 6)  // Argon(12), Photon(6)
  return WiFi.resolve(_host);
   d5994:	684a      	ldr	r2, [r1, #4]
   d5996:	4902      	ldr	r1, [pc, #8]	; (d59a0 <_ZN6UbiUDP11getServerIpEv+0x10>)
   d5998:	f003 f8e6 	bl	d8b68 <_ZN5spark12NetworkClass7resolveEPKc>
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d599c:	4620      	mov	r0, r4
   d599e:	bd10      	pop	{r4, pc}
   d59a0:	2003e700 	.word	0x2003e700

000d59a4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d59a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d59a6:	b08f      	sub	sp, #60	; 0x3c
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d59a8:	4601      	mov	r1, r0
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d59aa:	4606      	mov	r6, r0
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d59ac:	a802      	add	r0, sp, #8
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d59ae:	461f      	mov	r7, r3
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d59b0:	f7ff ffee 	bl	d5990 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d59b4:	a802      	add	r0, sp, #8
   d59b6:	f002 f881 	bl	d7abc <_ZNK9IPAddresscvbEv>

  if (!serverIpAddress) {
   d59ba:	b9a0      	cbnz	r0, d59e6 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d59bc:	7d33      	ldrb	r3, [r6, #20]
   d59be:	b123      	cbz	r3, d59ca <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d59c0:	f002 f91a 	bl	d7bf8 <_Z16_fetch_usbserialv>
          "[Warning] Could not solve IP Address of the remote host, with your DNS setup. \
          \nUsing default Industrial Ubidots IP: 169.55.61.243");
   d59c4:	4925      	ldr	r1, [pc, #148]	; (d5a5c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb8>)
   d59c6:	f001 fbe6 	bl	d7196 <_ZN5Print7printlnEPKc>
    }
    serverIpAddress = IPAddress(169,55,61,243);
   d59ca:	23f3      	movs	r3, #243	; 0xf3
   d59cc:	9300      	str	r3, [sp, #0]
   d59ce:	2237      	movs	r2, #55	; 0x37
   d59d0:	233d      	movs	r3, #61	; 0x3d
   d59d2:	21a9      	movs	r1, #169	; 0xa9
   d59d4:	a808      	add	r0, sp, #32

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d59d6:	ad09      	add	r5, sp, #36	; 0x24
   d59d8:	f002 f894 	bl	d7b04 <_ZN9IPAddressC1Ehhhh>
   d59dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59de:	ac03      	add	r4, sp, #12
   d59e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59e2:	682b      	ldr	r3, [r5, #0]
   d59e4:	7023      	strb	r3, [r4, #0]
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d59e6:	2200      	movs	r2, #0
   d59e8:	f240 21bd 	movw	r1, #701	; 0x2bd
   d59ec:	481c      	ldr	r0, [pc, #112]	; (d5a60 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d59ee:	f000 ff7b 	bl	d68e8 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d59f2:	2200      	movs	r2, #0
   d59f4:	f242 3134 	movw	r1, #9012	; 0x2334
   d59f8:	4819      	ldr	r0, [pc, #100]	; (d5a60 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d59fa:	f000 fcec 	bl	d63d6 <_ZN3UDP5beginEtm>
   d59fe:	ad03      	add	r5, sp, #12
   d5a00:	4b18      	ldr	r3, [pc, #96]	; (d5a64 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d5a02:	9308      	str	r3, [sp, #32]
   d5a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a06:	ac09      	add	r4, sp, #36	; 0x24
   d5a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a0a:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d5a0c:	4814      	ldr	r0, [pc, #80]	; (d5a60 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d5a0e:	7023      	strb	r3, [r4, #0]
   d5a10:	f242 3234 	movw	r2, #9012	; 0x2334
   d5a14:	a908      	add	r1, sp, #32
   d5a16:	f000 ff81 	bl	d691c <_ZN3UDP11beginPacketE9IPAddresst>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
   d5a1a:	b168      	cbz	r0, d5a38 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5a1c:	b167      	cbz	r7, d5a38 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
      return write((const uint8_t *)str, strlen(str));
   d5a1e:	4638      	mov	r0, r7
   d5a20:	f004 f981 	bl	d9d26 <strlen>
   d5a24:	4639      	mov	r1, r7
   d5a26:	4602      	mov	r2, r0
   d5a28:	480d      	ldr	r0, [pc, #52]	; (d5a60 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d5a2a:	f000 fd30 	bl	d648e <_ZN3UDP5writeEPKhj>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d5a2e:	b118      	cbz	r0, d5a38 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
   d5a30:	480b      	ldr	r0, [pc, #44]	; (d5a60 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d5a32:	f000 fd8b 	bl	d654c <_ZN3UDP9endPacketEv>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d5a36:	b958      	cbnz	r0, d5a50 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
    if (_debug) {
   d5a38:	7d33      	ldrb	r3, [r6, #20]
   d5a3a:	b123      	cbz	r3, d5a46 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa2>
      Serial.println("ERROR sending values with UDP");
   d5a3c:	f002 f8dc 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d5a40:	4909      	ldr	r1, [pc, #36]	; (d5a68 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d5a42:	f001 fba8 	bl	d7196 <_ZN5Print7printlnEPKc>
    }
    _client_udp_ubi.stop();
   d5a46:	4806      	ldr	r0, [pc, #24]	; (d5a60 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d5a48:	f000 fd13 	bl	d6472 <_ZN3UDP4stopEv>
    return false;
   d5a4c:	2000      	movs	r0, #0
   d5a4e:	e003      	b.n	d5a58 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>
  }

  _client_udp_ubi.stop();
   d5a50:	4803      	ldr	r0, [pc, #12]	; (d5a60 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d5a52:	f000 fd0e 	bl	d6472 <_ZN3UDP4stopEv>
  return true;
   d5a56:	2001      	movs	r0, #1
}
   d5a58:	b00f      	add	sp, #60	; 0x3c
   d5a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a5c:	000dbf97 	.word	0x000dbf97
   d5a60:	2003e370 	.word	0x2003e370
   d5a64:	000dc404 	.word	0x000dc404
   d5a68:	000dc023 	.word	0x000dc023

000d5a6c <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d5a6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5a74 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d5a70:	4770      	bx	lr
   d5a72:	bf00      	nop
   d5a74:	cda2425f 	.word	0xcda2425f

000d5a78 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d5a78:	7401      	strb	r1, [r0, #16]
   d5a7a:	4770      	bx	lr

000d5a7c <_ZN11UbiParticleC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
   d5a7c:	b510      	push	{r4, lr}
                         const char* user_agent, const char* token) {
   d5a7e:	4c04      	ldr	r4, [pc, #16]	; (d5a90 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d5a80:	6004      	str	r4, [r0, #0]
  _host = host;
  _user_agent = user_agent;
   d5a82:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
   d5a84:	2400      	movs	r4, #0
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d5a86:	9b02      	ldr	r3, [sp, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
   d5a88:	7404      	strb	r4, [r0, #16]
  _host = host;
   d5a8a:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d5a8c:	60c3      	str	r3, [r0, #12]
}
   d5a8e:	bd10      	pop	{r4, pc}
   d5a90:	000dc060 	.word	0x000dc060

000d5a94 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d5a94:	b570      	push	{r4, r5, r6, lr}
   d5a96:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5a98:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d5a9a:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5a9c:	f000 fae2 	bl	d6064 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d5aa0:	b908      	cbnz	r0, d5aa6 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
   d5aa2:	2000      	movs	r0, #0
   d5aa4:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
   d5aa6:	2c00      	cmp	r4, #0
   d5aa8:	dd03      	ble.n	d5ab2 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
   d5aaa:	f000 f8df 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
   d5aae:	4605      	mov	r5, r0
   d5ab0:	e000      	b.n	d5ab4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
   d5ab2:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5ab4:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5ab6:	b93b      	cbnz	r3, d5ac8 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
   d5ab8:	2c00      	cmp	r4, #0
   d5aba:	dd07      	ble.n	d5acc <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d5abc:	f000 f8d6 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
   d5ac0:	1b40      	subs	r0, r0, r5
   d5ac2:	42a0      	cmp	r0, r4
   d5ac4:	d302      	bcc.n	d5acc <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d5ac6:	e7ec      	b.n	d5aa2 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
   d5ac8:	2001      	movs	r0, #1
   d5aca:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d5acc:	f000 fb50 	bl	d6170 <spark_process>
   d5ad0:	e7f0      	b.n	d5ab4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>

000d5ad2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
/*
 * Wrapper of the Publish() method from particle to trigger webhooks
 */

bool UbiParticle::sendData(const char* device_label, const char* device_name,
                           char* payload, UbiFlags* flags) {
   d5ad2:	b530      	push	{r4, r5, lr}
   d5ad4:	b085      	sub	sp, #20
   d5ad6:	461a      	mov	r2, r3
   d5ad8:	9b08      	ldr	r3, [sp, #32]
   d5ada:	781b      	ldrb	r3, [r3, #0]
   d5adc:	f88d 3000 	strb.w	r3, [sp]
   d5ae0:	a802      	add	r0, sp, #8
   d5ae2:	233c      	movs	r3, #60	; 0x3c
   d5ae4:	f001 fe0e 	bl	d7704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5ae8:	9c02      	ldr	r4, [sp, #8]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
   d5aea:	2100      	movs	r1, #0
   d5aec:	4620      	mov	r0, r4
   d5aee:	f7ff ffd1 	bl	d5a94 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
   d5af2:	7863      	ldrb	r3, [r4, #1]
   d5af4:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
   d5af8:	b133      	cbz	r3, d5b08 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
   d5afa:	2100      	movs	r1, #0
   d5afc:	4620      	mov	r0, r4
   d5afe:	f7ff ffc9 	bl	d5a94 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5b02:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
   d5b04:	2b01      	cmp	r3, #1
   d5b06:	d013      	beq.n	d5b30 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5e>
            return result_;
        }
        return std::move(defaultValue);
   d5b08:	2500      	movs	r5, #0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5b0a:	9c03      	ldr	r4, [sp, #12]
   d5b0c:	b194      	cbz	r4, d5b34 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5b0e:	6863      	ldr	r3, [r4, #4]
   d5b10:	3b01      	subs	r3, #1
   d5b12:	6063      	str	r3, [r4, #4]
   d5b14:	b973      	cbnz	r3, d5b34 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
        {
          _M_dispose();
   d5b16:	6823      	ldr	r3, [r4, #0]
   d5b18:	4620      	mov	r0, r4
   d5b1a:	689b      	ldr	r3, [r3, #8]
   d5b1c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5b1e:	68a3      	ldr	r3, [r4, #8]
   d5b20:	3b01      	subs	r3, #1
   d5b22:	60a3      	str	r3, [r4, #8]
   d5b24:	b933      	cbnz	r3, d5b34 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
            _M_destroy();
   d5b26:	6823      	ldr	r3, [r4, #0]
   d5b28:	4620      	mov	r0, r4
   d5b2a:	68db      	ldr	r3, [r3, #12]
   d5b2c:	4798      	blx	r3
  return Particle.publish(device_label, payload, flags->particle_flag);
   d5b2e:	e001      	b.n	d5b34 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
   d5b30:	7b25      	ldrb	r5, [r4, #12]
   d5b32:	e7ea      	b.n	d5b0a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x38>
}
   d5b34:	4628      	mov	r0, r5
   d5b36:	b005      	add	sp, #20
   d5b38:	bd30      	pop	{r4, r5, pc}

000d5b3a <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
   d5b3a:	f000 b817 	b.w	d5b6c <HAL_Pin_Map>

000d5b3e <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d5b3e:	f000 b815 	b.w	d5b6c <HAL_Pin_Map>

000d5b42 <_GLOBAL__sub_I__Z10BlynkResetv>:
   d5b42:	f000 b813 	b.w	d5b6c <HAL_Pin_Map>

000d5b46 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d5b46:	f000 b811 	b.w	d5b6c <HAL_Pin_Map>
	...

000d5b4c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <netdb_freeaddrinfo+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	689b      	ldr	r3, [r3, #8]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	00030268 	.word	0x00030268

000d5b5c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <netdb_getaddrinfo+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	68db      	ldr	r3, [r3, #12]
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	00030268 	.word	0x00030268

000d5b6c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <HAL_Pin_Map+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	681b      	ldr	r3, [r3, #0]
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	0003022c 	.word	0x0003022c

000d5b7c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <HAL_Validate_Pin_Function+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	685b      	ldr	r3, [r3, #4]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	0003022c 	.word	0x0003022c

000d5b8c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <HAL_Pin_Mode+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	689b      	ldr	r3, [r3, #8]
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	0003022c 	.word	0x0003022c

000d5b9c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <HAL_Get_Pin_Mode+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	68db      	ldr	r3, [r3, #12]
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	0003022c 	.word	0x0003022c

000d5bac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <HAL_GPIO_Write+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	691b      	ldr	r3, [r3, #16]
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	0003022c 	.word	0x0003022c

000d5bbc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <HAL_ADC_Read+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	0003022c 	.word	0x0003022c

000d5bcc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <HAL_SPI_Init+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	69db      	ldr	r3, [r3, #28]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	00030230 	.word	0x00030230

000d5bdc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <HAL_SPI_Is_Enabled+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	6a1b      	ldr	r3, [r3, #32]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	00030230 	.word	0x00030230

000d5bec <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <if_name_to_index+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	691b      	ldr	r3, [r3, #16]
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	0003026c 	.word	0x0003026c

000d5bfc <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <if_index_to_name+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	695b      	ldr	r3, [r3, #20]
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	0003026c 	.word	0x0003026c

000d5c0c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <if_get_by_index+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	699b      	ldr	r3, [r3, #24]
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	0003026c 	.word	0x0003026c

000d5c1c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <if_get_addrs+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	0003026c 	.word	0x0003026c

000d5c2c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <if_free_if_addrs+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	0003026c 	.word	0x0003026c

000d5c3c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <HAL_RNG_GetRandomNumber+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	685b      	ldr	r3, [r3, #4]
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	00030218 	.word	0x00030218

000d5c4c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <HAL_Delay_Milliseconds+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	689b      	ldr	r3, [r3, #8]
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	00030218 	.word	0x00030218

000d5c5c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <HAL_Delay_Microseconds+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	68db      	ldr	r3, [r3, #12]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030218 	.word	0x00030218

000d5c6c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	695b      	ldr	r3, [r3, #20]
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030218 	.word	0x00030218

000d5c7c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <HAL_Core_System_Reset_Ex+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030234 	.word	0x00030234

000d5c8c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <hal_ble_stack_init+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	689b      	ldr	r3, [r3, #8]
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030278 	.word	0x00030278

000d5c9c <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <hal_ble_gap_set_tx_power+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	00030278 	.word	0x00030278

000d5cac <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b03      	ldr	r3, [pc, #12]	; (d5cbc <hal_ble_gap_disconnect+0x10>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5cb6:	9301      	str	r3, [sp, #4]
   d5cb8:	bd08      	pop	{r3, pc}
   d5cba:	0000      	.short	0x0000
   d5cbc:	00030278 	.word	0x00030278

000d5cc0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b03      	ldr	r3, [pc, #12]	; (d5cd0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5cca:	9301      	str	r3, [sp, #4]
   d5ccc:	bd08      	pop	{r3, pc}
   d5cce:	0000      	.short	0x0000
   d5cd0:	00030278 	.word	0x00030278

000d5cd4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <os_thread_create+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	685b      	ldr	r3, [r3, #4]
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030248 	.word	0x00030248

000d5ce4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <os_thread_is_current+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	689b      	ldr	r3, [r3, #8]
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	00030248 	.word	0x00030248

000d5cf4 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <os_thread_yield+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	68db      	ldr	r3, [r3, #12]
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	00030248 	.word	0x00030248

000d5d04 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <os_thread_join+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	691b      	ldr	r3, [r3, #16]
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	00030248 	.word	0x00030248

000d5d14 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <os_thread_cleanup+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	695b      	ldr	r3, [r3, #20]
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	00030248 	.word	0x00030248

000d5d24 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <os_thread_scheduling+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	69db      	ldr	r3, [r3, #28]
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030248 	.word	0x00030248

000d5d34 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <os_timer_create+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	6a1b      	ldr	r3, [r3, #32]
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030248 	.word	0x00030248

000d5d44 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <os_timer_destroy+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030248 	.word	0x00030248

000d5d54 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <os_timer_get_id+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030248 	.word	0x00030248

000d5d64 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <os_timer_change+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030248 	.word	0x00030248

000d5d74 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <os_mutex_create+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030248 	.word	0x00030248

000d5d84 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <os_mutex_recursive_create+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030248 	.word	0x00030248

000d5d94 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <os_mutex_recursive_lock+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030248 	.word	0x00030248

000d5da4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <os_mutex_recursive_unlock+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030248 	.word	0x00030248

000d5db4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <os_thread_exit+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030248 	.word	0x00030248

000d5dc4 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <os_timer_set_id+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030248 	.word	0x00030248

000d5dd4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <inet_inet_ntop+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	695b      	ldr	r3, [r3, #20]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	00030264 	.word	0x00030264

000d5de4 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <inet_inet_pton+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	699b      	ldr	r3, [r3, #24]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	00030264 	.word	0x00030264

000d5df4 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <inet_htonl+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	6a1b      	ldr	r3, [r3, #32]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030264 	.word	0x00030264

000d5e04 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <inet_ntohs+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	00030264 	.word	0x00030264

000d5e14 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <inet_htons+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030264 	.word	0x00030264

000d5e24 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <HAL_USART_Init+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	681b      	ldr	r3, [r3, #0]
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	0003023c 	.word	0x0003023c

000d5e34 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <HAL_USART_Write_Data+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	68db      	ldr	r3, [r3, #12]
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	0003023c 	.word	0x0003023c

000d5e44 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <HAL_USART_Available_Data+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	691b      	ldr	r3, [r3, #16]
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	0003023c 	.word	0x0003023c

000d5e54 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <HAL_USART_Read_Data+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	695b      	ldr	r3, [r3, #20]
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	0003023c 	.word	0x0003023c

000d5e64 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <HAL_USART_Peek_Data+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	699b      	ldr	r3, [r3, #24]
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	0003023c 	.word	0x0003023c

000d5e74 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <HAL_USART_Flush_Data+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	69db      	ldr	r3, [r3, #28]
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	0003023c 	.word	0x0003023c

000d5e84 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <HAL_USART_Is_Enabled+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	6a1b      	ldr	r3, [r3, #32]
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	0003023c 	.word	0x0003023c

000d5e94 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <HAL_USART_Available_Data_For_Write+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	0003023c 	.word	0x0003023c

000d5ea4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <HAL_I2C_Write_Data+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	6a1b      	ldr	r3, [r3, #32]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	00030228 	.word	0x00030228

000d5eb4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <HAL_I2C_Available_Data+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	00030228 	.word	0x00030228

000d5ec4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <HAL_I2C_Read_Data+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	00030228 	.word	0x00030228

000d5ed4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <HAL_I2C_Peek_Data+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	00030228 	.word	0x00030228

000d5ee4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <HAL_I2C_Flush_Data+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	00030228 	.word	0x00030228

000d5ef4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <HAL_I2C_Is_Enabled+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	00030228 	.word	0x00030228

000d5f04 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <HAL_I2C_Init+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	00030228 	.word	0x00030228

000d5f14 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b02      	ldr	r3, [pc, #8]	; (d5f20 <sock_bind+0xc>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	685b      	ldr	r3, [r3, #4]
   d5f1c:	9301      	str	r3, [sp, #4]
   d5f1e:	bd08      	pop	{r3, pc}
   d5f20:	00030238 	.word	0x00030238

000d5f24 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5f24:	b508      	push	{r3, lr}
   d5f26:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <sock_setsockopt+0xc>)
   d5f28:	681b      	ldr	r3, [r3, #0]
   d5f2a:	699b      	ldr	r3, [r3, #24]
   d5f2c:	9301      	str	r3, [sp, #4]
   d5f2e:	bd08      	pop	{r3, pc}
   d5f30:	00030238 	.word	0x00030238

000d5f34 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5f34:	b508      	push	{r3, lr}
   d5f36:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <sock_close+0xc>)
   d5f38:	681b      	ldr	r3, [r3, #0]
   d5f3a:	69db      	ldr	r3, [r3, #28]
   d5f3c:	9301      	str	r3, [sp, #4]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	00030238 	.word	0x00030238

000d5f44 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5f44:	b508      	push	{r3, lr}
   d5f46:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <sock_connect+0xc>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	6a1b      	ldr	r3, [r3, #32]
   d5f4c:	9301      	str	r3, [sp, #4]
   d5f4e:	bd08      	pop	{r3, pc}
   d5f50:	00030238 	.word	0x00030238

000d5f54 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <sock_recv+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	00030238 	.word	0x00030238

000d5f64 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <sock_recvfrom+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	00030238 	.word	0x00030238

000d5f74 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <sock_send+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	00030238 	.word	0x00030238

000d5f84 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <sock_sendto+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	00030238 	.word	0x00030238

000d5f94 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <sock_socket+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	00030238 	.word	0x00030238

000d5fa4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <HAL_USB_USART_Init+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	681b      	ldr	r3, [r3, #0]
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	0003024c 	.word	0x0003024c

000d5fb4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <HAL_USB_USART_Begin+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	685b      	ldr	r3, [r3, #4]
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	0003024c 	.word	0x0003024c

000d5fc4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <HAL_USB_USART_Available_Data+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	691b      	ldr	r3, [r3, #16]
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	0003024c 	.word	0x0003024c

000d5fd4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	695b      	ldr	r3, [r3, #20]
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	0003024c 	.word	0x0003024c

000d5fe4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <HAL_USB_USART_Receive_Data+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	699b      	ldr	r3, [r3, #24]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	0003024c 	.word	0x0003024c

000d5ff4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <HAL_USB_USART_Send_Data+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	69db      	ldr	r3, [r3, #28]
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	0003024c 	.word	0x0003024c

000d6004 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <HAL_USB_USART_Flush_Data+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	6a1b      	ldr	r3, [r3, #32]
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	0003024c 	.word	0x0003024c

000d6014 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <panic_+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	00030260 	.word	0x00030260

000d6024 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <log_message+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	00030260 	.word	0x00030260

000d6034 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <set_system_mode+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	685b      	ldr	r3, [r3, #4]
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	00030220 	.word	0x00030220

000d6044 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <system_delay_ms+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	695b      	ldr	r3, [r3, #20]
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	00030220 	.word	0x00030220

000d6054 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <system_thread_set_state+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	00030220 	.word	0x00030220

000d6064 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <application_thread_current+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	00030220 	.word	0x00030220

000d6074 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <application_thread_invoke+0xc>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d607c:	9301      	str	r3, [sp, #4]
   d607e:	bd08      	pop	{r3, pc}
   d6080:	00030220 	.word	0x00030220

000d6084 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b03      	ldr	r3, [pc, #12]	; (d6094 <system_ctrl_set_app_request_handler+0x10>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d608e:	9301      	str	r3, [sp, #4]
   d6090:	bd08      	pop	{r3, pc}
   d6092:	0000      	.short	0x0000
   d6094:	00030220 	.word	0x00030220

000d6098 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b03      	ldr	r3, [pc, #12]	; (d60a8 <system_ctrl_set_result+0x10>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d60a2:	9301      	str	r3, [sp, #4]
   d60a4:	bd08      	pop	{r3, pc}
   d60a6:	0000      	.short	0x0000
   d60a8:	00030220 	.word	0x00030220

000d60ac <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b03      	ldr	r3, [pc, #12]	; (d60bc <system_invoke_event_handler+0x10>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d60b6:	9301      	str	r3, [sp, #4]
   d60b8:	bd08      	pop	{r3, pc}
   d60ba:	0000      	.short	0x0000
   d60bc:	00030220 	.word	0x00030220

000d60c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d60c0:	b508      	push	{r3, lr}
   d60c2:	4b02      	ldr	r3, [pc, #8]	; (d60cc <network_connect+0xc>)
   d60c4:	681b      	ldr	r3, [r3, #0]
   d60c6:	685b      	ldr	r3, [r3, #4]
   d60c8:	9301      	str	r3, [sp, #4]
   d60ca:	bd08      	pop	{r3, pc}
   d60cc:	00030240 	.word	0x00030240

000d60d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d60d0:	b508      	push	{r3, lr}
   d60d2:	4b02      	ldr	r3, [pc, #8]	; (d60dc <network_connecting+0xc>)
   d60d4:	681b      	ldr	r3, [r3, #0]
   d60d6:	689b      	ldr	r3, [r3, #8]
   d60d8:	9301      	str	r3, [sp, #4]
   d60da:	bd08      	pop	{r3, pc}
   d60dc:	00030240 	.word	0x00030240

000d60e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d60e0:	b508      	push	{r3, lr}
   d60e2:	4b02      	ldr	r3, [pc, #8]	; (d60ec <network_disconnect+0xc>)
   d60e4:	681b      	ldr	r3, [r3, #0]
   d60e6:	68db      	ldr	r3, [r3, #12]
   d60e8:	9301      	str	r3, [sp, #4]
   d60ea:	bd08      	pop	{r3, pc}
   d60ec:	00030240 	.word	0x00030240

000d60f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d60f0:	b508      	push	{r3, lr}
   d60f2:	4b02      	ldr	r3, [pc, #8]	; (d60fc <network_ready+0xc>)
   d60f4:	681b      	ldr	r3, [r3, #0]
   d60f6:	691b      	ldr	r3, [r3, #16]
   d60f8:	9301      	str	r3, [sp, #4]
   d60fa:	bd08      	pop	{r3, pc}
   d60fc:	00030240 	.word	0x00030240

000d6100 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6100:	b508      	push	{r3, lr}
   d6102:	4b02      	ldr	r3, [pc, #8]	; (d610c <network_on+0xc>)
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	695b      	ldr	r3, [r3, #20]
   d6108:	9301      	str	r3, [sp, #4]
   d610a:	bd08      	pop	{r3, pc}
   d610c:	00030240 	.word	0x00030240

000d6110 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6110:	b508      	push	{r3, lr}
   d6112:	4b02      	ldr	r3, [pc, #8]	; (d611c <network_off+0xc>)
   d6114:	681b      	ldr	r3, [r3, #0]
   d6116:	699b      	ldr	r3, [r3, #24]
   d6118:	9301      	str	r3, [sp, #4]
   d611a:	bd08      	pop	{r3, pc}
   d611c:	00030240 	.word	0x00030240

000d6120 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b02      	ldr	r3, [pc, #8]	; (d612c <network_listen+0xc>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	69db      	ldr	r3, [r3, #28]
   d6128:	9301      	str	r3, [sp, #4]
   d612a:	bd08      	pop	{r3, pc}
   d612c:	00030240 	.word	0x00030240

000d6130 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6130:	b508      	push	{r3, lr}
   d6132:	4b02      	ldr	r3, [pc, #8]	; (d613c <network_listening+0xc>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	6a1b      	ldr	r3, [r3, #32]
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	bd08      	pop	{r3, pc}
   d613c:	00030240 	.word	0x00030240

000d6140 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6140:	b508      	push	{r3, lr}
   d6142:	4b02      	ldr	r3, [pc, #8]	; (d614c <network_set_listen_timeout+0xc>)
   d6144:	681b      	ldr	r3, [r3, #0]
   d6146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6148:	9301      	str	r3, [sp, #4]
   d614a:	bd08      	pop	{r3, pc}
   d614c:	00030240 	.word	0x00030240

000d6150 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <network_get_listen_timeout+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	00030240 	.word	0x00030240

000d6160 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <spark_function+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	685b      	ldr	r3, [r3, #4]
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	00030244 	.word	0x00030244

000d6170 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <spark_process+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	689b      	ldr	r3, [r3, #8]
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	00030244 	.word	0x00030244

000d6180 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <spark_cloud_flag_connected+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	695b      	ldr	r3, [r3, #20]
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	00030244 	.word	0x00030244

000d6190 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <spark_deviceID+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	69db      	ldr	r3, [r3, #28]
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	00030244 	.word	0x00030244

000d61a0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <spark_send_event+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	6a1b      	ldr	r3, [r3, #32]
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	00030244 	.word	0x00030244

000d61b0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <spark_subscribe+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	00030244 	.word	0x00030244

000d61c0 <spark_set_connection_property>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <spark_set_connection_property+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	00030244 	.word	0x00030244

000d61d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <spark_set_random_seed_from_cloud_handler+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	00030244 	.word	0x00030244

000d61e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <malloc+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	681b      	ldr	r3, [r3, #0]
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	0003021c 	.word	0x0003021c

000d61f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <free+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	685b      	ldr	r3, [r3, #4]
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	0003021c 	.word	0x0003021c

000d6200 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <realloc+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	689b      	ldr	r3, [r3, #8]
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	0003021c 	.word	0x0003021c

000d6210 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <sprintf+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	68db      	ldr	r3, [r3, #12]
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	0003021c 	.word	0x0003021c

000d6220 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <vsnprintf+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	0003021c 	.word	0x0003021c

000d6230 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <abort+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	0003021c 	.word	0x0003021c

000d6240 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <_malloc_r+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	0003021c 	.word	0x0003021c

000d6250 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <__errno+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	0003021c 	.word	0x0003021c

000d6260 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6260:	2200      	movs	r2, #0
   d6262:	4611      	mov	r1, r2
   d6264:	6840      	ldr	r0, [r0, #4]
   d6266:	f7ff bf63 	b.w	d6130 <network_listening>

000d626a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d626a:	2200      	movs	r2, #0
   d626c:	4611      	mov	r1, r2
   d626e:	6840      	ldr	r0, [r0, #4]
   d6270:	f7ff bf6e 	b.w	d6150 <network_get_listen_timeout>

000d6274 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6274:	2200      	movs	r2, #0
   d6276:	6840      	ldr	r0, [r0, #4]
   d6278:	f7ff bf62 	b.w	d6140 <network_set_listen_timeout>

000d627c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d627c:	2200      	movs	r2, #0
   d627e:	f081 0101 	eor.w	r1, r1, #1
   d6282:	6840      	ldr	r0, [r0, #4]
   d6284:	f7ff bf4c 	b.w	d6120 <network_listen>

000d6288 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6288:	2300      	movs	r3, #0
   d628a:	461a      	mov	r2, r3
   d628c:	4619      	mov	r1, r3
   d628e:	6840      	ldr	r0, [r0, #4]
   d6290:	f7ff bf3e 	b.w	d6110 <network_off>

000d6294 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6294:	2300      	movs	r3, #0
   d6296:	461a      	mov	r2, r3
   d6298:	4619      	mov	r1, r3
   d629a:	6840      	ldr	r0, [r0, #4]
   d629c:	f7ff bf30 	b.w	d6100 <network_on>

000d62a0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d62a0:	2200      	movs	r2, #0
   d62a2:	4611      	mov	r1, r2
   d62a4:	6840      	ldr	r0, [r0, #4]
   d62a6:	f7ff bf23 	b.w	d60f0 <network_ready>

000d62aa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d62aa:	2200      	movs	r2, #0
   d62ac:	4611      	mov	r1, r2
   d62ae:	6840      	ldr	r0, [r0, #4]
   d62b0:	f7ff bf0e 	b.w	d60d0 <network_connecting>

000d62b4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d62b4:	2200      	movs	r2, #0
   d62b6:	2102      	movs	r1, #2
   d62b8:	6840      	ldr	r0, [r0, #4]
   d62ba:	f7ff bf11 	b.w	d60e0 <network_disconnect>

000d62be <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d62be:	2300      	movs	r3, #0
   d62c0:	461a      	mov	r2, r3
   d62c2:	6840      	ldr	r0, [r0, #4]
   d62c4:	f7ff befc 	b.w	d60c0 <network_connect>

000d62c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d62c8:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d62ca:	2203      	movs	r2, #3
   d62cc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d62ce:	4a02      	ldr	r2, [pc, #8]	; (d62d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d62d0:	601a      	str	r2, [r3, #0]
   d62d2:	4770      	bx	lr
   d62d4:	2003e3bc 	.word	0x2003e3bc
   d62d8:	000dc074 	.word	0x000dc074

000d62dc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d62dc:	4770      	bx	lr

000d62de <_ZN8SPIClassD0Ev>:
   d62de:	b510      	push	{r4, lr}
   d62e0:	2110      	movs	r1, #16
   d62e2:	4604      	mov	r4, r0
   d62e4:	f002 fd66 	bl	d8db4 <_ZdlPvj>
   d62e8:	4620      	mov	r0, r4
   d62ea:	bd10      	pop	{r4, pc}

000d62ec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d62ec:	b570      	push	{r4, r5, r6, lr}
   d62ee:	4b08      	ldr	r3, [pc, #32]	; (d6310 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d62f0:	6003      	str	r3, [r0, #0]
   d62f2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d62f4:	2500      	movs	r5, #0
   d62f6:	460e      	mov	r6, r1
   d62f8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d62fc:	f7ff fd3a 	bl	d5d74 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6300:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6302:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6304:	f7ff fc62 	bl	d5bcc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6308:	60a5      	str	r5, [r4, #8]
}
   d630a:	4620      	mov	r0, r4
   d630c:	bd70      	pop	{r4, r5, r6, pc}
   d630e:	bf00      	nop
   d6310:	000dc0a8 	.word	0x000dc0a8

000d6314 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6314:	7900      	ldrb	r0, [r0, #4]
   d6316:	f7ff bc61 	b.w	d5bdc <HAL_SPI_Is_Enabled>

000d631a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d631a:	4601      	mov	r1, r0
   d631c:	2200      	movs	r2, #0
   d631e:	208c      	movs	r0, #140	; 0x8c
   d6320:	f7ff bcac 	b.w	d5c7c <HAL_Core_System_Reset_Ex>

000d6324 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d6324:	2000      	movs	r0, #0
   d6326:	f7ff bff8 	b.w	d631a <_ZN11SystemClass5resetEm>
	...

000d632c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d632c:	4b04      	ldr	r3, [pc, #16]	; (d6340 <_GLOBAL__sub_I_System+0x14>)
   d632e:	2000      	movs	r0, #0
   d6330:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6334:	7018      	strb	r0, [r3, #0]
   d6336:	8058      	strh	r0, [r3, #2]
   d6338:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d633a:	f7ff be7b 	b.w	d6034 <set_system_mode>
   d633e:	bf00      	nop
   d6340:	2003e3c4 	.word	0x2003e3c4

000d6344 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6344:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6346:	6804      	ldr	r4, [r0, #0]
   d6348:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d634a:	46a4      	mov	ip, r4
    }
   d634c:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6350:	4760      	bx	ip

000d6352 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d6352:	6803      	ldr	r3, [r0, #0]
   d6354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6356:	4718      	bx	r3

000d6358 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6358:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d635a:	4770      	bx	lr

000d635c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d635c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d635e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d6360:	1a10      	subs	r0, r2, r0
   d6362:	4770      	bx	lr

000d6364 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6364:	b513      	push	{r0, r1, r4, lr}
   d6366:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6368:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d636a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d636e:	68d4      	ldr	r4, [r2, #12]
   d6370:	4619      	mov	r1, r3
   d6372:	2201      	movs	r2, #1
   d6374:	47a0      	blx	r4
}
   d6376:	b002      	add	sp, #8
   d6378:	bd10      	pop	{r4, pc}

000d637a <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d637a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d637c:	6803      	ldr	r3, [r0, #0]
   d637e:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d6380:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d6382:	4798      	blx	r3
   d6384:	b128      	cbz	r0, d6392 <_ZN3UDP4readEv+0x18>
   d6386:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6388:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d638a:	1c59      	adds	r1, r3, #1
   d638c:	86e1      	strh	r1, [r4, #54]	; 0x36
   d638e:	5cd0      	ldrb	r0, [r2, r3]
   d6390:	bd10      	pop	{r4, pc}
   d6392:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6396:	bd10      	pop	{r4, pc}

000d6398 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6398:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d639a:	6803      	ldr	r3, [r0, #0]
   d639c:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d639e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d63a0:	4798      	blx	r3
   d63a2:	b118      	cbz	r0, d63ac <_ZN3UDP4peekEv+0x14>
   d63a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d63a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d63a8:	5cd0      	ldrb	r0, [r2, r3]
   d63aa:	bd10      	pop	{r4, pc}
   d63ac:	f04f 30ff 	mov.w	r0, #4294967295
}
   d63b0:	bd10      	pop	{r4, pc}

000d63b2 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d63b2:	4770      	bx	lr

000d63b4 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d63b4:	b410      	push	{r4}
   d63b6:	4603      	mov	r3, r0
   d63b8:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d63ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d63bc:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d63be:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d63c0:	6803      	ldr	r3, [r0, #0]
   d63c2:	1a52      	subs	r2, r2, r1
   d63c4:	68db      	ldr	r3, [r3, #12]
   d63c6:	4421      	add	r1, r4
}
   d63c8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d63cc:	4718      	bx	r3

000d63ce <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d63ce:	f1a0 0010 	sub.w	r0, r0, #16
   d63d2:	f7ff bfef 	b.w	d63b4 <_ZNK3UDP7printToER5Print>

000d63d6 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d63d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d63d8:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d63da:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d63dc:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d63de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d63e0:	4604      	mov	r4, r0
   d63e2:	460f      	mov	r7, r1
   d63e4:	4615      	mov	r5, r2
    stop();
   d63e6:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d63e8:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d63ea:	4632      	mov	r2, r6
   d63ec:	2100      	movs	r1, #0
   d63ee:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d63f0:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d63f2:	f003 fc2c 	bl	d9c4e <memset>
    saddr.sin6_len = sizeof(saddr);
   d63f6:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d63fa:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d63fc:	260a      	movs	r6, #10
   d63fe:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d6402:	f7ff fd07 	bl	d5e14 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6406:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6408:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d640c:	2102      	movs	r1, #2
   d640e:	4630      	mov	r0, r6
   d6410:	f7ff fdc0 	bl	d5f94 <sock_socket>

    if (_sock < 0) {
   d6414:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6416:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d6418:	db24      	blt.n	d6464 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d641a:	2204      	movs	r2, #4
   d641c:	9200      	str	r2, [sp, #0]
   d641e:	ab02      	add	r3, sp, #8
   d6420:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6424:	f7ff fd7e 	bl	d5f24 <sock_setsockopt>
   d6428:	b9e0      	cbnz	r0, d6464 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d642a:	b195      	cbz	r5, d6452 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d642c:	9003      	str	r0, [sp, #12]
   d642e:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d6432:	a903      	add	r1, sp, #12
   d6434:	b2e8      	uxtb	r0, r5
   d6436:	f7ff fbe1 	bl	d5bfc <if_index_to_name>
   d643a:	b998      	cbnz	r0, d6464 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d643c:	2306      	movs	r3, #6
   d643e:	9300      	str	r3, [sp, #0]
   d6440:	f241 020b 	movw	r2, #4107	; 0x100b
   d6444:	ab03      	add	r3, sp, #12
   d6446:	f640 71ff 	movw	r1, #4095	; 0xfff
   d644a:	6960      	ldr	r0, [r4, #20]
   d644c:	f7ff fd6a 	bl	d5f24 <sock_setsockopt>
   d6450:	b940      	cbnz	r0, d6464 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d6452:	221c      	movs	r2, #28
   d6454:	a905      	add	r1, sp, #20
   d6456:	6960      	ldr	r0, [r4, #20]
   d6458:	f7ff fd5c 	bl	d5f14 <sock_bind>
   d645c:	b910      	cbnz	r0, d6464 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d645e:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d6460:	2001      	movs	r0, #1
   d6462:	e004      	b.n	d646e <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d6464:	6823      	ldr	r3, [r4, #0]
   d6466:	4620      	mov	r0, r4
   d6468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d646a:	4798      	blx	r3
   d646c:	2000      	movs	r0, #0
    }
    return bound;
}
   d646e:	b00d      	add	sp, #52	; 0x34
   d6470:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6472 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d6472:	b510      	push	{r4, lr}
   d6474:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d6476:	6940      	ldr	r0, [r0, #20]
   d6478:	2800      	cmp	r0, #0
   d647a:	db01      	blt.n	d6480 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d647c:	f7ff fd5a 	bl	d5f34 <sock_close>
    }

    _sock = -1;
   d6480:	f04f 33ff 	mov.w	r3, #4294967295
   d6484:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6486:	2300      	movs	r3, #0
   d6488:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d648a:	8723      	strh	r3, [r4, #56]	; 0x38
   d648c:	bd10      	pop	{r4, pc}

000d648e <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d648e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6490:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6492:	4605      	mov	r5, r0
   d6494:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6496:	b113      	cbz	r3, d649e <_ZN3UDP5writeEPKhj+0x10>
   d6498:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d649a:	1a24      	subs	r4, r4, r0
   d649c:	e000      	b.n	d64a0 <_ZN3UDP5writeEPKhj+0x12>
   d649e:	461c      	mov	r4, r3
   d64a0:	4294      	cmp	r4, r2
   d64a2:	bf28      	it	cs
   d64a4:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d64a6:	4622      	mov	r2, r4
   d64a8:	4418      	add	r0, r3
   d64aa:	f003 fbaa 	bl	d9c02 <memcpy>
    _offset += size;
   d64ae:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d64b0:	4423      	add	r3, r4
   d64b2:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d64b4:	4620      	mov	r0, r4
   d64b6:	bd38      	pop	{r3, r4, r5, pc}

000d64b8 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d64b8:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d64ba:	6803      	ldr	r3, [r0, #0]
   d64bc:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d64be:	4604      	mov	r4, r0
   d64c0:	460e      	mov	r6, r1
   d64c2:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d64c4:	4798      	blx	r3
   d64c6:	b188      	cbz	r0, d64ec <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d64c8:	6823      	ldr	r3, [r4, #0]
   d64ca:	4620      	mov	r0, r4
   d64cc:	691b      	ldr	r3, [r3, #16]
   d64ce:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d64d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d64d2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d64d4:	4285      	cmp	r5, r0
   d64d6:	bfa8      	it	ge
   d64d8:	4605      	movge	r5, r0
   d64da:	4419      	add	r1, r3
   d64dc:	462a      	mov	r2, r5
   d64de:	4630      	mov	r0, r6
   d64e0:	f003 fb8f 	bl	d9c02 <memcpy>
        _offset += read;
   d64e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d64e6:	442b      	add	r3, r5
   d64e8:	86e3      	strh	r3, [r4, #54]	; 0x36
   d64ea:	e001      	b.n	d64f0 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d64ec:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d64f0:	4628      	mov	r0, r5
   d64f2:	bd70      	pop	{r4, r5, r6, pc}

000d64f4 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d64f4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d64f6:	4604      	mov	r4, r0
   d64f8:	4b05      	ldr	r3, [pc, #20]	; (d6510 <_ZN3UDP8remoteIPEv+0x1c>)
   d64fa:	f844 3b04 	str.w	r3, [r4], #4
   d64fe:	f101 0520 	add.w	r5, r1, #32
   d6502:	4606      	mov	r6, r0
   d6504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6508:	682b      	ldr	r3, [r5, #0]
   d650a:	7023      	strb	r3, [r4, #0]
   d650c:	4630      	mov	r0, r6
   d650e:	bd70      	pop	{r4, r5, r6, pc}
   d6510:	000dc404 	.word	0x000dc404

000d6514 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6514:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6516:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6518:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d651a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d651c:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d651e:	4a0a      	ldr	r2, [pc, #40]	; (d6548 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d6520:	9202      	str	r2, [sp, #8]
   d6522:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6524:	468e      	mov	lr, r1
   d6526:	4606      	mov	r6, r0
   d6528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d652a:	ac03      	add	r4, sp, #12
   d652c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d652e:	682b      	ldr	r3, [r5, #0]
   d6530:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6532:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6536:	9300      	str	r3, [sp, #0]
   d6538:	4662      	mov	r2, ip
   d653a:	ab02      	add	r3, sp, #8
   d653c:	4671      	mov	r1, lr
   d653e:	4630      	mov	r0, r6
   d6540:	47b8      	blx	r7
    }
   d6542:	b009      	add	sp, #36	; 0x24
   d6544:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6546:	bf00      	nop
   d6548:	000dc404 	.word	0x000dc404

000d654c <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d654c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d654e:	6803      	ldr	r3, [r0, #0]
   d6550:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d6554:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6556:	4b0d      	ldr	r3, [pc, #52]	; (d658c <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6558:	b089      	sub	sp, #36	; 0x24
   d655a:	f100 0620 	add.w	r6, r0, #32
   d655e:	4604      	mov	r4, r0
   d6560:	9302      	str	r3, [sp, #8]
   d6562:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6564:	ad03      	add	r5, sp, #12
   d6566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6568:	6833      	ldr	r3, [r6, #0]
   d656a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d656c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d656e:	9300      	str	r3, [sp, #0]
   d6570:	4672      	mov	r2, lr
   d6572:	ab02      	add	r3, sp, #8
   d6574:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6576:	4620      	mov	r0, r4
   d6578:	47b8      	blx	r7
    flush(); // wait for send to complete
   d657a:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d657c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d657e:	69db      	ldr	r3, [r3, #28]
   d6580:	4620      	mov	r0, r4
   d6582:	4798      	blx	r3
    return result;
}
   d6584:	4628      	mov	r0, r5
   d6586:	b009      	add	sp, #36	; 0x24
   d6588:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d658a:	bf00      	nop
   d658c:	000dc404 	.word	0x000dc404

000d6590 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6590:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d6592:	7843      	ldrb	r3, [r0, #1]
   d6594:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6596:	b08d      	sub	sp, #52	; 0x34
   d6598:	4605      	mov	r5, r0
   d659a:	460c      	mov	r4, r1
   d659c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d659e:	d101      	bne.n	d65a4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d65a0:	1d01      	adds	r1, r0, #4
   d65a2:	e033      	b.n	d660c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d65a4:	2b0a      	cmp	r3, #10
   d65a6:	d135      	bne.n	d6614 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d65a8:	2211      	movs	r2, #17
   d65aa:	2100      	movs	r1, #0
   d65ac:	a801      	add	r0, sp, #4
   d65ae:	f003 fb4e 	bl	d9c4e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d65b2:	68ab      	ldr	r3, [r5, #8]
   d65b4:	b943      	cbnz	r3, d65c8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d65b6:	68eb      	ldr	r3, [r5, #12]
   d65b8:	b933      	cbnz	r3, d65c8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d65ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d65be:	692e      	ldr	r6, [r5, #16]
   d65c0:	f7ff fc18 	bl	d5df4 <inet_htonl>
   d65c4:	4286      	cmp	r6, r0
   d65c6:	d01f      	beq.n	d6608 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d65c8:	f105 0308 	add.w	r3, r5, #8
   d65cc:	ae01      	add	r6, sp, #4
   d65ce:	f105 0e18 	add.w	lr, r5, #24
   d65d2:	6818      	ldr	r0, [r3, #0]
   d65d4:	6859      	ldr	r1, [r3, #4]
   d65d6:	4632      	mov	r2, r6
   d65d8:	c203      	stmia	r2!, {r0, r1}
   d65da:	3308      	adds	r3, #8
   d65dc:	4573      	cmp	r3, lr
   d65de:	4616      	mov	r6, r2
   d65e0:	d1f7      	bne.n	d65d2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d65e2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d65e4:	a901      	add	r1, sp, #4
   d65e6:	a806      	add	r0, sp, #24
   d65e8:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d65ea:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d65ee:	f001 fa53 	bl	d7a98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d65f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d65f4:	3404      	adds	r4, #4
   d65f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d65f8:	6833      	ldr	r3, [r6, #0]
   d65fa:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d65fc:	b157      	cbz	r7, d6614 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d65fe:	8868      	ldrh	r0, [r5, #2]
   d6600:	f7ff fc00 	bl	d5e04 <inet_ntohs>
   d6604:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d6606:	e005      	b.n	d6614 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6608:	f105 0114 	add.w	r1, r5, #20
   d660c:	4620      	mov	r0, r4
   d660e:	f001 fa85 	bl	d7b1c <_ZN9IPAddressaSEPKh>
   d6612:	e7f3      	b.n	d65fc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d6614:	b00d      	add	sp, #52	; 0x34
   d6616:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6618 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d661c:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d661e:	ab0e      	add	r3, sp, #56	; 0x38
   d6620:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6622:	4606      	mov	r6, r0
   d6624:	4617      	mov	r7, r2
   d6626:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6628:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d662c:	462a      	mov	r2, r5
   d662e:	4629      	mov	r1, r5
   d6630:	f7ff fa94 	bl	d5b5c <netdb_getaddrinfo>
   d6634:	2800      	cmp	r0, #0
   d6636:	db1f      	blt.n	d6678 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6638:	9b01      	ldr	r3, [sp, #4]
   d663a:	b1fb      	cbz	r3, d667c <_ZN3UDP11beginPacketEPKct+0x64>
   d663c:	695b      	ldr	r3, [r3, #20]
   d663e:	b1eb      	cbz	r3, d667c <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6640:	a802      	add	r0, sp, #8
   d6642:	f001 fa1b 	bl	d7a7c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6646:	9b01      	ldr	r3, [sp, #4]
   d6648:	462a      	mov	r2, r5
   d664a:	6958      	ldr	r0, [r3, #20]
   d664c:	a902      	add	r1, sp, #8
   d664e:	f7ff ff9f 	bl	d6590 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6652:	a802      	add	r0, sp, #8
   d6654:	f001 fa32 	bl	d7abc <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6658:	b180      	cbz	r0, d667c <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d665a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d665c:	ad03      	add	r5, sp, #12
   d665e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d6662:	4b0b      	ldr	r3, [pc, #44]	; (d6690 <_ZN3UDP11beginPacketEPKct+0x78>)
   d6664:	9308      	str	r3, [sp, #32]
   d6666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6668:	ac09      	add	r4, sp, #36	; 0x24
   d666a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d666c:	682b      	ldr	r3, [r5, #0]
   d666e:	7023      	strb	r3, [r4, #0]
   d6670:	463a      	mov	r2, r7
   d6672:	a908      	add	r1, sp, #32
   d6674:	4630      	mov	r0, r6
   d6676:	47c0      	blx	r8
   d6678:	4604      	mov	r4, r0
   d667a:	e001      	b.n	d6680 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d667c:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6680:	9801      	ldr	r0, [sp, #4]
   d6682:	f7ff fa63 	bl	d5b4c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d6686:	4620      	mov	r0, r4
   d6688:	b00e      	add	sp, #56	; 0x38
   d668a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d668e:	bf00      	nop
   d6690:	000dc404 	.word	0x000dc404

000d6694 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6698:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d669c:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d66a0:	b08c      	sub	sp, #48	; 0x30
   d66a2:	4605      	mov	r5, r0
   d66a4:	460c      	mov	r4, r1
   d66a6:	4617      	mov	r7, r2
   d66a8:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d66aa:	db00      	blt.n	d66ae <_ZN3UDP13receivePacketEPhjm+0x1a>
   d66ac:	b911      	cbnz	r1, d66b4 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d66ae:	f04f 30ff 	mov.w	r0, #4294967295
   d66b2:	e035      	b.n	d6720 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d66b4:	f04f 0a1c 	mov.w	sl, #28
   d66b8:	ae05      	add	r6, sp, #20
   d66ba:	4652      	mov	r2, sl
   d66bc:	2100      	movs	r1, #0
   d66be:	4630      	mov	r0, r6
   d66c0:	f003 fac5 	bl	d9c4e <memset>
        socklen_t slen = sizeof(saddr);
   d66c4:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d66c8:	f1b9 0f00 	cmp.w	r9, #0
   d66cc:	d014      	beq.n	d66f8 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d66ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66d2:	fbb9 f1f2 	udiv	r1, r9, r2
   d66d6:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d66d8:	fb02 9111 	mls	r1, r2, r1, r9
   d66dc:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d66de:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d66e0:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d66e2:	9300      	str	r3, [sp, #0]
   d66e4:	f241 0206 	movw	r2, #4102	; 0x1006
   d66e8:	ab03      	add	r3, sp, #12
   d66ea:	f640 71ff 	movw	r1, #4095	; 0xfff
   d66ee:	4640      	mov	r0, r8
   d66f0:	f7ff fc18 	bl	d5f24 <sock_setsockopt>
            if (ret) {
   d66f4:	b108      	cbz	r0, d66fa <_ZN3UDP13receivePacketEPhjm+0x66>
   d66f6:	e013      	b.n	d6720 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d66f8:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d66fa:	ab02      	add	r3, sp, #8
   d66fc:	9301      	str	r3, [sp, #4]
   d66fe:	4621      	mov	r1, r4
   d6700:	4603      	mov	r3, r0
   d6702:	9600      	str	r6, [sp, #0]
   d6704:	463a      	mov	r2, r7
   d6706:	6968      	ldr	r0, [r5, #20]
   d6708:	f7ff fc2c 	bl	d5f64 <sock_recvfrom>
        if (ret >= 0) {
   d670c:	1e04      	subs	r4, r0, #0
   d670e:	db06      	blt.n	d671e <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d6710:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d6714:	f105 011c 	add.w	r1, r5, #28
   d6718:	4630      	mov	r0, r6
   d671a:	f7ff ff39 	bl	d6590 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d671e:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d6720:	b00c      	add	sp, #48	; 0x30
   d6722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6726 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6726:	b538      	push	{r3, r4, r5, lr}
   d6728:	4605      	mov	r5, r0
   d672a:	4614      	mov	r4, r2
   d672c:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d672e:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6730:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d6732:	d111      	bne.n	d6758 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d6734:	231c      	movs	r3, #28
   d6736:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d6738:	230a      	movs	r3, #10
   d673a:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d673c:	f7ff fb6a 	bl	d5e14 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6740:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d6742:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6746:	1d2b      	adds	r3, r5, #4
   d6748:	3514      	adds	r5, #20
   d674a:	f853 2b04 	ldr.w	r2, [r3], #4
   d674e:	f844 2b04 	str.w	r2, [r4], #4
   d6752:	42ab      	cmp	r3, r5
   d6754:	d1f9      	bne.n	d674a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d6756:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d6758:	2b04      	cmp	r3, #4
   d675a:	d10a      	bne.n	d6772 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d675c:	2310      	movs	r3, #16
   d675e:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d6760:	2302      	movs	r3, #2
   d6762:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d6764:	f7ff fb56 	bl	d5e14 <inet_htons>
   d6768:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d676a:	6868      	ldr	r0, [r5, #4]
   d676c:	f7ff fb42 	bl	d5df4 <inet_htonl>
   d6770:	6060      	str	r0, [r4, #4]
   d6772:	bd38      	pop	{r3, r4, r5, pc}

000d6774 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6778:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d677a:	ac03      	add	r4, sp, #12
   d677c:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d677e:	4699      	mov	r9, r3
   d6780:	4606      	mov	r6, r0
   d6782:	460f      	mov	r7, r1
   d6784:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6786:	2100      	movs	r1, #0
   d6788:	462a      	mov	r2, r5
   d678a:	4620      	mov	r0, r4
   d678c:	f003 fa5f 	bl	d9c4e <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d6790:	4622      	mov	r2, r4
   d6792:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d6796:	4648      	mov	r0, r9
   d6798:	f7ff ffc5 	bl	d6726 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d679c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d67a0:	b143      	cbz	r3, d67b4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d67a2:	e88d 0030 	stmia.w	sp, {r4, r5}
   d67a6:	2300      	movs	r3, #0
   d67a8:	4642      	mov	r2, r8
   d67aa:	4639      	mov	r1, r7
   d67ac:	6970      	ldr	r0, [r6, #20]
   d67ae:	f7ff fbe9 	bl	d5f84 <sock_sendto>
   d67b2:	e001      	b.n	d67b8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d67b4:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d67b8:	b00b      	add	sp, #44	; 0x2c
   d67ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d67be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d67be:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67c0:	b091      	sub	sp, #68	; 0x44
   d67c2:	460c      	mov	r4, r1
   d67c4:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d67c6:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d67c8:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d67ca:	a809      	add	r0, sp, #36	; 0x24
   d67cc:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d67ce:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d67d0:	f003 fa3d 	bl	d9c4e <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d67d4:	aa09      	add	r2, sp, #36	; 0x24
   d67d6:	2100      	movs	r1, #0
   d67d8:	4620      	mov	r0, r4
   d67da:	f7ff ffa4 	bl	d6726 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d67de:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d67e2:	2b02      	cmp	r3, #2
   d67e4:	d12e      	bne.n	d6844 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d67e6:	2300      	movs	r3, #0
   d67e8:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d67ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d67ec:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d67ee:	b1dd      	cbz	r5, d6828 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d67f0:	a902      	add	r1, sp, #8
   d67f2:	4628      	mov	r0, r5
   d67f4:	f7ff fa0a 	bl	d5c0c <if_get_by_index>
   d67f8:	b9b0      	cbnz	r0, d6828 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d67fa:	a910      	add	r1, sp, #64	; 0x40
   d67fc:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d6800:	9802      	ldr	r0, [sp, #8]
   d6802:	f7ff fa0b 	bl	d5c1c <if_get_addrs>
   d6806:	b960      	cbnz	r0, d6822 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d6808:	9b03      	ldr	r3, [sp, #12]
   d680a:	b153      	cbz	r3, d6822 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d680c:	68da      	ldr	r2, [r3, #12]
   d680e:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d6810:	7851      	ldrb	r1, [r2, #1]
   d6812:	2902      	cmp	r1, #2
   d6814:	d103      	bne.n	d681e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d6816:	6852      	ldr	r2, [r2, #4]
   d6818:	b10a      	cbz	r2, d681e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d681a:	9205      	str	r2, [sp, #20]
   d681c:	e001      	b.n	d6822 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d681e:	681b      	ldr	r3, [r3, #0]
   d6820:	e7f3      	b.n	d680a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d6822:	9803      	ldr	r0, [sp, #12]
   d6824:	f7ff fa02 	bl	d5c2c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d6828:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d682a:	f04f 0308 	mov.w	r3, #8
   d682e:	9300      	str	r3, [sp, #0]
   d6830:	bf18      	it	ne
   d6832:	2203      	movne	r2, #3
   d6834:	ab04      	add	r3, sp, #16
   d6836:	bf08      	it	eq
   d6838:	2204      	moveq	r2, #4
   d683a:	2100      	movs	r1, #0
   d683c:	4630      	mov	r0, r6
   d683e:	f7ff fb71 	bl	d5f24 <sock_setsockopt>
   d6842:	e01e      	b.n	d6882 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d6844:	2b0a      	cmp	r3, #10
   d6846:	d11a      	bne.n	d687e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d6848:	ac04      	add	r4, sp, #16
   d684a:	2214      	movs	r2, #20
   d684c:	2100      	movs	r1, #0
   d684e:	4620      	mov	r0, r4
   d6850:	f003 f9fd 	bl	d9c4e <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d6854:	ab0b      	add	r3, sp, #44	; 0x2c
   d6856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d6858:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d685a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d685e:	f04f 0314 	mov.w	r3, #20
   d6862:	9300      	str	r3, [sp, #0]
   d6864:	bf18      	it	ne
   d6866:	220c      	movne	r2, #12
   d6868:	4623      	mov	r3, r4
   d686a:	bf08      	it	eq
   d686c:	220d      	moveq	r2, #13
   d686e:	2129      	movs	r1, #41	; 0x29
   d6870:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d6872:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d6874:	f7ff fb56 	bl	d5f24 <sock_setsockopt>
   d6878:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d687c:	e001      	b.n	d6882 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d687e:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6882:	b011      	add	sp, #68	; 0x44
   d6884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6888 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d6888:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d688a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d688e:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6890:	4b0b      	ldr	r3, [pc, #44]	; (d68c0 <_ZN3UDPC1Ev+0x38>)
   d6892:	f103 0208 	add.w	r2, r3, #8
   d6896:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6898:	2500      	movs	r5, #0
   d689a:	6103      	str	r3, [r0, #16]
   d689c:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d68a0:	4604      	mov	r4, r0
   d68a2:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d68a4:	6002      	str	r2, [r0, #0]
   d68a6:	6143      	str	r3, [r0, #20]
   d68a8:	301c      	adds	r0, #28
   d68aa:	f001 f8e7 	bl	d7a7c <_ZN9IPAddressC1Ev>
   d68ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   d68b2:	86e5      	strh	r5, [r4, #54]	; 0x36
   d68b4:	8725      	strh	r5, [r4, #56]	; 0x38
   d68b6:	63e5      	str	r5, [r4, #60]	; 0x3c
   d68b8:	6423      	str	r3, [r4, #64]	; 0x40
   d68ba:	6465      	str	r5, [r4, #68]	; 0x44
}
   d68bc:	4620      	mov	r0, r4
   d68be:	bd38      	pop	{r3, r4, r5, pc}
   d68c0:	000dc0b0 	.word	0x000dc0b0

000d68c4 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d68c4:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d68c6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d68ca:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d68cc:	b123      	cbz	r3, d68d8 <_ZN3UDP13releaseBufferEv+0x14>
   d68ce:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d68d0:	b110      	cbz	r0, d68d8 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d68d2:	2101      	movs	r1, #1
   d68d4:	f002 fa6e 	bl	d8db4 <_ZdlPvj>
    }
    _buffer = NULL;
   d68d8:	2300      	movs	r3, #0
   d68da:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d68dc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d68e0:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d68e2:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d68e4:	8723      	strh	r3, [r4, #56]	; 0x38
   d68e6:	bd10      	pop	{r4, pc}

000d68e8 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d68e8:	b570      	push	{r4, r5, r6, lr}
   d68ea:	4604      	mov	r4, r0
   d68ec:	4616      	mov	r6, r2
   d68ee:	460d      	mov	r5, r1
    releaseBuffer();
   d68f0:	f7ff ffe8 	bl	d68c4 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d68f4:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d68f6:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d68f8:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d68fa:	b93e      	cbnz	r6, d690c <_ZN3UDP9setBufferEjPh+0x24>
   d68fc:	b135      	cbz	r5, d690c <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d68fe:	4628      	mov	r0, r5
   d6900:	f7fd fbcd 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   d6904:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d6906:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d6908:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d690c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d690e:	b103      	cbz	r3, d6912 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d6910:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d6912:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d6914:	3000      	adds	r0, #0
   d6916:	bf18      	it	ne
   d6918:	2001      	movne	r0, #1
   d691a:	bd70      	pop	{r4, r5, r6, pc}

000d691c <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d691e:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6920:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6922:	4605      	mov	r5, r0
   d6924:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6926:	b91a      	cbnz	r2, d6930 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d6928:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d692a:	b109      	cbz	r1, d6930 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d692c:	f7ff ffdc 	bl	d68e8 <_ZN3UDP9setBufferEjPh>
   d6930:	3404      	adds	r4, #4
   d6932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6934:	f105 0620 	add.w	r6, r5, #32
   d6938:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d693a:	6823      	ldr	r3, [r4, #0]
   d693c:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d693e:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d6940:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6942:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d6944:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d6946:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d6948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d694a <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d694a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d694c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d694e:	4604      	mov	r4, r0
   d6950:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d6952:	b91a      	cbnz	r2, d695c <_ZN3UDP11parsePacketEm+0x12>
   d6954:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6956:	b109      	cbz	r1, d695c <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d6958:	f7ff ffc6 	bl	d68e8 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d695c:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d695e:	2200      	movs	r2, #0
   d6960:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d6962:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6964:	b149      	cbz	r1, d697a <_ZN3UDP11parsePacketEm+0x30>
   d6966:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d6968:	b13a      	cbz	r2, d697a <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d696a:	6823      	ldr	r3, [r4, #0]
   d696c:	4620      	mov	r0, r4
   d696e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d6970:	4633      	mov	r3, r6
   d6972:	47a8      	blx	r5
        if (result > 0) {
   d6974:	2800      	cmp	r0, #0
            _total = result;
   d6976:	bfc8      	it	gt
   d6978:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d697a:	6823      	ldr	r3, [r4, #0]
   d697c:	4620      	mov	r0, r4
   d697e:	691b      	ldr	r3, [r3, #16]
}
   d6980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d6984:	4718      	bx	r3

000d6986 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d6986:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d6988:	6940      	ldr	r0, [r0, #20]
   d698a:	2800      	cmp	r0, #0
   d698c:	db04      	blt.n	d6998 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d698e:	2301      	movs	r3, #1
   d6990:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d6994:	f7ff bf13 	b.w	d67be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d6998:	f04f 30ff 	mov.w	r0, #4294967295
   d699c:	4770      	bx	lr

000d699e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d699e:	b510      	push	{r4, lr}
   d69a0:	4604      	mov	r4, r0
{
	free(buffer);
   d69a2:	6800      	ldr	r0, [r0, #0]
   d69a4:	f7ff fc24 	bl	d61f0 <free>
}
   d69a8:	4620      	mov	r0, r4
   d69aa:	bd10      	pop	{r4, pc}

000d69ac <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d69ac:	b510      	push	{r4, lr}
   d69ae:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d69b0:	6800      	ldr	r0, [r0, #0]
   d69b2:	b108      	cbz	r0, d69b8 <_ZN6String10invalidateEv+0xc>
   d69b4:	f7ff fc1c 	bl	d61f0 <free>
	buffer = NULL;
   d69b8:	2300      	movs	r3, #0
   d69ba:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d69bc:	60a3      	str	r3, [r4, #8]
   d69be:	6063      	str	r3, [r4, #4]
   d69c0:	bd10      	pop	{r4, pc}

000d69c2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d69c2:	b538      	push	{r3, r4, r5, lr}
   d69c4:	4604      	mov	r4, r0
   d69c6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d69c8:	6800      	ldr	r0, [r0, #0]
   d69ca:	3101      	adds	r1, #1
   d69cc:	f7ff fc18 	bl	d6200 <realloc>
	if (newbuffer) {
   d69d0:	b110      	cbz	r0, d69d8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d69d2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d69d6:	2001      	movs	r0, #1
	}
	return 0;
}
   d69d8:	bd38      	pop	{r3, r4, r5, pc}

000d69da <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d69da:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d69dc:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d69de:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d69e0:	b113      	cbz	r3, d69e8 <_ZN6String7reserveEj+0xe>
   d69e2:	6843      	ldr	r3, [r0, #4]
   d69e4:	428b      	cmp	r3, r1
   d69e6:	d207      	bcs.n	d69f8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d69e8:	4620      	mov	r0, r4
   d69ea:	f7ff ffea 	bl	d69c2 <_ZN6String12changeBufferEj>
   d69ee:	b120      	cbz	r0, d69fa <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d69f0:	68a3      	ldr	r3, [r4, #8]
   d69f2:	b90b      	cbnz	r3, d69f8 <_ZN6String7reserveEj+0x1e>
   d69f4:	6822      	ldr	r2, [r4, #0]
   d69f6:	7013      	strb	r3, [r2, #0]
   d69f8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d69fa:	bd10      	pop	{r4, pc}

000d69fc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d69fc:	b570      	push	{r4, r5, r6, lr}
   d69fe:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6a00:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6a02:	4604      	mov	r4, r0
   d6a04:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6a06:	f7ff ffe8 	bl	d69da <_ZN6String7reserveEj>
   d6a0a:	b918      	cbnz	r0, d6a14 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	f7ff ffcd 	bl	d69ac <_ZN6String10invalidateEv>
		return *this;
   d6a12:	e009      	b.n	d6a28 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6a14:	462a      	mov	r2, r5
   d6a16:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6a18:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6a1a:	6820      	ldr	r0, [r4, #0]
   d6a1c:	f003 f8f1 	bl	d9c02 <memcpy>
	buffer[len] = 0;
   d6a20:	6822      	ldr	r2, [r4, #0]
   d6a22:	68a3      	ldr	r3, [r4, #8]
   d6a24:	2100      	movs	r1, #0
   d6a26:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6a28:	4620      	mov	r0, r4
   d6a2a:	bd70      	pop	{r4, r5, r6, pc}

000d6a2c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6a2c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a2e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6a30:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a32:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6a34:	6043      	str	r3, [r0, #4]
	len = 0;
   d6a36:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a38:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6a3a:	460d      	mov	r5, r1
   d6a3c:	b139      	cbz	r1, d6a4e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6a3e:	4608      	mov	r0, r1
   d6a40:	f003 f971 	bl	d9d26 <strlen>
   d6a44:	4629      	mov	r1, r5
   d6a46:	4602      	mov	r2, r0
   d6a48:	4620      	mov	r0, r4
   d6a4a:	f7ff ffd7 	bl	d69fc <_ZN6String4copyEPKcj>
}
   d6a4e:	4620      	mov	r0, r4
   d6a50:	bd38      	pop	{r3, r4, r5, pc}

000d6a52 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6a52:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6a54:	b510      	push	{r4, lr}
   d6a56:	460b      	mov	r3, r1
   d6a58:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6a5a:	d007      	beq.n	d6a6c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6a5c:	6809      	ldr	r1, [r1, #0]
   d6a5e:	b119      	cbz	r1, d6a68 <_ZN6StringaSERKS_+0x16>
   d6a60:	689a      	ldr	r2, [r3, #8]
   d6a62:	f7ff ffcb 	bl	d69fc <_ZN6String4copyEPKcj>
   d6a66:	e001      	b.n	d6a6c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6a68:	f7ff ffa0 	bl	d69ac <_ZN6String10invalidateEv>

	return *this;
}
   d6a6c:	4620      	mov	r0, r4
   d6a6e:	bd10      	pop	{r4, pc}

000d6a70 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6a70:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a72:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6a74:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a76:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6a78:	6043      	str	r3, [r0, #4]
	len = 0;
   d6a7a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a7c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6a7e:	f7ff ffe8 	bl	d6a52 <_ZN6StringaSERKS_>
}
   d6a82:	4620      	mov	r0, r4
   d6a84:	bd10      	pop	{r4, pc}
	...

000d6a88 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d6a88:	b40e      	push	{r1, r2, r3}
   d6a8a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d6a8c:	ac09      	add	r4, sp, #36	; 0x24
   d6a8e:	4605      	mov	r5, r0
   d6a90:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d6a94:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6a96:	4623      	mov	r3, r4
   d6a98:	463a      	mov	r2, r7
   d6a9a:	2105      	movs	r1, #5
   d6a9c:	a802      	add	r0, sp, #8
   d6a9e:	f7ff fbbf 	bl	d6220 <vsnprintf>
    va_end(marker);

    String result;
   d6aa2:	490c      	ldr	r1, [pc, #48]	; (d6ad4 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6aa4:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d6aa6:	4628      	mov	r0, r5
   d6aa8:	f7ff ffc0 	bl	d6a2c <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d6aac:	4631      	mov	r1, r6
   d6aae:	4628      	mov	r0, r5
   d6ab0:	f7ff ff93 	bl	d69da <_ZN6String7reserveEj>
    if (result.buffer) {
   d6ab4:	6828      	ldr	r0, [r5, #0]
   d6ab6:	b130      	cbz	r0, d6ac6 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6ab8:	4623      	mov	r3, r4
   d6aba:	463a      	mov	r2, r7
   d6abc:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d6abe:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6ac0:	f7ff fbae 	bl	d6220 <vsnprintf>
        va_end(marker);
        result.len = n;
   d6ac4:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d6ac6:	4628      	mov	r0, r5
   d6ac8:	b004      	add	sp, #16
   d6aca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6ace:	b003      	add	sp, #12
   d6ad0:	4770      	bx	lr
   d6ad2:	bf00      	nop
   d6ad4:	000dbe07 	.word	0x000dbe07

000d6ad8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ad8:	4770      	bx	lr

000d6ada <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6ada:	2000      	movs	r0, #0
   d6adc:	4770      	bx	lr

000d6ade <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ade:	b510      	push	{r4, lr}
   d6ae0:	2114      	movs	r1, #20
   d6ae2:	4604      	mov	r4, r0
   d6ae4:	f002 f966 	bl	d8db4 <_ZdlPvj>
   d6ae8:	4620      	mov	r0, r4
   d6aea:	bd10      	pop	{r4, pc}

000d6aec <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6aec:	f7fd bad9 	b.w	d40a2 <_ZdlPv>

000d6af0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6af0:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6af2:	200a      	movs	r0, #10
   d6af4:	4a02      	ldr	r2, [pc, #8]	; (d6b00 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d6af6:	2100      	movs	r1, #0
   d6af8:	f7ff fa8c 	bl	d6014 <panic_>
    }
}
   d6afc:	bd08      	pop	{r3, pc}
   d6afe:	bf00      	nop
   d6b00:	000d5c5d 	.word	0x000d5c5d

000d6b04 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6b04:	b510      	push	{r4, lr}
            locked_(false) {
   d6b06:	2300      	movs	r3, #0
   d6b08:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6b0a:	4b04      	ldr	r3, [pc, #16]	; (d6b1c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6b0c:	4604      	mov	r4, r0
   d6b0e:	6818      	ldr	r0, [r3, #0]
   d6b10:	f7ff f940 	bl	d5d94 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d6b14:	2301      	movs	r3, #1
   d6b16:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d6b18:	4620      	mov	r0, r4
   d6b1a:	bd10      	pop	{r4, pc}
   d6b1c:	2003e3d4 	.word	0x2003e3d4

000d6b20 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d6b20:	b510      	push	{r4, lr}
        if (locked_) {
   d6b22:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d6b24:	4604      	mov	r4, r0
        if (locked_) {
   d6b26:	b11b      	cbz	r3, d6b30 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6b28:	4b02      	ldr	r3, [pc, #8]	; (d6b34 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d6b2a:	6818      	ldr	r0, [r3, #0]
   d6b2c:	f7ff f93a 	bl	d5da4 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d6b30:	4620      	mov	r0, r4
   d6b32:	bd10      	pop	{r4, pc}
   d6b34:	2003e3d4 	.word	0x2003e3d4

000d6b38 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d6b38:	2200      	movs	r2, #0
   d6b3a:	6002      	str	r2, [r0, #0]
   d6b3c:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d6b3e:	4770      	bx	lr

000d6b40 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d6b40:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6b42:	7982      	ldrb	r2, [r0, #6]
   d6b44:	798b      	ldrb	r3, [r1, #6]
   d6b46:	429a      	cmp	r2, r3
   d6b48:	d106      	bne.n	d6b58 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6b4a:	2206      	movs	r2, #6
   d6b4c:	f003 f84a 	bl	d9be4 <memcmp>
   d6b50:	fab0 f080 	clz	r0, r0
   d6b54:	0940      	lsrs	r0, r0, #5
   d6b56:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d6b58:	2000      	movs	r0, #0
}
   d6b5a:	bd08      	pop	{r3, pc}

000d6b5c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d6b5e:	b18b      	cbz	r3, d6b84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d6b60:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6b62:	1ce5      	adds	r5, r4, #3
   d6b64:	428d      	cmp	r5, r1
   d6b66:	d80f      	bhi.n	d6b88 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d6b68:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d6b6a:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d6b6c:	5d87      	ldrb	r7, [r0, r6]
   d6b6e:	4297      	cmp	r7, r2
   d6b70:	d105      	bne.n	d6b7e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6b72:	442e      	add	r6, r5
   d6b74:	42b1      	cmp	r1, r6
   d6b76:	d307      	bcc.n	d6b88 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d6b78:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d6b7a:	1c68      	adds	r0, r5, #1
                return adsLen;
   d6b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d6b7e:	3501      	adds	r5, #1
   d6b80:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6b82:	e7ee      	b.n	d6b62 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d6b84:	4618      	mov	r0, r3
   d6b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b88:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d6b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b8c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6b90:	4604      	mov	r4, r0
   d6b92:	460e      	mov	r6, r1
   d6b94:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d6b96:	4617      	mov	r7, r2
   d6b98:	2a00      	cmp	r2, #0
   d6b9a:	d03a      	beq.n	d6c12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d6b9c:	460a      	mov	r2, r1
   d6b9e:	ab01      	add	r3, sp, #4
   d6ba0:	6a01      	ldr	r1, [r0, #32]
   d6ba2:	f7ff ffdb 	bl	d6b5c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d6ba6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d6baa:	6a22      	ldr	r2, [r4, #32]
   d6bac:	bb03      	cbnz	r3, d6bf0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d6bae:	b1f8      	cbz	r0, d6bf0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6bb0:	1c96      	adds	r6, r2, #2
   d6bb2:	442e      	add	r6, r5
   d6bb4:	1a36      	subs	r6, r6, r0
   d6bb6:	2e1f      	cmp	r6, #31
   d6bb8:	d82b      	bhi.n	d6c12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6bba:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d6bbe:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6bc2:	ebc8 0202 	rsb	r2, r8, r2
   d6bc6:	1a12      	subs	r2, r2, r0
   d6bc8:	eb00 0108 	add.w	r1, r0, r8
   d6bcc:	eb05 0009 	add.w	r0, r5, r9
   d6bd0:	b292      	uxth	r2, r2
   d6bd2:	4421      	add	r1, r4
   d6bd4:	4420      	add	r0, r4
   d6bd6:	f003 f81f 	bl	d9c18 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d6bda:	1c6b      	adds	r3, r5, #1
   d6bdc:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d6be0:	462a      	mov	r2, r5
   d6be2:	4639      	mov	r1, r7
   d6be4:	eb04 0009 	add.w	r0, r4, r9
   d6be8:	f003 f80b 	bl	d9c02 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d6bec:	6226      	str	r6, [r4, #32]
   d6bee:	e010      	b.n	d6c12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d6bf0:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6bf2:	182b      	adds	r3, r5, r0
   d6bf4:	2b1f      	cmp	r3, #31
   d6bf6:	d80c      	bhi.n	d6c12 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d6bf8:	1c6b      	adds	r3, r5, #1
   d6bfa:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6bfc:	4422      	add	r2, r4
   d6bfe:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6c00:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6c02:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d6c04:	4420      	add	r0, r4
   d6c06:	462a      	mov	r2, r5
   d6c08:	f002 fffb 	bl	d9c02 <memcpy>
        selfLen_ += len;
   d6c0c:	6a22      	ldr	r2, [r4, #32]
   d6c0e:	442a      	add	r2, r5
   d6c10:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d6c12:	6a20      	ldr	r0, [r4, #32]
}
   d6c14:	b003      	add	sp, #12
   d6c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c1a <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d6c1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6c1c:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d6c1e:	4603      	mov	r3, r0
   d6c20:	f100 021f 	add.w	r2, r0, #31
   d6c24:	2000      	movs	r0, #0
   d6c26:	f803 0b01 	strb.w	r0, [r3], #1
   d6c2a:	4293      	cmp	r3, r2
   d6c2c:	f04f 0100 	mov.w	r1, #0
   d6c30:	d1f9      	bne.n	d6c26 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6c32:	aa04      	add	r2, sp, #16
   d6c34:	2306      	movs	r3, #6
   d6c36:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6c3a:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d6c3c:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6c3e:	9100      	str	r1, [sp, #0]
   d6c40:	4620      	mov	r0, r4
   d6c42:	4619      	mov	r1, r3
   d6c44:	f7ff ffa2 	bl	d6b8c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6c48:	4620      	mov	r0, r4
   d6c4a:	b004      	add	sp, #16
   d6c4c:	bd10      	pop	{r4, pc}

000d6c4e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d6c4e:	b510      	push	{r4, lr}
   d6c50:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6c52:	69c2      	ldr	r2, [r0, #28]
   d6c54:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d6c58:	4293      	cmp	r3, r2
   d6c5a:	4618      	mov	r0, r3
   d6c5c:	d006      	beq.n	d6c6c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6c5e:	6804      	ldr	r4, [r0, #0]
   d6c60:	8824      	ldrh	r4, [r4, #0]
   d6c62:	428c      	cmp	r4, r1
   d6c64:	f103 0308 	add.w	r3, r3, #8
   d6c68:	d1f6      	bne.n	d6c58 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d6c6a:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d6c6c:	2000      	movs	r0, #0
    }
   d6c6e:	bd10      	pop	{r4, pc}

000d6c70 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d6c70:	b510      	push	{r4, lr}
    return impl()->address();
   d6c72:	680a      	ldr	r2, [r1, #0]
   d6c74:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d6c78:	6003      	str	r3, [r0, #0]
   d6c7a:	6853      	ldr	r3, [r2, #4]
   d6c7c:	6043      	str	r3, [r0, #4]
}
   d6c7e:	bd10      	pop	{r4, pc}

000d6c80 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6c82:	6802      	ldr	r2, [r0, #0]
   d6c84:	680b      	ldr	r3, [r1, #0]
   d6c86:	8812      	ldrh	r2, [r2, #0]
   d6c88:	881b      	ldrh	r3, [r3, #0]
   d6c8a:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6c8c:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6c8e:	d10c      	bne.n	d6caa <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d6c90:	4601      	mov	r1, r0
   d6c92:	4668      	mov	r0, sp
   d6c94:	f7ff ffec 	bl	d6c70 <_ZNK8particle13BlePeerDevice7addressEv>
   d6c98:	4621      	mov	r1, r4
   d6c9a:	a802      	add	r0, sp, #8
   d6c9c:	f7ff ffe8 	bl	d6c70 <_ZNK8particle13BlePeerDevice7addressEv>
   d6ca0:	a902      	add	r1, sp, #8
   d6ca2:	4668      	mov	r0, sp
   d6ca4:	f7ff ff4c 	bl	d6b40 <_ZNK8particle10BleAddresseqERKS0_>
   d6ca8:	b900      	cbnz	r0, d6cac <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d6caa:	2000      	movs	r0, #0
}
   d6cac:	b004      	add	sp, #16
   d6cae:	bd10      	pop	{r4, pc}

000d6cb0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6cb0:	b510      	push	{r4, lr}
   d6cb2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6cb4:	2034      	movs	r0, #52	; 0x34
   d6cb6:	f7fd f9f0 	bl	d409a <_Znwj>
   d6cba:	4601      	mov	r1, r0
   d6cbc:	b168      	cbz	r0, d6cda <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6cbe:	2300      	movs	r3, #0
   d6cc0:	6003      	str	r3, [r0, #0]
   d6cc2:	6043      	str	r3, [r0, #4]
   d6cc4:	6083      	str	r3, [r0, #8]
   d6cc6:	60c3      	str	r3, [r0, #12]
   d6cc8:	6103      	str	r3, [r0, #16]
   d6cca:	6143      	str	r3, [r0, #20]
   d6ccc:	6183      	str	r3, [r0, #24]
   d6cce:	61c3      	str	r3, [r0, #28]
   d6cd0:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d6cd2:	6243      	str	r3, [r0, #36]	; 0x24
   d6cd4:	6283      	str	r3, [r0, #40]	; 0x28
   d6cd6:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6cd8:	6303      	str	r3, [r0, #48]	; 0x30
   d6cda:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6cdc:	b919      	cbnz	r1, d6ce6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d6cde:	4a0a      	ldr	r2, [pc, #40]	; (d6d08 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6ce0:	200a      	movs	r0, #10
   d6ce2:	f7ff f997 	bl	d6014 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6ce6:	2000      	movs	r0, #0
   d6ce8:	f7fe ffd0 	bl	d5c8c <hal_ble_stack_init>
   d6cec:	b120      	cbz	r0, d6cf8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d6cee:	4a06      	ldr	r2, [pc, #24]	; (d6d08 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6cf0:	2100      	movs	r1, #0
   d6cf2:	200a      	movs	r0, #10
   d6cf4:	f7ff f98e 	bl	d6014 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6cf8:	2200      	movs	r2, #0
   d6cfa:	6821      	ldr	r1, [r4, #0]
   d6cfc:	4803      	ldr	r0, [pc, #12]	; (d6d0c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d6cfe:	f7fe ffdf 	bl	d5cc0 <hal_ble_set_callback_on_periph_link_events>
}
   d6d02:	4620      	mov	r0, r4
   d6d04:	bd10      	pop	{r4, pc}
   d6d06:	bf00      	nop
   d6d08:	000d5c5d 	.word	0x000d5c5d
   d6d0c:	000d6fcd 	.word	0x000d6fcd

000d6d10 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6d10:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6d12:	4c0a      	ldr	r4, [pc, #40]	; (d6d3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d6d14:	6823      	ldr	r3, [r4, #0]
   d6d16:	07db      	lsls	r3, r3, #31
   d6d18:	d40e      	bmi.n	d6d38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6d1a:	4620      	mov	r0, r4
   d6d1c:	f7fd f9c5 	bl	d40aa <__cxa_guard_acquire>
   d6d20:	b150      	cbz	r0, d6d38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6d22:	4807      	ldr	r0, [pc, #28]	; (d6d40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6d24:	f7ff ffc4 	bl	d6cb0 <_ZN8particle14BleLocalDeviceC1Ev>
   d6d28:	4620      	mov	r0, r4
   d6d2a:	f7fd f9c3 	bl	d40b4 <__cxa_guard_release>
   d6d2e:	4a05      	ldr	r2, [pc, #20]	; (d6d44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6d30:	4905      	ldr	r1, [pc, #20]	; (d6d48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6d32:	4803      	ldr	r0, [pc, #12]	; (d6d40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6d34:	f002 f830 	bl	d8d98 <__aeabi_atexit>
    return instance;
}
   d6d38:	4801      	ldr	r0, [pc, #4]	; (d6d40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6d3a:	bd10      	pop	{r4, pc}
   d6d3c:	2003e3d0 	.word	0x2003e3d0
   d6d40:	2003e3cc 	.word	0x2003e3cc
   d6d44:	2003ce30 	.word	0x2003ce30
   d6d48:	000d6de1 	.word	0x000d6de1

000d6d4c <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   d6d4c:	b513      	push	{r0, r1, r4, lr}
   d6d4e:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6d50:	a801      	add	r0, sp, #4
   d6d52:	f7ff fed7 	bl	d6b04 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   d6d56:	2100      	movs	r1, #0
   d6d58:	4620      	mov	r0, r4
   d6d5a:	f7fe ff9f 	bl	d5c9c <hal_ble_gap_set_tx_power>
   d6d5e:	4604      	mov	r4, r0
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
   d6d60:	a801      	add	r0, sp, #4
   d6d62:	f7ff fedd 	bl	d6b20 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}
   d6d66:	4620      	mov	r0, r4
   d6d68:	b002      	add	sp, #8
   d6d6a:	bd10      	pop	{r4, pc}

000d6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6d6c:	680b      	ldr	r3, [r1, #0]
   d6d6e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6d70:	b113      	cbz	r3, d6d78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6d72:	685a      	ldr	r2, [r3, #4]
   d6d74:	3201      	adds	r2, #1
   d6d76:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6d78:	4770      	bx	lr

000d6d7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6d7a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6d7c:	6804      	ldr	r4, [r0, #0]
   d6d7e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6d80:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6d82:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6d86:	42a6      	cmp	r6, r4
   d6d88:	d004      	beq.n	d6d94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6d8a:	1d20      	adds	r0, r4, #4
   d6d8c:	f7fd faae 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d90:	3408      	adds	r4, #8
   d6d92:	e7f8      	b.n	d6d86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d94:	6828      	ldr	r0, [r5, #0]
   d6d96:	f7ff fa2b 	bl	d61f0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6d9a:	4628      	mov	r0, r5
   d6d9c:	bd70      	pop	{r4, r5, r6, pc}

000d6d9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6d9e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6da0:	6804      	ldr	r4, [r0, #0]
   d6da2:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6da4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6da6:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6daa:	42a6      	cmp	r6, r4
   d6dac:	d004      	beq.n	d6db8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6dae:	1d20      	adds	r0, r4, #4
   d6db0:	f7fd fa9c 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6db4:	3408      	adds	r4, #8
   d6db6:	e7f8      	b.n	d6daa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6db8:	6828      	ldr	r0, [r5, #0]
   d6dba:	f7ff fa19 	bl	d61f0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6dbe:	4628      	mov	r0, r5
   d6dc0:	bd70      	pop	{r4, r5, r6, pc}

000d6dc2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6dc2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6dc4:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d6dc6:	f104 0018 	add.w	r0, r4, #24
   d6dca:	f7ff ffe8 	bl	d6d9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6dce:	f104 000c 	add.w	r0, r4, #12
   d6dd2:	f7ff ffd2 	bl	d6d7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d6dd6:	4620      	mov	r0, r4
   d6dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6ddc:	f7fd b961 	b.w	d40a2 <_ZdlPv>

000d6de0 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6de2:	6804      	ldr	r4, [r0, #0]
   d6de4:	4607      	mov	r7, r0
   d6de6:	b1c4      	cbz	r4, d6e1a <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6de8:	69a5      	ldr	r5, [r4, #24]
   d6dea:	69e3      	ldr	r3, [r4, #28]
   d6dec:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6df0:	42ae      	cmp	r6, r5
   d6df2:	d004      	beq.n	d6dfe <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6df4:	1d28      	adds	r0, r5, #4
   d6df6:	f7fd fa79 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6dfa:	3508      	adds	r5, #8
   d6dfc:	e7f8      	b.n	d6df0 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6dfe:	69a0      	ldr	r0, [r4, #24]
   d6e00:	f7ff f9f6 	bl	d61f0 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d6e04:	f104 000c 	add.w	r0, r4, #12
   d6e08:	f7ff ffc9 	bl	d6d9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6e0c:	4620      	mov	r0, r4
   d6e0e:	f7ff ffb4 	bl	d6d7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6e12:	2134      	movs	r1, #52	; 0x34
   d6e14:	4620      	mov	r0, r4
   d6e16:	f001 ffcd 	bl	d8db4 <_ZdlPvj>
   d6e1a:	4638      	mov	r0, r7
   d6e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d6e20 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6e22:	2500      	movs	r5, #0
   d6e24:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6e26:	6045      	str	r5, [r0, #4]
   d6e28:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6e2a:	2024      	movs	r0, #36	; 0x24
   d6e2c:	f7fd f935 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6e30:	4604      	mov	r4, r0
   d6e32:	b178      	cbz	r0, d6e54 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6e34:	4603      	mov	r3, r0
   d6e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6e3a:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d6e3e:	f8c0 5002 	str.w	r5, [r0, #2]
   d6e42:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6e44:	7285      	strb	r5, [r0, #10]
   d6e46:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6e48:	60c5      	str	r5, [r0, #12]
   d6e4a:	6105      	str	r5, [r0, #16]
   d6e4c:	6145      	str	r5, [r0, #20]
   d6e4e:	6185      	str	r5, [r0, #24]
   d6e50:	61c5      	str	r5, [r0, #28]
   d6e52:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6e54:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6e56:	2014      	movs	r0, #20
   d6e58:	9301      	str	r3, [sp, #4]
   d6e5a:	f7fd f91e 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6e5e:	4603      	mov	r3, r0
   d6e60:	b128      	cbz	r0, d6e6e <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6e62:	2201      	movs	r2, #1
   d6e64:	6042      	str	r2, [r0, #4]
   d6e66:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6e68:	4a08      	ldr	r2, [pc, #32]	; (d6e8c <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d6e6a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6e6c:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6e6e:	a802      	add	r0, sp, #8
   d6e70:	6872      	ldr	r2, [r6, #4]
   d6e72:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d6e76:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6e78:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6e7a:	f7fd fa37 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d6e7e:	6833      	ldr	r3, [r6, #0]
   d6e80:	b90b      	cbnz	r3, d6e86 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d6e82:	f7ff fe35 	bl	d6af0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d6e86:	4630      	mov	r0, r6
   d6e88:	b002      	add	sp, #8
   d6e8a:	bd70      	pop	{r4, r5, r6, pc}
   d6e8c:	000dc128 	.word	0x000dc128

000d6e90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6e90:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6e92:	b570      	push	{r4, r5, r6, lr}
   d6e94:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6e96:	d91a      	bls.n	d6ece <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d6e98:	4290      	cmp	r0, r2
   d6e9a:	d219      	bcs.n	d6ed0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6e9c:	f1a1 0608 	sub.w	r6, r1, #8
   d6ea0:	1a51      	subs	r1, r2, r1
   d6ea2:	3904      	subs	r1, #4
   d6ea4:	1f15      	subs	r5, r2, #4
   d6ea6:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d6ea8:	1f2b      	subs	r3, r5, #4
   d6eaa:	429e      	cmp	r6, r3
   d6eac:	d025      	beq.n	d6efa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d6eae:	2c04      	cmp	r4, #4
   d6eb0:	d007      	beq.n	d6ec2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6eb2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d6eb6:	f844 3c04 	str.w	r3, [r4, #-4]
   d6eba:	4629      	mov	r1, r5
   d6ebc:	4620      	mov	r0, r4
   d6ebe:	f7ff ff55 	bl	d6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6ec2:	4628      	mov	r0, r5
   d6ec4:	f7fd fa12 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ec8:	3d08      	subs	r5, #8
   d6eca:	3c08      	subs	r4, #8
   d6ecc:	e7ec      	b.n	d6ea8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d6ece:	d014      	beq.n	d6efa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d6ed0:	1d0c      	adds	r4, r1, #4
   d6ed2:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d6ed4:	1f23      	subs	r3, r4, #4
   d6ed6:	429d      	cmp	r5, r3
   d6ed8:	d00f      	beq.n	d6efa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d6eda:	2e04      	cmp	r6, #4
   d6edc:	d007      	beq.n	d6eee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ede:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d6ee2:	f846 3c04 	str.w	r3, [r6, #-4]
   d6ee6:	4621      	mov	r1, r4
   d6ee8:	4630      	mov	r0, r6
   d6eea:	f7ff ff3f 	bl	d6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6eee:	4620      	mov	r0, r4
   d6ef0:	f7fd f9fc 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ef4:	3408      	adds	r4, #8
   d6ef6:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6ef8:	e7ec      	b.n	d6ed4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d6efa:	bd70      	pop	{r4, r5, r6, pc}

000d6efc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6f00:	6804      	ldr	r4, [r0, #0]
   d6f02:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6f04:	4605      	mov	r5, r0
   d6f06:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6f08:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6f0c:	42a7      	cmp	r7, r4
   d6f0e:	d018      	beq.n	d6f42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d6f10:	4641      	mov	r1, r8
   d6f12:	4620      	mov	r0, r4
   d6f14:	f7ff feb4 	bl	d6c80 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6f18:	4606      	mov	r6, r0
   d6f1a:	b908      	cbnz	r0, d6f20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6f1c:	3408      	adds	r4, #8
   d6f1e:	e7f5      	b.n	d6f0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d6f20:	b18c      	cbz	r4, d6f46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d6f22:	1d20      	adds	r0, r4, #4
   d6f24:	f7fd f9e2 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6f28:	682b      	ldr	r3, [r5, #0]
   d6f2a:	686a      	ldr	r2, [r5, #4]
   d6f2c:	f104 0108 	add.w	r1, r4, #8
   d6f30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6f34:	4620      	mov	r0, r4
   d6f36:	f7ff ffab 	bl	d6e90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6f3a:	686b      	ldr	r3, [r5, #4]
   d6f3c:	3b01      	subs	r3, #1
   d6f3e:	606b      	str	r3, [r5, #4]
    return true;
   d6f40:	e002      	b.n	d6f48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6f42:	2600      	movs	r6, #0
   d6f44:	e000      	b.n	d6f48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d6f46:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d6f48:	4630      	mov	r0, r6
   d6f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6f4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6f50:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6f52:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d6f56:	6847      	ldr	r7, [r0, #4]
   d6f58:	9300      	str	r3, [sp, #0]
   d6f5a:	a801      	add	r0, sp, #4
   d6f5c:	f7ff ff06 	bl	d6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6f60:	6866      	ldr	r6, [r4, #4]
   d6f62:	68a3      	ldr	r3, [r4, #8]
   d6f64:	429e      	cmp	r6, r3
   d6f66:	db14      	blt.n	d6f92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d6f68:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6f6a:	2e00      	cmp	r6, #0
   d6f6c:	dd0b      	ble.n	d6f86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6f6e:	00f0      	lsls	r0, r6, #3
   d6f70:	f7ff f936 	bl	d61e0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6f74:	4605      	mov	r5, r0
   d6f76:	b318      	cbz	r0, d6fc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d6f78:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6f7c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6f80:	f7ff ff86 	bl	d6e90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6f84:	e000      	b.n	d6f88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6f86:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6f88:	6820      	ldr	r0, [r4, #0]
   d6f8a:	f7ff f931 	bl	d61f0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6f8e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6f90:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6f92:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6f94:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6f96:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6f9a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d6f9e:	4629      	mov	r1, r5
   d6fa0:	f105 0008 	add.w	r0, r5, #8
   d6fa4:	f7ff ff74 	bl	d6e90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6fa8:	b135      	cbz	r5, d6fb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d6faa:	9b00      	ldr	r3, [sp, #0]
   d6fac:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d6fb0:	a901      	add	r1, sp, #4
   d6fb2:	1d28      	adds	r0, r5, #4
   d6fb4:	f7ff feda 	bl	d6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d6fb8:	6863      	ldr	r3, [r4, #4]
   d6fba:	3301      	adds	r3, #1
   d6fbc:	6063      	str	r3, [r4, #4]
   d6fbe:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6fc0:	a801      	add	r0, sp, #4
   d6fc2:	f7fd f993 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6fc6:	4628      	mov	r0, r5
   d6fc8:	b003      	add	sp, #12
   d6fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6fcc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6fd0:	4604      	mov	r4, r0
   d6fd2:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6fd4:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6fd6:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6fd8:	f7ff fd94 	bl	d6b04 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6fdc:	6823      	ldr	r3, [r4, #0]
   d6fde:	2b03      	cmp	r3, #3
   d6fe0:	d002      	beq.n	d6fe8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d6fe2:	2b04      	cmp	r3, #4
   d6fe4:	d042      	beq.n	d706c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d6fe6:	e087      	b.n	d70f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d6fe8:	a804      	add	r0, sp, #16
   d6fea:	f7ff ff19 	bl	d6e20 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6fee:	9b04      	ldr	r3, [sp, #16]
   d6ff0:	8922      	ldrh	r2, [r4, #8]
   d6ff2:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6ff4:	6862      	ldr	r2, [r4, #4]
   d6ff6:	9904      	ldr	r1, [sp, #16]
   d6ff8:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d6ffc:	f8c1 3002 	str.w	r3, [r1, #2]
   d7000:	6853      	ldr	r3, [r2, #4]
   d7002:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7006:	a807      	add	r0, sp, #28
   d7008:	9b04      	ldr	r3, [sp, #16]
   d700a:	9306      	str	r3, [sp, #24]
   d700c:	a905      	add	r1, sp, #20
   d700e:	f7ff fead 	bl	d6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7012:	a906      	add	r1, sp, #24
   d7014:	f105 0018 	add.w	r0, r5, #24
   d7018:	f7ff ff99 	bl	d6f4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d701c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d701e:	a807      	add	r0, sp, #28
   d7020:	f7fd f964 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7024:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d7026:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7028:	b974      	cbnz	r4, d7048 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d702a:	4b36      	ldr	r3, [pc, #216]	; (d7104 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d702c:	9300      	str	r3, [sp, #0]
   d702e:	aa06      	add	r2, sp, #24
   d7030:	4623      	mov	r3, r4
   d7032:	4935      	ldr	r1, [pc, #212]	; (d7108 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7034:	9407      	str	r4, [sp, #28]
   d7036:	2032      	movs	r0, #50	; 0x32
   d7038:	f7fe fff4 	bl	d6024 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d703c:	9b04      	ldr	r3, [sp, #16]
   d703e:	4621      	mov	r1, r4
   d7040:	8818      	ldrh	r0, [r3, #0]
   d7042:	f7fe fe33 	bl	d5cac <hal_ble_gap_disconnect>
   d7046:	e00d      	b.n	d7064 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d7048:	4a30      	ldr	r2, [pc, #192]	; (d710c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d704a:	9200      	str	r2, [sp, #0]
   d704c:	2300      	movs	r3, #0
   d704e:	aa06      	add	r2, sp, #24
   d7050:	492d      	ldr	r1, [pc, #180]	; (d7108 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7052:	9307      	str	r3, [sp, #28]
   d7054:	2001      	movs	r0, #1
   d7056:	f7fe ffe5 	bl	d6024 <log_message>
                if (impl->connectedCb_) {
   d705a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d705c:	b113      	cbz	r3, d7064 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d705e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d7060:	a804      	add	r0, sp, #16
   d7062:	4798      	blx	r3
   d7064:	a805      	add	r0, sp, #20
   d7066:	f7fd f941 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d706a:	e045      	b.n	d70f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d706c:	8921      	ldrh	r1, [r4, #8]
   d706e:	4628      	mov	r0, r5
   d7070:	f7ff fded 	bl	d6c4e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7074:	4607      	mov	r7, r0
   d7076:	2800      	cmp	r0, #0
   d7078:	d03e      	beq.n	d70f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d707a:	6804      	ldr	r4, [r0, #0]
   d707c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d707e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d7080:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7084:	8022      	strh	r2, [r4, #0]
   d7086:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d708a:	4299      	cmp	r1, r3
   d708c:	d003      	beq.n	d7096 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d708e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7092:	8042      	strh	r2, [r0, #2]
   d7094:	e7f9      	b.n	d708a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7096:	68e6      	ldr	r6, [r4, #12]
   d7098:	6923      	ldr	r3, [r4, #16]
   d709a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d709e:	45b0      	cmp	r8, r6
   d70a0:	d004      	beq.n	d70ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d70a2:	1d30      	adds	r0, r6, #4
   d70a4:	f7fd f922 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d70a8:	3608      	adds	r6, #8
   d70aa:	e7f8      	b.n	d709e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d70ac:	2300      	movs	r3, #0
   d70ae:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d70b0:	69a6      	ldr	r6, [r4, #24]
   d70b2:	69e3      	ldr	r3, [r4, #28]
   d70b4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d70b8:	45b0      	cmp	r8, r6
   d70ba:	d004      	beq.n	d70c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d70bc:	1d30      	adds	r0, r6, #4
   d70be:	f7fd f915 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d70c2:	3608      	adds	r6, #8
   d70c4:	e7f8      	b.n	d70b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d70c6:	2300      	movs	r3, #0
   d70c8:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d70ca:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d70cc:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d70ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d70d0:	b113      	cbz	r3, d70d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d70d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d70d4:	4638      	mov	r0, r7
   d70d6:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d70d8:	2320      	movs	r3, #32
   d70da:	4a0d      	ldr	r2, [pc, #52]	; (d7110 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d70dc:	9306      	str	r3, [sp, #24]
   d70de:	9200      	str	r2, [sp, #0]
   d70e0:	2300      	movs	r3, #0
   d70e2:	4909      	ldr	r1, [pc, #36]	; (d7108 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d70e4:	9307      	str	r3, [sp, #28]
   d70e6:	2001      	movs	r0, #1
   d70e8:	aa06      	add	r2, sp, #24
   d70ea:	f7fe ff9b 	bl	d6024 <log_message>
                    impl->peers_.removeOne(*peer);
   d70ee:	4639      	mov	r1, r7
   d70f0:	f105 0018 	add.w	r0, r5, #24
   d70f4:	f7ff ff02 	bl	d6efc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d70f8:	a803      	add	r0, sp, #12
   d70fa:	f7ff fd11 	bl	d6b20 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d70fe:	b00e      	add	sp, #56	; 0x38
   d7100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7104:	000dc19e 	.word	0x000dc19e
   d7108:	000dc13c 	.word	0x000dc13c
   d710c:	000dc1c4 	.word	0x000dc1c4
   d7110:	000dc1e1 	.word	0x000dc1e1

000d7114 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7114:	4802      	ldr	r0, [pc, #8]	; (d7120 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7116:	2300      	movs	r3, #0
   d7118:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d711a:	f7fe be33 	b.w	d5d84 <os_mutex_recursive_create>
   d711e:	bf00      	nop
   d7120:	2003e3d4 	.word	0x2003e3d4

000d7124 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7126:	4606      	mov	r6, r0
   d7128:	460d      	mov	r5, r1
   d712a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d712c:	2400      	movs	r4, #0
  while (size--) {
   d712e:	42bd      	cmp	r5, r7
   d7130:	d00c      	beq.n	d714c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7132:	6833      	ldr	r3, [r6, #0]
   d7134:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7138:	689b      	ldr	r3, [r3, #8]
   d713a:	4630      	mov	r0, r6
   d713c:	4798      	blx	r3
     if (chunk>=0)
   d713e:	2800      	cmp	r0, #0
   d7140:	db01      	blt.n	d7146 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7142:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7144:	e7f3      	b.n	d712e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7146:	2c00      	cmp	r4, #0
   d7148:	bf08      	it	eq
   d714a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d714c:	4620      	mov	r0, r4
   d714e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7150 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7150:	b570      	push	{r4, r5, r6, lr}
   d7152:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7154:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7156:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7158:	b149      	cbz	r1, d716e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d715a:	f002 fde4 	bl	d9d26 <strlen>
   d715e:	682b      	ldr	r3, [r5, #0]
   d7160:	4602      	mov	r2, r0
   d7162:	4621      	mov	r1, r4
   d7164:	4628      	mov	r0, r5
   d7166:	68db      	ldr	r3, [r3, #12]
    }
   d7168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d716c:	4718      	bx	r3
    }
   d716e:	bd70      	pop	{r4, r5, r6, pc}

000d7170 <_ZN5Print5printEPKc>:
   d7170:	b508      	push	{r3, lr}
   d7172:	f7ff ffed 	bl	d7150 <_ZN5Print5writeEPKc>
   d7176:	bd08      	pop	{r3, pc}

000d7178 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7178:	6803      	ldr	r3, [r0, #0]
   d717a:	689b      	ldr	r3, [r3, #8]
   d717c:	4718      	bx	r3

000d717e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d717e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7180:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7182:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7184:	f7ff fff8 	bl	d7178 <_ZN5Print5printEc>
  n += print('\n');
   d7188:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d718a:	4604      	mov	r4, r0
  n += print('\n');
   d718c:	4628      	mov	r0, r5
   d718e:	f7ff fff3 	bl	d7178 <_ZN5Print5printEc>
  return n;
}
   d7192:	4420      	add	r0, r4
   d7194:	bd38      	pop	{r3, r4, r5, pc}

000d7196 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7196:	b538      	push	{r3, r4, r5, lr}
   d7198:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d719a:	f7ff ffd9 	bl	d7150 <_ZN5Print5writeEPKc>
   d719e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d71a0:	4628      	mov	r0, r5
   d71a2:	f7ff ffec 	bl	d717e <_ZN5Print7printlnEv>
  return n;
}
   d71a6:	4420      	add	r0, r4
   d71a8:	bd38      	pop	{r3, r4, r5, pc}

000d71aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d71aa:	b530      	push	{r4, r5, lr}
   d71ac:	b08b      	sub	sp, #44	; 0x2c
   d71ae:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d71b0:	2100      	movs	r1, #0
   d71b2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d71b6:	2a01      	cmp	r2, #1
   d71b8:	bf98      	it	ls
   d71ba:	220a      	movls	r2, #10
   d71bc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d71c0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d71c4:	fb05 3312 	mls	r3, r5, r2, r3
   d71c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d71cc:	2b09      	cmp	r3, #9
   d71ce:	bf94      	ite	ls
   d71d0:	3330      	addls	r3, #48	; 0x30
   d71d2:	3337      	addhi	r3, #55	; 0x37
   d71d4:	b2db      	uxtb	r3, r3
   d71d6:	4621      	mov	r1, r4
   d71d8:	f804 3901 	strb.w	r3, [r4], #-1
   d71dc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d71de:	2d00      	cmp	r5, #0
   d71e0:	d1ee      	bne.n	d71c0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d71e2:	f7ff ffb5 	bl	d7150 <_ZN5Print5writeEPKc>
}
   d71e6:	b00b      	add	sp, #44	; 0x2c
   d71e8:	bd30      	pop	{r4, r5, pc}

000d71ea <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d71ea:	b410      	push	{r4}
  if (base == 0) return write(n);
   d71ec:	b92a      	cbnz	r2, d71fa <_ZN5Print5printEmi+0x10>
   d71ee:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d71f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d71f4:	689b      	ldr	r3, [r3, #8]
   d71f6:	b2c9      	uxtb	r1, r1
   d71f8:	4718      	bx	r3
  else return printNumber(n, base);
   d71fa:	b2d2      	uxtb	r2, r2
}
   d71fc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7200:	f7ff bfd3 	b.w	d71aa <_ZN5Print11printNumberEmh>

000d7204 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7204:	f7ff bff1 	b.w	d71ea <_ZN5Print5printEmi>

000d7208 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d7208:	b538      	push	{r3, r4, r5, lr}
   d720a:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d720c:	f7ff ffed 	bl	d71ea <_ZN5Print5printEmi>
   d7210:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d7212:	4628      	mov	r0, r5
   d7214:	f7ff ffb3 	bl	d717e <_ZN5Print7printlnEv>
  return n;
}
   d7218:	4420      	add	r0, r4
   d721a:	bd38      	pop	{r3, r4, r5, pc}

000d721c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7220:	4607      	mov	r7, r0
   d7222:	460e      	mov	r6, r1
  if (base == 0) {
   d7224:	4615      	mov	r5, r2
   d7226:	b92a      	cbnz	r2, d7234 <_ZN5Print5printEli+0x18>
    return write(n);
   d7228:	6803      	ldr	r3, [r0, #0]
   d722a:	b2c9      	uxtb	r1, r1
   d722c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d722e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d7232:	4718      	bx	r3
  } else if (base == 10) {
   d7234:	2a0a      	cmp	r2, #10
   d7236:	d102      	bne.n	d723e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d7238:	2900      	cmp	r1, #0
   d723a:	da01      	bge.n	d7240 <_ZN5Print5printEli+0x24>
   d723c:	e004      	b.n	d7248 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d723e:	b2d2      	uxtb	r2, r2
  }
}
   d7240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7244:	f7ff bfb1 	b.w	d71aa <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7248:	212d      	movs	r1, #45	; 0x2d
   d724a:	f7ff ff95 	bl	d7178 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d724e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7250:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d7252:	4271      	negs	r1, r6
   d7254:	4638      	mov	r0, r7
   d7256:	f7ff ffa8 	bl	d71aa <_ZN5Print11printNumberEmh>
   d725a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7260 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7260:	f7ff bfdc 	b.w	d721c <_ZN5Print5printEli>

000d7264 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7264:	b40c      	push	{r2, r3}
   d7266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d726a:	b087      	sub	sp, #28
   d726c:	af00      	add	r7, sp, #0
   d726e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7272:	4605      	mov	r5, r0
   d7274:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7278:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d727a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d727c:	4623      	mov	r3, r4
   d727e:	464a      	mov	r2, r9
   d7280:	2114      	movs	r1, #20
   d7282:	1d38      	adds	r0, r7, #4
   d7284:	f7fe ffcc 	bl	d6220 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7288:	2813      	cmp	r0, #19
   d728a:	d805      	bhi.n	d7298 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d728c:	1d39      	adds	r1, r7, #4
   d728e:	4628      	mov	r0, r5
   d7290:	f7ff ff5e 	bl	d7150 <_ZN5Print5writeEPKc>
   d7294:	4604      	mov	r4, r0
   d7296:	e013      	b.n	d72c0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7298:	f100 0308 	add.w	r3, r0, #8
   d729c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d72a0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d72a2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d72a6:	1c41      	adds	r1, r0, #1
   d72a8:	4623      	mov	r3, r4
   d72aa:	464a      	mov	r2, r9
   d72ac:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d72ae:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d72b0:	f7fe ffb6 	bl	d6220 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d72b4:	4669      	mov	r1, sp
   d72b6:	4628      	mov	r0, r5
   d72b8:	f7ff ff4a 	bl	d7150 <_ZN5Print5writeEPKc>
   d72bc:	4604      	mov	r4, r0
   d72be:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d72c0:	b11e      	cbz	r6, d72ca <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d72c2:	4628      	mov	r0, r5
   d72c4:	f7ff ff5b 	bl	d717e <_ZN5Print7printlnEv>
   d72c8:	4404      	add	r4, r0
    return n;
}
   d72ca:	4620      	mov	r0, r4
   d72cc:	371c      	adds	r7, #28
   d72ce:	46bd      	mov	sp, r7
   d72d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72d4:	b002      	add	sp, #8
   d72d6:	4770      	bx	lr

000d72d8 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d72d8:	6800      	ldr	r0, [r0, #0]
   d72da:	f7fe bd5b 	b.w	d5d94 <os_mutex_recursive_lock>
	...

000d72e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d72e0:	4b01      	ldr	r3, [pc, #4]	; (d72e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d72e2:	4a02      	ldr	r2, [pc, #8]	; (d72ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d72e4:	601a      	str	r2, [r3, #0]
   d72e6:	4770      	bx	lr
   d72e8:	2003e3d8 	.word	0x2003e3d8
   d72ec:	000dc34f 	.word	0x000dc34f

000d72f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d72f0:	4b02      	ldr	r3, [pc, #8]	; (d72fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d72f2:	681a      	ldr	r2, [r3, #0]
   d72f4:	4b02      	ldr	r3, [pc, #8]	; (d7300 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d72f6:	601a      	str	r2, [r3, #0]
   d72f8:	4770      	bx	lr
   d72fa:	bf00      	nop
   d72fc:	2003cd90 	.word	0x2003cd90
   d7300:	2003e3dc 	.word	0x2003e3dc

000d7304 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7304:	2100      	movs	r1, #0
   d7306:	f7fe be9d 	b.w	d6044 <system_delay_ms>

000d730a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d730a:	b510      	push	{r4, lr}
   d730c:	4604      	mov	r4, r0
   d730e:	f7fc ff2f 	bl	d4170 <_ZNSt14_Function_baseD1Ev>
   d7312:	4620      	mov	r0, r4
   d7314:	bd10      	pop	{r4, pc}

000d7316 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7316:	b513      	push	{r0, r1, r4, lr}
   d7318:	460b      	mov	r3, r1
   d731a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d731c:	c803      	ldmia	r0, {r0, r1}
   d731e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7322:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7326:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d732a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d732e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7332:	b002      	add	sp, #8
   d7334:	bd10      	pop	{r4, pc}
	...

000d7338 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7338:	4803      	ldr	r0, [pc, #12]	; (d7348 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d733a:	4a04      	ldr	r2, [pc, #16]	; (d734c <_GLOBAL__sub_I_RGB+0x14>)
   d733c:	4904      	ldr	r1, [pc, #16]	; (d7350 <_GLOBAL__sub_I_RGB+0x18>)
   d733e:	2300      	movs	r3, #0
   d7340:	6083      	str	r3, [r0, #8]
   d7342:	f001 bd29 	b.w	d8d98 <__aeabi_atexit>
   d7346:	bf00      	nop
   d7348:	2003e3e0 	.word	0x2003e3e0
   d734c:	2003ce30 	.word	0x2003ce30
   d7350:	000d730b 	.word	0x000d730b

000d7354 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7354:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7356:	4b0c      	ldr	r3, [pc, #48]	; (d7388 <serialEventRun+0x34>)
   d7358:	b133      	cbz	r3, d7368 <serialEventRun+0x14>
   d735a:	f000 fc4d 	bl	d7bf8 <_Z16_fetch_usbserialv>
   d735e:	6803      	ldr	r3, [r0, #0]
   d7360:	691b      	ldr	r3, [r3, #16]
   d7362:	4798      	blx	r3
   d7364:	2800      	cmp	r0, #0
   d7366:	dc09      	bgt.n	d737c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7368:	4b08      	ldr	r3, [pc, #32]	; (d738c <serialEventRun+0x38>)
   d736a:	b163      	cbz	r3, d7386 <serialEventRun+0x32>
   d736c:	f000 fcc6 	bl	d7cfc <_Z22__fetch_global_Serial1v>
   d7370:	6803      	ldr	r3, [r0, #0]
   d7372:	691b      	ldr	r3, [r3, #16]
   d7374:	4798      	blx	r3
   d7376:	2800      	cmp	r0, #0
   d7378:	dc03      	bgt.n	d7382 <serialEventRun+0x2e>
   d737a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d737c:	f3af 8000 	nop.w
   d7380:	e7f2      	b.n	d7368 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7382:	f3af 8000 	nop.w
   d7386:	bd08      	pop	{r3, pc}
	...

000d7390 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7390:	b508      	push	{r3, lr}
	serialEventRun();
   d7392:	f7ff ffdf 	bl	d7354 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7396:	f7fe fc69 	bl	d5c6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d739a:	4b01      	ldr	r3, [pc, #4]	; (d73a0 <_post_loop+0x10>)
   d739c:	6018      	str	r0, [r3, #0]
   d739e:	bd08      	pop	{r3, pc}
   d73a0:	2003e730 	.word	0x2003e730

000d73a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d73a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d73a6:	2300      	movs	r3, #0
   d73a8:	9300      	str	r3, [sp, #0]
   d73aa:	461a      	mov	r2, r3
   d73ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d73b0:	f7fe fe72 	bl	d6098 <system_ctrl_set_result>
}
   d73b4:	b003      	add	sp, #12
   d73b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d73bc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d73bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d73be:	8843      	ldrh	r3, [r0, #2]
   d73c0:	2b0a      	cmp	r3, #10
   d73c2:	d008      	beq.n	d73d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d73c4:	2b50      	cmp	r3, #80	; 0x50
   d73c6:	d109      	bne.n	d73dc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d73c8:	4b09      	ldr	r3, [pc, #36]	; (d73f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d73ca:	681b      	ldr	r3, [r3, #0]
   d73cc:	b13b      	cbz	r3, d73de <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d73ce:	b003      	add	sp, #12
   d73d0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d73d4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d73d6:	f7ff ffe5 	bl	d73a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d73da:	e006      	b.n	d73ea <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d73dc:	2300      	movs	r3, #0
   d73de:	9300      	str	r3, [sp, #0]
   d73e0:	461a      	mov	r2, r3
   d73e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d73e6:	f7fe fe57 	bl	d6098 <system_ctrl_set_result>
        break;
    }
}
   d73ea:	b003      	add	sp, #12
   d73ec:	f85d fb04 	ldr.w	pc, [sp], #4
   d73f0:	2003e3f0 	.word	0x2003e3f0

000d73f4 <module_user_init_hook>:

void module_user_init_hook()
{
   d73f4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d73f6:	f7fe fc21 	bl	d5c3c <HAL_RNG_GetRandomNumber>
   d73fa:	4604      	mov	r4, r0
    srand(seed);
   d73fc:	f002 fc30 	bl	d9c60 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7400:	4b07      	ldr	r3, [pc, #28]	; (d7420 <module_user_init_hook+0x2c>)
   d7402:	b113      	cbz	r3, d740a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7404:	4620      	mov	r0, r4
   d7406:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d740a:	2100      	movs	r1, #0
   d740c:	4804      	ldr	r0, [pc, #16]	; (d7420 <module_user_init_hook+0x2c>)
   d740e:	f7fe fedf 	bl	d61d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7412:	2100      	movs	r1, #0
   d7414:	4803      	ldr	r0, [pc, #12]	; (d7424 <module_user_init_hook+0x30>)
}
   d7416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d741a:	f7fe be33 	b.w	d6084 <system_ctrl_set_app_request_handler>
   d741e:	bf00      	nop
   d7420:	00000000 	.word	0x00000000
   d7424:	000d73bd 	.word	0x000d73bd

000d7428 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7428:	4770      	bx	lr

000d742a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d742a:	2000      	movs	r0, #0
   d742c:	4770      	bx	lr

000d742e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d742e:	b510      	push	{r4, lr}
   d7430:	2110      	movs	r1, #16
   d7432:	4604      	mov	r4, r0
   d7434:	f001 fcbe 	bl	d8db4 <_ZdlPvj>
   d7438:	4620      	mov	r0, r4
   d743a:	bd10      	pop	{r4, pc}

000d743c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d743c:	b508      	push	{r3, lr}
      { delete this; }
   d743e:	b108      	cbz	r0, d7444 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7440:	f7ff fff5 	bl	d742e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7444:	bd08      	pop	{r3, pc}

000d7446 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7446:	2200      	movs	r2, #0
   d7448:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d744a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d744c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d7450:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7452:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7456:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7458:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d745a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d745c:	680c      	ldr	r4, [r1, #0]
   d745e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7460:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d7462:	bd10      	pop	{r4, pc}

000d7464 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7464:	b510      	push	{r4, lr}
   d7466:	4604      	mov	r4, r0
    free((void*)msg_);
   d7468:	6800      	ldr	r0, [r0, #0]
   d746a:	f7fe fec1 	bl	d61f0 <free>
}
   d746e:	4620      	mov	r0, r4
   d7470:	bd10      	pop	{r4, pc}

000d7472 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7472:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7474:	68c4      	ldr	r4, [r0, #12]
   d7476:	b1f4      	cbz	r4, d74b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7478:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d747a:	2b02      	cmp	r3, #2
   d747c:	d103      	bne.n	d7486 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d747e:	f104 000c 	add.w	r0, r4, #12
   d7482:	f7ff ffef 	bl	d7464 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7486:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7488:	b135      	cbz	r5, d7498 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d748a:	4628      	mov	r0, r5
   d748c:	f7fc fe70 	bl	d4170 <_ZNSt14_Function_baseD1Ev>
   d7490:	2110      	movs	r1, #16
   d7492:	4628      	mov	r0, r5
   d7494:	f001 fc8e 	bl	d8db4 <_ZdlPvj>
   d7498:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d749a:	b135      	cbz	r5, d74aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d749c:	4628      	mov	r0, r5
   d749e:	f7fc fe67 	bl	d4170 <_ZNSt14_Function_baseD1Ev>
   d74a2:	2110      	movs	r1, #16
   d74a4:	4628      	mov	r0, r5
   d74a6:	f001 fc85 	bl	d8db4 <_ZdlPvj>
   d74aa:	4620      	mov	r0, r4
   d74ac:	2114      	movs	r1, #20
   d74ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d74b2:	f001 bc7f 	b.w	d8db4 <_ZdlPvj>
   d74b6:	bd38      	pop	{r3, r4, r5, pc}

000d74b8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d74b8:	b510      	push	{r4, lr}
   d74ba:	b088      	sub	sp, #32
   d74bc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d74be:	4668      	mov	r0, sp
   d74c0:	f7ff fab4 	bl	d6a2c <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d74c4:	4669      	mov	r1, sp
   d74c6:	a804      	add	r0, sp, #16
   d74c8:	f7ff fad2 	bl	d6a70 <_ZN6StringC1ERKS_>
   d74cc:	a804      	add	r0, sp, #16
   d74ce:	47a0      	blx	r4
   d74d0:	4604      	mov	r4, r0
   d74d2:	a804      	add	r0, sp, #16
   d74d4:	f7ff fa63 	bl	d699e <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d74d8:	4668      	mov	r0, sp
   d74da:	f7ff fa60 	bl	d699e <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d74de:	4620      	mov	r0, r4
   d74e0:	b008      	add	sp, #32
   d74e2:	bd10      	pop	{r4, pc}

000d74e4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d74e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d74e6:	2410      	movs	r4, #16
   d74e8:	b085      	sub	sp, #20
   d74ea:	4607      	mov	r7, r0
   d74ec:	460e      	mov	r6, r1
   d74ee:	4615      	mov	r5, r2
   d74f0:	2100      	movs	r1, #0
   d74f2:	4622      	mov	r2, r4
   d74f4:	4668      	mov	r0, sp
   d74f6:	f002 fbaa 	bl	d9c4e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d74fa:	2200      	movs	r2, #0
   d74fc:	4669      	mov	r1, sp
   d74fe:	4610      	mov	r0, r2
         size = sizeof(*this);
   d7500:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d7504:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d7506:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d7508:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d750a:	f7fe fe29 	bl	d6160 <spark_function>
}
   d750e:	b005      	add	sp, #20
   d7510:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7512 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7512:	b513      	push	{r0, r1, r4, lr}
   d7514:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7516:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d751a:	2300      	movs	r3, #0
   d751c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d751e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7520:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7522:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7524:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7526:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7528:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d752a:	f7fc fedf 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d752e:	4620      	mov	r0, r4
   d7530:	b002      	add	sp, #8
   d7532:	bd10      	pop	{r4, pc}

000d7534 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7536:	460c      	mov	r4, r1
   d7538:	ad02      	add	r5, sp, #8
   d753a:	f854 3b04 	ldr.w	r3, [r4], #4
   d753e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7542:	4606      	mov	r6, r0
   d7544:	460f      	mov	r7, r1
   d7546:	a801      	add	r0, sp, #4
   d7548:	4621      	mov	r1, r4
   d754a:	f7ff fc0f 	bl	d6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d754e:	4629      	mov	r1, r5
   d7550:	4630      	mov	r0, r6
   d7552:	f7ff ffde 	bl	d7512 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7556:	a801      	add	r0, sp, #4
   d7558:	f7fc fec8 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d755c:	4620      	mov	r0, r4
   d755e:	f7fc fec5 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7562:	4638      	mov	r0, r7
   d7564:	2108      	movs	r1, #8
   d7566:	f001 fc25 	bl	d8db4 <_ZdlPvj>
        return p;
    }
   d756a:	4630      	mov	r0, r6
   d756c:	b003      	add	sp, #12
   d756e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7570:	b538      	push	{r3, r4, r5, lr}
   d7572:	2300      	movs	r3, #0
   d7574:	4604      	mov	r4, r0
   d7576:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7578:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d757a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d757c:	f7fc fd8d 	bl	d409a <_Znwj>
   d7580:	b128      	cbz	r0, d758e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7582:	2301      	movs	r3, #1
   d7584:	6043      	str	r3, [r0, #4]
   d7586:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7588:	4b02      	ldr	r3, [pc, #8]	; (d7594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d758a:	6003      	str	r3, [r0, #0]
   d758c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d758e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7590:	4620      	mov	r0, r4
   d7592:	bd38      	pop	{r3, r4, r5, pc}
   d7594:	000dc3e8 	.word	0x000dc3e8

000d7598 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7598:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d759a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d759c:	b90a      	cbnz	r2, d75a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d759e:	f001 fcd5 	bl	d8f4c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d75a2:	68c3      	ldr	r3, [r0, #12]
    }
   d75a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d75a8:	4718      	bx	r3

000d75aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d75aa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d75ac:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d75ae:	f100 0110 	add.w	r1, r0, #16
   d75b2:	f7ff fff1 	bl	d7598 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d75b6:	bd08      	pop	{r3, pc}

000d75b8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d75b8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d75ba:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d75bc:	b90a      	cbnz	r2, d75c2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d75be:	f001 fcc5 	bl	d8f4c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d75c2:	68c3      	ldr	r3, [r0, #12]
    }
   d75c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d75c8:	4718      	bx	r3

000d75ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d75ca:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d75cc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d75ce:	f100 0110 	add.w	r1, r0, #16
   d75d2:	f7ff fff1 	bl	d75b8 <_ZNKSt8functionIFvRKbEEclES1_>
   d75d6:	bd08      	pop	{r3, pc}

000d75d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d75d8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d75da:	2300      	movs	r3, #0
   d75dc:	6083      	str	r3, [r0, #8]
   d75de:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d75e0:	4604      	mov	r4, r0
   d75e2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d75e4:	b12b      	cbz	r3, d75f2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d75e6:	2202      	movs	r2, #2
   d75e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d75ea:	68eb      	ldr	r3, [r5, #12]
   d75ec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d75ee:	68ab      	ldr	r3, [r5, #8]
   d75f0:	60a3      	str	r3, [r4, #8]
	}
    }
   d75f2:	4620      	mov	r0, r4
   d75f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d75f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d75f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d75fa:	b089      	sub	sp, #36	; 0x24
   d75fc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d75fe:	4668      	mov	r0, sp
   d7600:	f7ff ff21 	bl	d7446 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7604:	2300      	movs	r3, #0
   d7606:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d760a:	f04f 0202 	mov.w	r2, #2
   d760e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7612:	2b00      	cmp	r3, #0
   d7614:	d103      	bne.n	d761e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7616:	e8c4 2f41 	strexb	r1, r2, [r4]
   d761a:	2900      	cmp	r1, #0
   d761c:	d1f7      	bne.n	d760e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d761e:	d002      	beq.n	d7626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7620:	f88d 3008 	strb.w	r3, [sp, #8]
   d7624:	e063      	b.n	d76ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7626:	f114 050c 	adds.w	r5, r4, #12
   d762a:	d003      	beq.n	d7634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d762c:	4669      	mov	r1, sp
   d762e:	4628      	mov	r0, r5
   d7630:	f7ff ff09 	bl	d7446 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7634:	f3bf 8f5f 	dmb	sy
   d7638:	2301      	movs	r3, #1
   d763a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d763c:	2000      	movs	r0, #0
   d763e:	f104 0308 	add.w	r3, r4, #8
   d7642:	f3bf 8f5f 	dmb	sy
   d7646:	e853 6f00 	ldrex	r6, [r3]
   d764a:	e843 0200 	strex	r2, r0, [r3]
   d764e:	2a00      	cmp	r2, #0
   d7650:	d1f9      	bne.n	d7646 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7652:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7656:	2e00      	cmp	r6, #0
   d7658:	d049      	beq.n	d76ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d765a:	f7fe fd03 	bl	d6064 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d765e:	b120      	cbz	r0, d766a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7660:	4629      	mov	r1, r5
   d7662:	4630      	mov	r0, r6
   d7664:	f7ff ff98 	bl	d7598 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7668:	e03a      	b.n	d76e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d766a:	4631      	mov	r1, r6
   d766c:	a802      	add	r0, sp, #8
   d766e:	f7ff ffb3 	bl	d75d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7672:	68e0      	ldr	r0, [r4, #12]
   d7674:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7678:	b108      	cbz	r0, d767e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d767a:	f002 fb39 	bl	d9cf0 <strdup>
   d767e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7680:	2010      	movs	r0, #16
   d7682:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7686:	f7fc fd08 	bl	d409a <_Znwj>
   d768a:	4605      	mov	r5, r0
   d768c:	b1e8      	cbz	r0, d76ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d768e:	2700      	movs	r7, #0
   d7690:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7692:	2018      	movs	r0, #24
   d7694:	f7fc fd01 	bl	d409a <_Znwj>
   d7698:	4604      	mov	r4, r0
   d769a:	b188      	cbz	r0, d76c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d769c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d769e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d76a0:	a802      	add	r0, sp, #8
   d76a2:	f7ff fe38 	bl	d7316 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76a6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d76a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d76aa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76ac:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d76ae:	9204      	str	r2, [sp, #16]
   d76b0:	a906      	add	r1, sp, #24
   d76b2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d76b4:	60e3      	str	r3, [r4, #12]
   d76b6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d76ba:	9205      	str	r2, [sp, #20]
   d76bc:	f7ff fec3 	bl	d7446 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d76c0:	4b0d      	ldr	r3, [pc, #52]	; (d76f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d76c2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d76c4:	4b0d      	ldr	r3, [pc, #52]	; (d76fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d76c6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d76c8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d76ca:	a806      	add	r0, sp, #24
   d76cc:	f7ff feca 	bl	d7464 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d76d0:	a802      	add	r0, sp, #8
   d76d2:	f7fc fd4d 	bl	d4170 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d76d6:	2200      	movs	r2, #0
   d76d8:	4629      	mov	r1, r5
   d76da:	4809      	ldr	r0, [pc, #36]	; (d7700 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d76dc:	f7fe fcca 	bl	d6074 <application_thread_invoke>
   d76e0:	4630      	mov	r0, r6
   d76e2:	f7fc fd45 	bl	d4170 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d76e6:	2110      	movs	r1, #16
   d76e8:	4630      	mov	r0, r6
   d76ea:	f001 fb63 	bl	d8db4 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d76ee:	4668      	mov	r0, sp
   d76f0:	f7ff feb8 	bl	d7464 <_ZN8particle5ErrorD1Ev>
    }
   d76f4:	b009      	add	sp, #36	; 0x24
   d76f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76f8:	000d75ab 	.word	0x000d75ab
   d76fc:	000d7821 	.word	0x000d7821
   d7700:	000d7d49 	.word	0x000d7d49

000d7704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7708:	b08b      	sub	sp, #44	; 0x2c
   d770a:	4606      	mov	r6, r0
   d770c:	460f      	mov	r7, r1
   d770e:	4690      	mov	r8, r2
   d7710:	4699      	mov	r9, r3
   d7712:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7716:	f7fe fd33 	bl	d6180 <spark_cloud_flag_connected>
   d771a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d771c:	4683      	mov	fp, r0
   d771e:	bb30      	cbnz	r0, d776e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7720:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7724:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7726:	a905      	add	r1, sp, #20
   d7728:	4628      	mov	r0, r5
   d772a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d772e:	f7ff fe8a 	bl	d7446 <_ZN8particle5ErrorC1EOS0_>
   d7732:	2014      	movs	r0, #20
   d7734:	f7fc fcb1 	bl	d409a <_Znwj>
   d7738:	4604      	mov	r4, r0
   d773a:	b158      	cbz	r0, d7754 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d773c:	2302      	movs	r3, #2
   d773e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7740:	2301      	movs	r3, #1
   d7742:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7744:	f8c0 b004 	str.w	fp, [r0, #4]
   d7748:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d774c:	4629      	mov	r1, r5
   d774e:	300c      	adds	r0, #12
   d7750:	f7ff fe79 	bl	d7446 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7754:	4630      	mov	r0, r6
   d7756:	4621      	mov	r1, r4
   d7758:	f840 4b04 	str.w	r4, [r0], #4
   d775c:	f7ff ff08 	bl	d7570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7760:	4628      	mov	r0, r5
   d7762:	f7ff fe7f 	bl	d7464 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7766:	a805      	add	r0, sp, #20
   d7768:	f7ff fe7c 	bl	d7464 <_ZN8particle5ErrorD1Ev>
   d776c:	e052      	b.n	d7814 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d776e:	2400      	movs	r4, #0
   d7770:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7772:	2014      	movs	r0, #20
   d7774:	606c      	str	r4, [r5, #4]
   d7776:	60ac      	str	r4, [r5, #8]
   d7778:	9307      	str	r3, [sp, #28]
   d777a:	f7fc fc8e 	bl	d409a <_Znwj>
   d777e:	4601      	mov	r1, r0
   d7780:	b118      	cbz	r0, d778a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7782:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7784:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7786:	6044      	str	r4, [r0, #4]
   d7788:	6084      	str	r4, [r0, #8]
   d778a:	a804      	add	r0, sp, #16
   d778c:	9103      	str	r1, [sp, #12]
   d778e:	f7ff feef 	bl	d7570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7792:	4b22      	ldr	r3, [pc, #136]	; (d781c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7794:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7796:	2008      	movs	r0, #8
   d7798:	f7fc fc7f 	bl	d409a <_Znwj>
   d779c:	4604      	mov	r4, r0
   d779e:	b128      	cbz	r0, d77ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d77a0:	9b03      	ldr	r3, [sp, #12]
   d77a2:	f840 3b04 	str.w	r3, [r0], #4
   d77a6:	a904      	add	r1, sp, #16
   d77a8:	f7ff fae0 	bl	d6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d77ac:	9500      	str	r5, [sp, #0]
   d77ae:	fa5f f38a 	uxtb.w	r3, sl
   d77b2:	464a      	mov	r2, r9
   d77b4:	4641      	mov	r1, r8
   d77b6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d77b8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d77ba:	f7fe fcf1 	bl	d61a0 <spark_send_event>
   d77be:	b920      	cbnz	r0, d77ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d77c0:	9b03      	ldr	r3, [sp, #12]
   d77c2:	785b      	ldrb	r3, [r3, #1]
   d77c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d77c8:	b183      	cbz	r3, d77ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d77ca:	9b03      	ldr	r3, [sp, #12]
   d77cc:	9305      	str	r3, [sp, #20]
   d77ce:	a904      	add	r1, sp, #16
   d77d0:	a806      	add	r0, sp, #24
   d77d2:	f7ff facb 	bl	d6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d77d6:	a905      	add	r1, sp, #20
   d77d8:	4630      	mov	r0, r6
   d77da:	f7ff fe9a 	bl	d7512 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d77de:	a806      	add	r0, sp, #24
   d77e0:	f7fc fd84 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77e4:	a804      	add	r0, sp, #16
   d77e6:	f7fc fd81 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77ea:	e013      	b.n	d7814 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d77ec:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d77f0:	a905      	add	r1, sp, #20
   d77f2:	a803      	add	r0, sp, #12
   d77f4:	9205      	str	r2, [sp, #20]
   d77f6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d77fa:	f7ff fefd 	bl	d75f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d77fe:	a805      	add	r0, sp, #20
   d7800:	f7ff fe30 	bl	d7464 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7804:	a805      	add	r0, sp, #20
   d7806:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7808:	f7ff fe94 	bl	d7534 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d780c:	a806      	add	r0, sp, #24
   d780e:	f7fc fd6d 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7812:	e7da      	b.n	d77ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d7814:	4630      	mov	r0, r6
   d7816:	b00b      	add	sp, #44	; 0x2c
   d7818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d781c:	000d7991 	.word	0x000d7991

000d7820 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7820:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7824:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7826:	d006      	beq.n	d7836 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7828:	2a03      	cmp	r2, #3
   d782a:	d017      	beq.n	d785c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d782c:	2a01      	cmp	r2, #1
   d782e:	d122      	bne.n	d7876 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7830:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7832:	6003      	str	r3, [r0, #0]
	      break;
   d7834:	e01f      	b.n	d7876 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7836:	2018      	movs	r0, #24
   d7838:	680e      	ldr	r6, [r1, #0]
   d783a:	f7fc fc2e 	bl	d409a <_Znwj>
   d783e:	4605      	mov	r5, r0
   d7840:	b150      	cbz	r0, d7858 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7842:	4631      	mov	r1, r6
   d7844:	f7ff fec8 	bl	d75d8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7848:	6930      	ldr	r0, [r6, #16]
   d784a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d784e:	b108      	cbz	r0, d7854 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7850:	f002 fa4e 	bl	d9cf0 <strdup>
   d7854:	6128      	str	r0, [r5, #16]
   d7856:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7858:	6025      	str	r5, [r4, #0]
   d785a:	e00c      	b.n	d7876 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d785c:	6804      	ldr	r4, [r0, #0]
   d785e:	b154      	cbz	r4, d7876 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7860:	f104 0010 	add.w	r0, r4, #16
   d7864:	f7ff fdfe 	bl	d7464 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7868:	4620      	mov	r0, r4
   d786a:	f7fc fc81 	bl	d4170 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d786e:	2118      	movs	r1, #24
   d7870:	4620      	mov	r0, r4
   d7872:	f001 fa9f 	bl	d8db4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7876:	2000      	movs	r0, #0
   d7878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d787a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d787a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d787c:	2300      	movs	r3, #0
   d787e:	6083      	str	r3, [r0, #8]
   d7880:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7882:	4604      	mov	r4, r0
   d7884:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7886:	b12b      	cbz	r3, d7894 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7888:	2202      	movs	r2, #2
   d788a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d788c:	68eb      	ldr	r3, [r5, #12]
   d788e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7890:	68ab      	ldr	r3, [r5, #8]
   d7892:	60a3      	str	r3, [r4, #8]
	}
    }
   d7894:	4620      	mov	r0, r4
   d7896:	bd38      	pop	{r3, r4, r5, pc}

000d7898 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7898:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d789a:	b570      	push	{r4, r5, r6, lr}
   d789c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d789e:	d006      	beq.n	d78ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d78a0:	2a03      	cmp	r2, #3
   d78a2:	d011      	beq.n	d78c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d78a4:	2a01      	cmp	r2, #1
   d78a6:	d118      	bne.n	d78da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d78a8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d78aa:	6003      	str	r3, [r0, #0]
	      break;
   d78ac:	e015      	b.n	d78da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d78ae:	2014      	movs	r0, #20
   d78b0:	680e      	ldr	r6, [r1, #0]
   d78b2:	f7fc fbf2 	bl	d409a <_Znwj>
   d78b6:	4605      	mov	r5, r0
   d78b8:	b120      	cbz	r0, d78c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d78ba:	4631      	mov	r1, r6
   d78bc:	f7ff ffdd 	bl	d787a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d78c0:	7c33      	ldrb	r3, [r6, #16]
   d78c2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d78c4:	6025      	str	r5, [r4, #0]
   d78c6:	e008      	b.n	d78da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d78c8:	6804      	ldr	r4, [r0, #0]
   d78ca:	b134      	cbz	r4, d78da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d78cc:	4620      	mov	r0, r4
   d78ce:	f7fc fc4f 	bl	d4170 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d78d2:	2114      	movs	r1, #20
   d78d4:	4620      	mov	r0, r4
   d78d6:	f001 fa6d 	bl	d8db4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d78da:	2000      	movs	r0, #0
   d78dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d78e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d78e0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d78e2:	2300      	movs	r3, #0
   d78e4:	b087      	sub	sp, #28
   d78e6:	460c      	mov	r4, r1
   d78e8:	f3bf 8f5f 	dmb	sy
   d78ec:	e850 6f00 	ldrex	r6, [r0]
   d78f0:	e840 3200 	strex	r2, r3, [r0]
   d78f4:	2a00      	cmp	r2, #0
   d78f6:	d1f9      	bne.n	d78ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d78f8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d78fc:	2e00      	cmp	r6, #0
   d78fe:	d03f      	beq.n	d7980 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7900:	4618      	mov	r0, r3
   d7902:	f7fe fbaf 	bl	d6064 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7906:	4607      	mov	r7, r0
   d7908:	b120      	cbz	r0, d7914 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d790a:	4621      	mov	r1, r4
   d790c:	4630      	mov	r0, r6
   d790e:	f7ff fe53 	bl	d75b8 <_ZNKSt8functionIFvRKbEEclES1_>
   d7912:	e02e      	b.n	d7972 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7914:	4631      	mov	r1, r6
   d7916:	a801      	add	r0, sp, #4
   d7918:	f7ff ffaf 	bl	d787a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d791c:	7823      	ldrb	r3, [r4, #0]
   d791e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7922:	2010      	movs	r0, #16
   d7924:	f7fc fbb9 	bl	d409a <_Znwj>
   d7928:	4605      	mov	r5, r0
   d792a:	b1d0      	cbz	r0, d7962 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d792c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d792e:	2014      	movs	r0, #20
   d7930:	f7fc fbb3 	bl	d409a <_Znwj>
   d7934:	4604      	mov	r4, r0
   d7936:	b178      	cbz	r0, d7958 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7938:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d793a:	4601      	mov	r1, r0
   d793c:	a801      	add	r0, sp, #4
   d793e:	f7ff fcea 	bl	d7316 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7942:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7944:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7946:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7948:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d794a:	9203      	str	r2, [sp, #12]
   d794c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d794e:	60e3      	str	r3, [r4, #12]
   d7950:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7954:	9204      	str	r2, [sp, #16]
   d7956:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7958:	4b0a      	ldr	r3, [pc, #40]	; (d7984 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d795a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d795c:	4b0a      	ldr	r3, [pc, #40]	; (d7988 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d795e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7960:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7962:	a801      	add	r0, sp, #4
   d7964:	f7fc fc04 	bl	d4170 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7968:	2200      	movs	r2, #0
   d796a:	4629      	mov	r1, r5
   d796c:	4807      	ldr	r0, [pc, #28]	; (d798c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d796e:	f7fe fb81 	bl	d6074 <application_thread_invoke>
   d7972:	4630      	mov	r0, r6
   d7974:	f7fc fbfc 	bl	d4170 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7978:	2110      	movs	r1, #16
   d797a:	4630      	mov	r0, r6
   d797c:	f001 fa1a 	bl	d8db4 <_ZdlPvj>
        }
    }
   d7980:	b007      	add	sp, #28
   d7982:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7984:	000d75cb 	.word	0x000d75cb
   d7988:	000d7899 	.word	0x000d7899
   d798c:	000d7d49 	.word	0x000d7d49

000d7990 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7990:	b530      	push	{r4, r5, lr}
   d7992:	b085      	sub	sp, #20
   d7994:	4604      	mov	r4, r0
   d7996:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7998:	4668      	mov	r0, sp
   d799a:	4611      	mov	r1, r2
   d799c:	f7ff fdca 	bl	d7534 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d79a0:	b17c      	cbz	r4, d79c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d79a2:	b224      	sxth	r4, r4
   d79a4:	4628      	mov	r0, r5
   d79a6:	b10d      	cbz	r5, d79ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d79a8:	f002 f9a2 	bl	d9cf0 <strdup>
   d79ac:	9002      	str	r0, [sp, #8]
   d79ae:	a902      	add	r1, sp, #8
   d79b0:	4668      	mov	r0, sp
   d79b2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d79b6:	f7ff fe1f 	bl	d75f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d79ba:	a802      	add	r0, sp, #8
   d79bc:	f7ff fd52 	bl	d7464 <_ZN8particle5ErrorD1Ev>
   d79c0:	e01d      	b.n	d79fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d79c2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d79c4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d79c8:	f04f 0201 	mov.w	r2, #1
   d79cc:	e8d0 3f4f 	ldrexb	r3, [r0]
   d79d0:	42a3      	cmp	r3, r4
   d79d2:	d103      	bne.n	d79dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d79d4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d79d8:	2900      	cmp	r1, #0
   d79da:	d1f7      	bne.n	d79cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d79dc:	d002      	beq.n	d79e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d79de:	f88d 3008 	strb.w	r3, [sp, #8]
   d79e2:	e00c      	b.n	d79fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d79e4:	f110 010c 	adds.w	r1, r0, #12
   d79e8:	f04f 0301 	mov.w	r3, #1
   d79ec:	bf18      	it	ne
   d79ee:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d79f0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d79f4:	3004      	adds	r0, #4
   d79f6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d79fa:	f7ff ff71 	bl	d78e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d79fe:	a801      	add	r0, sp, #4
   d7a00:	f7fc fc74 	bl	d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7a04:	b005      	add	sp, #20
   d7a06:	bd30      	pop	{r4, r5, pc}

000d7a08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7a08:	4770      	bx	lr

000d7a0a <_ZN9IPAddressD0Ev>:
   d7a0a:	b510      	push	{r4, lr}
   d7a0c:	2118      	movs	r1, #24
   d7a0e:	4604      	mov	r4, r0
   d7a10:	f001 f9d0 	bl	d8db4 <_ZdlPvj>
   d7a14:	4620      	mov	r0, r4
   d7a16:	bd10      	pop	{r4, pc}

000d7a18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7a18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7a1a:	7d03      	ldrb	r3, [r0, #20]
   d7a1c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7a1e:	b08d      	sub	sp, #52	; 0x34
   d7a20:	460e      	mov	r6, r1
   d7a22:	f100 0704 	add.w	r7, r0, #4
   d7a26:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7a2a:	d002      	beq.n	d7a32 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7a2c:	f100 0508 	add.w	r5, r0, #8
   d7a30:	e018      	b.n	d7a64 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7a32:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a34:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7a36:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a3a:	232f      	movs	r3, #47	; 0x2f
   d7a3c:	462a      	mov	r2, r5
   d7a3e:	200a      	movs	r0, #10
   d7a40:	f7fe f9c8 	bl	d5dd4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7a44:	4628      	mov	r0, r5
   d7a46:	f002 f96e 	bl	d9d26 <strlen>
   d7a4a:	6833      	ldr	r3, [r6, #0]
   d7a4c:	4602      	mov	r2, r0
   d7a4e:	68db      	ldr	r3, [r3, #12]
   d7a50:	4629      	mov	r1, r5
   d7a52:	4630      	mov	r0, r6
   d7a54:	4798      	blx	r3
   d7a56:	e00f      	b.n	d7a78 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7a58:	b124      	cbz	r4, d7a64 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7a5a:	212e      	movs	r1, #46	; 0x2e
   d7a5c:	4630      	mov	r0, r6
   d7a5e:	f7ff fb8b 	bl	d7178 <_ZN5Print5printEc>
   d7a62:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d7a64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7a68:	220a      	movs	r2, #10
   d7a6a:	4630      	mov	r0, r6
   d7a6c:	f7ff fbca 	bl	d7204 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a70:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a72:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a74:	d1f0      	bne.n	d7a58 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a76:	4620      	mov	r0, r4
    }
    return n;
}
   d7a78:	b00d      	add	sp, #52	; 0x34
   d7a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7a7c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7a7c:	b510      	push	{r4, lr}
   d7a7e:	4b05      	ldr	r3, [pc, #20]	; (d7a94 <_ZN9IPAddressC1Ev+0x18>)
   d7a80:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7a82:	2211      	movs	r2, #17
   d7a84:	f840 3b04 	str.w	r3, [r0], #4
   d7a88:	2100      	movs	r1, #0
   d7a8a:	f002 f8e0 	bl	d9c4e <memset>
{
    clear();
}
   d7a8e:	4620      	mov	r0, r4
   d7a90:	bd10      	pop	{r4, pc}
   d7a92:	bf00      	nop
   d7a94:	000dc404 	.word	0x000dc404

000d7a98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7a98:	4603      	mov	r3, r0
   d7a9a:	4a07      	ldr	r2, [pc, #28]	; (d7ab8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a9c:	b510      	push	{r4, lr}
   d7a9e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7aa2:	f101 0210 	add.w	r2, r1, #16
   d7aa6:	f851 4b04 	ldr.w	r4, [r1], #4
   d7aaa:	f843 4b04 	str.w	r4, [r3], #4
   d7aae:	4291      	cmp	r1, r2
   d7ab0:	d1f9      	bne.n	d7aa6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7ab2:	780a      	ldrb	r2, [r1, #0]
   d7ab4:	701a      	strb	r2, [r3, #0]
}
   d7ab6:	bd10      	pop	{r4, pc}
   d7ab8:	000dc404 	.word	0x000dc404

000d7abc <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7abc:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d7abe:	2b04      	cmp	r3, #4
   d7ac0:	d101      	bne.n	d7ac6 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d7ac2:	6840      	ldr	r0, [r0, #4]
   d7ac4:	e008      	b.n	d7ad8 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7ac6:	2b06      	cmp	r3, #6
   d7ac8:	d10a      	bne.n	d7ae0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7aca:	6843      	ldr	r3, [r0, #4]
   d7acc:	b953      	cbnz	r3, d7ae4 <_ZNK9IPAddresscvbEv+0x28>
   d7ace:	6883      	ldr	r3, [r0, #8]
   d7ad0:	b943      	cbnz	r3, d7ae4 <_ZNK9IPAddresscvbEv+0x28>
   d7ad2:	68c3      	ldr	r3, [r0, #12]
   d7ad4:	b933      	cbnz	r3, d7ae4 <_ZNK9IPAddresscvbEv+0x28>
   d7ad6:	6900      	ldr	r0, [r0, #16]
   d7ad8:	3000      	adds	r0, #0
   d7ada:	bf18      	it	ne
   d7adc:	2001      	movne	r0, #1
   d7ade:	4770      	bx	lr
    } else {
        return false;
   d7ae0:	2000      	movs	r0, #0
   d7ae2:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7ae4:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d7ae6:	4770      	bx	lr

000d7ae8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7ae8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7aea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7aee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7af2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7af6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7afa:	2304      	movs	r3, #4
   d7afc:	6041      	str	r1, [r0, #4]
   d7afe:	7503      	strb	r3, [r0, #20]
   d7b00:	bd10      	pop	{r4, pc}
	...

000d7b04 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d7b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7b06:	4d04      	ldr	r5, [pc, #16]	; (d7b18 <_ZN9IPAddressC1Ehhhh+0x14>)
   d7b08:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d7b0a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d7b0e:	9500      	str	r5, [sp, #0]
   d7b10:	f7ff ffea 	bl	d7ae8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7b14:	b003      	add	sp, #12
   d7b16:	bd30      	pop	{r4, r5, pc}
   d7b18:	000dc404 	.word	0x000dc404

000d7b1c <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7b1e:	780d      	ldrb	r5, [r1, #0]
   d7b20:	788b      	ldrb	r3, [r1, #2]
   d7b22:	784a      	ldrb	r2, [r1, #1]
   d7b24:	78c9      	ldrb	r1, [r1, #3]
   d7b26:	9100      	str	r1, [sp, #0]
   d7b28:	4629      	mov	r1, r5
   d7b2a:	f7ff ffdd 	bl	d7ae8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7b2e:	b003      	add	sp, #12
   d7b30:	bd30      	pop	{r4, r5, pc}

000d7b32 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b32:	7441      	strb	r1, [r0, #17]
   d7b34:	4770      	bx	lr

000d7b36 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7b36:	4770      	bx	lr

000d7b38 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7b38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7b3a:	2100      	movs	r1, #0
   d7b3c:	7c00      	ldrb	r0, [r0, #16]
   d7b3e:	f7fe fa51 	bl	d5fe4 <HAL_USB_USART_Receive_Data>
}
   d7b42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b46:	bf28      	it	cs
   d7b48:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b4c:	bd08      	pop	{r3, pc}

000d7b4e <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7b4e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7b50:	2101      	movs	r1, #1
   d7b52:	7c00      	ldrb	r0, [r0, #16]
   d7b54:	f7fe fa46 	bl	d5fe4 <HAL_USB_USART_Receive_Data>
}
   d7b58:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b5c:	bf28      	it	cs
   d7b5e:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b62:	bd08      	pop	{r3, pc}

000d7b64 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7b64:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7b66:	7c00      	ldrb	r0, [r0, #16]
   d7b68:	f7fe fa34 	bl	d5fd4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7b6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b70:	bd08      	pop	{r3, pc}

000d7b72 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7b72:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7b74:	7c00      	ldrb	r0, [r0, #16]
   d7b76:	f7fe fa25 	bl	d5fc4 <HAL_USB_USART_Available_Data>
}
   d7b7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b7e:	bd08      	pop	{r3, pc}

000d7b80 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7b80:	7c00      	ldrb	r0, [r0, #16]
   d7b82:	f7fe ba3f 	b.w	d6004 <HAL_USB_USART_Flush_Data>

000d7b86 <_ZN9USBSerialD0Ev>:
   d7b86:	b510      	push	{r4, lr}
   d7b88:	2114      	movs	r1, #20
   d7b8a:	4604      	mov	r4, r0
   d7b8c:	f001 f912 	bl	d8db4 <_ZdlPvj>
   d7b90:	4620      	mov	r0, r4
   d7b92:	bd10      	pop	{r4, pc}

000d7b94 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7b94:	b538      	push	{r3, r4, r5, lr}
   d7b96:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7b98:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7b9a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7b9c:	f7fe fa1a 	bl	d5fd4 <HAL_USB_USART_Available_Data_For_Write>
   d7ba0:	2800      	cmp	r0, #0
   d7ba2:	dc01      	bgt.n	d7ba8 <_ZN9USBSerial5writeEh+0x14>
   d7ba4:	7c60      	ldrb	r0, [r4, #17]
   d7ba6:	b128      	cbz	r0, d7bb4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7ba8:	4629      	mov	r1, r5
   d7baa:	7c20      	ldrb	r0, [r4, #16]
   d7bac:	f7fe fa22 	bl	d5ff4 <HAL_USB_USART_Send_Data>
   d7bb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7bb4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7bb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7bb8:	b510      	push	{r4, lr}
   d7bba:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7bbc:	2300      	movs	r3, #0
   d7bbe:	6063      	str	r3, [r4, #4]
   d7bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7bc4:	60a3      	str	r3, [r4, #8]
   d7bc6:	4b05      	ldr	r3, [pc, #20]	; (d7bdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7bc8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7bca:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7bcc:	4608      	mov	r0, r1
{
  _serial = serial;
   d7bce:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7bd0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7bd2:	4611      	mov	r1, r2
   d7bd4:	f7fe f9e6 	bl	d5fa4 <HAL_USB_USART_Init>
}
   d7bd8:	4620      	mov	r0, r4
   d7bda:	bd10      	pop	{r4, pc}
   d7bdc:	000dc418 	.word	0x000dc418

000d7be0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7be0:	2200      	movs	r2, #0
   d7be2:	7c00      	ldrb	r0, [r0, #16]
   d7be4:	f7fe b9e6 	b.w	d5fb4 <HAL_USB_USART_Begin>

000d7be8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7be8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7bea:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7bec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7bee:	2100      	movs	r1, #0
   d7bf0:	f002 f82d 	bl	d9c4e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7bf4:	4620      	mov	r0, r4
   d7bf6:	bd10      	pop	{r4, pc}

000d7bf8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7bf8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7bfa:	4d0e      	ldr	r5, [pc, #56]	; (d7c34 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7bfc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7bfe:	a801      	add	r0, sp, #4
   d7c00:	f7ff fff2 	bl	d7be8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c04:	6829      	ldr	r1, [r5, #0]
   d7c06:	f011 0401 	ands.w	r4, r1, #1
   d7c0a:	d110      	bne.n	d7c2e <_Z16_fetch_usbserialv+0x36>
   d7c0c:	4628      	mov	r0, r5
   d7c0e:	f7fc fa4c 	bl	d40aa <__cxa_guard_acquire>
   d7c12:	b160      	cbz	r0, d7c2e <_Z16_fetch_usbserialv+0x36>
   d7c14:	aa01      	add	r2, sp, #4
   d7c16:	4621      	mov	r1, r4
   d7c18:	4807      	ldr	r0, [pc, #28]	; (d7c38 <_Z16_fetch_usbserialv+0x40>)
   d7c1a:	f7ff ffcd 	bl	d7bb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7c1e:	4628      	mov	r0, r5
   d7c20:	f7fc fa48 	bl	d40b4 <__cxa_guard_release>
   d7c24:	4a05      	ldr	r2, [pc, #20]	; (d7c3c <_Z16_fetch_usbserialv+0x44>)
   d7c26:	4906      	ldr	r1, [pc, #24]	; (d7c40 <_Z16_fetch_usbserialv+0x48>)
   d7c28:	4803      	ldr	r0, [pc, #12]	; (d7c38 <_Z16_fetch_usbserialv+0x40>)
   d7c2a:	f001 f8b5 	bl	d8d98 <__aeabi_atexit>
	return _usbserial;
}
   d7c2e:	4802      	ldr	r0, [pc, #8]	; (d7c38 <_Z16_fetch_usbserialv+0x40>)
   d7c30:	b007      	add	sp, #28
   d7c32:	bd30      	pop	{r4, r5, pc}
   d7c34:	2003e3f4 	.word	0x2003e3f4
   d7c38:	2003e3f8 	.word	0x2003e3f8
   d7c3c:	2003ce30 	.word	0x2003ce30
   d7c40:	000d7b37 	.word	0x000d7b37

000d7c44 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7c44:	4770      	bx	lr

000d7c46 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c46:	7441      	strb	r1, [r0, #17]
   d7c48:	4770      	bx	lr

000d7c4a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7c4a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7c4c:	7c00      	ldrb	r0, [r0, #16]
   d7c4e:	f7fe f921 	bl	d5e94 <HAL_USART_Available_Data_For_Write>
}
   d7c52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c56:	bd08      	pop	{r3, pc}

000d7c58 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7c58:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7c5a:	7c00      	ldrb	r0, [r0, #16]
   d7c5c:	f7fe f8f2 	bl	d5e44 <HAL_USART_Available_Data>
}
   d7c60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c64:	bd08      	pop	{r3, pc}

000d7c66 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7c66:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7c68:	7c00      	ldrb	r0, [r0, #16]
   d7c6a:	f7fe f8fb 	bl	d5e64 <HAL_USART_Peek_Data>
}
   d7c6e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7c72:	bf28      	it	cs
   d7c74:	f04f 30ff 	movcs.w	r0, #4294967295
   d7c78:	bd08      	pop	{r3, pc}

000d7c7a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7c7a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7c7c:	7c00      	ldrb	r0, [r0, #16]
   d7c7e:	f7fe f8e9 	bl	d5e54 <HAL_USART_Read_Data>
}
   d7c82:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7c86:	bf28      	it	cs
   d7c88:	f04f 30ff 	movcs.w	r0, #4294967295
   d7c8c:	bd08      	pop	{r3, pc}

000d7c8e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7c8e:	7c00      	ldrb	r0, [r0, #16]
   d7c90:	f7fe b8f0 	b.w	d5e74 <HAL_USART_Flush_Data>

000d7c94 <_ZN11USARTSerialD0Ev>:
   d7c94:	b510      	push	{r4, lr}
   d7c96:	2114      	movs	r1, #20
   d7c98:	4604      	mov	r4, r0
   d7c9a:	f001 f88b 	bl	d8db4 <_ZdlPvj>
   d7c9e:	4620      	mov	r0, r4
   d7ca0:	bd10      	pop	{r4, pc}

000d7ca2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7ca2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7ca4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7ca6:	4604      	mov	r4, r0
   d7ca8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7caa:	b925      	cbnz	r5, d7cb6 <_ZN11USARTSerial5writeEh+0x14>
   d7cac:	7c00      	ldrb	r0, [r0, #16]
   d7cae:	f7fe f8f1 	bl	d5e94 <HAL_USART_Available_Data_For_Write>
   d7cb2:	2800      	cmp	r0, #0
   d7cb4:	dd05      	ble.n	d7cc2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7cb6:	4631      	mov	r1, r6
   d7cb8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7cbe:	f7fe b8b9 	b.w	d5e34 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7cc2:	4628      	mov	r0, r5
   d7cc4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7cc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7cc8:	b510      	push	{r4, lr}
   d7cca:	4604      	mov	r4, r0
   d7ccc:	4608      	mov	r0, r1
   d7cce:	4611      	mov	r1, r2
   d7cd0:	2200      	movs	r2, #0
   d7cd2:	6062      	str	r2, [r4, #4]
   d7cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7cd8:	60a2      	str	r2, [r4, #8]
   d7cda:	4a05      	ldr	r2, [pc, #20]	; (d7cf0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7cdc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7cde:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7ce0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7ce2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7ce4:	461a      	mov	r2, r3
   d7ce6:	f7fe f89d 	bl	d5e24 <HAL_USART_Init>
}
   d7cea:	4620      	mov	r0, r4
   d7cec:	bd10      	pop	{r4, pc}
   d7cee:	bf00      	nop
   d7cf0:	000dc448 	.word	0x000dc448

000d7cf4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7cf4:	7c00      	ldrb	r0, [r0, #16]
   d7cf6:	f7fe b8c5 	b.w	d5e84 <HAL_USART_Is_Enabled>
	...

000d7cfc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7cfc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7cfe:	4d0c      	ldr	r5, [pc, #48]	; (d7d30 <_Z22__fetch_global_Serial1v+0x34>)
   d7d00:	6829      	ldr	r1, [r5, #0]
   d7d02:	f011 0401 	ands.w	r4, r1, #1
   d7d06:	d111      	bne.n	d7d2c <_Z22__fetch_global_Serial1v+0x30>
   d7d08:	4628      	mov	r0, r5
   d7d0a:	f7fc f9ce 	bl	d40aa <__cxa_guard_acquire>
   d7d0e:	b168      	cbz	r0, d7d2c <_Z22__fetch_global_Serial1v+0x30>
   d7d10:	4a08      	ldr	r2, [pc, #32]	; (d7d34 <_Z22__fetch_global_Serial1v+0x38>)
   d7d12:	4b09      	ldr	r3, [pc, #36]	; (d7d38 <_Z22__fetch_global_Serial1v+0x3c>)
   d7d14:	4809      	ldr	r0, [pc, #36]	; (d7d3c <_Z22__fetch_global_Serial1v+0x40>)
   d7d16:	4621      	mov	r1, r4
   d7d18:	f7ff ffd6 	bl	d7cc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7d1c:	4628      	mov	r0, r5
   d7d1e:	f7fc f9c9 	bl	d40b4 <__cxa_guard_release>
   d7d22:	4a07      	ldr	r2, [pc, #28]	; (d7d40 <_Z22__fetch_global_Serial1v+0x44>)
   d7d24:	4907      	ldr	r1, [pc, #28]	; (d7d44 <_Z22__fetch_global_Serial1v+0x48>)
   d7d26:	4805      	ldr	r0, [pc, #20]	; (d7d3c <_Z22__fetch_global_Serial1v+0x40>)
   d7d28:	f001 f836 	bl	d8d98 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7d2c:	4803      	ldr	r0, [pc, #12]	; (d7d3c <_Z22__fetch_global_Serial1v+0x40>)
   d7d2e:	bd38      	pop	{r3, r4, r5, pc}
   d7d30:	2003e4a4 	.word	0x2003e4a4
   d7d34:	2003e4a8 	.word	0x2003e4a8
   d7d38:	2003e420 	.word	0x2003e420
   d7d3c:	2003e40c 	.word	0x2003e40c
   d7d40:	2003ce30 	.word	0x2003ce30
   d7d44:	000d7c45 	.word	0x000d7c45

000d7d48 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7d48:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7d4a:	6883      	ldr	r3, [r0, #8]
   d7d4c:	4604      	mov	r4, r0
   d7d4e:	b90b      	cbnz	r3, d7d54 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7d50:	f001 f8fc 	bl	d8f4c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7d54:	68c3      	ldr	r3, [r0, #12]
   d7d56:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7d58:	68a3      	ldr	r3, [r4, #8]
   d7d5a:	b11b      	cbz	r3, d7d64 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7d5c:	2203      	movs	r2, #3
   d7d5e:	4621      	mov	r1, r4
   d7d60:	4620      	mov	r0, r4
   d7d62:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7d64:	4620      	mov	r0, r4
   d7d66:	2110      	movs	r1, #16
}
   d7d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7d6c:	f001 b822 	b.w	d8db4 <_ZdlPvj>

000d7d70 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d7d70:	4770      	bx	lr

000d7d72 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d74:	4606      	mov	r6, r0
   d7d76:	4615      	mov	r5, r2
   d7d78:	460c      	mov	r4, r1
   d7d7a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7d7c:	42bc      	cmp	r4, r7
   d7d7e:	d006      	beq.n	d7d8e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7d80:	6833      	ldr	r3, [r6, #0]
   d7d82:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7d86:	689b      	ldr	r3, [r3, #8]
   d7d88:	4630      	mov	r0, r6
   d7d8a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7d8c:	e7f6      	b.n	d7d7c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7d8e:	4628      	mov	r0, r5
   d7d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d92 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7d92:	2200      	movs	r2, #0
   d7d94:	7c00      	ldrb	r0, [r0, #16]
   d7d96:	f7fe b885 	b.w	d5ea4 <HAL_I2C_Write_Data>

000d7d9a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7d9a:	2100      	movs	r1, #0
   d7d9c:	7c00      	ldrb	r0, [r0, #16]
   d7d9e:	f7fe b889 	b.w	d5eb4 <HAL_I2C_Available_Data>

000d7da2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7da2:	2100      	movs	r1, #0
   d7da4:	7c00      	ldrb	r0, [r0, #16]
   d7da6:	f7fe b88d 	b.w	d5ec4 <HAL_I2C_Read_Data>

000d7daa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7daa:	2100      	movs	r1, #0
   d7dac:	7c00      	ldrb	r0, [r0, #16]
   d7dae:	f7fe b891 	b.w	d5ed4 <HAL_I2C_Peek_Data>

000d7db2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7db2:	2100      	movs	r1, #0
   d7db4:	7c00      	ldrb	r0, [r0, #16]
   d7db6:	f7fe b895 	b.w	d5ee4 <HAL_I2C_Flush_Data>

000d7dba <_ZN7TwoWireD0Ev>:
   d7dba:	b510      	push	{r4, lr}
   d7dbc:	2114      	movs	r1, #20
   d7dbe:	4604      	mov	r4, r0
   d7dc0:	f000 fff8 	bl	d8db4 <_ZdlPvj>
   d7dc4:	4620      	mov	r0, r4
   d7dc6:	bd10      	pop	{r4, pc}

000d7dc8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7dc8:	b510      	push	{r4, lr}
   d7dca:	4604      	mov	r4, r0
   d7dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7dd0:	4608      	mov	r0, r1
   d7dd2:	60a3      	str	r3, [r4, #8]
   d7dd4:	2100      	movs	r1, #0
   d7dd6:	4b04      	ldr	r3, [pc, #16]	; (d7de8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7dd8:	7420      	strb	r0, [r4, #16]
   d7dda:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7ddc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d7dde:	f7fe f891 	bl	d5f04 <HAL_I2C_Init>

}
   d7de2:	4620      	mov	r0, r4
   d7de4:	bd10      	pop	{r4, pc}
   d7de6:	bf00      	nop
   d7de8:	000dc478 	.word	0x000dc478

000d7dec <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7dec:	2100      	movs	r1, #0
   d7dee:	7c00      	ldrb	r0, [r0, #16]
   d7df0:	f7fe b880 	b.w	d5ef4 <HAL_I2C_Is_Enabled>

000d7df4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d7df4:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d7df6:	2301      	movs	r3, #1
   d7df8:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d7dfa:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d7dfc:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d7dfe:	b10b      	cbz	r3, d7e04 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d7e00:	68c0      	ldr	r0, [r0, #12]
   d7e02:	e006      	b.n	d7e12 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7e04:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d7e06:	b128      	cbz	r0, d7e14 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7e08:	6883      	ldr	r3, [r0, #8]
   d7e0a:	b90b      	cbnz	r3, d7e10 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d7e0c:	f001 f89e 	bl	d8f4c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e10:	68c3      	ldr	r3, [r0, #12]
   d7e12:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d7e14:	2301      	movs	r3, #1
   d7e16:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d7e18:	2000      	movs	r0, #0
    }
   d7e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d7e1e:	f7fd bfc9 	b.w	d5db4 <os_thread_exit>

000d7e22 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7e22:	2200      	movs	r2, #0
   d7e24:	4611      	mov	r1, r2
   d7e26:	6840      	ldr	r0, [r0, #4]
   d7e28:	f7fe b982 	b.w	d6130 <network_listening>

000d7e2c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7e2c:	2200      	movs	r2, #0
   d7e2e:	4611      	mov	r1, r2
   d7e30:	6840      	ldr	r0, [r0, #4]
   d7e32:	f7fe b98d 	b.w	d6150 <network_get_listen_timeout>

000d7e36 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7e36:	2200      	movs	r2, #0
   d7e38:	6840      	ldr	r0, [r0, #4]
   d7e3a:	f7fe b981 	b.w	d6140 <network_set_listen_timeout>

000d7e3e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7e3e:	2200      	movs	r2, #0
   d7e40:	f081 0101 	eor.w	r1, r1, #1
   d7e44:	6840      	ldr	r0, [r0, #4]
   d7e46:	f7fe b96b 	b.w	d6120 <network_listen>

000d7e4a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7e4a:	2300      	movs	r3, #0
   d7e4c:	461a      	mov	r2, r3
   d7e4e:	2101      	movs	r1, #1
   d7e50:	6840      	ldr	r0, [r0, #4]
   d7e52:	f7fe b95d 	b.w	d6110 <network_off>

000d7e56 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7e56:	2300      	movs	r3, #0
   d7e58:	461a      	mov	r2, r3
   d7e5a:	4619      	mov	r1, r3
   d7e5c:	6840      	ldr	r0, [r0, #4]
   d7e5e:	f7fe b94f 	b.w	d6100 <network_on>

000d7e62 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7e62:	2200      	movs	r2, #0
   d7e64:	4611      	mov	r1, r2
   d7e66:	6840      	ldr	r0, [r0, #4]
   d7e68:	f7fe b932 	b.w	d60d0 <network_connecting>

000d7e6c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7e6c:	2200      	movs	r2, #0
   d7e6e:	2102      	movs	r1, #2
   d7e70:	6840      	ldr	r0, [r0, #4]
   d7e72:	f7fe b935 	b.w	d60e0 <network_disconnect>

000d7e76 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7e76:	2300      	movs	r3, #0
   d7e78:	461a      	mov	r2, r3
   d7e7a:	6840      	ldr	r0, [r0, #4]
   d7e7c:	f7fe b920 	b.w	d60c0 <network_connect>

000d7e80 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7e80:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e82:	4605      	mov	r5, r0
   d7e84:	b188      	cbz	r0, d7eaa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e86:	6804      	ldr	r4, [r0, #0]
   d7e88:	b14c      	cbz	r4, d7e9e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7e8a:	68a3      	ldr	r3, [r4, #8]
   d7e8c:	b11b      	cbz	r3, d7e96 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7e8e:	2203      	movs	r2, #3
   d7e90:	4621      	mov	r1, r4
   d7e92:	4620      	mov	r0, r4
   d7e94:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e96:	2110      	movs	r1, #16
   d7e98:	4620      	mov	r0, r4
   d7e9a:	f000 ff8b 	bl	d8db4 <_ZdlPvj>
   d7e9e:	4628      	mov	r0, r5
   d7ea0:	2114      	movs	r1, #20
      }
   d7ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ea6:	f000 bf85 	b.w	d8db4 <_ZdlPvj>
   d7eaa:	bd38      	pop	{r3, r4, r5, pc}

000d7eac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7eac:	b110      	cbz	r0, d7eb4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7eae:	6803      	ldr	r3, [r0, #0]
   d7eb0:	685b      	ldr	r3, [r3, #4]
   d7eb2:	4718      	bx	r3
   d7eb4:	4770      	bx	lr

000d7eb6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7eb6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7eb8:	6803      	ldr	r3, [r0, #0]
   d7eba:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7ebc:	b1bb      	cbz	r3, d7eee <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7ebe:	6858      	ldr	r0, [r3, #4]
   d7ec0:	f7fd ff10 	bl	d5ce4 <os_thread_is_current>
   d7ec4:	b978      	cbnz	r0, d7ee6 <_ZN6ThreadD1Ev+0x30>
   d7ec6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7ec8:	7c5a      	ldrb	r2, [r3, #17]
   d7eca:	b912      	cbnz	r2, d7ed2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7ecc:	6858      	ldr	r0, [r3, #4]
   d7ece:	f7fd ff19 	bl	d5d04 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7ed2:	6823      	ldr	r3, [r4, #0]
   d7ed4:	6858      	ldr	r0, [r3, #4]
   d7ed6:	f7fd ff1d 	bl	d5d14 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7eda:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7edc:	2300      	movs	r3, #0
   d7ede:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7ee0:	b128      	cbz	r0, d7eee <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7ee2:	f7ff ffcd 	bl	d7e80 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7ee6:	6820      	ldr	r0, [r4, #0]
   d7ee8:	b108      	cbz	r0, d7eee <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7eea:	f7ff ffc9 	bl	d7e80 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7eee:	4620      	mov	r0, r4
   d7ef0:	bd10      	pop	{r4, pc}
	...

000d7ef4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7ef4:	b538      	push	{r3, r4, r5, lr}
   d7ef6:	4b0c      	ldr	r3, [pc, #48]	; (d7f28 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7ef8:	6003      	str	r3, [r0, #0]
   d7efa:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7efc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7f00:	b108      	cbz	r0, d7f06 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7f02:	f7fc f8d0 	bl	d40a6 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7f06:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7f0a:	b135      	cbz	r5, d7f1a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7f0c:	4628      	mov	r0, r5
   d7f0e:	f7ff ffd2 	bl	d7eb6 <_ZN6ThreadD1Ev>
   d7f12:	2104      	movs	r1, #4
   d7f14:	4628      	mov	r0, r5
   d7f16:	f000 ff4d 	bl	d8db4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7f1a:	68a0      	ldr	r0, [r4, #8]
   d7f1c:	b108      	cbz	r0, d7f22 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d7f1e:	f7ff ffc5 	bl	d7eac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7f22:	4620      	mov	r0, r4
   d7f24:	bd38      	pop	{r3, r4, r5, pc}
   d7f26:	bf00      	nop
   d7f28:	000dc4a0 	.word	0x000dc4a0

000d7f2c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d7f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f30:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d7f32:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d7f36:	4606      	mov	r6, r0
   d7f38:	4688      	mov	r8, r1
   d7f3a:	4691      	mov	r9, r2
   d7f3c:	469a      	mov	sl, r3
   d7f3e:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d7f40:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d7f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d7f44:	454b      	cmp	r3, r9
   d7f46:	d129      	bne.n	d7f9c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d7f48:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d7f4a:	4553      	cmp	r3, sl
   d7f4c:	d126      	bne.n	d7f9c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d7f4e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d7f52:	455b      	cmp	r3, fp
   d7f54:	d122      	bne.n	d7f9c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d7f56:	2140      	movs	r1, #64	; 0x40
   d7f58:	4640      	mov	r0, r8
   d7f5a:	f001 ff14 	bl	d9d86 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d7f5e:	4641      	mov	r1, r8
   d7f60:	4602      	mov	r2, r0
   d7f62:	4620      	mov	r0, r4
   d7f64:	f001 fee7 	bl	d9d36 <strncmp>
   d7f68:	b9c0      	cbnz	r0, d7f9c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d7f6a:	b16f      	cbz	r7, d7f88 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d7f6c:	210c      	movs	r1, #12
   d7f6e:	4638      	mov	r0, r7
   d7f70:	f001 ff09 	bl	d9d86 <strnlen>
                if (id_len)
   d7f74:	4602      	mov	r2, r0
   d7f76:	b138      	cbz	r0, d7f88 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d7f78:	2358      	movs	r3, #88	; 0x58
   d7f7a:	fb03 6005 	mla	r0, r3, r5, r6
   d7f7e:	4639      	mov	r1, r7
   d7f80:	3049      	adds	r0, #73	; 0x49
   d7f82:	f001 fed8 	bl	d9d36 <strncmp>
   d7f86:	e004      	b.n	d7f92 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d7f88:	2058      	movs	r0, #88	; 0x58
   d7f8a:	fb00 6505 	mla	r5, r0, r5, r6
   d7f8e:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d7f92:	fab0 f080 	clz	r0, r0
   d7f96:	0940      	lsrs	r0, r0, #5
   d7f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d7f9c:	3501      	adds	r5, #1
   d7f9e:	2d05      	cmp	r5, #5
   d7fa0:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d7fa4:	d1cd      	bne.n	d7f42 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d7fa6:	2000      	movs	r0, #0
}
   d7fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7fac <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d7fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fb0:	b085      	sub	sp, #20
   d7fb2:	4607      	mov	r7, r0
   d7fb4:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7fb8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d7fba:	9601      	str	r6, [sp, #4]
   d7fbc:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d7fc0:	4689      	mov	r9, r1
   d7fc2:	9202      	str	r2, [sp, #8]
   d7fc4:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d7fc6:	f7ff ffb1 	bl	d7f2c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d7fca:	2800      	cmp	r0, #0
   d7fcc:	d13c      	bne.n	d8048 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d7fce:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d7fd0:	2358      	movs	r3, #88	; 0x58
   d7fd2:	fb03 7504 	mla	r5, r3, r4, r7
   d7fd6:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d7fda:	f1b8 0f00 	cmp.w	r8, #0
   d7fde:	d12e      	bne.n	d803e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d7fe0:	2140      	movs	r1, #64	; 0x40
   d7fe2:	4648      	mov	r0, r9
   d7fe4:	f001 fecf 	bl	d9d86 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d7fe8:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d7fea:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d7fec:	4602      	mov	r2, r0
   d7fee:	4628      	mov	r0, r5
   d7ff0:	f001 fe07 	bl	d9c02 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d7ff4:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d7ff8:	4641      	mov	r1, r8
   d7ffa:	eb05 000b 	add.w	r0, r5, fp
   d7ffe:	f001 fe26 	bl	d9c4e <memset>
            event_handlers[i].handler = handler;
   d8002:	9b02      	ldr	r3, [sp, #8]
   d8004:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d8006:	9b03      	ldr	r3, [sp, #12]
   d8008:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d800a:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d800e:	b12e      	cbz	r6, d801c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d8010:	210c      	movs	r1, #12
   d8012:	4630      	mov	r0, r6
   d8014:	f001 feb7 	bl	d9d86 <strnlen>
   d8018:	4605      	mov	r5, r0
   d801a:	e000      	b.n	d801e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d801c:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d801e:	2058      	movs	r0, #88	; 0x58
   d8020:	4344      	muls	r4, r0
   d8022:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d8024:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d8026:	462a      	mov	r2, r5
   d8028:	4631      	mov	r1, r6
   d802a:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d802c:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d802e:	f001 fde8 	bl	d9c02 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d8032:	2000      	movs	r0, #0
   d8034:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d8038:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d803c:	e005      	b.n	d804a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d803e:	3401      	adds	r4, #1
   d8040:	2c05      	cmp	r4, #5
   d8042:	d1c6      	bne.n	d7fd2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d8044:	4802      	ldr	r0, [pc, #8]	; (d8050 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d8046:	e000      	b.n	d804a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d8048:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d804a:	b005      	add	sp, #20
   d804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8050:	fffffefc 	.word	0xfffffefc

000d8054 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d8054:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d8056:	2300      	movs	r3, #0
   d8058:	9301      	str	r3, [sp, #4]
   d805a:	9300      	str	r3, [sp, #0]
   d805c:	f7ff ffa6 	bl	d7fac <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d8060:	b003      	add	sp, #12
   d8062:	f85d fb04 	ldr.w	pc, [sp], #4

000d8066 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d8066:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d806a:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d806c:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d806e:	460d      	mov	r5, r1
   d8070:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d8072:	f001 fe58 	bl	d9d26 <strlen>
   d8076:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d807a:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d807c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d807e:	b1ab      	cbz	r3, d80ac <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d8080:	2140      	movs	r1, #64	; 0x40
   d8082:	4620      	mov	r0, r4
   d8084:	f001 fe7f 	bl	d9d86 <strnlen>

        if (event_name_length < filter_length)
   d8088:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d808a:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d808c:	d30b      	bcc.n	d80a6 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d808e:	4629      	mov	r1, r5
   d8090:	4620      	mov	r0, r4
   d8092:	f001 fda7 	bl	d9be4 <memcmp>
        if (0 == cmp)
   d8096:	b930      	cbnz	r0, d80a6 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d8098:	9000      	str	r0, [sp, #0]
   d809a:	4643      	mov	r3, r8
   d809c:	462a      	mov	r2, r5
   d809e:	4621      	mov	r1, r4
   d80a0:	2058      	movs	r0, #88	; 0x58
   d80a2:	f7fe f803 	bl	d60ac <system_invoke_event_handler>
   d80a6:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d80a8:	42b4      	cmp	r4, r6
   d80aa:	d1e7      	bne.n	d807c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d80ac:	b002      	add	sp, #8
   d80ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d80b4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d80b4:	b530      	push	{r4, r5, lr}
   d80b6:	b08d      	sub	sp, #52	; 0x34
   d80b8:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d80ba:	2211      	movs	r2, #17
   d80bc:	2100      	movs	r1, #0
   d80be:	a801      	add	r0, sp, #4
   d80c0:	f001 fdc5 	bl	d9c4e <memset>
    addr.v = 6;
   d80c4:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d80c6:	aa01      	add	r2, sp, #4
   d80c8:	4909      	ldr	r1, [pc, #36]	; (d80f0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d80ca:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d80ce:	200a      	movs	r0, #10
   d80d0:	f7fd fe88 	bl	d5de4 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d80d4:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d80d6:	a901      	add	r1, sp, #4
   d80d8:	a806      	add	r0, sp, #24
   d80da:	f7ff fcdd 	bl	d7a98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d80de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d80e0:	3404      	adds	r4, #4
   d80e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d80e4:	682b      	ldr	r3, [r5, #0]
   d80e6:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d80e8:	2000      	movs	r0, #0
   d80ea:	b00d      	add	sp, #52	; 0x34
   d80ec:	bd30      	pop	{r4, r5, pc}
   d80ee:	bf00      	nop
   d80f0:	000dc4cc 	.word	0x000dc4cc

000d80f4 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d80f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d80f8:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d80fa:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d80fe:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8100:	4630      	mov	r0, r6
   d8102:	f7ff f8e9 	bl	d72d8 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8106:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8108:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d810c:	f7fd fe4a 	bl	d5da4 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d8110:	2c00      	cmp	r4, #0
   d8112:	d063      	beq.n	d81dc <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d8114:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d8118:	b163      	cbz	r3, d8134 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d811a:	6823      	ldr	r3, [r4, #0]
   d811c:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d8120:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d8122:	4620      	mov	r0, r4
   d8124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8128:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d812c:	47b8      	blx	r7
        if (len > 0) {
   d812e:	1e04      	subs	r4, r0, #0
   d8130:	dc13      	bgt.n	d815a <_ZN5spark11MeshPublish4pollEv+0x66>
   d8132:	e056      	b.n	d81e2 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d8134:	492d      	ldr	r1, [pc, #180]	; (d81ec <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d8136:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d813a:	f000 fe3d 	bl	d8db8 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d813e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d8142:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d8146:	b113      	cbz	r3, d814e <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8148:	4618      	mov	r0, r3
   d814a:	f7fb ffac 	bl	d40a6 <_ZdaPv>
            if (!buffer_) {
   d814e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d8152:	2b00      	cmp	r3, #0
   d8154:	d1e1      	bne.n	d811a <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d8156:	4826      	ldr	r0, [pc, #152]	; (d81f0 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d8158:	e044      	b.n	d81e4 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d815a:	2320      	movs	r3, #32
   d815c:	4a25      	ldr	r2, [pc, #148]	; (d81f4 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d815e:	9302      	str	r3, [sp, #8]
   d8160:	9200      	str	r2, [sp, #0]
   d8162:	2300      	movs	r3, #0
   d8164:	9401      	str	r4, [sp, #4]
   d8166:	aa02      	add	r2, sp, #8
   d8168:	4923      	ldr	r1, [pc, #140]	; (d81f8 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d816a:	9303      	str	r3, [sp, #12]
   d816c:	2001      	movs	r0, #1
   d816e:	f7fd ff59 	bl	d6024 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8172:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d8176:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d8178:	781b      	ldrb	r3, [r3, #0]
   d817a:	bb6b      	cbnz	r3, d81d8 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d817c:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d817e:	4621      	mov	r1, r4
   d8180:	4638      	mov	r0, r7
   d8182:	f001 fe00 	bl	d9d86 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d8186:	b338      	cbz	r0, d81d8 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d8188:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d818a:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d818c:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d8190:	dd22      	ble.n	d81d8 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d8192:	5c3b      	ldrb	r3, [r7, r0]
   d8194:	bb03      	cbnz	r3, d81d8 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d8196:	3c01      	subs	r4, #1
   d8198:	d00e      	beq.n	d81b8 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d819a:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d819e:	4621      	mov	r1, r4
   d81a0:	4640      	mov	r0, r8
   d81a2:	f001 fdf0 	bl	d9d86 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d81a6:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d81a8:	2c00      	cmp	r4, #0
   d81aa:	dd15      	ble.n	d81d8 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d81ac:	f818 3000 	ldrb.w	r3, [r8, r0]
   d81b0:	b993      	cbnz	r3, d81d8 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d81b2:	2c01      	cmp	r4, #1
   d81b4:	d002      	beq.n	d81bc <_ZN5spark11MeshPublish4pollEv+0xc8>
   d81b6:	e00f      	b.n	d81d8 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d81b8:	f8df 8044 	ldr.w	r8, [pc, #68]	; d8200 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d81bc:	4630      	mov	r0, r6
   d81be:	f7ff f88b 	bl	d72d8 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d81c2:	4642      	mov	r2, r8
   d81c4:	4639      	mov	r1, r7
   d81c6:	1d28      	adds	r0, r5, #4
   d81c8:	f7ff ff4d 	bl	d8066 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d81cc:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d81d0:	f7fd fde8 	bl	d5da4 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d81d4:	2000      	movs	r0, #0
   d81d6:	e005      	b.n	d81e4 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d81d8:	4808      	ldr	r0, [pc, #32]	; (d81fc <_ZN5spark11MeshPublish4pollEv+0x108>)
   d81da:	e003      	b.n	d81e4 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d81dc:	2064      	movs	r0, #100	; 0x64
   d81de:	f7fd fd35 	bl	d5c4c <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d81e2:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d81e4:	b00a      	add	sp, #40	; 0x28
   d81e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d81ea:	bf00      	nop
   d81ec:	000dc5dc 	.word	0x000dc5dc
   d81f0:	fffffefc 	.word	0xfffffefc
   d81f4:	000dc4e0 	.word	0x000dc4e0
   d81f8:	000dc4d9 	.word	0x000dc4d9
   d81fc:	fffffee8 	.word	0xfffffee8
   d8200:	000dbe07 	.word	0x000dbe07

000d8204 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d8204:	b510      	push	{r4, lr}
   d8206:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d8208:	f3bf 8f5f 	dmb	sy
   d820c:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d8210:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d8214:	b91b      	cbnz	r3, d821e <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d8216:	4620      	mov	r0, r4
   d8218:	f7ff ff6c 	bl	d80f4 <_ZN5spark11MeshPublish4pollEv>
   d821c:	e7f4      	b.n	d8208 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d821e:	bd10      	pop	{r4, pc}

000d8220 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d8220:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8222:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8224:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8226:	b144      	cbz	r4, d823a <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8228:	4620      	mov	r0, r4
   d822a:	f7ff fe44 	bl	d7eb6 <_ZN6ThreadD1Ev>
   d822e:	4620      	mov	r0, r4
   d8230:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d8232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8236:	f000 bdbd 	b.w	d8db4 <_ZdlPvj>
   d823a:	bd10      	pop	{r4, pc}

000d823c <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8240:	4605      	mov	r5, r0
   d8242:	b08a      	sub	sp, #40	; 0x28
   d8244:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d8248:	f7ff f846 	bl	d72d8 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d824c:	682c      	ldr	r4, [r5, #0]
   d824e:	2c00      	cmp	r4, #0
   d8250:	d17b      	bne.n	d834a <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d8252:	204c      	movs	r0, #76	; 0x4c
   d8254:	f7fb ff21 	bl	d409a <_Znwj>
   d8258:	4606      	mov	r6, r0
   d825a:	2800      	cmp	r0, #0
   d825c:	d073      	beq.n	d8346 <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d825e:	f7fe fb13 	bl	d6888 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d8262:	4622      	mov	r2, r4
   d8264:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d8268:	4630      	mov	r0, r6
   d826a:	f7fe fb3d 	bl	d68e8 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d826e:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d8270:	483a      	ldr	r0, [pc, #232]	; (d835c <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d8272:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d8276:	f7fd fcb9 	bl	d5bec <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d827a:	6833      	ldr	r3, [r6, #0]
   d827c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8280:	6a1b      	ldr	r3, [r3, #32]
   d8282:	f249 0169 	movw	r1, #36969	; 0x9069
   d8286:	4630      	mov	r0, r6
   d8288:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d828a:	a804      	add	r0, sp, #16
   d828c:	f7ff fbf6 	bl	d7a7c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d8290:	a804      	add	r0, sp, #16
   d8292:	f7ff ff0f 	bl	d80b4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d8296:	2800      	cmp	r0, #0
   d8298:	db4a      	blt.n	d8330 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d829a:	a904      	add	r1, sp, #16
   d829c:	4630      	mov	r0, r6
   d829e:	f7fe fb72 	bl	d6986 <_ZN3UDP13joinMulticastERK9IPAddress>
   d82a2:	2800      	cmp	r0, #0
   d82a4:	db44      	blt.n	d8330 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d82a6:	f3bf 8f5f 	dmb	sy
   d82aa:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d82ae:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d82b2:	492b      	ldr	r1, [pc, #172]	; (d8360 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d82b4:	2004      	movs	r0, #4
   d82b6:	f000 fd81 	bl	d8dbc <_ZnwjRKSt9nothrow_t>
   d82ba:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d82be:	4607      	mov	r7, r0
   d82c0:	b348      	cbz	r0, d8316 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d82c2:	4927      	ldr	r1, [pc, #156]	; (d8360 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d82c4:	2014      	movs	r0, #20
   d82c6:	f000 fd79 	bl	d8dbc <_ZnwjRKSt9nothrow_t>
   d82ca:	b128      	cbz	r0, d82d8 <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d82cc:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d82ce:	6004      	str	r4, [r0, #0]
   d82d0:	6044      	str	r4, [r0, #4]
   d82d2:	6084      	str	r4, [r0, #8]
   d82d4:	60c4      	str	r4, [r0, #12]
   d82d6:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d82d8:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d82da:	b1b0      	cbz	r0, d830a <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d82dc:	4b21      	ldr	r3, [pc, #132]	; (d8364 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d82de:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d82e0:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d82e2:	4921      	ldr	r1, [pc, #132]	; (d8368 <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d82e4:	60dd      	str	r5, [r3, #12]
   d82e6:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d82e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d82ec:	e88d 0009 	stmia.w	sp, {r0, r3}
   d82f0:	2203      	movs	r2, #3
   d82f2:	4b1e      	ldr	r3, [pc, #120]	; (d836c <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d82f4:	3004      	adds	r0, #4
   d82f6:	f7fd fced 	bl	d5cd4 <os_thread_create>
   d82fa:	b930      	cbnz	r0, d830a <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d82fc:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d82fe:	7c1b      	ldrb	r3, [r3, #16]
   d8300:	b94b      	cbnz	r3, d8316 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d8302:	2001      	movs	r0, #1
   d8304:	f7fd fca2 	bl	d5c4c <HAL_Delay_Milliseconds>
   d8308:	e7f8      	b.n	d82fc <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d830a:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d830c:	2300      	movs	r3, #0
   d830e:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8310:	b108      	cbz	r0, d8316 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d8312:	f7ff fdb5 	bl	d7e80 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d8316:	4639      	mov	r1, r7
   d8318:	4640      	mov	r0, r8
   d831a:	f7ff ff81 	bl	d8220 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d831e:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d8322:	b13b      	cbz	r3, d8334 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8324:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8326:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8328:	b130      	cbz	r0, d8338 <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d832a:	f7ff fdbf 	bl	d7eac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d832e:	e00c      	b.n	d834a <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d8330:	4604      	mov	r4, r0
   d8332:	e003      	b.n	d833c <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d8334:	4c0e      	ldr	r4, [pc, #56]	; (d8370 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d8336:	e001      	b.n	d833c <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d8338:	4604      	mov	r4, r0
   d833a:	e007      	b.n	d834c <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d833c:	b136      	cbz	r6, d834c <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d833e:	4630      	mov	r0, r6
   d8340:	f7ff fdb4 	bl	d7eac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d8344:	e002      	b.n	d834c <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d8346:	4c0a      	ldr	r4, [pc, #40]	; (d8370 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d8348:	e000      	b.n	d834c <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d834a:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d834c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d8350:	f7fd fd28 	bl	d5da4 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d8354:	4620      	mov	r0, r4
   d8356:	b00a      	add	sp, #40	; 0x28
   d8358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d835c:	000dc4f0 	.word	0x000dc4f0
   d8360:	000dc5dc 	.word	0x000dc5dc
   d8364:	000d8205 	.word	0x000d8205
   d8368:	000dc4f4 	.word	0x000dc4f4
   d836c:	000d7df5 	.word	0x000d7df5
   d8370:	fffffefc 	.word	0xfffffefc

000d8374 <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d8374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8378:	4605      	mov	r5, r0
   d837a:	b08c      	sub	sp, #48	; 0x30
   d837c:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d837e:	460f      	mov	r7, r1
   d8380:	b109      	cbz	r1, d8386 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d8382:	780b      	ldrb	r3, [r1, #0]
   d8384:	b90b      	cbnz	r3, d838a <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d8386:	4c35      	ldr	r4, [pc, #212]	; (d845c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d8388:	e064      	b.n	d8454 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d838a:	4608      	mov	r0, r1
   d838c:	f001 fccb 	bl	d9d26 <strlen>
   d8390:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d8392:	2e00      	cmp	r6, #0
   d8394:	d05c      	beq.n	d8450 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d8396:	4630      	mov	r0, r6
   d8398:	f001 fcc5 	bl	d9d26 <strlen>
   d839c:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d839e:	f108 0302 	add.w	r3, r8, #2
   d83a2:	4423      	add	r3, r4
   d83a4:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d83a8:	d84f      	bhi.n	d844a <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d83aa:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d83ae:	f7fe ff93 	bl	d72d8 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d83b2:	4628      	mov	r0, r5
   d83b4:	f7ff ff42 	bl	d823c <_ZN5spark11MeshPublish13initializeUdpEv>
   d83b8:	2800      	cmp	r0, #0
   d83ba:	db40      	blt.n	d843e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d83bc:	4668      	mov	r0, sp
   d83be:	f7ff fb5d 	bl	d7a7c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d83c2:	4668      	mov	r0, sp
   d83c4:	f7ff fe76 	bl	d80b4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d83c8:	2800      	cmp	r0, #0
   d83ca:	db38      	blt.n	d843e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d83cc:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d83d0:	f8da 3000 	ldr.w	r3, [sl]
   d83d4:	f10d 0c04 	add.w	ip, sp, #4
   d83d8:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d83dc:	4b20      	ldr	r3, [pc, #128]	; (d8460 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d83de:	9306      	str	r3, [sp, #24]
   d83e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d83e4:	f10d 0e1c 	add.w	lr, sp, #28
   d83e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d83ec:	f8dc 3000 	ldr.w	r3, [ip]
   d83f0:	f88e 3000 	strb.w	r3, [lr]
   d83f4:	f249 0269 	movw	r2, #36969	; 0x9069
   d83f8:	a906      	add	r1, sp, #24
   d83fa:	4650      	mov	r0, sl
   d83fc:	47c8      	blx	r9
   d83fe:	2800      	cmp	r0, #0
   d8400:	db1d      	blt.n	d843e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d8402:	2300      	movs	r3, #0
   d8404:	6828      	ldr	r0, [r5, #0]
   d8406:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d840a:	6803      	ldr	r3, [r0, #0]
   d840c:	2201      	movs	r2, #1
   d840e:	68db      	ldr	r3, [r3, #12]
   d8410:	a906      	add	r1, sp, #24
   d8412:	4798      	blx	r3
   d8414:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d8416:	6803      	ldr	r3, [r0, #0]
   d8418:	f108 0201 	add.w	r2, r8, #1
   d841c:	68db      	ldr	r3, [r3, #12]
   d841e:	4639      	mov	r1, r7
   d8420:	4798      	blx	r3
    if (dataLen > 0) {
   d8422:	b12c      	cbz	r4, d8430 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d8424:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d8426:	6803      	ldr	r3, [r0, #0]
   d8428:	4622      	mov	r2, r4
   d842a:	68db      	ldr	r3, [r3, #12]
   d842c:	4631      	mov	r1, r6
   d842e:	4798      	blx	r3
   d8430:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d8432:	6803      	ldr	r3, [r0, #0]
   d8434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8436:	4798      	blx	r3
   d8438:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d843c:	e000      	b.n	d8440 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d843e:	4604      	mov	r4, r0
   d8440:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d8444:	f7fd fcae 	bl	d5da4 <os_mutex_recursive_unlock>
   d8448:	e004      	b.n	d8454 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d844a:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d844e:	e001      	b.n	d8454 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d8450:	4634      	mov	r4, r6
   d8452:	e7a4      	b.n	d839e <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d8454:	4620      	mov	r0, r4
   d8456:	b00c      	add	sp, #48	; 0x30
   d8458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d845c:	fffffef2 	.word	0xfffffef2
   d8460:	000dc404 	.word	0x000dc404

000d8464 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d8464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8466:	4605      	mov	r5, r0
   d8468:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d846c:	460e      	mov	r6, r1
   d846e:	4617      	mov	r7, r2
   d8470:	f7fe ff32 	bl	d72d8 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d8474:	4628      	mov	r0, r5
   d8476:	f7ff fee1 	bl	d823c <_ZN5spark11MeshPublish13initializeUdpEv>
   d847a:	2800      	cmp	r0, #0
   d847c:	db07      	blt.n	d848e <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   d847e:	463a      	mov	r2, r7
   d8480:	4631      	mov	r1, r6
   d8482:	1d28      	adds	r0, r5, #4
   d8484:	f7ff fde6 	bl	d8054 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d8488:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d848c:	e000      	b.n	d8490 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   d848e:	4604      	mov	r4, r0
   d8490:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d8494:	f7fd fc86 	bl	d5da4 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d8498:	4620      	mov	r0, r4
   d849a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d849c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d849c:	b538      	push	{r3, r4, r5, lr}
   d849e:	4c0e      	ldr	r4, [pc, #56]	; (d84d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d84a0:	4b0e      	ldr	r3, [pc, #56]	; (d84dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d84a2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d84a4:	2500      	movs	r5, #0
   d84a6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d84a8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d84ac:	6063      	str	r3, [r4, #4]
   d84ae:	60a5      	str	r5, [r4, #8]
   d84b0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d84b4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d84b8:	f7fd fc64 	bl	d5d84 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d84bc:	4b08      	ldr	r3, [pc, #32]	; (d84e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d84be:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d84c2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d84c6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d84c8:	4620      	mov	r0, r4
   d84ca:	4a06      	ldr	r2, [pc, #24]	; (d84e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d84cc:	4906      	ldr	r1, [pc, #24]	; (d84e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d84ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d84d2:	f000 bc61 	b.w	d8d98 <__aeabi_atexit>
   d84d6:	bf00      	nop
   d84d8:	2003e52c 	.word	0x2003e52c
   d84dc:	000dc5b0 	.word	0x000dc5b0
   d84e0:	000dc4a0 	.word	0x000dc4a0
   d84e4:	2003ce30 	.word	0x2003ce30
   d84e8:	000d7ef5 	.word	0x000d7ef5

000d84ec <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d84ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d84ee:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d84f0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d84f2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d84f6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d84f8:	2201      	movs	r2, #1
   d84fa:	f04f 33ff 	mov.w	r3, #4294967295
   d84fe:	4621      	mov	r1, r4
   d8500:	47a8      	blx	r5
}
   d8502:	b003      	add	sp, #12
   d8504:	bd30      	pop	{r4, r5, pc}

000d8506 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d8506:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8508:	6803      	ldr	r3, [r0, #0]
   d850a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d850c:	f04f 33ff 	mov.w	r3, #4294967295
   d8510:	46a4      	mov	ip, r4
}
   d8512:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8516:	4760      	bx	ip

000d8518 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8518:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d851a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d851c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d851e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d8522:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8524:	4621      	mov	r1, r4
   d8526:	4613      	mov	r3, r2
   d8528:	2201      	movs	r2, #1
   d852a:	47a8      	blx	r5
}
   d852c:	b003      	add	sp, #12
   d852e:	bd30      	pop	{r4, r5, pc}

000d8530 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d8530:	4770      	bx	lr

000d8532 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8532:	b538      	push	{r3, r4, r5, lr}
   d8534:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8536:	681a      	ldr	r2, [r3, #0]
   d8538:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d853a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d853c:	da05      	bge.n	d854a <_ZN9TCPClient9connectedEv+0x18>
   d853e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8542:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8546:	429a      	cmp	r2, r3
   d8548:	d001      	beq.n	d854e <_ZN9TCPClient9connectedEv+0x1c>
   d854a:	2501      	movs	r5, #1
   d854c:	e00b      	b.n	d8566 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d854e:	6803      	ldr	r3, [r0, #0]
   d8550:	691b      	ldr	r3, [r3, #16]
   d8552:	4798      	blx	r3
   d8554:	2800      	cmp	r0, #0
   d8556:	bf14      	ite	ne
   d8558:	2501      	movne	r5, #1
   d855a:	2500      	moveq	r5, #0
        if (!rv) {
   d855c:	d103      	bne.n	d8566 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d855e:	6823      	ldr	r3, [r4, #0]
   d8560:	4620      	mov	r0, r4
   d8562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8564:	4798      	blx	r3
        }
    }
    return rv;
}
   d8566:	4628      	mov	r0, r5
   d8568:	bd38      	pop	{r3, r4, r5, pc}

000d856a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d856a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d856c:	6818      	ldr	r0, [r3, #0]
}
   d856e:	43c0      	mvns	r0, r0
   d8570:	0fc0      	lsrs	r0, r0, #31
   d8572:	4770      	bx	lr

000d8574 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8574:	4770      	bx	lr

000d8576 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8576:	2000      	movs	r0, #0
   d8578:	4770      	bx	lr

000d857a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d857a:	b510      	push	{r4, lr}
   d857c:	2114      	movs	r1, #20
   d857e:	4604      	mov	r4, r0
   d8580:	f000 fc18 	bl	d8db4 <_ZdlPvj>
   d8584:	4620      	mov	r0, r4
   d8586:	bd10      	pop	{r4, pc}

000d8588 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8588:	f7fb bd8b 	b.w	d40a2 <_ZdlPv>

000d858c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d858c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d858e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d8590:	2200      	movs	r2, #0
   d8592:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d8594:	9202      	str	r2, [sp, #8]
   d8596:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8598:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d859a:	4604      	mov	r4, r0
   d859c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d859e:	d008      	beq.n	d85b2 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d85a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d85a4:	fbb3 f1f2 	udiv	r1, r3, r2
   d85a8:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d85aa:	fb02 3111 	mls	r1, r2, r1, r3
   d85ae:	434a      	muls	r2, r1
   d85b0:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d85b2:	6960      	ldr	r0, [r4, #20]
   d85b4:	2308      	movs	r3, #8
   d85b6:	9300      	str	r3, [sp, #0]
   d85b8:	f241 0205 	movw	r2, #4101	; 0x1005
   d85bc:	446b      	add	r3, sp
   d85be:	f640 71ff 	movw	r1, #4095	; 0xfff
   d85c2:	6800      	ldr	r0, [r0, #0]
   d85c4:	f7fd fcae 	bl	d5f24 <sock_setsockopt>
    if (ret < 0) {
   d85c8:	2800      	cmp	r0, #0
   d85ca:	db08      	blt.n	d85de <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d85cc:	6960      	ldr	r0, [r4, #20]
   d85ce:	2300      	movs	r3, #0
   d85d0:	4632      	mov	r2, r6
   d85d2:	4629      	mov	r1, r5
   d85d4:	6800      	ldr	r0, [r0, #0]
   d85d6:	f7fd fccd 	bl	d5f74 <sock_send>
    if (ret < 0) {
   d85da:	2800      	cmp	r0, #0
   d85dc:	da04      	bge.n	d85e8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d85de:	f7fd fe37 	bl	d6250 <__errno>
   d85e2:	6803      	ldr	r3, [r0, #0]
   d85e4:	6063      	str	r3, [r4, #4]
   d85e6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d85e8:	b004      	add	sp, #16
   d85ea:	bd70      	pop	{r4, r5, r6, pc}

000d85ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d85ec:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d85ee:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d85f0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d85f2:	689b      	ldr	r3, [r3, #8]
   d85f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d85f6:	68a3      	ldr	r3, [r4, #8]
   d85f8:	3b01      	subs	r3, #1
   d85fa:	60a3      	str	r3, [r4, #8]
   d85fc:	b92b      	cbnz	r3, d860a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d85fe:	6823      	ldr	r3, [r4, #0]
   d8600:	4620      	mov	r0, r4
   d8602:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d8608:	4718      	bx	r3
   d860a:	bd10      	pop	{r4, pc}

000d860c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d860c:	b570      	push	{r4, r5, r6, lr}
   d860e:	4604      	mov	r4, r0
   d8610:	694d      	ldr	r5, [r1, #20]
   d8612:	4b05      	ldr	r3, [pc, #20]	; (d8628 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8614:	f844 3b04 	str.w	r3, [r4], #4
   d8618:	358c      	adds	r5, #140	; 0x8c
   d861a:	4606      	mov	r6, r0
   d861c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d861e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8620:	682b      	ldr	r3, [r5, #0]
   d8622:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8624:	4630      	mov	r0, r6
   d8626:	bd70      	pop	{r4, r5, r6, pc}
   d8628:	000dc404 	.word	0x000dc404

000d862c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d862c:	b510      	push	{r4, lr}
   d862e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8630:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8634:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8638:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d863a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d863c:	d005      	beq.n	d864a <_ZN9TCPClient4peekEv+0x1e>
   d863e:	6962      	ldr	r2, [r4, #20]
   d8640:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8644:	4413      	add	r3, r2
   d8646:	7918      	ldrb	r0, [r3, #4]
   d8648:	bd10      	pop	{r4, pc}
   d864a:	6803      	ldr	r3, [r0, #0]
   d864c:	691b      	ldr	r3, [r3, #16]
   d864e:	4798      	blx	r3
   d8650:	2800      	cmp	r0, #0
   d8652:	d1f4      	bne.n	d863e <_ZN9TCPClient4peekEv+0x12>
   d8654:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8658:	bd10      	pop	{r4, pc}

000d865a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d865a:	b510      	push	{r4, lr}
   d865c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d865e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8662:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8666:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8668:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d866a:	d008      	beq.n	d867e <_ZN9TCPClient4readEv+0x24>
   d866c:	6962      	ldr	r2, [r4, #20]
   d866e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8672:	1c59      	adds	r1, r3, #1
   d8674:	4413      	add	r3, r2
   d8676:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d867a:	7918      	ldrb	r0, [r3, #4]
   d867c:	bd10      	pop	{r4, pc}
   d867e:	6803      	ldr	r3, [r0, #0]
   d8680:	691b      	ldr	r3, [r3, #16]
   d8682:	4798      	blx	r3
   d8684:	2800      	cmp	r0, #0
   d8686:	d1f1      	bne.n	d866c <_ZN9TCPClient4readEv+0x12>
   d8688:	f04f 30ff 	mov.w	r0, #4294967295
}
   d868c:	bd10      	pop	{r4, pc}

000d868e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d868e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8690:	6943      	ldr	r3, [r0, #20]
   d8692:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d8694:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8698:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d869c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d869e:	4605      	mov	r5, r0
   d86a0:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d86a2:	d106      	bne.n	d86b2 <_ZN9TCPClient4readEPhj+0x24>
   d86a4:	6803      	ldr	r3, [r0, #0]
   d86a6:	691b      	ldr	r3, [r3, #16]
   d86a8:	4798      	blx	r3
   d86aa:	b910      	cbnz	r0, d86b2 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d86ac:	f04f 34ff 	mov.w	r4, #4294967295
   d86b0:	e014      	b.n	d86dc <_ZN9TCPClient4readEPhj+0x4e>
   d86b2:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d86b4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d86b8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d86bc:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d86be:	42bc      	cmp	r4, r7
   d86c0:	bf28      	it	cs
   d86c2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d86c4:	4419      	add	r1, r3
   d86c6:	4622      	mov	r2, r4
   d86c8:	3104      	adds	r1, #4
   d86ca:	4630      	mov	r0, r6
   d86cc:	f001 fa99 	bl	d9c02 <memcpy>
   d86d0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d86d2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d86d6:	4423      	add	r3, r4
   d86d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d86dc:	4620      	mov	r0, r4
   d86de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d86e0 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d86e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d86e4:	4698      	mov	r8, r3
    stop();
   d86e6:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d86e8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d86ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d86ec:	460d      	mov	r5, r1
   d86ee:	4606      	mov	r6, r0
   d86f0:	4617      	mov	r7, r2
    stop();
   d86f2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d86f4:	ab12      	add	r3, sp, #72	; 0x48
   d86f6:	2400      	movs	r4, #0
   d86f8:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d86fc:	4622      	mov	r2, r4
   d86fe:	4621      	mov	r1, r4
   d8700:	4628      	mov	r0, r5
   d8702:	f7fd fa2b 	bl	d5b5c <netdb_getaddrinfo>
   d8706:	4681      	mov	r9, r0
   d8708:	2800      	cmp	r0, #0
   d870a:	d13d      	bne.n	d8788 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d870c:	9b00      	ldr	r3, [sp, #0]
   d870e:	2b00      	cmp	r3, #0
   d8710:	d056      	beq.n	d87c0 <_ZN9TCPClient7connectEPKctm+0xe0>
   d8712:	695b      	ldr	r3, [r3, #20]
   d8714:	2b00      	cmp	r3, #0
   d8716:	d053      	beq.n	d87c0 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d8718:	a806      	add	r0, sp, #24
   d871a:	f7ff f9af 	bl	d7a7c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d871e:	9b00      	ldr	r3, [sp, #0]
   d8720:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8722:	7863      	ldrb	r3, [r4, #1]
   d8724:	2b02      	cmp	r3, #2
   d8726:	d101      	bne.n	d872c <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8728:	1d21      	adds	r1, r4, #4
   d872a:	e013      	b.n	d8754 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d872c:	2b0a      	cmp	r3, #10
   d872e:	d114      	bne.n	d875a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d8730:	2211      	movs	r2, #17
   d8732:	4649      	mov	r1, r9
   d8734:	a801      	add	r0, sp, #4
   d8736:	f001 fa8a 	bl	d9c4e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d873a:	68a3      	ldr	r3, [r4, #8]
   d873c:	bb33      	cbnz	r3, d878c <_ZN9TCPClient7connectEPKctm+0xac>
   d873e:	68e3      	ldr	r3, [r4, #12]
   d8740:	bb23      	cbnz	r3, d878c <_ZN9TCPClient7connectEPKctm+0xac>
   d8742:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8746:	6925      	ldr	r5, [r4, #16]
   d8748:	f7fd fb54 	bl	d5df4 <inet_htonl>
   d874c:	4285      	cmp	r5, r0
   d874e:	d11d      	bne.n	d878c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8750:	f104 0114 	add.w	r1, r4, #20
   d8754:	a806      	add	r0, sp, #24
   d8756:	f7ff f9e1 	bl	d7b1c <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d875a:	a806      	add	r0, sp, #24
   d875c:	f7ff f9ae 	bl	d7abc <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8760:	2800      	cmp	r0, #0
   d8762:	d02d      	beq.n	d87c0 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d8764:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8766:	ad07      	add	r5, sp, #28
   d8768:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d876c:	4b18      	ldr	r3, [pc, #96]	; (d87d0 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d876e:	930c      	str	r3, [sp, #48]	; 0x30
   d8770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8772:	ac0d      	add	r4, sp, #52	; 0x34
   d8774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8776:	682b      	ldr	r3, [r5, #0]
   d8778:	7023      	strb	r3, [r4, #0]
   d877a:	463a      	mov	r2, r7
   d877c:	4643      	mov	r3, r8
   d877e:	a90c      	add	r1, sp, #48	; 0x30
   d8780:	4630      	mov	r0, r6
   d8782:	47c8      	blx	r9
   d8784:	4681      	mov	r9, r0
   d8786:	e01b      	b.n	d87c0 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8788:	46a1      	mov	r9, r4
   d878a:	e019      	b.n	d87c0 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d878c:	f104 0308 	add.w	r3, r4, #8
   d8790:	ad01      	add	r5, sp, #4
   d8792:	3418      	adds	r4, #24
   d8794:	6818      	ldr	r0, [r3, #0]
   d8796:	6859      	ldr	r1, [r3, #4]
   d8798:	462a      	mov	r2, r5
   d879a:	c203      	stmia	r2!, {r0, r1}
   d879c:	3308      	adds	r3, #8
   d879e:	42a3      	cmp	r3, r4
   d87a0:	4615      	mov	r5, r2
   d87a2:	d1f7      	bne.n	d8794 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d87a4:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d87a6:	a901      	add	r1, sp, #4
   d87a8:	a80c      	add	r0, sp, #48	; 0x30
   d87aa:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d87ac:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d87b0:	f7ff f972 	bl	d7a98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d87b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d87b6:	ac07      	add	r4, sp, #28
   d87b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d87ba:	682b      	ldr	r3, [r5, #0]
   d87bc:	7023      	strb	r3, [r4, #0]
   d87be:	e7cc      	b.n	d875a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d87c0:	9800      	ldr	r0, [sp, #0]
   d87c2:	f7fd f9c3 	bl	d5b4c <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d87c6:	4648      	mov	r0, r9
   d87c8:	b013      	add	sp, #76	; 0x4c
   d87ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d87ce:	bf00      	nop
   d87d0:	000dc404 	.word	0x000dc404

000d87d4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d87d4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d87d6:	2300      	movs	r3, #0
   d87d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d87dc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d87de:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d87e2:	4770      	bx	lr

000d87e4 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d87e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d87e8:	461e      	mov	r6, r3
    stop();
   d87ea:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d87ec:	460c      	mov	r4, r1
   d87ee:	b08a      	sub	sp, #40	; 0x28
    stop();
   d87f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d87f2:	4605      	mov	r5, r0
   d87f4:	4617      	mov	r7, r2
    stop();
   d87f6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d87f8:	7d23      	ldrb	r3, [r4, #20]
   d87fa:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d87fe:	2b04      	cmp	r3, #4
   d8800:	bf0c      	ite	eq
   d8802:	2002      	moveq	r0, #2
   d8804:	200a      	movne	r0, #10
   d8806:	2206      	movs	r2, #6
   d8808:	2101      	movs	r1, #1
   d880a:	f7fd fbc3 	bl	d5f94 <sock_socket>
   d880e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8812:	696b      	ldr	r3, [r5, #20]
   d8814:	681b      	ldr	r3, [r3, #0]
   d8816:	2b00      	cmp	r3, #0
   d8818:	db18      	blt.n	d884c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d881a:	4628      	mov	r0, r5
   d881c:	f7ff ffda 	bl	d87d4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d8820:	b1d6      	cbz	r6, d8858 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d8822:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8824:	a903      	add	r1, sp, #12
   d8826:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d8828:	9303      	str	r3, [sp, #12]
   d882a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d882e:	f7fd f9e5 	bl	d5bfc <if_index_to_name>
   d8832:	b958      	cbnz	r0, d884c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8834:	6968      	ldr	r0, [r5, #20]
   d8836:	2306      	movs	r3, #6
   d8838:	9300      	str	r3, [sp, #0]
   d883a:	f241 020b 	movw	r2, #4107	; 0x100b
   d883e:	ab03      	add	r3, sp, #12
   d8840:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8844:	6800      	ldr	r0, [r0, #0]
   d8846:	f7fd fb6d 	bl	d5f24 <sock_setsockopt>
   d884a:	b128      	cbz	r0, d8858 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d884c:	682b      	ldr	r3, [r5, #0]
   d884e:	4628      	mov	r0, r5
   d8850:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8852:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8854:	4798      	blx	r3
   d8856:	e03b      	b.n	d88d0 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d8858:	261c      	movs	r6, #28
   d885a:	4632      	mov	r2, r6
   d885c:	2100      	movs	r1, #0
   d885e:	a803      	add	r0, sp, #12
   d8860:	f001 f9f5 	bl	d9c4e <memset>
    if (ip.version() == 4) {
   d8864:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d8866:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d886a:	2b04      	cmp	r3, #4
   d886c:	d10c      	bne.n	d8888 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d886e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d8870:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d8872:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d8876:	f7fd facd 	bl	d5e14 <inet_htons>
   d887a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d887e:	6860      	ldr	r0, [r4, #4]
   d8880:	f7fd fab8 	bl	d5df4 <inet_htonl>
   d8884:	9004      	str	r0, [sp, #16]
   d8886:	e013      	b.n	d88b0 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8888:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d888a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d888c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d8890:	f7fd fac0 	bl	d5e14 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8894:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d8896:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d889a:	1d23      	adds	r3, r4, #4
   d889c:	f104 0714 	add.w	r7, r4, #20
   d88a0:	6818      	ldr	r0, [r3, #0]
   d88a2:	6859      	ldr	r1, [r3, #4]
   d88a4:	4632      	mov	r2, r6
   d88a6:	c203      	stmia	r2!, {r0, r1}
   d88a8:	3308      	adds	r3, #8
   d88aa:	42bb      	cmp	r3, r7
   d88ac:	4616      	mov	r6, r2
   d88ae:	d1f7      	bne.n	d88a0 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d88b0:	696b      	ldr	r3, [r5, #20]
   d88b2:	221c      	movs	r2, #28
   d88b4:	a903      	add	r1, sp, #12
   d88b6:	6818      	ldr	r0, [r3, #0]
   d88b8:	f7fd fb44 	bl	d5f44 <sock_connect>
   d88bc:	2800      	cmp	r0, #0
   d88be:	d1c5      	bne.n	d884c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d88c0:	3404      	adds	r4, #4
   d88c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d88c4:	696d      	ldr	r5, [r5, #20]
   d88c6:	358c      	adds	r5, #140	; 0x8c
   d88c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d88ca:	6823      	ldr	r3, [r4, #0]
   d88cc:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d88ce:	2401      	movs	r4, #1
}
   d88d0:	4620      	mov	r0, r4
   d88d2:	b00a      	add	sp, #40	; 0x28
   d88d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d88d8 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d88d8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d88da:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d88dc:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d88de:	6818      	ldr	r0, [r3, #0]
   d88e0:	2800      	cmp	r0, #0
   d88e2:	db01      	blt.n	d88e8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d88e4:	f7fd fb26 	bl	d5f34 <sock_close>
   d88e8:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d88ea:	f04f 32ff 	mov.w	r2, #4294967295
   d88ee:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d88f0:	6960      	ldr	r0, [r4, #20]
   d88f2:	2211      	movs	r2, #17
   d88f4:	2100      	movs	r1, #0
   d88f6:	308c      	adds	r0, #140	; 0x8c
   d88f8:	f001 f9a9 	bl	d9c4e <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d88fc:	4620      	mov	r0, r4
}
   d88fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d8902:	f7ff bf67 	b.w	d87d4 <_ZN9TCPClient12flush_bufferEv>
	...

000d8908 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8908:	b530      	push	{r4, r5, lr}
   d890a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d890c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8910:	b08b      	sub	sp, #44	; 0x2c
   d8912:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8914:	b11b      	cbz	r3, d891e <_ZN9TCPClient9availableEv+0x16>
   d8916:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d891a:	429a      	cmp	r2, r3
   d891c:	d040      	beq.n	d89a0 <_ZN9TCPClient9availableEv+0x98>
   d891e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d8920:	6818      	ldr	r0, [r3, #0]
   d8922:	2800      	cmp	r0, #0
   d8924:	db3f      	blt.n	d89a6 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d8926:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d892a:	2d7f      	cmp	r5, #127	; 0x7f
   d892c:	d83b      	bhi.n	d89a6 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d892e:	1d19      	adds	r1, r3, #4
   d8930:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8934:	2308      	movs	r3, #8
   d8936:	4429      	add	r1, r5
   d8938:	f7fd fb0c 	bl	d5f54 <sock_recv>
            if (ret > 0) {
   d893c:	2800      	cmp	r0, #0
   d893e:	dd0c      	ble.n	d895a <_ZN9TCPClient9availableEv+0x52>
   d8940:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8942:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8946:	b90a      	cbnz	r2, d894c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8948:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d894c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d894e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8952:	4418      	add	r0, r3
   d8954:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8958:	e025      	b.n	d89a6 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d895a:	f7fd fc79 	bl	d6250 <__errno>
   d895e:	6803      	ldr	r3, [r0, #0]
   d8960:	2b0b      	cmp	r3, #11
   d8962:	d020      	beq.n	d89a6 <_ZN9TCPClient9availableEv+0x9e>
   d8964:	f7fd fc74 	bl	d6250 <__errno>
   d8968:	6803      	ldr	r3, [r0, #0]
   d896a:	2b0b      	cmp	r3, #11
   d896c:	d01b      	beq.n	d89a6 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d896e:	2320      	movs	r3, #32
   d8970:	2500      	movs	r5, #0
   d8972:	9302      	str	r3, [sp, #8]
   d8974:	9503      	str	r5, [sp, #12]
   d8976:	f7fd fc6b 	bl	d6250 <__errno>
   d897a:	6803      	ldr	r3, [r0, #0]
   d897c:	9301      	str	r3, [sp, #4]
   d897e:	4b0e      	ldr	r3, [pc, #56]	; (d89b8 <_ZN9TCPClient9availableEv+0xb0>)
   d8980:	9300      	str	r3, [sp, #0]
   d8982:	aa02      	add	r2, sp, #8
   d8984:	462b      	mov	r3, r5
   d8986:	490d      	ldr	r1, [pc, #52]	; (d89bc <_ZN9TCPClient9availableEv+0xb4>)
   d8988:	2032      	movs	r0, #50	; 0x32
   d898a:	f7fd fb4b 	bl	d6024 <log_message>
                    sock_close(d_->sock);
   d898e:	6963      	ldr	r3, [r4, #20]
   d8990:	6818      	ldr	r0, [r3, #0]
   d8992:	f7fd facf 	bl	d5f34 <sock_close>
   d8996:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8998:	f04f 32ff 	mov.w	r2, #4294967295
   d899c:	601a      	str	r2, [r3, #0]
   d899e:	e002      	b.n	d89a6 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d89a0:	f7ff ff18 	bl	d87d4 <_ZN9TCPClient12flush_bufferEv>
   d89a4:	e7bb      	b.n	d891e <_ZN9TCPClient9availableEv+0x16>
   d89a6:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d89a8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d89ac:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d89b0:	1a18      	subs	r0, r3, r0
}
   d89b2:	b00b      	add	sp, #44	; 0x2c
   d89b4:	bd30      	pop	{r4, r5, pc}
   d89b6:	bf00      	nop
   d89b8:	000dc564 	.word	0x000dc564
   d89bc:	000dc4d9 	.word	0x000dc4d9

000d89c0 <_ZN9TCPClient6statusEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d89c0:	6943      	ldr	r3, [r0, #20]
   d89c2:	6818      	ldr	r0, [r3, #0]
}
   d89c4:	43c0      	mvns	r0, r0
   d89c6:	0fc0      	lsrs	r0, r0, #31
   d89c8:	4770      	bx	lr

000d89ca <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d89ca:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d89cc:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d89ce:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d89d0:	6001      	str	r1, [r0, #0]
   d89d2:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d89d6:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d89da:	3088      	adds	r0, #136	; 0x88
   d89dc:	f7ff f84e 	bl	d7a7c <_ZN9IPAddressC1Ev>
}
   d89e0:	4620      	mov	r0, r4
   d89e2:	bd10      	pop	{r4, pc}

000d89e4 <_ZN9TCPClientC1Ei>:
   d89e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d89e8:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d89ea:	2300      	movs	r3, #0
   d89ec:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d89ee:	4a14      	ldr	r2, [pc, #80]	; (d8a40 <_ZN9TCPClientC1Ei+0x5c>)
   d89f0:	6043      	str	r3, [r0, #4]
   d89f2:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d89f4:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d89f6:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d89f8:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d89fa:	20a0      	movs	r0, #160	; 0xa0
   d89fc:	460e      	mov	r6, r1
   d89fe:	f7fb fb4c 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8a02:	4605      	mov	r5, r0
   d8a04:	b110      	cbz	r0, d8a0c <_ZN9TCPClientC1Ei+0x28>
   d8a06:	4631      	mov	r1, r6
   d8a08:	f7ff ffdf 	bl	d89ca <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8a0c:	2014      	movs	r0, #20
   d8a0e:	f7fb fb44 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8a12:	4603      	mov	r3, r0
   d8a14:	b128      	cbz	r0, d8a22 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8a16:	2201      	movs	r2, #1
   d8a18:	6042      	str	r2, [r0, #4]
   d8a1a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8a1c:	4a09      	ldr	r2, [pc, #36]	; (d8a44 <_ZN9TCPClientC1Ei+0x60>)
   d8a1e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8a20:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8a22:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8a24:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8a26:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8a28:	b128      	cbz	r0, d8a36 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8a2a:	6843      	ldr	r3, [r0, #4]
   d8a2c:	3b01      	subs	r3, #1
   d8a2e:	6043      	str	r3, [r0, #4]
   d8a30:	b90b      	cbnz	r3, d8a36 <_ZN9TCPClientC1Ei+0x52>
   d8a32:	f7ff fddb 	bl	d85ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d8a36:	4620      	mov	r0, r4
   d8a38:	f7ff fecc 	bl	d87d4 <_ZN9TCPClient12flush_bufferEv>
}
   d8a3c:	4620      	mov	r0, r4
   d8a3e:	bd70      	pop	{r4, r5, r6, pc}
   d8a40:	000dc520 	.word	0x000dc520
   d8a44:	000dc504 	.word	0x000dc504

000d8a48 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8a48:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8a4a:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8a4e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8a50:	f7ff ffc8 	bl	d89e4 <_ZN9TCPClientC1Ei>
}
   d8a54:	4620      	mov	r0, r4
   d8a56:	bd10      	pop	{r4, pc}

000d8a58 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8a58:	b510      	push	{r4, lr}
   d8a5a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8a5c:	6800      	ldr	r0, [r0, #0]
   d8a5e:	2800      	cmp	r0, #0
   d8a60:	db01      	blt.n	d8a66 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8a62:	f7fd fa67 	bl	d5f34 <sock_close>
    }
}
   d8a66:	4620      	mov	r0, r4
   d8a68:	bd10      	pop	{r4, pc}

000d8a6a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8a6a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8a6c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8a6e:	4620      	mov	r0, r4
   d8a70:	f7ff fff2 	bl	d8a58 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8a74:	b124      	cbz	r4, d8a80 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8a76:	4620      	mov	r0, r4
   d8a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8a7c:	f7fb bb11 	b.w	d40a2 <_ZdlPv>
   d8a80:	bd10      	pop	{r4, pc}

000d8a82 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8a82:	2200      	movs	r2, #0
   d8a84:	4611      	mov	r1, r2
   d8a86:	6840      	ldr	r0, [r0, #4]
   d8a88:	f7fd bb32 	b.w	d60f0 <network_ready>

000d8a8c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8a8c:	2200      	movs	r2, #0
   d8a8e:	4611      	mov	r1, r2
   d8a90:	6840      	ldr	r0, [r0, #4]
   d8a92:	f7fd bb4d 	b.w	d6130 <network_listening>

000d8a96 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8a96:	2200      	movs	r2, #0
   d8a98:	4611      	mov	r1, r2
   d8a9a:	6840      	ldr	r0, [r0, #4]
   d8a9c:	f7fd bb58 	b.w	d6150 <network_get_listen_timeout>

000d8aa0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8aa0:	2200      	movs	r2, #0
   d8aa2:	6840      	ldr	r0, [r0, #4]
   d8aa4:	f7fd bb4c 	b.w	d6140 <network_set_listen_timeout>

000d8aa8 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8aa8:	2200      	movs	r2, #0
   d8aaa:	f081 0101 	eor.w	r1, r1, #1
   d8aae:	6840      	ldr	r0, [r0, #4]
   d8ab0:	f7fd bb36 	b.w	d6120 <network_listen>

000d8ab4 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8ab4:	2300      	movs	r3, #0
   d8ab6:	461a      	mov	r2, r3
   d8ab8:	4619      	mov	r1, r3
   d8aba:	6840      	ldr	r0, [r0, #4]
   d8abc:	f7fd bb28 	b.w	d6110 <network_off>

000d8ac0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8ac0:	2300      	movs	r3, #0
   d8ac2:	461a      	mov	r2, r3
   d8ac4:	4619      	mov	r1, r3
   d8ac6:	6840      	ldr	r0, [r0, #4]
   d8ac8:	f7fd bb1a 	b.w	d6100 <network_on>

000d8acc <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8acc:	2200      	movs	r2, #0
   d8ace:	4611      	mov	r1, r2
   d8ad0:	6840      	ldr	r0, [r0, #4]
   d8ad2:	f7fd bafd 	b.w	d60d0 <network_connecting>

000d8ad6 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8ad6:	2200      	movs	r2, #0
   d8ad8:	2102      	movs	r1, #2
   d8ada:	6840      	ldr	r0, [r0, #4]
   d8adc:	f7fd bb00 	b.w	d60e0 <network_disconnect>

000d8ae0 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8ae0:	2300      	movs	r3, #0
   d8ae2:	461a      	mov	r2, r3
   d8ae4:	6840      	ldr	r0, [r0, #4]
   d8ae6:	f7fd baeb 	b.w	d60c0 <network_connect>
	...

000d8aec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8aec:	4b02      	ldr	r3, [pc, #8]	; (d8af8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8aee:	2204      	movs	r2, #4
   d8af0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8af2:	4a02      	ldr	r2, [pc, #8]	; (d8afc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8af4:	601a      	str	r2, [r3, #0]
   d8af6:	4770      	bx	lr
   d8af8:	2003e700 	.word	0x2003e700
   d8afc:	000dc57c 	.word	0x000dc57c

000d8b00 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8b00:	2300      	movs	r3, #0
   d8b02:	461a      	mov	r2, r3
   d8b04:	6840      	ldr	r0, [r0, #4]
   d8b06:	f7fd badb 	b.w	d60c0 <network_connect>

000d8b0a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8b0a:	2200      	movs	r2, #0
   d8b0c:	2102      	movs	r1, #2
   d8b0e:	6840      	ldr	r0, [r0, #4]
   d8b10:	f7fd bae6 	b.w	d60e0 <network_disconnect>

000d8b14 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8b14:	2200      	movs	r2, #0
   d8b16:	4611      	mov	r1, r2
   d8b18:	6840      	ldr	r0, [r0, #4]
   d8b1a:	f7fd bad9 	b.w	d60d0 <network_connecting>

000d8b1e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8b1e:	2200      	movs	r2, #0
   d8b20:	4611      	mov	r1, r2
   d8b22:	6840      	ldr	r0, [r0, #4]
   d8b24:	f7fd bae4 	b.w	d60f0 <network_ready>

000d8b28 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8b28:	2300      	movs	r3, #0
   d8b2a:	461a      	mov	r2, r3
   d8b2c:	4619      	mov	r1, r3
   d8b2e:	6840      	ldr	r0, [r0, #4]
   d8b30:	f7fd bae6 	b.w	d6100 <network_on>

000d8b34 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8b34:	2300      	movs	r3, #0
   d8b36:	461a      	mov	r2, r3
   d8b38:	4619      	mov	r1, r3
   d8b3a:	6840      	ldr	r0, [r0, #4]
   d8b3c:	f7fd bae8 	b.w	d6110 <network_off>

000d8b40 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8b40:	2200      	movs	r2, #0
   d8b42:	f081 0101 	eor.w	r1, r1, #1
   d8b46:	6840      	ldr	r0, [r0, #4]
   d8b48:	f7fd baea 	b.w	d6120 <network_listen>

000d8b4c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8b4c:	2200      	movs	r2, #0
   d8b4e:	6840      	ldr	r0, [r0, #4]
   d8b50:	f7fd baf6 	b.w	d6140 <network_set_listen_timeout>

000d8b54 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8b54:	2200      	movs	r2, #0
   d8b56:	4611      	mov	r1, r2
   d8b58:	6840      	ldr	r0, [r0, #4]
   d8b5a:	f7fd baf9 	b.w	d6150 <network_get_listen_timeout>

000d8b5e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8b5e:	2200      	movs	r2, #0
   d8b60:	4611      	mov	r1, r2
   d8b62:	6840      	ldr	r0, [r0, #4]
   d8b64:	f7fd bae4 	b.w	d6130 <network_listening>

000d8b68 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8b6c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8b6e:	b095      	sub	sp, #84	; 0x54
   d8b70:	4616      	mov	r6, r2
   d8b72:	460d      	mov	r5, r1
   d8b74:	4607      	mov	r7, r0
    IPAddress addr;
   d8b76:	f7fe ff81 	bl	d7a7c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8b7a:	4621      	mov	r1, r4
   d8b7c:	2220      	movs	r2, #32
   d8b7e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8b80:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8b82:	f001 f864 	bl	d9c4e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8b86:	2340      	movs	r3, #64	; 0x40
   d8b88:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8b8a:	4621      	mov	r1, r4
   d8b8c:	466b      	mov	r3, sp
   d8b8e:	aa0c      	add	r2, sp, #48	; 0x30
   d8b90:	4630      	mov	r0, r6
   d8b92:	f7fc ffe3 	bl	d5b5c <netdb_getaddrinfo>
    if (!r) {
   d8b96:	4604      	mov	r4, r0
   d8b98:	2800      	cmp	r0, #0
   d8b9a:	d144      	bne.n	d8c26 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8b9c:	4602      	mov	r2, r0
   d8b9e:	2101      	movs	r1, #1
   d8ba0:	6868      	ldr	r0, [r5, #4]
   d8ba2:	f7fd faa5 	bl	d60f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ba6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8ba8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8baa:	4622      	mov	r2, r4
   d8bac:	6868      	ldr	r0, [r5, #4]
   d8bae:	f7fd fa9f 	bl	d60f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8bb2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8bb4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8bb6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8bb8:	2e00      	cmp	r6, #0
   d8bba:	d034      	beq.n	d8c26 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8bbc:	2900      	cmp	r1, #0
   d8bbe:	d132      	bne.n	d8c26 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8bc0:	6873      	ldr	r3, [r6, #4]
   d8bc2:	2b02      	cmp	r3, #2
   d8bc4:	d002      	beq.n	d8bcc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8bc6:	2b0a      	cmp	r3, #10
   d8bc8:	d009      	beq.n	d8bde <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8bca:	e02a      	b.n	d8c22 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8bcc:	f1b8 0f00 	cmp.w	r8, #0
   d8bd0:	d027      	beq.n	d8c22 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8bd2:	6971      	ldr	r1, [r6, #20]
   d8bd4:	4638      	mov	r0, r7
   d8bd6:	3104      	adds	r1, #4
   d8bd8:	f7fe ffa0 	bl	d7b1c <_ZN9IPAddressaSEPKh>
   d8bdc:	e020      	b.n	d8c20 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8bde:	f1b9 0f00 	cmp.w	r9, #0
   d8be2:	d01e      	beq.n	d8c22 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8be4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8be6:	2211      	movs	r2, #17
   d8be8:	a801      	add	r0, sp, #4
   d8bea:	f001 f830 	bl	d9c4e <memset>
                    a.v = 6;
   d8bee:	2306      	movs	r3, #6
   d8bf0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8bf4:	ad01      	add	r5, sp, #4
   d8bf6:	f104 0308 	add.w	r3, r4, #8
   d8bfa:	3418      	adds	r4, #24
   d8bfc:	6818      	ldr	r0, [r3, #0]
   d8bfe:	6859      	ldr	r1, [r3, #4]
   d8c00:	462a      	mov	r2, r5
   d8c02:	c203      	stmia	r2!, {r0, r1}
   d8c04:	3308      	adds	r3, #8
   d8c06:	42a3      	cmp	r3, r4
   d8c08:	4615      	mov	r5, r2
   d8c0a:	d1f7      	bne.n	d8bfc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8c0c:	a901      	add	r1, sp, #4
   d8c0e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8c10:	ad07      	add	r5, sp, #28
   d8c12:	f7fe ff41 	bl	d7a98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8c18:	1d3c      	adds	r4, r7, #4
   d8c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8c1c:	682b      	ldr	r3, [r5, #0]
   d8c1e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8c20:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8c22:	69f6      	ldr	r6, [r6, #28]
   d8c24:	e7c8      	b.n	d8bb8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8c26:	9800      	ldr	r0, [sp, #0]
   d8c28:	f7fc ff90 	bl	d5b4c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8c2c:	4638      	mov	r0, r7
   d8c2e:	b015      	add	sp, #84	; 0x54
   d8c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8c34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8c34:	4b02      	ldr	r3, [pc, #8]	; (d8c40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8c36:	4a03      	ldr	r2, [pc, #12]	; (d8c44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8c38:	601a      	str	r2, [r3, #0]
   d8c3a:	2200      	movs	r2, #0
   d8c3c:	605a      	str	r2, [r3, #4]
   d8c3e:	4770      	bx	lr
   d8c40:	2003e708 	.word	0x2003e708
   d8c44:	000dc5b0 	.word	0x000dc5b0

000d8c48 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8c48:	b510      	push	{r4, lr}
   d8c4a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8c4c:	480f      	ldr	r0, [pc, #60]	; (d8c8c <pinAvailable+0x44>)
   d8c4e:	f7fd fb61 	bl	d6314 <_ZN8SPIClass9isEnabledEv>
   d8c52:	b128      	cbz	r0, d8c60 <pinAvailable+0x18>
   d8c54:	f1a4 030b 	sub.w	r3, r4, #11
   d8c58:	2b02      	cmp	r3, #2
   d8c5a:	d801      	bhi.n	d8c60 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8c5c:	2000      	movs	r0, #0
   d8c5e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8c60:	f000 f87a 	bl	d8d58 <_Z19__fetch_global_Wirev>
   d8c64:	f7ff f8c2 	bl	d7dec <_ZN7TwoWire9isEnabledEv>
   d8c68:	b108      	cbz	r0, d8c6e <pinAvailable+0x26>
   d8c6a:	2c01      	cmp	r4, #1
   d8c6c:	d9f6      	bls.n	d8c5c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8c6e:	f7ff f845 	bl	d7cfc <_Z22__fetch_global_Serial1v>
   d8c72:	f7ff f83f 	bl	d7cf4 <_ZN11USARTSerial9isEnabledEv>
   d8c76:	b118      	cbz	r0, d8c80 <pinAvailable+0x38>
   d8c78:	f1a4 0309 	sub.w	r3, r4, #9
   d8c7c:	2b01      	cmp	r3, #1
   d8c7e:	d9ed      	bls.n	d8c5c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8c80:	2c23      	cmp	r4, #35	; 0x23
   d8c82:	bf8c      	ite	hi
   d8c84:	2000      	movhi	r0, #0
   d8c86:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8c88:	bd10      	pop	{r4, pc}
   d8c8a:	bf00      	nop
   d8c8c:	2003e710 	.word	0x2003e710

000d8c90 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8c90:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8c92:	b538      	push	{r3, r4, r5, lr}
   d8c94:	4604      	mov	r4, r0
   d8c96:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8c98:	d80a      	bhi.n	d8cb0 <pinMode+0x20>
   d8c9a:	29ff      	cmp	r1, #255	; 0xff
   d8c9c:	d008      	beq.n	d8cb0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8c9e:	f7ff ffd3 	bl	d8c48 <pinAvailable>
   d8ca2:	b128      	cbz	r0, d8cb0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8ca4:	4629      	mov	r1, r5
   d8ca6:	4620      	mov	r0, r4
}
   d8ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8cac:	f7fc bf6e 	b.w	d5b8c <HAL_Pin_Mode>
   d8cb0:	bd38      	pop	{r3, r4, r5, pc}

000d8cb2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8cb2:	b538      	push	{r3, r4, r5, lr}
   d8cb4:	4604      	mov	r4, r0
   d8cb6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8cb8:	f7fc ff70 	bl	d5b9c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8cbc:	28ff      	cmp	r0, #255	; 0xff
   d8cbe:	d010      	beq.n	d8ce2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8cc0:	2806      	cmp	r0, #6
   d8cc2:	d804      	bhi.n	d8cce <digitalWrite+0x1c>
   d8cc4:	234d      	movs	r3, #77	; 0x4d
   d8cc6:	fa23 f000 	lsr.w	r0, r3, r0
   d8cca:	07c3      	lsls	r3, r0, #31
   d8ccc:	d409      	bmi.n	d8ce2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8cce:	4620      	mov	r0, r4
   d8cd0:	f7ff ffba 	bl	d8c48 <pinAvailable>
   d8cd4:	b128      	cbz	r0, d8ce2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8cd6:	4629      	mov	r1, r5
   d8cd8:	4620      	mov	r0, r4
}
   d8cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8cde:	f7fc bf65 	b.w	d5bac <HAL_GPIO_Write>
   d8ce2:	bd38      	pop	{r3, r4, r5, pc}

000d8ce4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8ce4:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8ce6:	b510      	push	{r4, lr}
   d8ce8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8cea:	bf9c      	itt	ls
   d8cec:	340e      	addls	r4, #14
   d8cee:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8cf0:	4620      	mov	r0, r4
   d8cf2:	f7ff ffa9 	bl	d8c48 <pinAvailable>
   d8cf6:	b150      	cbz	r0, d8d0e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8cf8:	2103      	movs	r1, #3
   d8cfa:	4620      	mov	r0, r4
   d8cfc:	f7fc ff3e 	bl	d5b7c <HAL_Validate_Pin_Function>
   d8d00:	2803      	cmp	r0, #3
   d8d02:	d104      	bne.n	d8d0e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8d04:	4620      	mov	r0, r4
}
   d8d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8d0a:	f7fc bf57 	b.w	d5bbc <HAL_ADC_Read>
}
   d8d0e:	2000      	movs	r0, #0
   d8d10:	bd10      	pop	{r4, pc}
	...

000d8d14 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8d14:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8d16:	4c0c      	ldr	r4, [pc, #48]	; (d8d48 <_GLOBAL__sub_I_SPI+0x34>)
   d8d18:	4e0c      	ldr	r6, [pc, #48]	; (d8d4c <_GLOBAL__sub_I_SPI+0x38>)
   d8d1a:	4d0d      	ldr	r5, [pc, #52]	; (d8d50 <_GLOBAL__sub_I_SPI+0x3c>)
   d8d1c:	2100      	movs	r1, #0
   d8d1e:	4620      	mov	r0, r4
   d8d20:	f7fd fae4 	bl	d62ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8d24:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8d26:	4c0b      	ldr	r4, [pc, #44]	; (d8d54 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8d28:	4632      	mov	r2, r6
   d8d2a:	4629      	mov	r1, r5
   d8d2c:	f000 f834 	bl	d8d98 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8d30:	2101      	movs	r1, #1
   d8d32:	4620      	mov	r0, r4
   d8d34:	f7fd fada 	bl	d62ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8d38:	4632      	mov	r2, r6
   d8d3a:	4629      	mov	r1, r5
   d8d3c:	4620      	mov	r0, r4
   d8d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8d42:	f000 b829 	b.w	d8d98 <__aeabi_atexit>
   d8d46:	bf00      	nop
   d8d48:	2003e710 	.word	0x2003e710
   d8d4c:	2003ce30 	.word	0x2003ce30
   d8d50:	000d62dd 	.word	0x000d62dd
   d8d54:	2003e720 	.word	0x2003e720

000d8d58 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d8d58:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d8d5a:	4d0b      	ldr	r5, [pc, #44]	; (d8d88 <_Z19__fetch_global_Wirev+0x30>)
   d8d5c:	6829      	ldr	r1, [r5, #0]
   d8d5e:	f011 0401 	ands.w	r4, r1, #1
   d8d62:	d10f      	bne.n	d8d84 <_Z19__fetch_global_Wirev+0x2c>
   d8d64:	4628      	mov	r0, r5
   d8d66:	f7fb f9a0 	bl	d40aa <__cxa_guard_acquire>
   d8d6a:	b158      	cbz	r0, d8d84 <_Z19__fetch_global_Wirev+0x2c>
   d8d6c:	4621      	mov	r1, r4
   d8d6e:	4807      	ldr	r0, [pc, #28]	; (d8d8c <_Z19__fetch_global_Wirev+0x34>)
   d8d70:	f7ff f82a 	bl	d7dc8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d8d74:	4628      	mov	r0, r5
   d8d76:	f7fb f99d 	bl	d40b4 <__cxa_guard_release>
   d8d7a:	4a05      	ldr	r2, [pc, #20]	; (d8d90 <_Z19__fetch_global_Wirev+0x38>)
   d8d7c:	4905      	ldr	r1, [pc, #20]	; (d8d94 <_Z19__fetch_global_Wirev+0x3c>)
   d8d7e:	4803      	ldr	r0, [pc, #12]	; (d8d8c <_Z19__fetch_global_Wirev+0x34>)
   d8d80:	f000 f80a 	bl	d8d98 <__aeabi_atexit>
	return wire;
}
   d8d84:	4801      	ldr	r0, [pc, #4]	; (d8d8c <_Z19__fetch_global_Wirev+0x34>)
   d8d86:	bd38      	pop	{r3, r4, r5, pc}
   d8d88:	2003e734 	.word	0x2003e734
   d8d8c:	2003e738 	.word	0x2003e738
   d8d90:	2003ce30 	.word	0x2003ce30
   d8d94:	000d7d71 	.word	0x000d7d71

000d8d98 <__aeabi_atexit>:
   d8d98:	460b      	mov	r3, r1
   d8d9a:	4601      	mov	r1, r0
   d8d9c:	4618      	mov	r0, r3
   d8d9e:	f000 bf0f 	b.w	d9bc0 <__cxa_atexit>
	...

000d8da4 <_ZSt15get_new_handlerv>:
   d8da4:	4b02      	ldr	r3, [pc, #8]	; (d8db0 <_ZSt15get_new_handlerv+0xc>)
   d8da6:	6818      	ldr	r0, [r3, #0]
   d8da8:	f3bf 8f5f 	dmb	sy
   d8dac:	4770      	bx	lr
   d8dae:	bf00      	nop
   d8db0:	2003e74c 	.word	0x2003e74c

000d8db4 <_ZdlPvj>:
   d8db4:	f7fb b975 	b.w	d40a2 <_ZdlPv>

000d8db8 <_ZnajRKSt9nothrow_t>:
   d8db8:	f000 b800 	b.w	d8dbc <_ZnwjRKSt9nothrow_t>

000d8dbc <_ZnwjRKSt9nothrow_t>:
   d8dbc:	b510      	push	{r4, lr}
   d8dbe:	2800      	cmp	r0, #0
   d8dc0:	bf14      	ite	ne
   d8dc2:	4604      	movne	r4, r0
   d8dc4:	2401      	moveq	r4, #1
   d8dc6:	4620      	mov	r0, r4
   d8dc8:	f7fd fa0a 	bl	d61e0 <malloc>
   d8dcc:	b920      	cbnz	r0, d8dd8 <_ZnwjRKSt9nothrow_t+0x1c>
   d8dce:	f7ff ffe9 	bl	d8da4 <_ZSt15get_new_handlerv>
   d8dd2:	b108      	cbz	r0, d8dd8 <_ZnwjRKSt9nothrow_t+0x1c>
   d8dd4:	4780      	blx	r0
   d8dd6:	e7f6      	b.n	d8dc6 <_ZnwjRKSt9nothrow_t+0xa>
   d8dd8:	bd10      	pop	{r4, pc}

000d8dda <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d8dda:	68c3      	ldr	r3, [r0, #12]
   d8ddc:	689a      	ldr	r2, [r3, #8]
   d8dde:	60c2      	str	r2, [r0, #12]
   d8de0:	b102      	cbz	r2, d8de4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
   d8de2:	6050      	str	r0, [r2, #4]
   d8de4:	6842      	ldr	r2, [r0, #4]
   d8de6:	605a      	str	r2, [r3, #4]
   d8de8:	680a      	ldr	r2, [r1, #0]
   d8dea:	4290      	cmp	r0, r2
   d8dec:	d101      	bne.n	d8df2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
   d8dee:	600b      	str	r3, [r1, #0]
   d8df0:	e005      	b.n	d8dfe <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
   d8df2:	6842      	ldr	r2, [r0, #4]
   d8df4:	6891      	ldr	r1, [r2, #8]
   d8df6:	4288      	cmp	r0, r1
   d8df8:	bf0c      	ite	eq
   d8dfa:	6093      	streq	r3, [r2, #8]
   d8dfc:	60d3      	strne	r3, [r2, #12]
   d8dfe:	6098      	str	r0, [r3, #8]
   d8e00:	6043      	str	r3, [r0, #4]
   d8e02:	4770      	bx	lr

000d8e04 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d8e04:	6883      	ldr	r3, [r0, #8]
   d8e06:	68da      	ldr	r2, [r3, #12]
   d8e08:	6082      	str	r2, [r0, #8]
   d8e0a:	b102      	cbz	r2, d8e0e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
   d8e0c:	6050      	str	r0, [r2, #4]
   d8e0e:	6842      	ldr	r2, [r0, #4]
   d8e10:	605a      	str	r2, [r3, #4]
   d8e12:	680a      	ldr	r2, [r1, #0]
   d8e14:	4290      	cmp	r0, r2
   d8e16:	d101      	bne.n	d8e1c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
   d8e18:	600b      	str	r3, [r1, #0]
   d8e1a:	e005      	b.n	d8e28 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
   d8e1c:	6842      	ldr	r2, [r0, #4]
   d8e1e:	68d1      	ldr	r1, [r2, #12]
   d8e20:	4288      	cmp	r0, r1
   d8e22:	bf0c      	ite	eq
   d8e24:	60d3      	streq	r3, [r2, #12]
   d8e26:	6093      	strne	r3, [r2, #8]
   d8e28:	60d8      	str	r0, [r3, #12]
   d8e2a:	6043      	str	r3, [r0, #4]
   d8e2c:	4770      	bx	lr

000d8e2e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d8e2e:	7803      	ldrb	r3, [r0, #0]
   d8e30:	b92b      	cbnz	r3, d8e3e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   d8e32:	6843      	ldr	r3, [r0, #4]
   d8e34:	685b      	ldr	r3, [r3, #4]
   d8e36:	4298      	cmp	r0, r3
   d8e38:	d101      	bne.n	d8e3e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   d8e3a:	68c3      	ldr	r3, [r0, #12]
   d8e3c:	e00c      	b.n	d8e58 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d8e3e:	6883      	ldr	r3, [r0, #8]
   d8e40:	b11b      	cbz	r3, d8e4a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
   d8e42:	68da      	ldr	r2, [r3, #12]
   d8e44:	b142      	cbz	r2, d8e58 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d8e46:	4613      	mov	r3, r2
   d8e48:	e7fb      	b.n	d8e42 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
   d8e4a:	6843      	ldr	r3, [r0, #4]
   d8e4c:	689a      	ldr	r2, [r3, #8]
   d8e4e:	4282      	cmp	r2, r0
   d8e50:	d102      	bne.n	d8e58 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d8e52:	4618      	mov	r0, r3
   d8e54:	685b      	ldr	r3, [r3, #4]
   d8e56:	e7f9      	b.n	d8e4c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
   d8e58:	4618      	mov	r0, r3
   d8e5a:	4770      	bx	lr

000d8e5c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   d8e5c:	68c3      	ldr	r3, [r0, #12]
   d8e5e:	b123      	cbz	r3, d8e6a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   d8e60:	4618      	mov	r0, r3
   d8e62:	689b      	ldr	r3, [r3, #8]
   d8e64:	2b00      	cmp	r3, #0
   d8e66:	d1fb      	bne.n	d8e60 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   d8e68:	e00a      	b.n	d8e80 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
   d8e6a:	6843      	ldr	r3, [r0, #4]
   d8e6c:	68da      	ldr	r2, [r3, #12]
   d8e6e:	4282      	cmp	r2, r0
   d8e70:	d102      	bne.n	d8e78 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   d8e72:	4618      	mov	r0, r3
   d8e74:	685b      	ldr	r3, [r3, #4]
   d8e76:	e7f9      	b.n	d8e6c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   d8e78:	68c2      	ldr	r2, [r0, #12]
   d8e7a:	4293      	cmp	r3, r2
   d8e7c:	bf18      	it	ne
   d8e7e:	4618      	movne	r0, r3
   d8e80:	4770      	bx	lr

000d8e82 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d8e82:	f7ff bfd4 	b.w	d8e2e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000d8e86 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   d8e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e8a:	461f      	mov	r7, r3
   d8e8c:	f103 0904 	add.w	r9, r3, #4
   d8e90:	2300      	movs	r3, #0
   d8e92:	460c      	mov	r4, r1
   d8e94:	604a      	str	r2, [r1, #4]
   d8e96:	608b      	str	r3, [r1, #8]
   d8e98:	60cb      	str	r3, [r1, #12]
   d8e9a:	700b      	strb	r3, [r1, #0]
   d8e9c:	b168      	cbz	r0, d8eba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
   d8e9e:	4297      	cmp	r7, r2
   d8ea0:	6091      	str	r1, [r2, #8]
   d8ea2:	d101      	bne.n	d8ea8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d8ea4:	6079      	str	r1, [r7, #4]
   d8ea6:	e00c      	b.n	d8ec2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
   d8ea8:	68bb      	ldr	r3, [r7, #8]
   d8eaa:	429a      	cmp	r2, r3
   d8eac:	bf08      	it	eq
   d8eae:	60b9      	streq	r1, [r7, #8]
   d8eb0:	f04f 0801 	mov.w	r8, #1
   d8eb4:	f04f 0a00 	mov.w	sl, #0
   d8eb8:	e017      	b.n	d8eea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d8eba:	60d1      	str	r1, [r2, #12]
   d8ebc:	68fb      	ldr	r3, [r7, #12]
   d8ebe:	429a      	cmp	r2, r3
   d8ec0:	d1f6      	bne.n	d8eb0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   d8ec2:	60fc      	str	r4, [r7, #12]
   d8ec4:	e7f4      	b.n	d8eb0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   d8ec6:	6866      	ldr	r6, [r4, #4]
   d8ec8:	7832      	ldrb	r2, [r6, #0]
   d8eca:	2a00      	cmp	r2, #0
   d8ecc:	d13a      	bne.n	d8f44 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   d8ece:	6875      	ldr	r5, [r6, #4]
   d8ed0:	68ab      	ldr	r3, [r5, #8]
   d8ed2:	429e      	cmp	r6, r3
   d8ed4:	d11f      	bne.n	d8f16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
   d8ed6:	68eb      	ldr	r3, [r5, #12]
   d8ed8:	b15b      	cbz	r3, d8ef2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   d8eda:	781a      	ldrb	r2, [r3, #0]
   d8edc:	b94a      	cbnz	r2, d8ef2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   d8ede:	f886 8000 	strb.w	r8, [r6]
   d8ee2:	f883 8000 	strb.w	r8, [r3]
   d8ee6:	702a      	strb	r2, [r5, #0]
   d8ee8:	462c      	mov	r4, r5
   d8eea:	687b      	ldr	r3, [r7, #4]
   d8eec:	429c      	cmp	r4, r3
   d8eee:	d1ea      	bne.n	d8ec6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
   d8ef0:	e028      	b.n	d8f44 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   d8ef2:	68f3      	ldr	r3, [r6, #12]
   d8ef4:	429c      	cmp	r4, r3
   d8ef6:	d104      	bne.n	d8f02 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
   d8ef8:	4649      	mov	r1, r9
   d8efa:	4630      	mov	r0, r6
   d8efc:	f7ff ff6d 	bl	d8dda <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d8f00:	4634      	mov	r4, r6
   d8f02:	6863      	ldr	r3, [r4, #4]
   d8f04:	4649      	mov	r1, r9
   d8f06:	f883 8000 	strb.w	r8, [r3]
   d8f0a:	4628      	mov	r0, r5
   d8f0c:	f885 a000 	strb.w	sl, [r5]
   d8f10:	f7ff ff78 	bl	d8e04 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d8f14:	e014      	b.n	d8f40 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
   d8f16:	b113      	cbz	r3, d8f1e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
   d8f18:	781a      	ldrb	r2, [r3, #0]
   d8f1a:	2a00      	cmp	r2, #0
   d8f1c:	d0df      	beq.n	d8ede <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
   d8f1e:	68b3      	ldr	r3, [r6, #8]
   d8f20:	429c      	cmp	r4, r3
   d8f22:	d104      	bne.n	d8f2e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
   d8f24:	4649      	mov	r1, r9
   d8f26:	4630      	mov	r0, r6
   d8f28:	f7ff ff6c 	bl	d8e04 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d8f2c:	4634      	mov	r4, r6
   d8f2e:	6863      	ldr	r3, [r4, #4]
   d8f30:	4649      	mov	r1, r9
   d8f32:	f883 8000 	strb.w	r8, [r3]
   d8f36:	4628      	mov	r0, r5
   d8f38:	f885 a000 	strb.w	sl, [r5]
   d8f3c:	f7ff ff4d 	bl	d8dda <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d8f40:	4625      	mov	r5, r4
   d8f42:	e7d1      	b.n	d8ee8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
   d8f44:	2201      	movs	r2, #1
   d8f46:	701a      	strb	r2, [r3, #0]
   d8f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8f4c <_ZSt25__throw_bad_function_callv>:
   d8f4c:	b508      	push	{r3, lr}
   d8f4e:	f7fd f96f 	bl	d6230 <abort>
	...

000d8f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8f54:	4b18      	ldr	r3, [pc, #96]	; (d8fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8f56:	681a      	ldr	r2, [r3, #0]
   d8f58:	07d1      	lsls	r1, r2, #31
   d8f5a:	bf5c      	itt	pl
   d8f5c:	2201      	movpl	r2, #1
   d8f5e:	601a      	strpl	r2, [r3, #0]
   d8f60:	4b16      	ldr	r3, [pc, #88]	; (d8fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8f62:	681a      	ldr	r2, [r3, #0]
   d8f64:	07d2      	lsls	r2, r2, #31
   d8f66:	bf5c      	itt	pl
   d8f68:	2201      	movpl	r2, #1
   d8f6a:	601a      	strpl	r2, [r3, #0]
   d8f6c:	4b14      	ldr	r3, [pc, #80]	; (d8fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8f6e:	681a      	ldr	r2, [r3, #0]
   d8f70:	07d0      	lsls	r0, r2, #31
   d8f72:	bf5c      	itt	pl
   d8f74:	2201      	movpl	r2, #1
   d8f76:	601a      	strpl	r2, [r3, #0]
   d8f78:	4b12      	ldr	r3, [pc, #72]	; (d8fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8f7a:	681a      	ldr	r2, [r3, #0]
   d8f7c:	07d1      	lsls	r1, r2, #31
   d8f7e:	bf5c      	itt	pl
   d8f80:	2201      	movpl	r2, #1
   d8f82:	601a      	strpl	r2, [r3, #0]
   d8f84:	4b10      	ldr	r3, [pc, #64]	; (d8fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8f86:	681a      	ldr	r2, [r3, #0]
   d8f88:	07d2      	lsls	r2, r2, #31
   d8f8a:	bf5c      	itt	pl
   d8f8c:	2201      	movpl	r2, #1
   d8f8e:	601a      	strpl	r2, [r3, #0]
   d8f90:	4b0e      	ldr	r3, [pc, #56]	; (d8fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8f92:	681a      	ldr	r2, [r3, #0]
   d8f94:	07d0      	lsls	r0, r2, #31
   d8f96:	bf5c      	itt	pl
   d8f98:	2201      	movpl	r2, #1
   d8f9a:	601a      	strpl	r2, [r3, #0]
   d8f9c:	4b0c      	ldr	r3, [pc, #48]	; (d8fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8f9e:	681a      	ldr	r2, [r3, #0]
   d8fa0:	07d1      	lsls	r1, r2, #31
   d8fa2:	bf5c      	itt	pl
   d8fa4:	2201      	movpl	r2, #1
   d8fa6:	601a      	strpl	r2, [r3, #0]
   d8fa8:	4b0a      	ldr	r3, [pc, #40]	; (d8fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8faa:	681a      	ldr	r2, [r3, #0]
   d8fac:	07d2      	lsls	r2, r2, #31
   d8fae:	bf5c      	itt	pl
   d8fb0:	2201      	movpl	r2, #1
   d8fb2:	601a      	strpl	r2, [r3, #0]
   d8fb4:	4770      	bx	lr
   d8fb6:	bf00      	nop
   d8fb8:	2003e76c 	.word	0x2003e76c
   d8fbc:	2003e768 	.word	0x2003e768
   d8fc0:	2003e764 	.word	0x2003e764
   d8fc4:	2003e760 	.word	0x2003e760
   d8fc8:	2003e75c 	.word	0x2003e75c
   d8fcc:	2003e758 	.word	0x2003e758
   d8fd0:	2003e754 	.word	0x2003e754
   d8fd4:	2003e750 	.word	0x2003e750

000d8fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8fd8:	4b24      	ldr	r3, [pc, #144]	; (d906c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8fda:	681a      	ldr	r2, [r3, #0]
   d8fdc:	07d0      	lsls	r0, r2, #31
   d8fde:	bf5c      	itt	pl
   d8fe0:	2201      	movpl	r2, #1
   d8fe2:	601a      	strpl	r2, [r3, #0]
   d8fe4:	4b22      	ldr	r3, [pc, #136]	; (d9070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8fe6:	681a      	ldr	r2, [r3, #0]
   d8fe8:	07d1      	lsls	r1, r2, #31
   d8fea:	bf5c      	itt	pl
   d8fec:	2201      	movpl	r2, #1
   d8fee:	601a      	strpl	r2, [r3, #0]
   d8ff0:	4b20      	ldr	r3, [pc, #128]	; (d9074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8ff2:	681a      	ldr	r2, [r3, #0]
   d8ff4:	07d2      	lsls	r2, r2, #31
   d8ff6:	bf5c      	itt	pl
   d8ff8:	2201      	movpl	r2, #1
   d8ffa:	601a      	strpl	r2, [r3, #0]
   d8ffc:	4b1e      	ldr	r3, [pc, #120]	; (d9078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8ffe:	681a      	ldr	r2, [r3, #0]
   d9000:	07d0      	lsls	r0, r2, #31
   d9002:	bf5c      	itt	pl
   d9004:	2201      	movpl	r2, #1
   d9006:	601a      	strpl	r2, [r3, #0]
   d9008:	4b1c      	ldr	r3, [pc, #112]	; (d907c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d900a:	681a      	ldr	r2, [r3, #0]
   d900c:	07d1      	lsls	r1, r2, #31
   d900e:	bf5c      	itt	pl
   d9010:	2201      	movpl	r2, #1
   d9012:	601a      	strpl	r2, [r3, #0]
   d9014:	4b1a      	ldr	r3, [pc, #104]	; (d9080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d9016:	681a      	ldr	r2, [r3, #0]
   d9018:	07d2      	lsls	r2, r2, #31
   d901a:	bf5c      	itt	pl
   d901c:	2201      	movpl	r2, #1
   d901e:	601a      	strpl	r2, [r3, #0]
   d9020:	4b18      	ldr	r3, [pc, #96]	; (d9084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d9022:	681a      	ldr	r2, [r3, #0]
   d9024:	07d0      	lsls	r0, r2, #31
   d9026:	bf5c      	itt	pl
   d9028:	2201      	movpl	r2, #1
   d902a:	601a      	strpl	r2, [r3, #0]
   d902c:	4b16      	ldr	r3, [pc, #88]	; (d9088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d902e:	681a      	ldr	r2, [r3, #0]
   d9030:	07d1      	lsls	r1, r2, #31
   d9032:	bf5c      	itt	pl
   d9034:	2201      	movpl	r2, #1
   d9036:	601a      	strpl	r2, [r3, #0]
   d9038:	4b14      	ldr	r3, [pc, #80]	; (d908c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d903a:	681a      	ldr	r2, [r3, #0]
   d903c:	07d2      	lsls	r2, r2, #31
   d903e:	bf5c      	itt	pl
   d9040:	2201      	movpl	r2, #1
   d9042:	601a      	strpl	r2, [r3, #0]
   d9044:	4b12      	ldr	r3, [pc, #72]	; (d9090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d9046:	681a      	ldr	r2, [r3, #0]
   d9048:	07d0      	lsls	r0, r2, #31
   d904a:	bf5c      	itt	pl
   d904c:	2201      	movpl	r2, #1
   d904e:	601a      	strpl	r2, [r3, #0]
   d9050:	4b10      	ldr	r3, [pc, #64]	; (d9094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d9052:	681a      	ldr	r2, [r3, #0]
   d9054:	07d1      	lsls	r1, r2, #31
   d9056:	bf5c      	itt	pl
   d9058:	2201      	movpl	r2, #1
   d905a:	601a      	strpl	r2, [r3, #0]
   d905c:	4b0e      	ldr	r3, [pc, #56]	; (d9098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d905e:	681a      	ldr	r2, [r3, #0]
   d9060:	07d2      	lsls	r2, r2, #31
   d9062:	bf5c      	itt	pl
   d9064:	2201      	movpl	r2, #1
   d9066:	601a      	strpl	r2, [r3, #0]
   d9068:	4770      	bx	lr
   d906a:	bf00      	nop
   d906c:	2003e79c 	.word	0x2003e79c
   d9070:	2003e798 	.word	0x2003e798
   d9074:	2003e794 	.word	0x2003e794
   d9078:	2003e790 	.word	0x2003e790
   d907c:	2003e78c 	.word	0x2003e78c
   d9080:	2003e788 	.word	0x2003e788
   d9084:	2003e784 	.word	0x2003e784
   d9088:	2003e780 	.word	0x2003e780
   d908c:	2003e77c 	.word	0x2003e77c
   d9090:	2003e778 	.word	0x2003e778
   d9094:	2003e774 	.word	0x2003e774
   d9098:	2003e770 	.word	0x2003e770

000d909c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d909c:	4b24      	ldr	r3, [pc, #144]	; (d9130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d909e:	681a      	ldr	r2, [r3, #0]
   d90a0:	07d0      	lsls	r0, r2, #31
   d90a2:	bf5c      	itt	pl
   d90a4:	2201      	movpl	r2, #1
   d90a6:	601a      	strpl	r2, [r3, #0]
   d90a8:	4b22      	ldr	r3, [pc, #136]	; (d9134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d90aa:	681a      	ldr	r2, [r3, #0]
   d90ac:	07d1      	lsls	r1, r2, #31
   d90ae:	bf5c      	itt	pl
   d90b0:	2201      	movpl	r2, #1
   d90b2:	601a      	strpl	r2, [r3, #0]
   d90b4:	4b20      	ldr	r3, [pc, #128]	; (d9138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d90b6:	681a      	ldr	r2, [r3, #0]
   d90b8:	07d2      	lsls	r2, r2, #31
   d90ba:	bf5c      	itt	pl
   d90bc:	2201      	movpl	r2, #1
   d90be:	601a      	strpl	r2, [r3, #0]
   d90c0:	4b1e      	ldr	r3, [pc, #120]	; (d913c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d90c2:	681a      	ldr	r2, [r3, #0]
   d90c4:	07d0      	lsls	r0, r2, #31
   d90c6:	bf5c      	itt	pl
   d90c8:	2201      	movpl	r2, #1
   d90ca:	601a      	strpl	r2, [r3, #0]
   d90cc:	4b1c      	ldr	r3, [pc, #112]	; (d9140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d90ce:	681a      	ldr	r2, [r3, #0]
   d90d0:	07d1      	lsls	r1, r2, #31
   d90d2:	bf5c      	itt	pl
   d90d4:	2201      	movpl	r2, #1
   d90d6:	601a      	strpl	r2, [r3, #0]
   d90d8:	4b1a      	ldr	r3, [pc, #104]	; (d9144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d90da:	681a      	ldr	r2, [r3, #0]
   d90dc:	07d2      	lsls	r2, r2, #31
   d90de:	bf5c      	itt	pl
   d90e0:	2201      	movpl	r2, #1
   d90e2:	601a      	strpl	r2, [r3, #0]
   d90e4:	4b18      	ldr	r3, [pc, #96]	; (d9148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d90e6:	681a      	ldr	r2, [r3, #0]
   d90e8:	07d0      	lsls	r0, r2, #31
   d90ea:	bf5c      	itt	pl
   d90ec:	2201      	movpl	r2, #1
   d90ee:	601a      	strpl	r2, [r3, #0]
   d90f0:	4b16      	ldr	r3, [pc, #88]	; (d914c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d90f2:	681a      	ldr	r2, [r3, #0]
   d90f4:	07d1      	lsls	r1, r2, #31
   d90f6:	bf5c      	itt	pl
   d90f8:	2201      	movpl	r2, #1
   d90fa:	601a      	strpl	r2, [r3, #0]
   d90fc:	4b14      	ldr	r3, [pc, #80]	; (d9150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d90fe:	681a      	ldr	r2, [r3, #0]
   d9100:	07d2      	lsls	r2, r2, #31
   d9102:	bf5c      	itt	pl
   d9104:	2201      	movpl	r2, #1
   d9106:	601a      	strpl	r2, [r3, #0]
   d9108:	4b12      	ldr	r3, [pc, #72]	; (d9154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d910a:	681a      	ldr	r2, [r3, #0]
   d910c:	07d0      	lsls	r0, r2, #31
   d910e:	bf5c      	itt	pl
   d9110:	2201      	movpl	r2, #1
   d9112:	601a      	strpl	r2, [r3, #0]
   d9114:	4b10      	ldr	r3, [pc, #64]	; (d9158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d9116:	681a      	ldr	r2, [r3, #0]
   d9118:	07d1      	lsls	r1, r2, #31
   d911a:	bf5c      	itt	pl
   d911c:	2201      	movpl	r2, #1
   d911e:	601a      	strpl	r2, [r3, #0]
   d9120:	4b0e      	ldr	r3, [pc, #56]	; (d915c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d9122:	681a      	ldr	r2, [r3, #0]
   d9124:	07d2      	lsls	r2, r2, #31
   d9126:	bf5c      	itt	pl
   d9128:	2201      	movpl	r2, #1
   d912a:	601a      	strpl	r2, [r3, #0]
   d912c:	4770      	bx	lr
   d912e:	bf00      	nop
   d9130:	2003e7cc 	.word	0x2003e7cc
   d9134:	2003e7c8 	.word	0x2003e7c8
   d9138:	2003e7c4 	.word	0x2003e7c4
   d913c:	2003e7c0 	.word	0x2003e7c0
   d9140:	2003e7bc 	.word	0x2003e7bc
   d9144:	2003e7b8 	.word	0x2003e7b8
   d9148:	2003e7b4 	.word	0x2003e7b4
   d914c:	2003e7b0 	.word	0x2003e7b0
   d9150:	2003e7ac 	.word	0x2003e7ac
   d9154:	2003e7a8 	.word	0x2003e7a8
   d9158:	2003e7a4 	.word	0x2003e7a4
   d915c:	2003e7a0 	.word	0x2003e7a0

000d9160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9160:	4b18      	ldr	r3, [pc, #96]	; (d91c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9162:	681a      	ldr	r2, [r3, #0]
   d9164:	07d1      	lsls	r1, r2, #31
   d9166:	bf5c      	itt	pl
   d9168:	2201      	movpl	r2, #1
   d916a:	601a      	strpl	r2, [r3, #0]
   d916c:	4b16      	ldr	r3, [pc, #88]	; (d91c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d916e:	681a      	ldr	r2, [r3, #0]
   d9170:	07d2      	lsls	r2, r2, #31
   d9172:	bf5c      	itt	pl
   d9174:	2201      	movpl	r2, #1
   d9176:	601a      	strpl	r2, [r3, #0]
   d9178:	4b14      	ldr	r3, [pc, #80]	; (d91cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d917a:	681a      	ldr	r2, [r3, #0]
   d917c:	07d0      	lsls	r0, r2, #31
   d917e:	bf5c      	itt	pl
   d9180:	2201      	movpl	r2, #1
   d9182:	601a      	strpl	r2, [r3, #0]
   d9184:	4b12      	ldr	r3, [pc, #72]	; (d91d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9186:	681a      	ldr	r2, [r3, #0]
   d9188:	07d1      	lsls	r1, r2, #31
   d918a:	bf5c      	itt	pl
   d918c:	2201      	movpl	r2, #1
   d918e:	601a      	strpl	r2, [r3, #0]
   d9190:	4b10      	ldr	r3, [pc, #64]	; (d91d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9192:	681a      	ldr	r2, [r3, #0]
   d9194:	07d2      	lsls	r2, r2, #31
   d9196:	bf5c      	itt	pl
   d9198:	2201      	movpl	r2, #1
   d919a:	601a      	strpl	r2, [r3, #0]
   d919c:	4b0e      	ldr	r3, [pc, #56]	; (d91d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d919e:	681a      	ldr	r2, [r3, #0]
   d91a0:	07d0      	lsls	r0, r2, #31
   d91a2:	bf5c      	itt	pl
   d91a4:	2201      	movpl	r2, #1
   d91a6:	601a      	strpl	r2, [r3, #0]
   d91a8:	4b0c      	ldr	r3, [pc, #48]	; (d91dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d91aa:	681a      	ldr	r2, [r3, #0]
   d91ac:	07d1      	lsls	r1, r2, #31
   d91ae:	bf5c      	itt	pl
   d91b0:	2201      	movpl	r2, #1
   d91b2:	601a      	strpl	r2, [r3, #0]
   d91b4:	4b0a      	ldr	r3, [pc, #40]	; (d91e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d91b6:	681a      	ldr	r2, [r3, #0]
   d91b8:	07d2      	lsls	r2, r2, #31
   d91ba:	bf5c      	itt	pl
   d91bc:	2201      	movpl	r2, #1
   d91be:	601a      	strpl	r2, [r3, #0]
   d91c0:	4770      	bx	lr
   d91c2:	bf00      	nop
   d91c4:	2003e7ec 	.word	0x2003e7ec
   d91c8:	2003e7e8 	.word	0x2003e7e8
   d91cc:	2003e7e4 	.word	0x2003e7e4
   d91d0:	2003e7e0 	.word	0x2003e7e0
   d91d4:	2003e7dc 	.word	0x2003e7dc
   d91d8:	2003e7d8 	.word	0x2003e7d8
   d91dc:	2003e7d4 	.word	0x2003e7d4
   d91e0:	2003e7d0 	.word	0x2003e7d0

000d91e4 <__aeabi_drsub>:
   d91e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d91e8:	e002      	b.n	d91f0 <__adddf3>
   d91ea:	bf00      	nop

000d91ec <__aeabi_dsub>:
   d91ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d91f0 <__adddf3>:
   d91f0:	b530      	push	{r4, r5, lr}
   d91f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d91f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d91fa:	ea94 0f05 	teq	r4, r5
   d91fe:	bf08      	it	eq
   d9200:	ea90 0f02 	teqeq	r0, r2
   d9204:	bf1f      	itttt	ne
   d9206:	ea54 0c00 	orrsne.w	ip, r4, r0
   d920a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d920e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9216:	f000 80e2 	beq.w	d93de <__adddf3+0x1ee>
   d921a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d921e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9222:	bfb8      	it	lt
   d9224:	426d      	neglt	r5, r5
   d9226:	dd0c      	ble.n	d9242 <__adddf3+0x52>
   d9228:	442c      	add	r4, r5
   d922a:	ea80 0202 	eor.w	r2, r0, r2
   d922e:	ea81 0303 	eor.w	r3, r1, r3
   d9232:	ea82 0000 	eor.w	r0, r2, r0
   d9236:	ea83 0101 	eor.w	r1, r3, r1
   d923a:	ea80 0202 	eor.w	r2, r0, r2
   d923e:	ea81 0303 	eor.w	r3, r1, r3
   d9242:	2d36      	cmp	r5, #54	; 0x36
   d9244:	bf88      	it	hi
   d9246:	bd30      	pophi	{r4, r5, pc}
   d9248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d924c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9258:	d002      	beq.n	d9260 <__adddf3+0x70>
   d925a:	4240      	negs	r0, r0
   d925c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9264:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d926c:	d002      	beq.n	d9274 <__adddf3+0x84>
   d926e:	4252      	negs	r2, r2
   d9270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9274:	ea94 0f05 	teq	r4, r5
   d9278:	f000 80a7 	beq.w	d93ca <__adddf3+0x1da>
   d927c:	f1a4 0401 	sub.w	r4, r4, #1
   d9280:	f1d5 0e20 	rsbs	lr, r5, #32
   d9284:	db0d      	blt.n	d92a2 <__adddf3+0xb2>
   d9286:	fa02 fc0e 	lsl.w	ip, r2, lr
   d928a:	fa22 f205 	lsr.w	r2, r2, r5
   d928e:	1880      	adds	r0, r0, r2
   d9290:	f141 0100 	adc.w	r1, r1, #0
   d9294:	fa03 f20e 	lsl.w	r2, r3, lr
   d9298:	1880      	adds	r0, r0, r2
   d929a:	fa43 f305 	asr.w	r3, r3, r5
   d929e:	4159      	adcs	r1, r3
   d92a0:	e00e      	b.n	d92c0 <__adddf3+0xd0>
   d92a2:	f1a5 0520 	sub.w	r5, r5, #32
   d92a6:	f10e 0e20 	add.w	lr, lr, #32
   d92aa:	2a01      	cmp	r2, #1
   d92ac:	fa03 fc0e 	lsl.w	ip, r3, lr
   d92b0:	bf28      	it	cs
   d92b2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d92b6:	fa43 f305 	asr.w	r3, r3, r5
   d92ba:	18c0      	adds	r0, r0, r3
   d92bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d92c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d92c4:	d507      	bpl.n	d92d6 <__adddf3+0xe6>
   d92c6:	f04f 0e00 	mov.w	lr, #0
   d92ca:	f1dc 0c00 	rsbs	ip, ip, #0
   d92ce:	eb7e 0000 	sbcs.w	r0, lr, r0
   d92d2:	eb6e 0101 	sbc.w	r1, lr, r1
   d92d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d92da:	d31b      	bcc.n	d9314 <__adddf3+0x124>
   d92dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d92e0:	d30c      	bcc.n	d92fc <__adddf3+0x10c>
   d92e2:	0849      	lsrs	r1, r1, #1
   d92e4:	ea5f 0030 	movs.w	r0, r0, rrx
   d92e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d92ec:	f104 0401 	add.w	r4, r4, #1
   d92f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d92f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d92f8:	f080 809a 	bcs.w	d9430 <__adddf3+0x240>
   d92fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9300:	bf08      	it	eq
   d9302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9306:	f150 0000 	adcs.w	r0, r0, #0
   d930a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d930e:	ea41 0105 	orr.w	r1, r1, r5
   d9312:	bd30      	pop	{r4, r5, pc}
   d9314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9318:	4140      	adcs	r0, r0
   d931a:	eb41 0101 	adc.w	r1, r1, r1
   d931e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9322:	f1a4 0401 	sub.w	r4, r4, #1
   d9326:	d1e9      	bne.n	d92fc <__adddf3+0x10c>
   d9328:	f091 0f00 	teq	r1, #0
   d932c:	bf04      	itt	eq
   d932e:	4601      	moveq	r1, r0
   d9330:	2000      	moveq	r0, #0
   d9332:	fab1 f381 	clz	r3, r1
   d9336:	bf08      	it	eq
   d9338:	3320      	addeq	r3, #32
   d933a:	f1a3 030b 	sub.w	r3, r3, #11
   d933e:	f1b3 0220 	subs.w	r2, r3, #32
   d9342:	da0c      	bge.n	d935e <__adddf3+0x16e>
   d9344:	320c      	adds	r2, #12
   d9346:	dd08      	ble.n	d935a <__adddf3+0x16a>
   d9348:	f102 0c14 	add.w	ip, r2, #20
   d934c:	f1c2 020c 	rsb	r2, r2, #12
   d9350:	fa01 f00c 	lsl.w	r0, r1, ip
   d9354:	fa21 f102 	lsr.w	r1, r1, r2
   d9358:	e00c      	b.n	d9374 <__adddf3+0x184>
   d935a:	f102 0214 	add.w	r2, r2, #20
   d935e:	bfd8      	it	le
   d9360:	f1c2 0c20 	rsble	ip, r2, #32
   d9364:	fa01 f102 	lsl.w	r1, r1, r2
   d9368:	fa20 fc0c 	lsr.w	ip, r0, ip
   d936c:	bfdc      	itt	le
   d936e:	ea41 010c 	orrle.w	r1, r1, ip
   d9372:	4090      	lslle	r0, r2
   d9374:	1ae4      	subs	r4, r4, r3
   d9376:	bfa2      	ittt	ge
   d9378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d937c:	4329      	orrge	r1, r5
   d937e:	bd30      	popge	{r4, r5, pc}
   d9380:	ea6f 0404 	mvn.w	r4, r4
   d9384:	3c1f      	subs	r4, #31
   d9386:	da1c      	bge.n	d93c2 <__adddf3+0x1d2>
   d9388:	340c      	adds	r4, #12
   d938a:	dc0e      	bgt.n	d93aa <__adddf3+0x1ba>
   d938c:	f104 0414 	add.w	r4, r4, #20
   d9390:	f1c4 0220 	rsb	r2, r4, #32
   d9394:	fa20 f004 	lsr.w	r0, r0, r4
   d9398:	fa01 f302 	lsl.w	r3, r1, r2
   d939c:	ea40 0003 	orr.w	r0, r0, r3
   d93a0:	fa21 f304 	lsr.w	r3, r1, r4
   d93a4:	ea45 0103 	orr.w	r1, r5, r3
   d93a8:	bd30      	pop	{r4, r5, pc}
   d93aa:	f1c4 040c 	rsb	r4, r4, #12
   d93ae:	f1c4 0220 	rsb	r2, r4, #32
   d93b2:	fa20 f002 	lsr.w	r0, r0, r2
   d93b6:	fa01 f304 	lsl.w	r3, r1, r4
   d93ba:	ea40 0003 	orr.w	r0, r0, r3
   d93be:	4629      	mov	r1, r5
   d93c0:	bd30      	pop	{r4, r5, pc}
   d93c2:	fa21 f004 	lsr.w	r0, r1, r4
   d93c6:	4629      	mov	r1, r5
   d93c8:	bd30      	pop	{r4, r5, pc}
   d93ca:	f094 0f00 	teq	r4, #0
   d93ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d93d2:	bf06      	itte	eq
   d93d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d93d8:	3401      	addeq	r4, #1
   d93da:	3d01      	subne	r5, #1
   d93dc:	e74e      	b.n	d927c <__adddf3+0x8c>
   d93de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d93e2:	bf18      	it	ne
   d93e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d93e8:	d029      	beq.n	d943e <__adddf3+0x24e>
   d93ea:	ea94 0f05 	teq	r4, r5
   d93ee:	bf08      	it	eq
   d93f0:	ea90 0f02 	teqeq	r0, r2
   d93f4:	d005      	beq.n	d9402 <__adddf3+0x212>
   d93f6:	ea54 0c00 	orrs.w	ip, r4, r0
   d93fa:	bf04      	itt	eq
   d93fc:	4619      	moveq	r1, r3
   d93fe:	4610      	moveq	r0, r2
   d9400:	bd30      	pop	{r4, r5, pc}
   d9402:	ea91 0f03 	teq	r1, r3
   d9406:	bf1e      	ittt	ne
   d9408:	2100      	movne	r1, #0
   d940a:	2000      	movne	r0, #0
   d940c:	bd30      	popne	{r4, r5, pc}
   d940e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9412:	d105      	bne.n	d9420 <__adddf3+0x230>
   d9414:	0040      	lsls	r0, r0, #1
   d9416:	4149      	adcs	r1, r1
   d9418:	bf28      	it	cs
   d941a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d941e:	bd30      	pop	{r4, r5, pc}
   d9420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9424:	bf3c      	itt	cc
   d9426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d942a:	bd30      	popcc	{r4, r5, pc}
   d942c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9438:	f04f 0000 	mov.w	r0, #0
   d943c:	bd30      	pop	{r4, r5, pc}
   d943e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9442:	bf1a      	itte	ne
   d9444:	4619      	movne	r1, r3
   d9446:	4610      	movne	r0, r2
   d9448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d944c:	bf1c      	itt	ne
   d944e:	460b      	movne	r3, r1
   d9450:	4602      	movne	r2, r0
   d9452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9456:	bf06      	itte	eq
   d9458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d945c:	ea91 0f03 	teqeq	r1, r3
   d9460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9464:	bd30      	pop	{r4, r5, pc}
   d9466:	bf00      	nop

000d9468 <__aeabi_ui2d>:
   d9468:	f090 0f00 	teq	r0, #0
   d946c:	bf04      	itt	eq
   d946e:	2100      	moveq	r1, #0
   d9470:	4770      	bxeq	lr
   d9472:	b530      	push	{r4, r5, lr}
   d9474:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9478:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d947c:	f04f 0500 	mov.w	r5, #0
   d9480:	f04f 0100 	mov.w	r1, #0
   d9484:	e750      	b.n	d9328 <__adddf3+0x138>
   d9486:	bf00      	nop

000d9488 <__aeabi_i2d>:
   d9488:	f090 0f00 	teq	r0, #0
   d948c:	bf04      	itt	eq
   d948e:	2100      	moveq	r1, #0
   d9490:	4770      	bxeq	lr
   d9492:	b530      	push	{r4, r5, lr}
   d9494:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9498:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d949c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d94a0:	bf48      	it	mi
   d94a2:	4240      	negmi	r0, r0
   d94a4:	f04f 0100 	mov.w	r1, #0
   d94a8:	e73e      	b.n	d9328 <__adddf3+0x138>
   d94aa:	bf00      	nop

000d94ac <__aeabi_f2d>:
   d94ac:	0042      	lsls	r2, r0, #1
   d94ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d94b2:	ea4f 0131 	mov.w	r1, r1, rrx
   d94b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d94ba:	bf1f      	itttt	ne
   d94bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d94c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d94c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d94c8:	4770      	bxne	lr
   d94ca:	f092 0f00 	teq	r2, #0
   d94ce:	bf14      	ite	ne
   d94d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d94d4:	4770      	bxeq	lr
   d94d6:	b530      	push	{r4, r5, lr}
   d94d8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d94dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d94e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d94e4:	e720      	b.n	d9328 <__adddf3+0x138>
   d94e6:	bf00      	nop

000d94e8 <__aeabi_ul2d>:
   d94e8:	ea50 0201 	orrs.w	r2, r0, r1
   d94ec:	bf08      	it	eq
   d94ee:	4770      	bxeq	lr
   d94f0:	b530      	push	{r4, r5, lr}
   d94f2:	f04f 0500 	mov.w	r5, #0
   d94f6:	e00a      	b.n	d950e <__aeabi_l2d+0x16>

000d94f8 <__aeabi_l2d>:
   d94f8:	ea50 0201 	orrs.w	r2, r0, r1
   d94fc:	bf08      	it	eq
   d94fe:	4770      	bxeq	lr
   d9500:	b530      	push	{r4, r5, lr}
   d9502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9506:	d502      	bpl.n	d950e <__aeabi_l2d+0x16>
   d9508:	4240      	negs	r0, r0
   d950a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d950e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9512:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d951a:	f43f aedc 	beq.w	d92d6 <__adddf3+0xe6>
   d951e:	f04f 0203 	mov.w	r2, #3
   d9522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9526:	bf18      	it	ne
   d9528:	3203      	addne	r2, #3
   d952a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d952e:	bf18      	it	ne
   d9530:	3203      	addne	r2, #3
   d9532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9536:	f1c2 0320 	rsb	r3, r2, #32
   d953a:	fa00 fc03 	lsl.w	ip, r0, r3
   d953e:	fa20 f002 	lsr.w	r0, r0, r2
   d9542:	fa01 fe03 	lsl.w	lr, r1, r3
   d9546:	ea40 000e 	orr.w	r0, r0, lr
   d954a:	fa21 f102 	lsr.w	r1, r1, r2
   d954e:	4414      	add	r4, r2
   d9550:	e6c1      	b.n	d92d6 <__adddf3+0xe6>
   d9552:	bf00      	nop

000d9554 <__aeabi_dmul>:
   d9554:	b570      	push	{r4, r5, r6, lr}
   d9556:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d955a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d955e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9562:	bf1d      	ittte	ne
   d9564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9568:	ea94 0f0c 	teqne	r4, ip
   d956c:	ea95 0f0c 	teqne	r5, ip
   d9570:	f000 f8de 	bleq	d9730 <__aeabi_dmul+0x1dc>
   d9574:	442c      	add	r4, r5
   d9576:	ea81 0603 	eor.w	r6, r1, r3
   d957a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d957e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9586:	bf18      	it	ne
   d9588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d958c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9594:	d038      	beq.n	d9608 <__aeabi_dmul+0xb4>
   d9596:	fba0 ce02 	umull	ip, lr, r0, r2
   d959a:	f04f 0500 	mov.w	r5, #0
   d959e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d95a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d95a6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d95aa:	f04f 0600 	mov.w	r6, #0
   d95ae:	fbe1 5603 	umlal	r5, r6, r1, r3
   d95b2:	f09c 0f00 	teq	ip, #0
   d95b6:	bf18      	it	ne
   d95b8:	f04e 0e01 	orrne.w	lr, lr, #1
   d95bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d95c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d95c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d95c8:	d204      	bcs.n	d95d4 <__aeabi_dmul+0x80>
   d95ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d95ce:	416d      	adcs	r5, r5
   d95d0:	eb46 0606 	adc.w	r6, r6, r6
   d95d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d95d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d95dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d95e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d95e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d95e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d95ec:	bf88      	it	hi
   d95ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d95f2:	d81e      	bhi.n	d9632 <__aeabi_dmul+0xde>
   d95f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d95f8:	bf08      	it	eq
   d95fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d95fe:	f150 0000 	adcs.w	r0, r0, #0
   d9602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9606:	bd70      	pop	{r4, r5, r6, pc}
   d9608:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d960c:	ea46 0101 	orr.w	r1, r6, r1
   d9610:	ea40 0002 	orr.w	r0, r0, r2
   d9614:	ea81 0103 	eor.w	r1, r1, r3
   d9618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d961c:	bfc2      	ittt	gt
   d961e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9626:	bd70      	popgt	{r4, r5, r6, pc}
   d9628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d962c:	f04f 0e00 	mov.w	lr, #0
   d9630:	3c01      	subs	r4, #1
   d9632:	f300 80ab 	bgt.w	d978c <__aeabi_dmul+0x238>
   d9636:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d963a:	bfde      	ittt	le
   d963c:	2000      	movle	r0, #0
   d963e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9642:	bd70      	pople	{r4, r5, r6, pc}
   d9644:	f1c4 0400 	rsb	r4, r4, #0
   d9648:	3c20      	subs	r4, #32
   d964a:	da35      	bge.n	d96b8 <__aeabi_dmul+0x164>
   d964c:	340c      	adds	r4, #12
   d964e:	dc1b      	bgt.n	d9688 <__aeabi_dmul+0x134>
   d9650:	f104 0414 	add.w	r4, r4, #20
   d9654:	f1c4 0520 	rsb	r5, r4, #32
   d9658:	fa00 f305 	lsl.w	r3, r0, r5
   d965c:	fa20 f004 	lsr.w	r0, r0, r4
   d9660:	fa01 f205 	lsl.w	r2, r1, r5
   d9664:	ea40 0002 	orr.w	r0, r0, r2
   d9668:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d966c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9674:	fa21 f604 	lsr.w	r6, r1, r4
   d9678:	eb42 0106 	adc.w	r1, r2, r6
   d967c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9680:	bf08      	it	eq
   d9682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9686:	bd70      	pop	{r4, r5, r6, pc}
   d9688:	f1c4 040c 	rsb	r4, r4, #12
   d968c:	f1c4 0520 	rsb	r5, r4, #32
   d9690:	fa00 f304 	lsl.w	r3, r0, r4
   d9694:	fa20 f005 	lsr.w	r0, r0, r5
   d9698:	fa01 f204 	lsl.w	r2, r1, r4
   d969c:	ea40 0002 	orr.w	r0, r0, r2
   d96a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d96a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d96a8:	f141 0100 	adc.w	r1, r1, #0
   d96ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d96b0:	bf08      	it	eq
   d96b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d96b6:	bd70      	pop	{r4, r5, r6, pc}
   d96b8:	f1c4 0520 	rsb	r5, r4, #32
   d96bc:	fa00 f205 	lsl.w	r2, r0, r5
   d96c0:	ea4e 0e02 	orr.w	lr, lr, r2
   d96c4:	fa20 f304 	lsr.w	r3, r0, r4
   d96c8:	fa01 f205 	lsl.w	r2, r1, r5
   d96cc:	ea43 0302 	orr.w	r3, r3, r2
   d96d0:	fa21 f004 	lsr.w	r0, r1, r4
   d96d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d96d8:	fa21 f204 	lsr.w	r2, r1, r4
   d96dc:	ea20 0002 	bic.w	r0, r0, r2
   d96e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d96e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d96e8:	bf08      	it	eq
   d96ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d96ee:	bd70      	pop	{r4, r5, r6, pc}
   d96f0:	f094 0f00 	teq	r4, #0
   d96f4:	d10f      	bne.n	d9716 <__aeabi_dmul+0x1c2>
   d96f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d96fa:	0040      	lsls	r0, r0, #1
   d96fc:	eb41 0101 	adc.w	r1, r1, r1
   d9700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9704:	bf08      	it	eq
   d9706:	3c01      	subeq	r4, #1
   d9708:	d0f7      	beq.n	d96fa <__aeabi_dmul+0x1a6>
   d970a:	ea41 0106 	orr.w	r1, r1, r6
   d970e:	f095 0f00 	teq	r5, #0
   d9712:	bf18      	it	ne
   d9714:	4770      	bxne	lr
   d9716:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d971a:	0052      	lsls	r2, r2, #1
   d971c:	eb43 0303 	adc.w	r3, r3, r3
   d9720:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9724:	bf08      	it	eq
   d9726:	3d01      	subeq	r5, #1
   d9728:	d0f7      	beq.n	d971a <__aeabi_dmul+0x1c6>
   d972a:	ea43 0306 	orr.w	r3, r3, r6
   d972e:	4770      	bx	lr
   d9730:	ea94 0f0c 	teq	r4, ip
   d9734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9738:	bf18      	it	ne
   d973a:	ea95 0f0c 	teqne	r5, ip
   d973e:	d00c      	beq.n	d975a <__aeabi_dmul+0x206>
   d9740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9744:	bf18      	it	ne
   d9746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d974a:	d1d1      	bne.n	d96f0 <__aeabi_dmul+0x19c>
   d974c:	ea81 0103 	eor.w	r1, r1, r3
   d9750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9754:	f04f 0000 	mov.w	r0, #0
   d9758:	bd70      	pop	{r4, r5, r6, pc}
   d975a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d975e:	bf06      	itte	eq
   d9760:	4610      	moveq	r0, r2
   d9762:	4619      	moveq	r1, r3
   d9764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9768:	d019      	beq.n	d979e <__aeabi_dmul+0x24a>
   d976a:	ea94 0f0c 	teq	r4, ip
   d976e:	d102      	bne.n	d9776 <__aeabi_dmul+0x222>
   d9770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9774:	d113      	bne.n	d979e <__aeabi_dmul+0x24a>
   d9776:	ea95 0f0c 	teq	r5, ip
   d977a:	d105      	bne.n	d9788 <__aeabi_dmul+0x234>
   d977c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9780:	bf1c      	itt	ne
   d9782:	4610      	movne	r0, r2
   d9784:	4619      	movne	r1, r3
   d9786:	d10a      	bne.n	d979e <__aeabi_dmul+0x24a>
   d9788:	ea81 0103 	eor.w	r1, r1, r3
   d978c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9790:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9798:	f04f 0000 	mov.w	r0, #0
   d979c:	bd70      	pop	{r4, r5, r6, pc}
   d979e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d97a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d97a6:	bd70      	pop	{r4, r5, r6, pc}

000d97a8 <__aeabi_ddiv>:
   d97a8:	b570      	push	{r4, r5, r6, lr}
   d97aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d97ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d97b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d97b6:	bf1d      	ittte	ne
   d97b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d97bc:	ea94 0f0c 	teqne	r4, ip
   d97c0:	ea95 0f0c 	teqne	r5, ip
   d97c4:	f000 f8a7 	bleq	d9916 <__aeabi_ddiv+0x16e>
   d97c8:	eba4 0405 	sub.w	r4, r4, r5
   d97cc:	ea81 0e03 	eor.w	lr, r1, r3
   d97d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d97d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d97d8:	f000 8088 	beq.w	d98ec <__aeabi_ddiv+0x144>
   d97dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d97e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d97e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d97e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d97ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d97f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d97f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d97f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d97fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9800:	429d      	cmp	r5, r3
   d9802:	bf08      	it	eq
   d9804:	4296      	cmpeq	r6, r2
   d9806:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d980a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d980e:	d202      	bcs.n	d9816 <__aeabi_ddiv+0x6e>
   d9810:	085b      	lsrs	r3, r3, #1
   d9812:	ea4f 0232 	mov.w	r2, r2, rrx
   d9816:	1ab6      	subs	r6, r6, r2
   d9818:	eb65 0503 	sbc.w	r5, r5, r3
   d981c:	085b      	lsrs	r3, r3, #1
   d981e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9822:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9826:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d982a:	ebb6 0e02 	subs.w	lr, r6, r2
   d982e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9832:	bf22      	ittt	cs
   d9834:	1ab6      	subcs	r6, r6, r2
   d9836:	4675      	movcs	r5, lr
   d9838:	ea40 000c 	orrcs.w	r0, r0, ip
   d983c:	085b      	lsrs	r3, r3, #1
   d983e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9842:	ebb6 0e02 	subs.w	lr, r6, r2
   d9846:	eb75 0e03 	sbcs.w	lr, r5, r3
   d984a:	bf22      	ittt	cs
   d984c:	1ab6      	subcs	r6, r6, r2
   d984e:	4675      	movcs	r5, lr
   d9850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9854:	085b      	lsrs	r3, r3, #1
   d9856:	ea4f 0232 	mov.w	r2, r2, rrx
   d985a:	ebb6 0e02 	subs.w	lr, r6, r2
   d985e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9862:	bf22      	ittt	cs
   d9864:	1ab6      	subcs	r6, r6, r2
   d9866:	4675      	movcs	r5, lr
   d9868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d986c:	085b      	lsrs	r3, r3, #1
   d986e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9872:	ebb6 0e02 	subs.w	lr, r6, r2
   d9876:	eb75 0e03 	sbcs.w	lr, r5, r3
   d987a:	bf22      	ittt	cs
   d987c:	1ab6      	subcs	r6, r6, r2
   d987e:	4675      	movcs	r5, lr
   d9880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9884:	ea55 0e06 	orrs.w	lr, r5, r6
   d9888:	d018      	beq.n	d98bc <__aeabi_ddiv+0x114>
   d988a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d988e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9892:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d989a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d989e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d98a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d98a6:	d1c0      	bne.n	d982a <__aeabi_ddiv+0x82>
   d98a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d98ac:	d10b      	bne.n	d98c6 <__aeabi_ddiv+0x11e>
   d98ae:	ea41 0100 	orr.w	r1, r1, r0
   d98b2:	f04f 0000 	mov.w	r0, #0
   d98b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d98ba:	e7b6      	b.n	d982a <__aeabi_ddiv+0x82>
   d98bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d98c0:	bf04      	itt	eq
   d98c2:	4301      	orreq	r1, r0
   d98c4:	2000      	moveq	r0, #0
   d98c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d98ca:	bf88      	it	hi
   d98cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d98d0:	f63f aeaf 	bhi.w	d9632 <__aeabi_dmul+0xde>
   d98d4:	ebb5 0c03 	subs.w	ip, r5, r3
   d98d8:	bf04      	itt	eq
   d98da:	ebb6 0c02 	subseq.w	ip, r6, r2
   d98de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d98e2:	f150 0000 	adcs.w	r0, r0, #0
   d98e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d98ea:	bd70      	pop	{r4, r5, r6, pc}
   d98ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d98f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d98f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d98f8:	bfc2      	ittt	gt
   d98fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d98fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9902:	bd70      	popgt	{r4, r5, r6, pc}
   d9904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9908:	f04f 0e00 	mov.w	lr, #0
   d990c:	3c01      	subs	r4, #1
   d990e:	e690      	b.n	d9632 <__aeabi_dmul+0xde>
   d9910:	ea45 0e06 	orr.w	lr, r5, r6
   d9914:	e68d      	b.n	d9632 <__aeabi_dmul+0xde>
   d9916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d991a:	ea94 0f0c 	teq	r4, ip
   d991e:	bf08      	it	eq
   d9920:	ea95 0f0c 	teqeq	r5, ip
   d9924:	f43f af3b 	beq.w	d979e <__aeabi_dmul+0x24a>
   d9928:	ea94 0f0c 	teq	r4, ip
   d992c:	d10a      	bne.n	d9944 <__aeabi_ddiv+0x19c>
   d992e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9932:	f47f af34 	bne.w	d979e <__aeabi_dmul+0x24a>
   d9936:	ea95 0f0c 	teq	r5, ip
   d993a:	f47f af25 	bne.w	d9788 <__aeabi_dmul+0x234>
   d993e:	4610      	mov	r0, r2
   d9940:	4619      	mov	r1, r3
   d9942:	e72c      	b.n	d979e <__aeabi_dmul+0x24a>
   d9944:	ea95 0f0c 	teq	r5, ip
   d9948:	d106      	bne.n	d9958 <__aeabi_ddiv+0x1b0>
   d994a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d994e:	f43f aefd 	beq.w	d974c <__aeabi_dmul+0x1f8>
   d9952:	4610      	mov	r0, r2
   d9954:	4619      	mov	r1, r3
   d9956:	e722      	b.n	d979e <__aeabi_dmul+0x24a>
   d9958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d995c:	bf18      	it	ne
   d995e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9962:	f47f aec5 	bne.w	d96f0 <__aeabi_dmul+0x19c>
   d9966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d996a:	f47f af0d 	bne.w	d9788 <__aeabi_dmul+0x234>
   d996e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9972:	f47f aeeb 	bne.w	d974c <__aeabi_dmul+0x1f8>
   d9976:	e712      	b.n	d979e <__aeabi_dmul+0x24a>

000d9978 <__gedf2>:
   d9978:	f04f 3cff 	mov.w	ip, #4294967295
   d997c:	e006      	b.n	d998c <__cmpdf2+0x4>
   d997e:	bf00      	nop

000d9980 <__ledf2>:
   d9980:	f04f 0c01 	mov.w	ip, #1
   d9984:	e002      	b.n	d998c <__cmpdf2+0x4>
   d9986:	bf00      	nop

000d9988 <__cmpdf2>:
   d9988:	f04f 0c01 	mov.w	ip, #1
   d998c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d999c:	bf18      	it	ne
   d999e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d99a2:	d01b      	beq.n	d99dc <__cmpdf2+0x54>
   d99a4:	b001      	add	sp, #4
   d99a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d99aa:	bf0c      	ite	eq
   d99ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d99b0:	ea91 0f03 	teqne	r1, r3
   d99b4:	bf02      	ittt	eq
   d99b6:	ea90 0f02 	teqeq	r0, r2
   d99ba:	2000      	moveq	r0, #0
   d99bc:	4770      	bxeq	lr
   d99be:	f110 0f00 	cmn.w	r0, #0
   d99c2:	ea91 0f03 	teq	r1, r3
   d99c6:	bf58      	it	pl
   d99c8:	4299      	cmppl	r1, r3
   d99ca:	bf08      	it	eq
   d99cc:	4290      	cmpeq	r0, r2
   d99ce:	bf2c      	ite	cs
   d99d0:	17d8      	asrcs	r0, r3, #31
   d99d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d99d6:	f040 0001 	orr.w	r0, r0, #1
   d99da:	4770      	bx	lr
   d99dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d99e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d99e4:	d102      	bne.n	d99ec <__cmpdf2+0x64>
   d99e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d99ea:	d107      	bne.n	d99fc <__cmpdf2+0x74>
   d99ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d99f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d99f4:	d1d6      	bne.n	d99a4 <__cmpdf2+0x1c>
   d99f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d99fa:	d0d3      	beq.n	d99a4 <__cmpdf2+0x1c>
   d99fc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9a00:	4770      	bx	lr
   d9a02:	bf00      	nop

000d9a04 <__aeabi_cdrcmple>:
   d9a04:	4684      	mov	ip, r0
   d9a06:	4610      	mov	r0, r2
   d9a08:	4662      	mov	r2, ip
   d9a0a:	468c      	mov	ip, r1
   d9a0c:	4619      	mov	r1, r3
   d9a0e:	4663      	mov	r3, ip
   d9a10:	e000      	b.n	d9a14 <__aeabi_cdcmpeq>
   d9a12:	bf00      	nop

000d9a14 <__aeabi_cdcmpeq>:
   d9a14:	b501      	push	{r0, lr}
   d9a16:	f7ff ffb7 	bl	d9988 <__cmpdf2>
   d9a1a:	2800      	cmp	r0, #0
   d9a1c:	bf48      	it	mi
   d9a1e:	f110 0f00 	cmnmi.w	r0, #0
   d9a22:	bd01      	pop	{r0, pc}

000d9a24 <__aeabi_dcmpeq>:
   d9a24:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a28:	f7ff fff4 	bl	d9a14 <__aeabi_cdcmpeq>
   d9a2c:	bf0c      	ite	eq
   d9a2e:	2001      	moveq	r0, #1
   d9a30:	2000      	movne	r0, #0
   d9a32:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a36:	bf00      	nop

000d9a38 <__aeabi_dcmplt>:
   d9a38:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a3c:	f7ff ffea 	bl	d9a14 <__aeabi_cdcmpeq>
   d9a40:	bf34      	ite	cc
   d9a42:	2001      	movcc	r0, #1
   d9a44:	2000      	movcs	r0, #0
   d9a46:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a4a:	bf00      	nop

000d9a4c <__aeabi_dcmple>:
   d9a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a50:	f7ff ffe0 	bl	d9a14 <__aeabi_cdcmpeq>
   d9a54:	bf94      	ite	ls
   d9a56:	2001      	movls	r0, #1
   d9a58:	2000      	movhi	r0, #0
   d9a5a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a5e:	bf00      	nop

000d9a60 <__aeabi_dcmpge>:
   d9a60:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a64:	f7ff ffce 	bl	d9a04 <__aeabi_cdrcmple>
   d9a68:	bf94      	ite	ls
   d9a6a:	2001      	movls	r0, #1
   d9a6c:	2000      	movhi	r0, #0
   d9a6e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a72:	bf00      	nop

000d9a74 <__aeabi_dcmpgt>:
   d9a74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a78:	f7ff ffc4 	bl	d9a04 <__aeabi_cdrcmple>
   d9a7c:	bf34      	ite	cc
   d9a7e:	2001      	movcc	r0, #1
   d9a80:	2000      	movcs	r0, #0
   d9a82:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a86:	bf00      	nop

000d9a88 <__aeabi_d2iz>:
   d9a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9a90:	d215      	bcs.n	d9abe <__aeabi_d2iz+0x36>
   d9a92:	d511      	bpl.n	d9ab8 <__aeabi_d2iz+0x30>
   d9a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9a9c:	d912      	bls.n	d9ac4 <__aeabi_d2iz+0x3c>
   d9a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9aae:	fa23 f002 	lsr.w	r0, r3, r2
   d9ab2:	bf18      	it	ne
   d9ab4:	4240      	negne	r0, r0
   d9ab6:	4770      	bx	lr
   d9ab8:	f04f 0000 	mov.w	r0, #0
   d9abc:	4770      	bx	lr
   d9abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9ac2:	d105      	bne.n	d9ad0 <__aeabi_d2iz+0x48>
   d9ac4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9ac8:	bf08      	it	eq
   d9aca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9ace:	4770      	bx	lr
   d9ad0:	f04f 0000 	mov.w	r0, #0
   d9ad4:	4770      	bx	lr
   d9ad6:	bf00      	nop

000d9ad8 <__aeabi_d2uiz>:
   d9ad8:	004a      	lsls	r2, r1, #1
   d9ada:	d211      	bcs.n	d9b00 <__aeabi_d2uiz+0x28>
   d9adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9ae0:	d211      	bcs.n	d9b06 <__aeabi_d2uiz+0x2e>
   d9ae2:	d50d      	bpl.n	d9b00 <__aeabi_d2uiz+0x28>
   d9ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9aec:	d40e      	bmi.n	d9b0c <__aeabi_d2uiz+0x34>
   d9aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9afa:	fa23 f002 	lsr.w	r0, r3, r2
   d9afe:	4770      	bx	lr
   d9b00:	f04f 0000 	mov.w	r0, #0
   d9b04:	4770      	bx	lr
   d9b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9b0a:	d102      	bne.n	d9b12 <__aeabi_d2uiz+0x3a>
   d9b0c:	f04f 30ff 	mov.w	r0, #4294967295
   d9b10:	4770      	bx	lr
   d9b12:	f04f 0000 	mov.w	r0, #0
   d9b16:	4770      	bx	lr

000d9b18 <__aeabi_d2f>:
   d9b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9b20:	bf24      	itt	cs
   d9b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9b2a:	d90d      	bls.n	d9b48 <__aeabi_d2f+0x30>
   d9b2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9b38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9b40:	bf08      	it	eq
   d9b42:	f020 0001 	biceq.w	r0, r0, #1
   d9b46:	4770      	bx	lr
   d9b48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9b4c:	d121      	bne.n	d9b92 <__aeabi_d2f+0x7a>
   d9b4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9b52:	bfbc      	itt	lt
   d9b54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9b58:	4770      	bxlt	lr
   d9b5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9b62:	f1c2 0218 	rsb	r2, r2, #24
   d9b66:	f1c2 0c20 	rsb	ip, r2, #32
   d9b6a:	fa10 f30c 	lsls.w	r3, r0, ip
   d9b6e:	fa20 f002 	lsr.w	r0, r0, r2
   d9b72:	bf18      	it	ne
   d9b74:	f040 0001 	orrne.w	r0, r0, #1
   d9b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9b80:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9b84:	ea40 000c 	orr.w	r0, r0, ip
   d9b88:	fa23 f302 	lsr.w	r3, r3, r2
   d9b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9b90:	e7cc      	b.n	d9b2c <__aeabi_d2f+0x14>
   d9b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9b96:	d107      	bne.n	d9ba8 <__aeabi_d2f+0x90>
   d9b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9b9c:	bf1e      	ittt	ne
   d9b9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9ba2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9ba6:	4770      	bxne	lr
   d9ba8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9bac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9bb4:	4770      	bx	lr
   d9bb6:	bf00      	nop

000d9bb8 <atof>:
   d9bb8:	2100      	movs	r1, #0
   d9bba:	f000 bf29 	b.w	daa10 <strtod>
	...

000d9bc0 <__cxa_atexit>:
   d9bc0:	b510      	push	{r4, lr}
   d9bc2:	4c05      	ldr	r4, [pc, #20]	; (d9bd8 <__cxa_atexit+0x18>)
   d9bc4:	4613      	mov	r3, r2
   d9bc6:	b12c      	cbz	r4, d9bd4 <__cxa_atexit+0x14>
   d9bc8:	460a      	mov	r2, r1
   d9bca:	4601      	mov	r1, r0
   d9bcc:	2002      	movs	r0, #2
   d9bce:	f3af 8000 	nop.w
   d9bd2:	bd10      	pop	{r4, pc}
   d9bd4:	4620      	mov	r0, r4
   d9bd6:	bd10      	pop	{r4, pc}
   d9bd8:	00000000 	.word	0x00000000

000d9bdc <_localeconv_r>:
   d9bdc:	4800      	ldr	r0, [pc, #0]	; (d9be0 <_localeconv_r+0x4>)
   d9bde:	4770      	bx	lr
   d9be0:	2003cdf8 	.word	0x2003cdf8

000d9be4 <memcmp>:
   d9be4:	b510      	push	{r4, lr}
   d9be6:	3901      	subs	r1, #1
   d9be8:	4402      	add	r2, r0
   d9bea:	4290      	cmp	r0, r2
   d9bec:	d007      	beq.n	d9bfe <memcmp+0x1a>
   d9bee:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9bf2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9bf6:	42a3      	cmp	r3, r4
   d9bf8:	d0f7      	beq.n	d9bea <memcmp+0x6>
   d9bfa:	1b18      	subs	r0, r3, r4
   d9bfc:	bd10      	pop	{r4, pc}
   d9bfe:	2000      	movs	r0, #0
   d9c00:	bd10      	pop	{r4, pc}

000d9c02 <memcpy>:
   d9c02:	b510      	push	{r4, lr}
   d9c04:	1e43      	subs	r3, r0, #1
   d9c06:	440a      	add	r2, r1
   d9c08:	4291      	cmp	r1, r2
   d9c0a:	d004      	beq.n	d9c16 <memcpy+0x14>
   d9c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9c10:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9c14:	e7f8      	b.n	d9c08 <memcpy+0x6>
   d9c16:	bd10      	pop	{r4, pc}

000d9c18 <memmove>:
   d9c18:	4288      	cmp	r0, r1
   d9c1a:	b510      	push	{r4, lr}
   d9c1c:	eb01 0302 	add.w	r3, r1, r2
   d9c20:	d801      	bhi.n	d9c26 <memmove+0xe>
   d9c22:	1e42      	subs	r2, r0, #1
   d9c24:	e00b      	b.n	d9c3e <memmove+0x26>
   d9c26:	4298      	cmp	r0, r3
   d9c28:	d2fb      	bcs.n	d9c22 <memmove+0xa>
   d9c2a:	1881      	adds	r1, r0, r2
   d9c2c:	1ad2      	subs	r2, r2, r3
   d9c2e:	42d3      	cmn	r3, r2
   d9c30:	d004      	beq.n	d9c3c <memmove+0x24>
   d9c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9c36:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9c3a:	e7f8      	b.n	d9c2e <memmove+0x16>
   d9c3c:	bd10      	pop	{r4, pc}
   d9c3e:	4299      	cmp	r1, r3
   d9c40:	d004      	beq.n	d9c4c <memmove+0x34>
   d9c42:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9c46:	f802 4f01 	strb.w	r4, [r2, #1]!
   d9c4a:	e7f8      	b.n	d9c3e <memmove+0x26>
   d9c4c:	bd10      	pop	{r4, pc}

000d9c4e <memset>:
   d9c4e:	4402      	add	r2, r0
   d9c50:	4603      	mov	r3, r0
   d9c52:	4293      	cmp	r3, r2
   d9c54:	d002      	beq.n	d9c5c <memset+0xe>
   d9c56:	f803 1b01 	strb.w	r1, [r3], #1
   d9c5a:	e7fa      	b.n	d9c52 <memset+0x4>
   d9c5c:	4770      	bx	lr
	...

000d9c60 <srand>:
   d9c60:	b538      	push	{r3, r4, r5, lr}
   d9c62:	4b12      	ldr	r3, [pc, #72]	; (d9cac <srand+0x4c>)
   d9c64:	681c      	ldr	r4, [r3, #0]
   d9c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9c68:	4605      	mov	r5, r0
   d9c6a:	b9d3      	cbnz	r3, d9ca2 <srand+0x42>
   d9c6c:	2018      	movs	r0, #24
   d9c6e:	f7fc fab7 	bl	d61e0 <malloc>
   d9c72:	f243 330e 	movw	r3, #13070	; 0x330e
   d9c76:	63a0      	str	r0, [r4, #56]	; 0x38
   d9c78:	8003      	strh	r3, [r0, #0]
   d9c7a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9c7e:	8043      	strh	r3, [r0, #2]
   d9c80:	f241 2334 	movw	r3, #4660	; 0x1234
   d9c84:	8083      	strh	r3, [r0, #4]
   d9c86:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9c8a:	80c3      	strh	r3, [r0, #6]
   d9c8c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9c90:	8103      	strh	r3, [r0, #8]
   d9c92:	2305      	movs	r3, #5
   d9c94:	8143      	strh	r3, [r0, #10]
   d9c96:	230b      	movs	r3, #11
   d9c98:	8183      	strh	r3, [r0, #12]
   d9c9a:	2201      	movs	r2, #1
   d9c9c:	2300      	movs	r3, #0
   d9c9e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9ca2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9ca4:	2200      	movs	r2, #0
   d9ca6:	611d      	str	r5, [r3, #16]
   d9ca8:	615a      	str	r2, [r3, #20]
   d9caa:	bd38      	pop	{r3, r4, r5, pc}
   d9cac:	2003cdf4 	.word	0x2003cdf4

000d9cb0 <strchr>:
   d9cb0:	b2c9      	uxtb	r1, r1
   d9cb2:	4603      	mov	r3, r0
   d9cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9cb8:	b11a      	cbz	r2, d9cc2 <strchr+0x12>
   d9cba:	4291      	cmp	r1, r2
   d9cbc:	d1f9      	bne.n	d9cb2 <strchr+0x2>
   d9cbe:	4618      	mov	r0, r3
   d9cc0:	4770      	bx	lr
   d9cc2:	2900      	cmp	r1, #0
   d9cc4:	bf0c      	ite	eq
   d9cc6:	4618      	moveq	r0, r3
   d9cc8:	2000      	movne	r0, #0
   d9cca:	4770      	bx	lr

000d9ccc <strcmp>:
   d9ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9cd4:	2a01      	cmp	r2, #1
   d9cd6:	bf28      	it	cs
   d9cd8:	429a      	cmpcs	r2, r3
   d9cda:	d0f7      	beq.n	d9ccc <strcmp>
   d9cdc:	1ad0      	subs	r0, r2, r3
   d9cde:	4770      	bx	lr

000d9ce0 <strcpy>:
   d9ce0:	4603      	mov	r3, r0
   d9ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9ce6:	f803 2b01 	strb.w	r2, [r3], #1
   d9cea:	2a00      	cmp	r2, #0
   d9cec:	d1f9      	bne.n	d9ce2 <strcpy+0x2>
   d9cee:	4770      	bx	lr

000d9cf0 <strdup>:
   d9cf0:	4b02      	ldr	r3, [pc, #8]	; (d9cfc <strdup+0xc>)
   d9cf2:	4601      	mov	r1, r0
   d9cf4:	6818      	ldr	r0, [r3, #0]
   d9cf6:	f000 b803 	b.w	d9d00 <_strdup_r>
   d9cfa:	bf00      	nop
   d9cfc:	2003cdf4 	.word	0x2003cdf4

000d9d00 <_strdup_r>:
   d9d00:	b570      	push	{r4, r5, r6, lr}
   d9d02:	4606      	mov	r6, r0
   d9d04:	4608      	mov	r0, r1
   d9d06:	460c      	mov	r4, r1
   d9d08:	f000 f80d 	bl	d9d26 <strlen>
   d9d0c:	1c45      	adds	r5, r0, #1
   d9d0e:	4629      	mov	r1, r5
   d9d10:	4630      	mov	r0, r6
   d9d12:	f7fc fa95 	bl	d6240 <_malloc_r>
   d9d16:	4606      	mov	r6, r0
   d9d18:	b118      	cbz	r0, d9d22 <_strdup_r+0x22>
   d9d1a:	462a      	mov	r2, r5
   d9d1c:	4621      	mov	r1, r4
   d9d1e:	f7ff ff70 	bl	d9c02 <memcpy>
   d9d22:	4630      	mov	r0, r6
   d9d24:	bd70      	pop	{r4, r5, r6, pc}

000d9d26 <strlen>:
   d9d26:	4603      	mov	r3, r0
   d9d28:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9d2c:	2a00      	cmp	r2, #0
   d9d2e:	d1fb      	bne.n	d9d28 <strlen+0x2>
   d9d30:	1a18      	subs	r0, r3, r0
   d9d32:	3801      	subs	r0, #1
   d9d34:	4770      	bx	lr

000d9d36 <strncmp>:
   d9d36:	b530      	push	{r4, r5, lr}
   d9d38:	b182      	cbz	r2, d9d5c <strncmp+0x26>
   d9d3a:	1e45      	subs	r5, r0, #1
   d9d3c:	3901      	subs	r1, #1
   d9d3e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9d42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9d46:	42a3      	cmp	r3, r4
   d9d48:	d106      	bne.n	d9d58 <strncmp+0x22>
   d9d4a:	43ec      	mvns	r4, r5
   d9d4c:	4414      	add	r4, r2
   d9d4e:	42e0      	cmn	r0, r4
   d9d50:	d001      	beq.n	d9d56 <strncmp+0x20>
   d9d52:	2b00      	cmp	r3, #0
   d9d54:	d1f3      	bne.n	d9d3e <strncmp+0x8>
   d9d56:	461c      	mov	r4, r3
   d9d58:	1b18      	subs	r0, r3, r4
   d9d5a:	bd30      	pop	{r4, r5, pc}
   d9d5c:	4610      	mov	r0, r2
   d9d5e:	bd30      	pop	{r4, r5, pc}

000d9d60 <strncpy>:
   d9d60:	b510      	push	{r4, lr}
   d9d62:	4603      	mov	r3, r0
   d9d64:	b142      	cbz	r2, d9d78 <strncpy+0x18>
   d9d66:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9d6a:	f803 4b01 	strb.w	r4, [r3], #1
   d9d6e:	3a01      	subs	r2, #1
   d9d70:	2c00      	cmp	r4, #0
   d9d72:	d1f7      	bne.n	d9d64 <strncpy+0x4>
   d9d74:	441a      	add	r2, r3
   d9d76:	e000      	b.n	d9d7a <strncpy+0x1a>
   d9d78:	bd10      	pop	{r4, pc}
   d9d7a:	4293      	cmp	r3, r2
   d9d7c:	d002      	beq.n	d9d84 <strncpy+0x24>
   d9d7e:	f803 4b01 	strb.w	r4, [r3], #1
   d9d82:	e7fa      	b.n	d9d7a <strncpy+0x1a>
   d9d84:	bd10      	pop	{r4, pc}

000d9d86 <strnlen>:
   d9d86:	b510      	push	{r4, lr}
   d9d88:	4603      	mov	r3, r0
   d9d8a:	4401      	add	r1, r0
   d9d8c:	428b      	cmp	r3, r1
   d9d8e:	d004      	beq.n	d9d9a <strnlen+0x14>
   d9d90:	781a      	ldrb	r2, [r3, #0]
   d9d92:	1c5c      	adds	r4, r3, #1
   d9d94:	b10a      	cbz	r2, d9d9a <strnlen+0x14>
   d9d96:	4623      	mov	r3, r4
   d9d98:	e7f8      	b.n	d9d8c <strnlen+0x6>
   d9d9a:	1a18      	subs	r0, r3, r0
   d9d9c:	bd10      	pop	{r4, pc}

000d9d9e <strstr>:
   d9d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9da0:	7803      	ldrb	r3, [r0, #0]
   d9da2:	b963      	cbnz	r3, d9dbe <strstr+0x20>
   d9da4:	780b      	ldrb	r3, [r1, #0]
   d9da6:	2b00      	cmp	r3, #0
   d9da8:	bf18      	it	ne
   d9daa:	2000      	movne	r0, #0
   d9dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9dae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9db2:	b162      	cbz	r2, d9dce <strstr+0x30>
   d9db4:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d9db8:	4297      	cmp	r7, r2
   d9dba:	4630      	mov	r0, r6
   d9dbc:	d0f7      	beq.n	d9dae <strstr+0x10>
   d9dbe:	4603      	mov	r3, r0
   d9dc0:	1c46      	adds	r6, r0, #1
   d9dc2:	7800      	ldrb	r0, [r0, #0]
   d9dc4:	b110      	cbz	r0, d9dcc <strstr+0x2e>
   d9dc6:	1e4d      	subs	r5, r1, #1
   d9dc8:	1e5c      	subs	r4, r3, #1
   d9dca:	e7f0      	b.n	d9dae <strstr+0x10>
   d9dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9dce:	4618      	mov	r0, r3
   d9dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9dd2 <sulp>:
   d9dd2:	b570      	push	{r4, r5, r6, lr}
   d9dd4:	4604      	mov	r4, r0
   d9dd6:	460d      	mov	r5, r1
   d9dd8:	ec45 4b10 	vmov	d0, r4, r5
   d9ddc:	4616      	mov	r6, r2
   d9dde:	f001 fc03 	bl	db5e8 <__ulp>
   d9de2:	ec51 0b10 	vmov	r0, r1, d0
   d9de6:	b17e      	cbz	r6, d9e08 <sulp+0x36>
   d9de8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9dec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9df0:	2b00      	cmp	r3, #0
   d9df2:	dd09      	ble.n	d9e08 <sulp+0x36>
   d9df4:	051b      	lsls	r3, r3, #20
   d9df6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9dfa:	2400      	movs	r4, #0
   d9dfc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9e00:	4622      	mov	r2, r4
   d9e02:	462b      	mov	r3, r5
   d9e04:	f7ff fba6 	bl	d9554 <__aeabi_dmul>
   d9e08:	bd70      	pop	{r4, r5, r6, pc}
   d9e0a:	0000      	movs	r0, r0
   d9e0c:	0000      	movs	r0, r0
	...

000d9e10 <_strtod_r>:
   d9e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e14:	b09d      	sub	sp, #116	; 0x74
   d9e16:	2300      	movs	r3, #0
   d9e18:	9002      	str	r0, [sp, #8]
   d9e1a:	460c      	mov	r4, r1
   d9e1c:	9213      	str	r2, [sp, #76]	; 0x4c
   d9e1e:	9318      	str	r3, [sp, #96]	; 0x60
   d9e20:	f04f 0a00 	mov.w	sl, #0
   d9e24:	f04f 0b00 	mov.w	fp, #0
   d9e28:	9117      	str	r1, [sp, #92]	; 0x5c
   d9e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9e2c:	781a      	ldrb	r2, [r3, #0]
   d9e2e:	2a0d      	cmp	r2, #13
   d9e30:	d805      	bhi.n	d9e3e <_strtod_r+0x2e>
   d9e32:	2a09      	cmp	r2, #9
   d9e34:	d213      	bcs.n	d9e5e <_strtod_r+0x4e>
   d9e36:	2a00      	cmp	r2, #0
   d9e38:	f000 81ac 	beq.w	da194 <_strtod_r+0x384>
   d9e3c:	e012      	b.n	d9e64 <_strtod_r+0x54>
   d9e3e:	2a2b      	cmp	r2, #43	; 0x2b
   d9e40:	d004      	beq.n	d9e4c <_strtod_r+0x3c>
   d9e42:	2a2d      	cmp	r2, #45	; 0x2d
   d9e44:	d004      	beq.n	d9e50 <_strtod_r+0x40>
   d9e46:	2a20      	cmp	r2, #32
   d9e48:	d10c      	bne.n	d9e64 <_strtod_r+0x54>
   d9e4a:	e008      	b.n	d9e5e <_strtod_r+0x4e>
   d9e4c:	2200      	movs	r2, #0
   d9e4e:	e000      	b.n	d9e52 <_strtod_r+0x42>
   d9e50:	2201      	movs	r2, #1
   d9e52:	920c      	str	r2, [sp, #48]	; 0x30
   d9e54:	1c5a      	adds	r2, r3, #1
   d9e56:	9217      	str	r2, [sp, #92]	; 0x5c
   d9e58:	785b      	ldrb	r3, [r3, #1]
   d9e5a:	b92b      	cbnz	r3, d9e68 <_strtod_r+0x58>
   d9e5c:	e19a      	b.n	da194 <_strtod_r+0x384>
   d9e5e:	3301      	adds	r3, #1
   d9e60:	9317      	str	r3, [sp, #92]	; 0x5c
   d9e62:	e7e2      	b.n	d9e2a <_strtod_r+0x1a>
   d9e64:	2300      	movs	r3, #0
   d9e66:	930c      	str	r3, [sp, #48]	; 0x30
   d9e68:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9e6a:	782b      	ldrb	r3, [r5, #0]
   d9e6c:	2b30      	cmp	r3, #48	; 0x30
   d9e6e:	d15c      	bne.n	d9f2a <_strtod_r+0x11a>
   d9e70:	786b      	ldrb	r3, [r5, #1]
   d9e72:	2b58      	cmp	r3, #88	; 0x58
   d9e74:	d001      	beq.n	d9e7a <_strtod_r+0x6a>
   d9e76:	2b78      	cmp	r3, #120	; 0x78
   d9e78:	d14c      	bne.n	d9f14 <_strtod_r+0x104>
   d9e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9e7c:	9301      	str	r3, [sp, #4]
   d9e7e:	ab18      	add	r3, sp, #96	; 0x60
   d9e80:	9300      	str	r3, [sp, #0]
   d9e82:	4aa9      	ldr	r2, [pc, #676]	; (da128 <_strtod_r+0x318>)
   d9e84:	9802      	ldr	r0, [sp, #8]
   d9e86:	ab19      	add	r3, sp, #100	; 0x64
   d9e88:	a917      	add	r1, sp, #92	; 0x5c
   d9e8a:	f000 fe14 	bl	daab6 <__gethex>
   d9e8e:	f010 0607 	ands.w	r6, r0, #7
   d9e92:	4604      	mov	r4, r0
   d9e94:	f000 8587 	beq.w	da9a6 <_strtod_r+0xb96>
   d9e98:	2e06      	cmp	r6, #6
   d9e9a:	d105      	bne.n	d9ea8 <_strtod_r+0x98>
   d9e9c:	3501      	adds	r5, #1
   d9e9e:	2300      	movs	r3, #0
   d9ea0:	9517      	str	r5, [sp, #92]	; 0x5c
   d9ea2:	930c      	str	r3, [sp, #48]	; 0x30
   d9ea4:	f000 bd7f 	b.w	da9a6 <_strtod_r+0xb96>
   d9ea8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9eaa:	b13a      	cbz	r2, d9ebc <_strtod_r+0xac>
   d9eac:	2135      	movs	r1, #53	; 0x35
   d9eae:	a81a      	add	r0, sp, #104	; 0x68
   d9eb0:	f001 fc87 	bl	db7c2 <__copybits>
   d9eb4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9eb6:	9802      	ldr	r0, [sp, #8]
   d9eb8:	f001 f904 	bl	db0c4 <_Bfree>
   d9ebc:	2e06      	cmp	r6, #6
   d9ebe:	d822      	bhi.n	d9f06 <_strtod_r+0xf6>
   d9ec0:	e8df f006 	tbb	[pc, r6]
   d9ec4:	18080d04 	.word	0x18080d04
   d9ec8:	0d1d      	.short	0x0d1d
   d9eca:	04          	.byte	0x04
   d9ecb:	00          	.byte	0x00
   d9ecc:	f04f 0b00 	mov.w	fp, #0
   d9ed0:	46da      	mov	sl, fp
   d9ed2:	e018      	b.n	d9f06 <_strtod_r+0xf6>
   d9ed4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9ed8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d9edc:	e013      	b.n	d9f06 <_strtod_r+0xf6>
   d9ede:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9ee0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9ee2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9ee6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9eea:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9eee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9ef2:	e008      	b.n	d9f06 <_strtod_r+0xf6>
   d9ef4:	f8df b234 	ldr.w	fp, [pc, #564]	; da12c <_strtod_r+0x31c>
   d9ef8:	f04f 0a00 	mov.w	sl, #0
   d9efc:	e003      	b.n	d9f06 <_strtod_r+0xf6>
   d9efe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9f02:	f04f 3aff 	mov.w	sl, #4294967295
   d9f06:	0721      	lsls	r1, r4, #28
   d9f08:	f140 854d 	bpl.w	da9a6 <_strtod_r+0xb96>
   d9f0c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9f10:	f000 bd49 	b.w	da9a6 <_strtod_r+0xb96>
   d9f14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9f16:	1c5a      	adds	r2, r3, #1
   d9f18:	9217      	str	r2, [sp, #92]	; 0x5c
   d9f1a:	785b      	ldrb	r3, [r3, #1]
   d9f1c:	2b30      	cmp	r3, #48	; 0x30
   d9f1e:	d0f9      	beq.n	d9f14 <_strtod_r+0x104>
   d9f20:	2b00      	cmp	r3, #0
   d9f22:	f000 8540 	beq.w	da9a6 <_strtod_r+0xb96>
   d9f26:	2301      	movs	r3, #1
   d9f28:	e000      	b.n	d9f2c <_strtod_r+0x11c>
   d9f2a:	2300      	movs	r3, #0
   d9f2c:	f04f 0800 	mov.w	r8, #0
   d9f30:	9306      	str	r3, [sp, #24]
   d9f32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9f34:	9307      	str	r3, [sp, #28]
   d9f36:	f8cd 8014 	str.w	r8, [sp, #20]
   d9f3a:	f8cd 8010 	str.w	r8, [sp, #16]
   d9f3e:	220a      	movs	r2, #10
   d9f40:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9f42:	782e      	ldrb	r6, [r5, #0]
   d9f44:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9f48:	b2d9      	uxtb	r1, r3
   d9f4a:	2909      	cmp	r1, #9
   d9f4c:	d80e      	bhi.n	d9f6c <_strtod_r+0x15c>
   d9f4e:	9904      	ldr	r1, [sp, #16]
   d9f50:	2908      	cmp	r1, #8
   d9f52:	bfdd      	ittte	le
   d9f54:	9905      	ldrle	r1, [sp, #20]
   d9f56:	fb02 3301 	mlale	r3, r2, r1, r3
   d9f5a:	9305      	strle	r3, [sp, #20]
   d9f5c:	fb02 3808 	mlagt	r8, r2, r8, r3
   d9f60:	9b04      	ldr	r3, [sp, #16]
   d9f62:	3501      	adds	r5, #1
   d9f64:	3301      	adds	r3, #1
   d9f66:	9304      	str	r3, [sp, #16]
   d9f68:	9517      	str	r5, [sp, #92]	; 0x5c
   d9f6a:	e7e9      	b.n	d9f40 <_strtod_r+0x130>
   d9f6c:	9802      	ldr	r0, [sp, #8]
   d9f6e:	f7ff fe35 	bl	d9bdc <_localeconv_r>
   d9f72:	6807      	ldr	r7, [r0, #0]
   d9f74:	9802      	ldr	r0, [sp, #8]
   d9f76:	f7ff fe31 	bl	d9bdc <_localeconv_r>
   d9f7a:	6800      	ldr	r0, [r0, #0]
   d9f7c:	f7ff fed3 	bl	d9d26 <strlen>
   d9f80:	4639      	mov	r1, r7
   d9f82:	4602      	mov	r2, r0
   d9f84:	4628      	mov	r0, r5
   d9f86:	f7ff fed6 	bl	d9d36 <strncmp>
   d9f8a:	4607      	mov	r7, r0
   d9f8c:	b128      	cbz	r0, d9f9a <_strtod_r+0x18a>
   d9f8e:	2000      	movs	r0, #0
   d9f90:	4633      	mov	r3, r6
   d9f92:	9d04      	ldr	r5, [sp, #16]
   d9f94:	4602      	mov	r2, r0
   d9f96:	4601      	mov	r1, r0
   d9f98:	e057      	b.n	da04a <_strtod_r+0x23a>
   d9f9a:	9802      	ldr	r0, [sp, #8]
   d9f9c:	f7ff fe1e 	bl	d9bdc <_localeconv_r>
   d9fa0:	6800      	ldr	r0, [r0, #0]
   d9fa2:	f7ff fec0 	bl	d9d26 <strlen>
   d9fa6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9fa8:	181a      	adds	r2, r3, r0
   d9faa:	9217      	str	r2, [sp, #92]	; 0x5c
   d9fac:	9a04      	ldr	r2, [sp, #16]
   d9fae:	5c1b      	ldrb	r3, [r3, r0]
   d9fb0:	2a00      	cmp	r2, #0
   d9fb2:	d142      	bne.n	da03a <_strtod_r+0x22a>
   d9fb4:	4610      	mov	r0, r2
   d9fb6:	2b30      	cmp	r3, #48	; 0x30
   d9fb8:	d105      	bne.n	d9fc6 <_strtod_r+0x1b6>
   d9fba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9fbc:	1c5a      	adds	r2, r3, #1
   d9fbe:	9217      	str	r2, [sp, #92]	; 0x5c
   d9fc0:	3001      	adds	r0, #1
   d9fc2:	785b      	ldrb	r3, [r3, #1]
   d9fc4:	e7f7      	b.n	d9fb6 <_strtod_r+0x1a6>
   d9fc6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9fca:	2a08      	cmp	r2, #8
   d9fcc:	d843      	bhi.n	da056 <_strtod_r+0x246>
   d9fce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d9fd0:	9207      	str	r2, [sp, #28]
   d9fd2:	4602      	mov	r2, r0
   d9fd4:	2000      	movs	r0, #0
   d9fd6:	4605      	mov	r5, r0
   d9fd8:	3b30      	subs	r3, #48	; 0x30
   d9fda:	f100 0101 	add.w	r1, r0, #1
   d9fde:	d026      	beq.n	da02e <_strtod_r+0x21e>
   d9fe0:	440a      	add	r2, r1
   d9fe2:	eb05 0c00 	add.w	ip, r5, r0
   d9fe6:	4629      	mov	r1, r5
   d9fe8:	260a      	movs	r6, #10
   d9fea:	4561      	cmp	r1, ip
   d9fec:	d00e      	beq.n	da00c <_strtod_r+0x1fc>
   d9fee:	3101      	adds	r1, #1
   d9ff0:	f101 3eff 	add.w	lr, r1, #4294967295
   d9ff4:	f1be 0f08 	cmp.w	lr, #8
   d9ff8:	dc03      	bgt.n	da002 <_strtod_r+0x1f2>
   d9ffa:	9f05      	ldr	r7, [sp, #20]
   d9ffc:	4377      	muls	r7, r6
   d9ffe:	9705      	str	r7, [sp, #20]
   da000:	e7f3      	b.n	d9fea <_strtod_r+0x1da>
   da002:	2910      	cmp	r1, #16
   da004:	bfd8      	it	le
   da006:	fb06 f808 	mulle.w	r8, r6, r8
   da00a:	e7ee      	b.n	d9fea <_strtod_r+0x1da>
   da00c:	4428      	add	r0, r5
   da00e:	2808      	cmp	r0, #8
   da010:	f100 0501 	add.w	r5, r0, #1
   da014:	dc05      	bgt.n	da022 <_strtod_r+0x212>
   da016:	9805      	ldr	r0, [sp, #20]
   da018:	210a      	movs	r1, #10
   da01a:	fb01 3300 	mla	r3, r1, r0, r3
   da01e:	9305      	str	r3, [sp, #20]
   da020:	e004      	b.n	da02c <_strtod_r+0x21c>
   da022:	2d10      	cmp	r5, #16
   da024:	bfdc      	itt	le
   da026:	210a      	movle	r1, #10
   da028:	fb01 3808 	mlale	r8, r1, r8, r3
   da02c:	2100      	movs	r1, #0
   da02e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da030:	1c58      	adds	r0, r3, #1
   da032:	9017      	str	r0, [sp, #92]	; 0x5c
   da034:	785b      	ldrb	r3, [r3, #1]
   da036:	4608      	mov	r0, r1
   da038:	e002      	b.n	da040 <_strtod_r+0x230>
   da03a:	9d04      	ldr	r5, [sp, #16]
   da03c:	4638      	mov	r0, r7
   da03e:	463a      	mov	r2, r7
   da040:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   da044:	2909      	cmp	r1, #9
   da046:	d9c7      	bls.n	d9fd8 <_strtod_r+0x1c8>
   da048:	2101      	movs	r1, #1
   da04a:	2b65      	cmp	r3, #101	; 0x65
   da04c:	d001      	beq.n	da052 <_strtod_r+0x242>
   da04e:	2b45      	cmp	r3, #69	; 0x45
   da050:	d151      	bne.n	da0f6 <_strtod_r+0x2e6>
   da052:	b96d      	cbnz	r5, da070 <_strtod_r+0x260>
   da054:	e004      	b.n	da060 <_strtod_r+0x250>
   da056:	2b65      	cmp	r3, #101	; 0x65
   da058:	f040 84b3 	bne.w	da9c2 <_strtod_r+0xbb2>
   da05c:	2200      	movs	r2, #0
   da05e:	2101      	movs	r1, #1
   da060:	b928      	cbnz	r0, da06e <_strtod_r+0x25e>
   da062:	9b06      	ldr	r3, [sp, #24]
   da064:	2b00      	cmp	r3, #0
   da066:	f000 8095 	beq.w	da194 <_strtod_r+0x384>
   da06a:	4605      	mov	r5, r0
   da06c:	e000      	b.n	da070 <_strtod_r+0x260>
   da06e:	2500      	movs	r5, #0
   da070:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   da072:	1c63      	adds	r3, r4, #1
   da074:	9317      	str	r3, [sp, #92]	; 0x5c
   da076:	7863      	ldrb	r3, [r4, #1]
   da078:	2b2b      	cmp	r3, #43	; 0x2b
   da07a:	d006      	beq.n	da08a <_strtod_r+0x27a>
   da07c:	2b2d      	cmp	r3, #45	; 0x2d
   da07e:	d002      	beq.n	da086 <_strtod_r+0x276>
   da080:	2600      	movs	r6, #0
   da082:	9603      	str	r6, [sp, #12]
   da084:	e006      	b.n	da094 <_strtod_r+0x284>
   da086:	2301      	movs	r3, #1
   da088:	e000      	b.n	da08c <_strtod_r+0x27c>
   da08a:	2300      	movs	r3, #0
   da08c:	9303      	str	r3, [sp, #12]
   da08e:	1ca3      	adds	r3, r4, #2
   da090:	9317      	str	r3, [sp, #92]	; 0x5c
   da092:	78a3      	ldrb	r3, [r4, #2]
   da094:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   da098:	2e09      	cmp	r6, #9
   da09a:	d82b      	bhi.n	da0f4 <_strtod_r+0x2e4>
   da09c:	2b30      	cmp	r3, #48	; 0x30
   da09e:	d104      	bne.n	da0aa <_strtod_r+0x29a>
   da0a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da0a2:	1c5e      	adds	r6, r3, #1
   da0a4:	9617      	str	r6, [sp, #92]	; 0x5c
   da0a6:	785b      	ldrb	r3, [r3, #1]
   da0a8:	e7f8      	b.n	da09c <_strtod_r+0x28c>
   da0aa:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   da0ae:	2e08      	cmp	r6, #8
   da0b0:	d821      	bhi.n	da0f6 <_strtod_r+0x2e6>
   da0b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   da0b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da0b8:	f04f 0c0a 	mov.w	ip, #10
   da0bc:	461f      	mov	r7, r3
   da0be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da0c0:	1c5e      	adds	r6, r3, #1
   da0c2:	9617      	str	r6, [sp, #92]	; 0x5c
   da0c4:	785b      	ldrb	r3, [r3, #1]
   da0c6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   da0ca:	f1b9 0f09 	cmp.w	r9, #9
   da0ce:	d804      	bhi.n	da0da <_strtod_r+0x2ca>
   da0d0:	fb0c 3e0e 	mla	lr, ip, lr, r3
   da0d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   da0d8:	e7f1      	b.n	da0be <_strtod_r+0x2ae>
   da0da:	1bf6      	subs	r6, r6, r7
   da0dc:	2e08      	cmp	r6, #8
   da0de:	f644 691f 	movw	r9, #19999	; 0x4e1f
   da0e2:	dc02      	bgt.n	da0ea <_strtod_r+0x2da>
   da0e4:	45f1      	cmp	r9, lr
   da0e6:	bfa8      	it	ge
   da0e8:	46f1      	movge	r9, lr
   da0ea:	9e03      	ldr	r6, [sp, #12]
   da0ec:	b12e      	cbz	r6, da0fa <_strtod_r+0x2ea>
   da0ee:	f1c9 0900 	rsb	r9, r9, #0
   da0f2:	e002      	b.n	da0fa <_strtod_r+0x2ea>
   da0f4:	9417      	str	r4, [sp, #92]	; 0x5c
   da0f6:	f04f 0900 	mov.w	r9, #0
   da0fa:	2d00      	cmp	r5, #0
   da0fc:	d153      	bne.n	da1a6 <_strtod_r+0x396>
   da0fe:	2800      	cmp	r0, #0
   da100:	f040 8451 	bne.w	da9a6 <_strtod_r+0xb96>
   da104:	9a06      	ldr	r2, [sp, #24]
   da106:	2a00      	cmp	r2, #0
   da108:	f040 844d 	bne.w	da9a6 <_strtod_r+0xb96>
   da10c:	2900      	cmp	r1, #0
   da10e:	d141      	bne.n	da194 <_strtod_r+0x384>
   da110:	2b4e      	cmp	r3, #78	; 0x4e
   da112:	d020      	beq.n	da156 <_strtod_r+0x346>
   da114:	dc02      	bgt.n	da11c <_strtod_r+0x30c>
   da116:	2b49      	cmp	r3, #73	; 0x49
   da118:	d00a      	beq.n	da130 <_strtod_r+0x320>
   da11a:	e03b      	b.n	da194 <_strtod_r+0x384>
   da11c:	2b69      	cmp	r3, #105	; 0x69
   da11e:	d007      	beq.n	da130 <_strtod_r+0x320>
   da120:	2b6e      	cmp	r3, #110	; 0x6e
   da122:	d018      	beq.n	da156 <_strtod_r+0x346>
   da124:	e036      	b.n	da194 <_strtod_r+0x384>
   da126:	bf00      	nop
   da128:	000dc648 	.word	0x000dc648
   da12c:	7ff00000 	.word	0x7ff00000
   da130:	49a8      	ldr	r1, [pc, #672]	; (da3d4 <_strtod_r+0x5c4>)
   da132:	a817      	add	r0, sp, #92	; 0x5c
   da134:	f000 fef0 	bl	daf18 <__match>
   da138:	b360      	cbz	r0, da194 <_strtod_r+0x384>
   da13a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da13c:	49a6      	ldr	r1, [pc, #664]	; (da3d8 <_strtod_r+0x5c8>)
   da13e:	3b01      	subs	r3, #1
   da140:	a817      	add	r0, sp, #92	; 0x5c
   da142:	9317      	str	r3, [sp, #92]	; 0x5c
   da144:	f000 fee8 	bl	daf18 <__match>
   da148:	b910      	cbnz	r0, da150 <_strtod_r+0x340>
   da14a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da14c:	3301      	adds	r3, #1
   da14e:	9317      	str	r3, [sp, #92]	; 0x5c
   da150:	f8df b2a0 	ldr.w	fp, [pc, #672]	; da3f4 <_strtod_r+0x5e4>
   da154:	e01a      	b.n	da18c <_strtod_r+0x37c>
   da156:	49a1      	ldr	r1, [pc, #644]	; (da3dc <_strtod_r+0x5cc>)
   da158:	a817      	add	r0, sp, #92	; 0x5c
   da15a:	f000 fedd 	bl	daf18 <__match>
   da15e:	b1c8      	cbz	r0, da194 <_strtod_r+0x384>
   da160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da162:	781b      	ldrb	r3, [r3, #0]
   da164:	2b28      	cmp	r3, #40	; 0x28
   da166:	d10f      	bne.n	da188 <_strtod_r+0x378>
   da168:	aa1a      	add	r2, sp, #104	; 0x68
   da16a:	499d      	ldr	r1, [pc, #628]	; (da3e0 <_strtod_r+0x5d0>)
   da16c:	a817      	add	r0, sp, #92	; 0x5c
   da16e:	f000 fee6 	bl	daf3e <__hexnan>
   da172:	2805      	cmp	r0, #5
   da174:	d108      	bne.n	da188 <_strtod_r+0x378>
   da176:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   da178:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   da17c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   da180:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   da184:	f000 bc0f 	b.w	da9a6 <_strtod_r+0xb96>
   da188:	f8df b26c 	ldr.w	fp, [pc, #620]	; da3f8 <_strtod_r+0x5e8>
   da18c:	f04f 0a00 	mov.w	sl, #0
   da190:	f000 bc09 	b.w	da9a6 <_strtod_r+0xb96>
   da194:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da196:	9417      	str	r4, [sp, #92]	; 0x5c
   da198:	2b00      	cmp	r3, #0
   da19a:	f000 840f 	beq.w	da9bc <_strtod_r+0xbac>
   da19e:	2300      	movs	r3, #0
   da1a0:	930c      	str	r3, [sp, #48]	; 0x30
   da1a2:	f000 bc02 	b.w	da9aa <_strtod_r+0xb9a>
   da1a6:	9b04      	ldr	r3, [sp, #16]
   da1a8:	9805      	ldr	r0, [sp, #20]
   da1aa:	2b00      	cmp	r3, #0
   da1ac:	bf08      	it	eq
   da1ae:	462b      	moveq	r3, r5
   da1b0:	2d10      	cmp	r5, #16
   da1b2:	462c      	mov	r4, r5
   da1b4:	ebc2 0909 	rsb	r9, r2, r9
   da1b8:	bfa8      	it	ge
   da1ba:	2410      	movge	r4, #16
   da1bc:	9304      	str	r3, [sp, #16]
   da1be:	f7ff f953 	bl	d9468 <__aeabi_ui2d>
   da1c2:	2c09      	cmp	r4, #9
   da1c4:	4682      	mov	sl, r0
   da1c6:	468b      	mov	fp, r1
   da1c8:	dd13      	ble.n	da1f2 <_strtod_r+0x3e2>
   da1ca:	4b86      	ldr	r3, [pc, #536]	; (da3e4 <_strtod_r+0x5d4>)
   da1cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   da1d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   da1d4:	f7ff f9be 	bl	d9554 <__aeabi_dmul>
   da1d8:	4606      	mov	r6, r0
   da1da:	4640      	mov	r0, r8
   da1dc:	460f      	mov	r7, r1
   da1de:	f7ff f943 	bl	d9468 <__aeabi_ui2d>
   da1e2:	4602      	mov	r2, r0
   da1e4:	460b      	mov	r3, r1
   da1e6:	4630      	mov	r0, r6
   da1e8:	4639      	mov	r1, r7
   da1ea:	f7ff f801 	bl	d91f0 <__adddf3>
   da1ee:	4682      	mov	sl, r0
   da1f0:	468b      	mov	fp, r1
   da1f2:	2d0f      	cmp	r5, #15
   da1f4:	dc36      	bgt.n	da264 <_strtod_r+0x454>
   da1f6:	f1b9 0f00 	cmp.w	r9, #0
   da1fa:	f000 83d4 	beq.w	da9a6 <_strtod_r+0xb96>
   da1fe:	dd24      	ble.n	da24a <_strtod_r+0x43a>
   da200:	f1b9 0f16 	cmp.w	r9, #22
   da204:	dc07      	bgt.n	da216 <_strtod_r+0x406>
   da206:	4d77      	ldr	r5, [pc, #476]	; (da3e4 <_strtod_r+0x5d4>)
   da208:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   da20c:	4652      	mov	r2, sl
   da20e:	465b      	mov	r3, fp
   da210:	e9d9 0100 	ldrd	r0, r1, [r9]
   da214:	e014      	b.n	da240 <_strtod_r+0x430>
   da216:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   da21a:	4599      	cmp	r9, r3
   da21c:	dc22      	bgt.n	da264 <_strtod_r+0x454>
   da21e:	4c71      	ldr	r4, [pc, #452]	; (da3e4 <_strtod_r+0x5d4>)
   da220:	f1c5 050f 	rsb	r5, r5, #15
   da224:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   da228:	ebc5 0509 	rsb	r5, r5, r9
   da22c:	4652      	mov	r2, sl
   da22e:	465b      	mov	r3, fp
   da230:	e9d1 0100 	ldrd	r0, r1, [r1]
   da234:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   da238:	f7ff f98c 	bl	d9554 <__aeabi_dmul>
   da23c:	e9d4 2300 	ldrd	r2, r3, [r4]
   da240:	f7ff f988 	bl	d9554 <__aeabi_dmul>
   da244:	4682      	mov	sl, r0
   da246:	468b      	mov	fp, r1
   da248:	e3ad      	b.n	da9a6 <_strtod_r+0xb96>
   da24a:	f119 0f16 	cmn.w	r9, #22
   da24e:	db09      	blt.n	da264 <_strtod_r+0x454>
   da250:	4d64      	ldr	r5, [pc, #400]	; (da3e4 <_strtod_r+0x5d4>)
   da252:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   da256:	e9d9 2300 	ldrd	r2, r3, [r9]
   da25a:	4650      	mov	r0, sl
   da25c:	4659      	mov	r1, fp
   da25e:	f7ff faa3 	bl	d97a8 <__aeabi_ddiv>
   da262:	e7ef      	b.n	da244 <_strtod_r+0x434>
   da264:	1b2c      	subs	r4, r5, r4
   da266:	444c      	add	r4, r9
   da268:	2c00      	cmp	r4, #0
   da26a:	dd57      	ble.n	da31c <_strtod_r+0x50c>
   da26c:	f014 010f 	ands.w	r1, r4, #15
   da270:	d00a      	beq.n	da288 <_strtod_r+0x478>
   da272:	4b5c      	ldr	r3, [pc, #368]	; (da3e4 <_strtod_r+0x5d4>)
   da274:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   da278:	4652      	mov	r2, sl
   da27a:	465b      	mov	r3, fp
   da27c:	e9d1 0100 	ldrd	r0, r1, [r1]
   da280:	f7ff f968 	bl	d9554 <__aeabi_dmul>
   da284:	4682      	mov	sl, r0
   da286:	468b      	mov	fp, r1
   da288:	f034 040f 	bics.w	r4, r4, #15
   da28c:	f000 80b8 	beq.w	da400 <_strtod_r+0x5f0>
   da290:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   da294:	dd0b      	ble.n	da2ae <_strtod_r+0x49e>
   da296:	2400      	movs	r4, #0
   da298:	4625      	mov	r5, r4
   da29a:	9405      	str	r4, [sp, #20]
   da29c:	9404      	str	r4, [sp, #16]
   da29e:	9a02      	ldr	r2, [sp, #8]
   da2a0:	f8df b150 	ldr.w	fp, [pc, #336]	; da3f4 <_strtod_r+0x5e4>
   da2a4:	2322      	movs	r3, #34	; 0x22
   da2a6:	6013      	str	r3, [r2, #0]
   da2a8:	f04f 0a00 	mov.w	sl, #0
   da2ac:	e187      	b.n	da5be <_strtod_r+0x7ae>
   da2ae:	4e4e      	ldr	r6, [pc, #312]	; (da3e8 <_strtod_r+0x5d8>)
   da2b0:	2300      	movs	r3, #0
   da2b2:	1124      	asrs	r4, r4, #4
   da2b4:	4650      	mov	r0, sl
   da2b6:	4659      	mov	r1, fp
   da2b8:	4698      	mov	r8, r3
   da2ba:	4637      	mov	r7, r6
   da2bc:	2c01      	cmp	r4, #1
   da2be:	dd0b      	ble.n	da2d8 <_strtod_r+0x4c8>
   da2c0:	07e2      	lsls	r2, r4, #31
   da2c2:	d504      	bpl.n	da2ce <_strtod_r+0x4be>
   da2c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   da2c8:	f7ff f944 	bl	d9554 <__aeabi_dmul>
   da2cc:	2301      	movs	r3, #1
   da2ce:	f108 0801 	add.w	r8, r8, #1
   da2d2:	1064      	asrs	r4, r4, #1
   da2d4:	3608      	adds	r6, #8
   da2d6:	e7f1      	b.n	da2bc <_strtod_r+0x4ac>
   da2d8:	b10b      	cbz	r3, da2de <_strtod_r+0x4ce>
   da2da:	4682      	mov	sl, r0
   da2dc:	468b      	mov	fp, r1
   da2de:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da2e2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   da2e6:	4652      	mov	r2, sl
   da2e8:	465b      	mov	r3, fp
   da2ea:	e9d7 0100 	ldrd	r0, r1, [r7]
   da2ee:	f7ff f931 	bl	d9554 <__aeabi_dmul>
   da2f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da2f6:	468b      	mov	fp, r1
   da2f8:	460a      	mov	r2, r1
   da2fa:	0d1b      	lsrs	r3, r3, #20
   da2fc:	493b      	ldr	r1, [pc, #236]	; (da3ec <_strtod_r+0x5dc>)
   da2fe:	051b      	lsls	r3, r3, #20
   da300:	428b      	cmp	r3, r1
   da302:	4682      	mov	sl, r0
   da304:	d8c7      	bhi.n	da296 <_strtod_r+0x486>
   da306:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   da30a:	428b      	cmp	r3, r1
   da30c:	bf86      	itte	hi
   da30e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; da3fc <_strtod_r+0x5ec>
   da312:	f04f 3aff 	movhi.w	sl, #4294967295
   da316:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   da31a:	e071      	b.n	da400 <_strtod_r+0x5f0>
   da31c:	d070      	beq.n	da400 <_strtod_r+0x5f0>
   da31e:	4264      	negs	r4, r4
   da320:	f014 020f 	ands.w	r2, r4, #15
   da324:	d00a      	beq.n	da33c <_strtod_r+0x52c>
   da326:	4b2f      	ldr	r3, [pc, #188]	; (da3e4 <_strtod_r+0x5d4>)
   da328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   da32c:	4650      	mov	r0, sl
   da32e:	4659      	mov	r1, fp
   da330:	e9d3 2300 	ldrd	r2, r3, [r3]
   da334:	f7ff fa38 	bl	d97a8 <__aeabi_ddiv>
   da338:	4682      	mov	sl, r0
   da33a:	468b      	mov	fp, r1
   da33c:	1124      	asrs	r4, r4, #4
   da33e:	d05f      	beq.n	da400 <_strtod_r+0x5f0>
   da340:	2c1f      	cmp	r4, #31
   da342:	dd04      	ble.n	da34e <_strtod_r+0x53e>
   da344:	2400      	movs	r4, #0
   da346:	4625      	mov	r5, r4
   da348:	9405      	str	r4, [sp, #20]
   da34a:	9404      	str	r4, [sp, #16]
   da34c:	e130      	b.n	da5b0 <_strtod_r+0x7a0>
   da34e:	f014 0f10 	tst.w	r4, #16
   da352:	bf0c      	ite	eq
   da354:	2300      	moveq	r3, #0
   da356:	236a      	movne	r3, #106	; 0x6a
   da358:	4e25      	ldr	r6, [pc, #148]	; (da3f0 <_strtod_r+0x5e0>)
   da35a:	9303      	str	r3, [sp, #12]
   da35c:	4650      	mov	r0, sl
   da35e:	4659      	mov	r1, fp
   da360:	2300      	movs	r3, #0
   da362:	2c00      	cmp	r4, #0
   da364:	dd09      	ble.n	da37a <_strtod_r+0x56a>
   da366:	07e2      	lsls	r2, r4, #31
   da368:	d504      	bpl.n	da374 <_strtod_r+0x564>
   da36a:	e9d6 2300 	ldrd	r2, r3, [r6]
   da36e:	f7ff f8f1 	bl	d9554 <__aeabi_dmul>
   da372:	2301      	movs	r3, #1
   da374:	1064      	asrs	r4, r4, #1
   da376:	3608      	adds	r6, #8
   da378:	e7f3      	b.n	da362 <_strtod_r+0x552>
   da37a:	b10b      	cbz	r3, da380 <_strtod_r+0x570>
   da37c:	4682      	mov	sl, r0
   da37e:	468b      	mov	fp, r1
   da380:	9b03      	ldr	r3, [sp, #12]
   da382:	b1eb      	cbz	r3, da3c0 <_strtod_r+0x5b0>
   da384:	f3cb 530a 	ubfx	r3, fp, #20, #11
   da388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da38c:	2b00      	cmp	r3, #0
   da38e:	4659      	mov	r1, fp
   da390:	dd16      	ble.n	da3c0 <_strtod_r+0x5b0>
   da392:	2b1f      	cmp	r3, #31
   da394:	dd0e      	ble.n	da3b4 <_strtod_r+0x5a4>
   da396:	2b34      	cmp	r3, #52	; 0x34
   da398:	bfde      	ittt	le
   da39a:	3b20      	suble	r3, #32
   da39c:	f04f 32ff 	movle.w	r2, #4294967295
   da3a0:	fa02 f303 	lslle.w	r3, r2, r3
   da3a4:	f04f 0a00 	mov.w	sl, #0
   da3a8:	bfcc      	ite	gt
   da3aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   da3ae:	ea03 0b01 	andle.w	fp, r3, r1
   da3b2:	e005      	b.n	da3c0 <_strtod_r+0x5b0>
   da3b4:	f04f 32ff 	mov.w	r2, #4294967295
   da3b8:	fa02 f303 	lsl.w	r3, r2, r3
   da3bc:	ea03 0a0a 	and.w	sl, r3, sl
   da3c0:	2200      	movs	r2, #0
   da3c2:	2300      	movs	r3, #0
   da3c4:	4650      	mov	r0, sl
   da3c6:	4659      	mov	r1, fp
   da3c8:	f7ff fb2c 	bl	d9a24 <__aeabi_dcmpeq>
   da3cc:	2800      	cmp	r0, #0
   da3ce:	d1b9      	bne.n	da344 <_strtod_r+0x534>
   da3d0:	e018      	b.n	da404 <_strtod_r+0x5f4>
   da3d2:	bf00      	nop
   da3d4:	000dc670 	.word	0x000dc670
   da3d8:	000dc673 	.word	0x000dc673
   da3dc:	000dc679 	.word	0x000dc679
   da3e0:	000dc65c 	.word	0x000dc65c
   da3e4:	000dc6a8 	.word	0x000dc6a8
   da3e8:	000dc770 	.word	0x000dc770
   da3ec:	7ca00000 	.word	0x7ca00000
   da3f0:	000dc680 	.word	0x000dc680
   da3f4:	7ff00000 	.word	0x7ff00000
   da3f8:	fff80000 	.word	0xfff80000
   da3fc:	7fefffff 	.word	0x7fefffff
   da400:	2300      	movs	r3, #0
   da402:	9303      	str	r3, [sp, #12]
   da404:	9b05      	ldr	r3, [sp, #20]
   da406:	9300      	str	r3, [sp, #0]
   da408:	9a04      	ldr	r2, [sp, #16]
   da40a:	9907      	ldr	r1, [sp, #28]
   da40c:	9802      	ldr	r0, [sp, #8]
   da40e:	462b      	mov	r3, r5
   da410:	f000 feaa 	bl	db168 <__s2b>
   da414:	9005      	str	r0, [sp, #20]
   da416:	2800      	cmp	r0, #0
   da418:	f43f af3d 	beq.w	da296 <_strtod_r+0x486>
   da41c:	f1b9 0f00 	cmp.w	r9, #0
   da420:	f1c9 0300 	rsb	r3, r9, #0
   da424:	bfa8      	it	ge
   da426:	2300      	movge	r3, #0
   da428:	930d      	str	r3, [sp, #52]	; 0x34
   da42a:	2400      	movs	r4, #0
   da42c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   da430:	9312      	str	r3, [sp, #72]	; 0x48
   da432:	4625      	mov	r5, r4
   da434:	9b05      	ldr	r3, [sp, #20]
   da436:	9802      	ldr	r0, [sp, #8]
   da438:	6859      	ldr	r1, [r3, #4]
   da43a:	f000 fe0e 	bl	db05a <_Balloc>
   da43e:	9004      	str	r0, [sp, #16]
   da440:	2800      	cmp	r0, #0
   da442:	f43f af2c 	beq.w	da29e <_strtod_r+0x48e>
   da446:	9b05      	ldr	r3, [sp, #20]
   da448:	691a      	ldr	r2, [r3, #16]
   da44a:	3202      	adds	r2, #2
   da44c:	f103 010c 	add.w	r1, r3, #12
   da450:	0092      	lsls	r2, r2, #2
   da452:	300c      	adds	r0, #12
   da454:	f7ff fbd5 	bl	d9c02 <memcpy>
   da458:	aa1a      	add	r2, sp, #104	; 0x68
   da45a:	a919      	add	r1, sp, #100	; 0x64
   da45c:	ec4b ab10 	vmov	d0, sl, fp
   da460:	9802      	ldr	r0, [sp, #8]
   da462:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da466:	f001 f934 	bl	db6d2 <__d2b>
   da46a:	9018      	str	r0, [sp, #96]	; 0x60
   da46c:	2800      	cmp	r0, #0
   da46e:	f43f af16 	beq.w	da29e <_strtod_r+0x48e>
   da472:	2101      	movs	r1, #1
   da474:	9802      	ldr	r0, [sp, #8]
   da476:	f000 ff02 	bl	db27e <__i2b>
   da47a:	4605      	mov	r5, r0
   da47c:	2800      	cmp	r0, #0
   da47e:	f43f af0e 	beq.w	da29e <_strtod_r+0x48e>
   da482:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da484:	9903      	ldr	r1, [sp, #12]
   da486:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   da488:	2b00      	cmp	r3, #0
   da48a:	bfad      	iteet	ge
   da48c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   da48e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   da490:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   da494:	eb02 0803 	addge.w	r8, r2, r3
   da498:	bfb8      	it	lt
   da49a:	1ad2      	sublt	r2, r2, r3
   da49c:	eba3 0301 	sub.w	r3, r3, r1
   da4a0:	4433      	add	r3, r6
   da4a2:	49b5      	ldr	r1, [pc, #724]	; (da778 <_strtod_r+0x968>)
   da4a4:	bfa8      	it	ge
   da4a6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   da4a8:	3b01      	subs	r3, #1
   da4aa:	428b      	cmp	r3, r1
   da4ac:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   da4b0:	f280 808a 	bge.w	da5c8 <_strtod_r+0x7b8>
   da4b4:	1ac9      	subs	r1, r1, r3
   da4b6:	291f      	cmp	r1, #31
   da4b8:	bfc8      	it	gt
   da4ba:	4fb0      	ldrgt	r7, [pc, #704]	; (da77c <_strtod_r+0x96c>)
   da4bc:	f04f 0901 	mov.w	r9, #1
   da4c0:	bfd4      	ite	le
   da4c2:	fa09 f301 	lslle.w	r3, r9, r1
   da4c6:	1aff      	subgt	r7, r7, r3
   da4c8:	eba6 0601 	sub.w	r6, r6, r1
   da4cc:	bfd9      	ittee	le
   da4ce:	9306      	strle	r3, [sp, #24]
   da4d0:	2700      	movle	r7, #0
   da4d2:	fa09 f707 	lslgt.w	r7, r9, r7
   da4d6:	f8cd 9018 	strgt.w	r9, [sp, #24]
   da4da:	eb08 0906 	add.w	r9, r8, r6
   da4de:	9b03      	ldr	r3, [sp, #12]
   da4e0:	45c8      	cmp	r8, r9
   da4e2:	4416      	add	r6, r2
   da4e4:	441e      	add	r6, r3
   da4e6:	4643      	mov	r3, r8
   da4e8:	bfa8      	it	ge
   da4ea:	464b      	movge	r3, r9
   da4ec:	42b3      	cmp	r3, r6
   da4ee:	bfa8      	it	ge
   da4f0:	4633      	movge	r3, r6
   da4f2:	2b00      	cmp	r3, #0
   da4f4:	bfc2      	ittt	gt
   da4f6:	ebc3 0909 	rsbgt	r9, r3, r9
   da4fa:	1af6      	subgt	r6, r6, r3
   da4fc:	ebc3 0808 	rsbgt	r8, r3, r8
   da500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da502:	2b00      	cmp	r3, #0
   da504:	d164      	bne.n	da5d0 <_strtod_r+0x7c0>
   da506:	f1b9 0f00 	cmp.w	r9, #0
   da50a:	dc7a      	bgt.n	da602 <_strtod_r+0x7f2>
   da50c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   da50e:	2b00      	cmp	r3, #0
   da510:	f040 8081 	bne.w	da616 <_strtod_r+0x806>
   da514:	2e00      	cmp	r6, #0
   da516:	f300 8088 	bgt.w	da62a <_strtod_r+0x81a>
   da51a:	f1b8 0f00 	cmp.w	r8, #0
   da51e:	f300 808e 	bgt.w	da63e <_strtod_r+0x82e>
   da522:	9a04      	ldr	r2, [sp, #16]
   da524:	9918      	ldr	r1, [sp, #96]	; 0x60
   da526:	9802      	ldr	r0, [sp, #8]
   da528:	f000 ffff 	bl	db52a <__mdiff>
   da52c:	4604      	mov	r4, r0
   da52e:	2800      	cmp	r0, #0
   da530:	f43f aeb5 	beq.w	da29e <_strtod_r+0x48e>
   da534:	68c3      	ldr	r3, [r0, #12]
   da536:	9307      	str	r3, [sp, #28]
   da538:	2300      	movs	r3, #0
   da53a:	60c3      	str	r3, [r0, #12]
   da53c:	4629      	mov	r1, r5
   da53e:	f000 ffd8 	bl	db4f2 <__mcmp>
   da542:	2800      	cmp	r0, #0
   da544:	f280 8089 	bge.w	da65a <_strtod_r+0x84a>
   da548:	9b07      	ldr	r3, [sp, #28]
   da54a:	2b00      	cmp	r3, #0
   da54c:	f040 8204 	bne.w	da958 <_strtod_r+0xb48>
   da550:	f1ba 0f00 	cmp.w	sl, #0
   da554:	f040 8200 	bne.w	da958 <_strtod_r+0xb48>
   da558:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da55c:	2b00      	cmp	r3, #0
   da55e:	f040 81fb 	bne.w	da958 <_strtod_r+0xb48>
   da562:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da566:	0d1b      	lsrs	r3, r3, #20
   da568:	051b      	lsls	r3, r3, #20
   da56a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da56e:	f240 81f3 	bls.w	da958 <_strtod_r+0xb48>
   da572:	6963      	ldr	r3, [r4, #20]
   da574:	2b00      	cmp	r3, #0
   da576:	d06c      	beq.n	da652 <_strtod_r+0x842>
   da578:	4621      	mov	r1, r4
   da57a:	2201      	movs	r2, #1
   da57c:	9802      	ldr	r0, [sp, #8]
   da57e:	f000 ff67 	bl	db450 <__lshift>
   da582:	4629      	mov	r1, r5
   da584:	4604      	mov	r4, r0
   da586:	f000 ffb4 	bl	db4f2 <__mcmp>
   da58a:	2800      	cmp	r0, #0
   da58c:	f340 81e4 	ble.w	da958 <_strtod_r+0xb48>
   da590:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da594:	9a03      	ldr	r2, [sp, #12]
   da596:	0d1b      	lsrs	r3, r3, #20
   da598:	051b      	lsls	r3, r3, #20
   da59a:	2a00      	cmp	r2, #0
   da59c:	f000 808c 	beq.w	da6b8 <_strtod_r+0x8a8>
   da5a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da5a4:	f300 8088 	bgt.w	da6b8 <_strtod_r+0x8a8>
   da5a8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   da5ac:	f300 81d6 	bgt.w	da95c <_strtod_r+0xb4c>
   da5b0:	9a02      	ldr	r2, [sp, #8]
   da5b2:	2322      	movs	r3, #34	; 0x22
   da5b4:	f04f 0a00 	mov.w	sl, #0
   da5b8:	f04f 0b00 	mov.w	fp, #0
   da5bc:	6013      	str	r3, [r2, #0]
   da5be:	9b05      	ldr	r3, [sp, #20]
   da5c0:	2b00      	cmp	r3, #0
   da5c2:	f040 81dc 	bne.w	da97e <_strtod_r+0xb6e>
   da5c6:	e1ee      	b.n	da9a6 <_strtod_r+0xb96>
   da5c8:	2301      	movs	r3, #1
   da5ca:	2700      	movs	r7, #0
   da5cc:	9306      	str	r3, [sp, #24]
   da5ce:	e784      	b.n	da4da <_strtod_r+0x6ca>
   da5d0:	4629      	mov	r1, r5
   da5d2:	461a      	mov	r2, r3
   da5d4:	9802      	ldr	r0, [sp, #8]
   da5d6:	f000 feed 	bl	db3b4 <__pow5mult>
   da5da:	4605      	mov	r5, r0
   da5dc:	2800      	cmp	r0, #0
   da5de:	f43f ae5e 	beq.w	da29e <_strtod_r+0x48e>
   da5e2:	4601      	mov	r1, r0
   da5e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   da5e6:	9802      	ldr	r0, [sp, #8]
   da5e8:	f000 fe52 	bl	db290 <__multiply>
   da5ec:	9007      	str	r0, [sp, #28]
   da5ee:	2800      	cmp	r0, #0
   da5f0:	f43f ae55 	beq.w	da29e <_strtod_r+0x48e>
   da5f4:	9918      	ldr	r1, [sp, #96]	; 0x60
   da5f6:	9802      	ldr	r0, [sp, #8]
   da5f8:	f000 fd64 	bl	db0c4 <_Bfree>
   da5fc:	9b07      	ldr	r3, [sp, #28]
   da5fe:	9318      	str	r3, [sp, #96]	; 0x60
   da600:	e781      	b.n	da506 <_strtod_r+0x6f6>
   da602:	464a      	mov	r2, r9
   da604:	9918      	ldr	r1, [sp, #96]	; 0x60
   da606:	9802      	ldr	r0, [sp, #8]
   da608:	f000 ff22 	bl	db450 <__lshift>
   da60c:	9018      	str	r0, [sp, #96]	; 0x60
   da60e:	2800      	cmp	r0, #0
   da610:	f47f af7c 	bne.w	da50c <_strtod_r+0x6fc>
   da614:	e643      	b.n	da29e <_strtod_r+0x48e>
   da616:	9a12      	ldr	r2, [sp, #72]	; 0x48
   da618:	9904      	ldr	r1, [sp, #16]
   da61a:	9802      	ldr	r0, [sp, #8]
   da61c:	f000 feca 	bl	db3b4 <__pow5mult>
   da620:	9004      	str	r0, [sp, #16]
   da622:	2800      	cmp	r0, #0
   da624:	f47f af76 	bne.w	da514 <_strtod_r+0x704>
   da628:	e639      	b.n	da29e <_strtod_r+0x48e>
   da62a:	4632      	mov	r2, r6
   da62c:	9904      	ldr	r1, [sp, #16]
   da62e:	9802      	ldr	r0, [sp, #8]
   da630:	f000 ff0e 	bl	db450 <__lshift>
   da634:	9004      	str	r0, [sp, #16]
   da636:	2800      	cmp	r0, #0
   da638:	f47f af6f 	bne.w	da51a <_strtod_r+0x70a>
   da63c:	e62f      	b.n	da29e <_strtod_r+0x48e>
   da63e:	4629      	mov	r1, r5
   da640:	4642      	mov	r2, r8
   da642:	9802      	ldr	r0, [sp, #8]
   da644:	f000 ff04 	bl	db450 <__lshift>
   da648:	4605      	mov	r5, r0
   da64a:	2800      	cmp	r0, #0
   da64c:	f47f af69 	bne.w	da522 <_strtod_r+0x712>
   da650:	e625      	b.n	da29e <_strtod_r+0x48e>
   da652:	6923      	ldr	r3, [r4, #16]
   da654:	2b01      	cmp	r3, #1
   da656:	dc8f      	bgt.n	da578 <_strtod_r+0x768>
   da658:	e17e      	b.n	da958 <_strtod_r+0xb48>
   da65a:	d161      	bne.n	da720 <_strtod_r+0x910>
   da65c:	9a07      	ldr	r2, [sp, #28]
   da65e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da662:	b322      	cbz	r2, da6ae <_strtod_r+0x89e>
   da664:	4946      	ldr	r1, [pc, #280]	; (da780 <_strtod_r+0x970>)
   da666:	428b      	cmp	r3, r1
   da668:	465a      	mov	r2, fp
   da66a:	d12e      	bne.n	da6ca <_strtod_r+0x8ba>
   da66c:	9b03      	ldr	r3, [sp, #12]
   da66e:	4651      	mov	r1, sl
   da670:	b163      	cbz	r3, da68c <_strtod_r+0x87c>
   da672:	4b44      	ldr	r3, [pc, #272]	; (da784 <_strtod_r+0x974>)
   da674:	4013      	ands	r3, r2
   da676:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da67a:	d807      	bhi.n	da68c <_strtod_r+0x87c>
   da67c:	0d1b      	lsrs	r3, r3, #20
   da67e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da682:	f04f 30ff 	mov.w	r0, #4294967295
   da686:	fa00 f303 	lsl.w	r3, r0, r3
   da68a:	e001      	b.n	da690 <_strtod_r+0x880>
   da68c:	f04f 33ff 	mov.w	r3, #4294967295
   da690:	428b      	cmp	r3, r1
   da692:	d11a      	bne.n	da6ca <_strtod_r+0x8ba>
   da694:	493c      	ldr	r1, [pc, #240]	; (da788 <_strtod_r+0x978>)
   da696:	428a      	cmp	r2, r1
   da698:	d102      	bne.n	da6a0 <_strtod_r+0x890>
   da69a:	3301      	adds	r3, #1
   da69c:	f43f adff 	beq.w	da29e <_strtod_r+0x48e>
   da6a0:	4b38      	ldr	r3, [pc, #224]	; (da784 <_strtod_r+0x974>)
   da6a2:	4013      	ands	r3, r2
   da6a4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   da6a8:	f04f 0a00 	mov.w	sl, #0
   da6ac:	e154      	b.n	da958 <_strtod_r+0xb48>
   da6ae:	b963      	cbnz	r3, da6ca <_strtod_r+0x8ba>
   da6b0:	f1ba 0f00 	cmp.w	sl, #0
   da6b4:	d109      	bne.n	da6ca <_strtod_r+0x8ba>
   da6b6:	e76b      	b.n	da590 <_strtod_r+0x780>
   da6b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   da6bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   da6c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   da6c4:	f04f 3aff 	mov.w	sl, #4294967295
   da6c8:	e146      	b.n	da958 <_strtod_r+0xb48>
   da6ca:	b117      	cbz	r7, da6d2 <_strtod_r+0x8c2>
   da6cc:	ea17 0f0b 	tst.w	r7, fp
   da6d0:	e002      	b.n	da6d8 <_strtod_r+0x8c8>
   da6d2:	9b06      	ldr	r3, [sp, #24]
   da6d4:	ea13 0f0a 	tst.w	r3, sl
   da6d8:	f000 813e 	beq.w	da958 <_strtod_r+0xb48>
   da6dc:	9b07      	ldr	r3, [sp, #28]
   da6de:	9a03      	ldr	r2, [sp, #12]
   da6e0:	4650      	mov	r0, sl
   da6e2:	4659      	mov	r1, fp
   da6e4:	b153      	cbz	r3, da6fc <_strtod_r+0x8ec>
   da6e6:	f7ff fb74 	bl	d9dd2 <sulp>
   da6ea:	4602      	mov	r2, r0
   da6ec:	460b      	mov	r3, r1
   da6ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da6f2:	f7fe fd7d 	bl	d91f0 <__adddf3>
   da6f6:	4682      	mov	sl, r0
   da6f8:	468b      	mov	fp, r1
   da6fa:	e12d      	b.n	da958 <_strtod_r+0xb48>
   da6fc:	f7ff fb69 	bl	d9dd2 <sulp>
   da700:	4602      	mov	r2, r0
   da702:	460b      	mov	r3, r1
   da704:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da708:	f7fe fd70 	bl	d91ec <__aeabi_dsub>
   da70c:	2200      	movs	r2, #0
   da70e:	2300      	movs	r3, #0
   da710:	4682      	mov	sl, r0
   da712:	468b      	mov	fp, r1
   da714:	f7ff f986 	bl	d9a24 <__aeabi_dcmpeq>
   da718:	2800      	cmp	r0, #0
   da71a:	f47f af49 	bne.w	da5b0 <_strtod_r+0x7a0>
   da71e:	e11b      	b.n	da958 <_strtod_r+0xb48>
   da720:	4629      	mov	r1, r5
   da722:	4620      	mov	r0, r4
   da724:	f001 f823 	bl	db76e <__ratio>
   da728:	ec57 6b10 	vmov	r6, r7, d0
   da72c:	2200      	movs	r2, #0
   da72e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da732:	ee10 0a10 	vmov	r0, s0
   da736:	4639      	mov	r1, r7
   da738:	f7ff f988 	bl	d9a4c <__aeabi_dcmple>
   da73c:	2800      	cmp	r0, #0
   da73e:	d042      	beq.n	da7c6 <_strtod_r+0x9b6>
   da740:	9b07      	ldr	r3, [sp, #28]
   da742:	b123      	cbz	r3, da74e <_strtod_r+0x93e>
   da744:	f04f 0800 	mov.w	r8, #0
   da748:	f8df 9040 	ldr.w	r9, [pc, #64]	; da78c <_strtod_r+0x97c>
   da74c:	e011      	b.n	da772 <_strtod_r+0x962>
   da74e:	f1ba 0f00 	cmp.w	sl, #0
   da752:	d103      	bne.n	da75c <_strtod_r+0x94c>
   da754:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da758:	b93b      	cbnz	r3, da76a <_strtod_r+0x95a>
   da75a:	e01b      	b.n	da794 <_strtod_r+0x984>
   da75c:	f1ba 0f01 	cmp.w	sl, #1
   da760:	d103      	bne.n	da76a <_strtod_r+0x95a>
   da762:	f1bb 0f00 	cmp.w	fp, #0
   da766:	f43f af23 	beq.w	da5b0 <_strtod_r+0x7a0>
   da76a:	f8df 9024 	ldr.w	r9, [pc, #36]	; da790 <_strtod_r+0x980>
   da76e:	f04f 0800 	mov.w	r8, #0
   da772:	2600      	movs	r6, #0
   da774:	4f05      	ldr	r7, [pc, #20]	; (da78c <_strtod_r+0x97c>)
   da776:	e039      	b.n	da7ec <_strtod_r+0x9dc>
   da778:	fffffc02 	.word	0xfffffc02
   da77c:	fffffbe2 	.word	0xfffffbe2
   da780:	000fffff 	.word	0x000fffff
   da784:	7ff00000 	.word	0x7ff00000
   da788:	7fefffff 	.word	0x7fefffff
   da78c:	3ff00000 	.word	0x3ff00000
   da790:	bff00000 	.word	0xbff00000
   da794:	2200      	movs	r2, #0
   da796:	4b98      	ldr	r3, [pc, #608]	; (da9f8 <_strtod_r+0xbe8>)
   da798:	4630      	mov	r0, r6
   da79a:	4639      	mov	r1, r7
   da79c:	f7ff f94c 	bl	d9a38 <__aeabi_dcmplt>
   da7a0:	b940      	cbnz	r0, da7b4 <_strtod_r+0x9a4>
   da7a2:	4630      	mov	r0, r6
   da7a4:	4639      	mov	r1, r7
   da7a6:	2200      	movs	r2, #0
   da7a8:	4b94      	ldr	r3, [pc, #592]	; (da9fc <_strtod_r+0xbec>)
   da7aa:	f7fe fed3 	bl	d9554 <__aeabi_dmul>
   da7ae:	4606      	mov	r6, r0
   da7b0:	460f      	mov	r7, r1
   da7b2:	e001      	b.n	da7b8 <_strtod_r+0x9a8>
   da7b4:	4f91      	ldr	r7, [pc, #580]	; (da9fc <_strtod_r+0xbec>)
   da7b6:	2600      	movs	r6, #0
   da7b8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   da7bc:	9614      	str	r6, [sp, #80]	; 0x50
   da7be:	9315      	str	r3, [sp, #84]	; 0x54
   da7c0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   da7c4:	e012      	b.n	da7ec <_strtod_r+0x9dc>
   da7c6:	4b8d      	ldr	r3, [pc, #564]	; (da9fc <_strtod_r+0xbec>)
   da7c8:	4630      	mov	r0, r6
   da7ca:	4639      	mov	r1, r7
   da7cc:	2200      	movs	r2, #0
   da7ce:	f7fe fec1 	bl	d9554 <__aeabi_dmul>
   da7d2:	9b07      	ldr	r3, [sp, #28]
   da7d4:	4606      	mov	r6, r0
   da7d6:	460f      	mov	r7, r1
   da7d8:	b923      	cbnz	r3, da7e4 <_strtod_r+0x9d4>
   da7da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da7de:	900e      	str	r0, [sp, #56]	; 0x38
   da7e0:	930f      	str	r3, [sp, #60]	; 0x3c
   da7e2:	e001      	b.n	da7e8 <_strtod_r+0x9d8>
   da7e4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   da7e8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   da7ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da7f0:	0d1b      	lsrs	r3, r3, #20
   da7f2:	051b      	lsls	r3, r3, #20
   da7f4:	9306      	str	r3, [sp, #24]
   da7f6:	9a06      	ldr	r2, [sp, #24]
   da7f8:	4b81      	ldr	r3, [pc, #516]	; (daa00 <_strtod_r+0xbf0>)
   da7fa:	429a      	cmp	r2, r3
   da7fc:	d12b      	bne.n	da856 <_strtod_r+0xa46>
   da7fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da802:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da806:	ec4b ab10 	vmov	d0, sl, fp
   da80a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   da80e:	f000 feeb 	bl	db5e8 <__ulp>
   da812:	4640      	mov	r0, r8
   da814:	ec53 2b10 	vmov	r2, r3, d0
   da818:	4649      	mov	r1, r9
   da81a:	f7fe fe9b 	bl	d9554 <__aeabi_dmul>
   da81e:	4652      	mov	r2, sl
   da820:	465b      	mov	r3, fp
   da822:	f7fe fce5 	bl	d91f0 <__adddf3>
   da826:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da82a:	0d1b      	lsrs	r3, r3, #20
   da82c:	4a75      	ldr	r2, [pc, #468]	; (daa04 <_strtod_r+0xbf4>)
   da82e:	051b      	lsls	r3, r3, #20
   da830:	4293      	cmp	r3, r2
   da832:	4682      	mov	sl, r0
   da834:	d90c      	bls.n	da850 <_strtod_r+0xa40>
   da836:	4b74      	ldr	r3, [pc, #464]	; (daa08 <_strtod_r+0xbf8>)
   da838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da83a:	429a      	cmp	r2, r3
   da83c:	d103      	bne.n	da846 <_strtod_r+0xa36>
   da83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da840:	3301      	adds	r3, #1
   da842:	f43f ad2c 	beq.w	da29e <_strtod_r+0x48e>
   da846:	f8df b1c0 	ldr.w	fp, [pc, #448]	; daa08 <_strtod_r+0xbf8>
   da84a:	f04f 3aff 	mov.w	sl, #4294967295
   da84e:	e072      	b.n	da936 <_strtod_r+0xb26>
   da850:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   da854:	e038      	b.n	da8c8 <_strtod_r+0xab8>
   da856:	9b03      	ldr	r3, [sp, #12]
   da858:	b333      	cbz	r3, da8a8 <_strtod_r+0xa98>
   da85a:	9b06      	ldr	r3, [sp, #24]
   da85c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da860:	d822      	bhi.n	da8a8 <_strtod_r+0xa98>
   da862:	a35d      	add	r3, pc, #372	; (adr r3, da9d8 <_strtod_r+0xbc8>)
   da864:	e9d3 2300 	ldrd	r2, r3, [r3]
   da868:	4630      	mov	r0, r6
   da86a:	4639      	mov	r1, r7
   da86c:	f7ff f8ee 	bl	d9a4c <__aeabi_dcmple>
   da870:	b1a8      	cbz	r0, da89e <_strtod_r+0xa8e>
   da872:	4639      	mov	r1, r7
   da874:	4630      	mov	r0, r6
   da876:	f7ff f92f 	bl	d9ad8 <__aeabi_d2uiz>
   da87a:	2800      	cmp	r0, #0
   da87c:	bf08      	it	eq
   da87e:	2001      	moveq	r0, #1
   da880:	f7fe fdf2 	bl	d9468 <__aeabi_ui2d>
   da884:	9b07      	ldr	r3, [sp, #28]
   da886:	4606      	mov	r6, r0
   da888:	460f      	mov	r7, r1
   da88a:	b923      	cbnz	r3, da896 <_strtod_r+0xa86>
   da88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da890:	9010      	str	r0, [sp, #64]	; 0x40
   da892:	9311      	str	r3, [sp, #68]	; 0x44
   da894:	e001      	b.n	da89a <_strtod_r+0xa8a>
   da896:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   da89a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   da89e:	9a06      	ldr	r2, [sp, #24]
   da8a0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   da8a4:	ebc2 0903 	rsb	r9, r2, r3
   da8a8:	ed9d 0b08 	vldr	d0, [sp, #32]
   da8ac:	f000 fe9c 	bl	db5e8 <__ulp>
   da8b0:	4640      	mov	r0, r8
   da8b2:	ec53 2b10 	vmov	r2, r3, d0
   da8b6:	4649      	mov	r1, r9
   da8b8:	f7fe fe4c 	bl	d9554 <__aeabi_dmul>
   da8bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da8c0:	f7fe fc96 	bl	d91f0 <__adddf3>
   da8c4:	4682      	mov	sl, r0
   da8c6:	468b      	mov	fp, r1
   da8c8:	9b03      	ldr	r3, [sp, #12]
   da8ca:	bba3      	cbnz	r3, da936 <_strtod_r+0xb26>
   da8cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da8d0:	0d1b      	lsrs	r3, r3, #20
   da8d2:	9a06      	ldr	r2, [sp, #24]
   da8d4:	051b      	lsls	r3, r3, #20
   da8d6:	429a      	cmp	r2, r3
   da8d8:	46d8      	mov	r8, fp
   da8da:	d12c      	bne.n	da936 <_strtod_r+0xb26>
   da8dc:	4639      	mov	r1, r7
   da8de:	4630      	mov	r0, r6
   da8e0:	f7ff f8d2 	bl	d9a88 <__aeabi_d2iz>
   da8e4:	f7fe fdd0 	bl	d9488 <__aeabi_i2d>
   da8e8:	460b      	mov	r3, r1
   da8ea:	4602      	mov	r2, r0
   da8ec:	4639      	mov	r1, r7
   da8ee:	4630      	mov	r0, r6
   da8f0:	f7fe fc7c 	bl	d91ec <__aeabi_dsub>
   da8f4:	9b07      	ldr	r3, [sp, #28]
   da8f6:	4606      	mov	r6, r0
   da8f8:	460f      	mov	r7, r1
   da8fa:	b92b      	cbnz	r3, da908 <_strtod_r+0xaf8>
   da8fc:	f1ba 0f00 	cmp.w	sl, #0
   da900:	d102      	bne.n	da908 <_strtod_r+0xaf8>
   da902:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da906:	b183      	cbz	r3, da92a <_strtod_r+0xb1a>
   da908:	a335      	add	r3, pc, #212	; (adr r3, da9e0 <_strtod_r+0xbd0>)
   da90a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da90e:	4630      	mov	r0, r6
   da910:	4639      	mov	r1, r7
   da912:	f7ff f891 	bl	d9a38 <__aeabi_dcmplt>
   da916:	2800      	cmp	r0, #0
   da918:	d131      	bne.n	da97e <_strtod_r+0xb6e>
   da91a:	a333      	add	r3, pc, #204	; (adr r3, da9e8 <_strtod_r+0xbd8>)
   da91c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da920:	4630      	mov	r0, r6
   da922:	4639      	mov	r1, r7
   da924:	f7ff f8a6 	bl	d9a74 <__aeabi_dcmpgt>
   da928:	e004      	b.n	da934 <_strtod_r+0xb24>
   da92a:	a331      	add	r3, pc, #196	; (adr r3, da9f0 <_strtod_r+0xbe0>)
   da92c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da930:	f7ff f882 	bl	d9a38 <__aeabi_dcmplt>
   da934:	bb18      	cbnz	r0, da97e <_strtod_r+0xb6e>
   da936:	9918      	ldr	r1, [sp, #96]	; 0x60
   da938:	9802      	ldr	r0, [sp, #8]
   da93a:	f000 fbc3 	bl	db0c4 <_Bfree>
   da93e:	9904      	ldr	r1, [sp, #16]
   da940:	9802      	ldr	r0, [sp, #8]
   da942:	f000 fbbf 	bl	db0c4 <_Bfree>
   da946:	4629      	mov	r1, r5
   da948:	9802      	ldr	r0, [sp, #8]
   da94a:	f000 fbbb 	bl	db0c4 <_Bfree>
   da94e:	4621      	mov	r1, r4
   da950:	9802      	ldr	r0, [sp, #8]
   da952:	f000 fbb7 	bl	db0c4 <_Bfree>
   da956:	e56d      	b.n	da434 <_strtod_r+0x624>
   da958:	9b03      	ldr	r3, [sp, #12]
   da95a:	b183      	cbz	r3, da97e <_strtod_r+0xb6e>
   da95c:	4b2b      	ldr	r3, [pc, #172]	; (daa0c <_strtod_r+0xbfc>)
   da95e:	930b      	str	r3, [sp, #44]	; 0x2c
   da960:	2300      	movs	r3, #0
   da962:	930a      	str	r3, [sp, #40]	; 0x28
   da964:	4650      	mov	r0, sl
   da966:	4659      	mov	r1, fp
   da968:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da96c:	f7fe fdf2 	bl	d9554 <__aeabi_dmul>
   da970:	4682      	mov	sl, r0
   da972:	468b      	mov	fp, r1
   da974:	b919      	cbnz	r1, da97e <_strtod_r+0xb6e>
   da976:	b910      	cbnz	r0, da97e <_strtod_r+0xb6e>
   da978:	9a02      	ldr	r2, [sp, #8]
   da97a:	2322      	movs	r3, #34	; 0x22
   da97c:	6013      	str	r3, [r2, #0]
   da97e:	9918      	ldr	r1, [sp, #96]	; 0x60
   da980:	9802      	ldr	r0, [sp, #8]
   da982:	f000 fb9f 	bl	db0c4 <_Bfree>
   da986:	9904      	ldr	r1, [sp, #16]
   da988:	9802      	ldr	r0, [sp, #8]
   da98a:	f000 fb9b 	bl	db0c4 <_Bfree>
   da98e:	4629      	mov	r1, r5
   da990:	9802      	ldr	r0, [sp, #8]
   da992:	f000 fb97 	bl	db0c4 <_Bfree>
   da996:	9905      	ldr	r1, [sp, #20]
   da998:	9802      	ldr	r0, [sp, #8]
   da99a:	f000 fb93 	bl	db0c4 <_Bfree>
   da99e:	4621      	mov	r1, r4
   da9a0:	9802      	ldr	r0, [sp, #8]
   da9a2:	f000 fb8f 	bl	db0c4 <_Bfree>
   da9a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da9a8:	b113      	cbz	r3, da9b0 <_strtod_r+0xba0>
   da9aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   da9ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da9ae:	6013      	str	r3, [r2, #0]
   da9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da9b2:	b11b      	cbz	r3, da9bc <_strtod_r+0xbac>
   da9b4:	4652      	mov	r2, sl
   da9b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da9ba:	e007      	b.n	da9cc <_strtod_r+0xbbc>
   da9bc:	4652      	mov	r2, sl
   da9be:	465b      	mov	r3, fp
   da9c0:	e004      	b.n	da9cc <_strtod_r+0xbbc>
   da9c2:	2500      	movs	r5, #0
   da9c4:	462a      	mov	r2, r5
   da9c6:	2101      	movs	r1, #1
   da9c8:	f7ff bb41 	b.w	da04e <_strtod_r+0x23e>
   da9cc:	ec43 2b10 	vmov	d0, r2, r3
   da9d0:	b01d      	add	sp, #116	; 0x74
   da9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da9d6:	bf00      	nop
   da9d8:	ffc00000 	.word	0xffc00000
   da9dc:	41dfffff 	.word	0x41dfffff
   da9e0:	94a03595 	.word	0x94a03595
   da9e4:	3fdfffff 	.word	0x3fdfffff
   da9e8:	35afe535 	.word	0x35afe535
   da9ec:	3fe00000 	.word	0x3fe00000
   da9f0:	94a03595 	.word	0x94a03595
   da9f4:	3fcfffff 	.word	0x3fcfffff
   da9f8:	3ff00000 	.word	0x3ff00000
   da9fc:	3fe00000 	.word	0x3fe00000
   daa00:	7fe00000 	.word	0x7fe00000
   daa04:	7c9fffff 	.word	0x7c9fffff
   daa08:	7fefffff 	.word	0x7fefffff
   daa0c:	39500000 	.word	0x39500000

000daa10 <strtod>:
   daa10:	4b02      	ldr	r3, [pc, #8]	; (daa1c <strtod+0xc>)
   daa12:	460a      	mov	r2, r1
   daa14:	4601      	mov	r1, r0
   daa16:	6818      	ldr	r0, [r3, #0]
   daa18:	f7ff b9fa 	b.w	d9e10 <_strtod_r>
   daa1c:	2003cdf4 	.word	0x2003cdf4

000daa20 <rshift>:
   daa20:	b5f0      	push	{r4, r5, r6, r7, lr}
   daa22:	6906      	ldr	r6, [r0, #16]
   daa24:	114b      	asrs	r3, r1, #5
   daa26:	42b3      	cmp	r3, r6
   daa28:	f100 0514 	add.w	r5, r0, #20
   daa2c:	da27      	bge.n	daa7e <rshift+0x5e>
   daa2e:	f011 011f 	ands.w	r1, r1, #31
   daa32:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   daa36:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   daa3a:	d101      	bne.n	daa40 <rshift+0x20>
   daa3c:	4629      	mov	r1, r5
   daa3e:	e016      	b.n	daa6e <rshift+0x4e>
   daa40:	1d14      	adds	r4, r2, #4
   daa42:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   daa46:	f1c1 0e20 	rsb	lr, r1, #32
   daa4a:	40ca      	lsrs	r2, r1
   daa4c:	462b      	mov	r3, r5
   daa4e:	42b4      	cmp	r4, r6
   daa50:	d209      	bcs.n	daa66 <rshift+0x46>
   daa52:	6827      	ldr	r7, [r4, #0]
   daa54:	fa07 f70e 	lsl.w	r7, r7, lr
   daa58:	433a      	orrs	r2, r7
   daa5a:	f843 2b04 	str.w	r2, [r3], #4
   daa5e:	f854 2b04 	ldr.w	r2, [r4], #4
   daa62:	40ca      	lsrs	r2, r1
   daa64:	e7f3      	b.n	daa4e <rshift+0x2e>
   daa66:	601a      	str	r2, [r3, #0]
   daa68:	b152      	cbz	r2, daa80 <rshift+0x60>
   daa6a:	3304      	adds	r3, #4
   daa6c:	e008      	b.n	daa80 <rshift+0x60>
   daa6e:	42b2      	cmp	r2, r6
   daa70:	460b      	mov	r3, r1
   daa72:	d205      	bcs.n	daa80 <rshift+0x60>
   daa74:	f852 3b04 	ldr.w	r3, [r2], #4
   daa78:	f841 3b04 	str.w	r3, [r1], #4
   daa7c:	e7f7      	b.n	daa6e <rshift+0x4e>
   daa7e:	462b      	mov	r3, r5
   daa80:	1b5b      	subs	r3, r3, r5
   daa82:	109b      	asrs	r3, r3, #2
   daa84:	6103      	str	r3, [r0, #16]
   daa86:	b903      	cbnz	r3, daa8a <rshift+0x6a>
   daa88:	6143      	str	r3, [r0, #20]
   daa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000daa8c <__hexdig_fun>:
   daa8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   daa90:	2b09      	cmp	r3, #9
   daa92:	d801      	bhi.n	daa98 <__hexdig_fun+0xc>
   daa94:	3820      	subs	r0, #32
   daa96:	e00a      	b.n	daaae <__hexdig_fun+0x22>
   daa98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   daa9c:	2b05      	cmp	r3, #5
   daa9e:	d801      	bhi.n	daaa4 <__hexdig_fun+0x18>
   daaa0:	3847      	subs	r0, #71	; 0x47
   daaa2:	e004      	b.n	daaae <__hexdig_fun+0x22>
   daaa4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   daaa8:	2b05      	cmp	r3, #5
   daaaa:	d802      	bhi.n	daab2 <__hexdig_fun+0x26>
   daaac:	3827      	subs	r0, #39	; 0x27
   daaae:	b2c0      	uxtb	r0, r0
   daab0:	4770      	bx	lr
   daab2:	2000      	movs	r0, #0
   daab4:	4770      	bx	lr

000daab6 <__gethex>:
   daab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daaba:	b08b      	sub	sp, #44	; 0x2c
   daabc:	468a      	mov	sl, r1
   daabe:	4690      	mov	r8, r2
   daac0:	9306      	str	r3, [sp, #24]
   daac2:	9002      	str	r0, [sp, #8]
   daac4:	f7ff f88a 	bl	d9bdc <_localeconv_r>
   daac8:	6803      	ldr	r3, [r0, #0]
   daaca:	9303      	str	r3, [sp, #12]
   daacc:	4618      	mov	r0, r3
   daace:	f7ff f92a 	bl	d9d26 <strlen>
   daad2:	9b03      	ldr	r3, [sp, #12]
   daad4:	9001      	str	r0, [sp, #4]
   daad6:	4403      	add	r3, r0
   daad8:	f04f 0b00 	mov.w	fp, #0
   daadc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   daae0:	9307      	str	r3, [sp, #28]
   daae2:	f8da 3000 	ldr.w	r3, [sl]
   daae6:	3302      	adds	r3, #2
   daae8:	461f      	mov	r7, r3
   daaea:	f813 0b01 	ldrb.w	r0, [r3], #1
   daaee:	2830      	cmp	r0, #48	; 0x30
   daaf0:	d102      	bne.n	daaf8 <__gethex+0x42>
   daaf2:	f10b 0b01 	add.w	fp, fp, #1
   daaf6:	e7f7      	b.n	daae8 <__gethex+0x32>
   daaf8:	f7ff ffc8 	bl	daa8c <__hexdig_fun>
   daafc:	4604      	mov	r4, r0
   daafe:	b9e0      	cbnz	r0, dab3a <__gethex+0x84>
   dab00:	9a01      	ldr	r2, [sp, #4]
   dab02:	9903      	ldr	r1, [sp, #12]
   dab04:	4638      	mov	r0, r7
   dab06:	f7ff f916 	bl	d9d36 <strncmp>
   dab0a:	2800      	cmp	r0, #0
   dab0c:	d134      	bne.n	dab78 <__gethex+0xc2>
   dab0e:	9b01      	ldr	r3, [sp, #4]
   dab10:	5cf8      	ldrb	r0, [r7, r3]
   dab12:	18fe      	adds	r6, r7, r3
   dab14:	f7ff ffba 	bl	daa8c <__hexdig_fun>
   dab18:	b380      	cbz	r0, dab7c <__gethex+0xc6>
   dab1a:	4633      	mov	r3, r6
   dab1c:	7818      	ldrb	r0, [r3, #0]
   dab1e:	2830      	cmp	r0, #48	; 0x30
   dab20:	461f      	mov	r7, r3
   dab22:	f103 0301 	add.w	r3, r3, #1
   dab26:	d0f9      	beq.n	dab1c <__gethex+0x66>
   dab28:	f7ff ffb0 	bl	daa8c <__hexdig_fun>
   dab2c:	fab0 f580 	clz	r5, r0
   dab30:	096d      	lsrs	r5, r5, #5
   dab32:	4634      	mov	r4, r6
   dab34:	f04f 0b01 	mov.w	fp, #1
   dab38:	e001      	b.n	dab3e <__gethex+0x88>
   dab3a:	2500      	movs	r5, #0
   dab3c:	462c      	mov	r4, r5
   dab3e:	463a      	mov	r2, r7
   dab40:	4616      	mov	r6, r2
   dab42:	3201      	adds	r2, #1
   dab44:	7830      	ldrb	r0, [r6, #0]
   dab46:	f7ff ffa1 	bl	daa8c <__hexdig_fun>
   dab4a:	2800      	cmp	r0, #0
   dab4c:	d1f8      	bne.n	dab40 <__gethex+0x8a>
   dab4e:	9a01      	ldr	r2, [sp, #4]
   dab50:	9903      	ldr	r1, [sp, #12]
   dab52:	4630      	mov	r0, r6
   dab54:	f7ff f8ef 	bl	d9d36 <strncmp>
   dab58:	b950      	cbnz	r0, dab70 <__gethex+0xba>
   dab5a:	b954      	cbnz	r4, dab72 <__gethex+0xbc>
   dab5c:	9b01      	ldr	r3, [sp, #4]
   dab5e:	18f4      	adds	r4, r6, r3
   dab60:	4622      	mov	r2, r4
   dab62:	4616      	mov	r6, r2
   dab64:	3201      	adds	r2, #1
   dab66:	7830      	ldrb	r0, [r6, #0]
   dab68:	f7ff ff90 	bl	daa8c <__hexdig_fun>
   dab6c:	2800      	cmp	r0, #0
   dab6e:	d1f8      	bne.n	dab62 <__gethex+0xac>
   dab70:	b134      	cbz	r4, dab80 <__gethex+0xca>
   dab72:	1ba4      	subs	r4, r4, r6
   dab74:	00a4      	lsls	r4, r4, #2
   dab76:	e003      	b.n	dab80 <__gethex+0xca>
   dab78:	463e      	mov	r6, r7
   dab7a:	e000      	b.n	dab7e <__gethex+0xc8>
   dab7c:	4604      	mov	r4, r0
   dab7e:	2501      	movs	r5, #1
   dab80:	7833      	ldrb	r3, [r6, #0]
   dab82:	2b50      	cmp	r3, #80	; 0x50
   dab84:	d001      	beq.n	dab8a <__gethex+0xd4>
   dab86:	2b70      	cmp	r3, #112	; 0x70
   dab88:	d12a      	bne.n	dabe0 <__gethex+0x12a>
   dab8a:	7873      	ldrb	r3, [r6, #1]
   dab8c:	2b2b      	cmp	r3, #43	; 0x2b
   dab8e:	d008      	beq.n	daba2 <__gethex+0xec>
   dab90:	2b2d      	cmp	r3, #45	; 0x2d
   dab92:	d003      	beq.n	dab9c <__gethex+0xe6>
   dab94:	1c71      	adds	r1, r6, #1
   dab96:	f04f 0900 	mov.w	r9, #0
   dab9a:	e005      	b.n	daba8 <__gethex+0xf2>
   dab9c:	f04f 0901 	mov.w	r9, #1
   daba0:	e001      	b.n	daba6 <__gethex+0xf0>
   daba2:	f04f 0900 	mov.w	r9, #0
   daba6:	1cb1      	adds	r1, r6, #2
   daba8:	7808      	ldrb	r0, [r1, #0]
   dabaa:	f7ff ff6f 	bl	daa8c <__hexdig_fun>
   dabae:	1e43      	subs	r3, r0, #1
   dabb0:	b2db      	uxtb	r3, r3
   dabb2:	2b18      	cmp	r3, #24
   dabb4:	d814      	bhi.n	dabe0 <__gethex+0x12a>
   dabb6:	f1a0 0210 	sub.w	r2, r0, #16
   dabba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dabbe:	f7ff ff65 	bl	daa8c <__hexdig_fun>
   dabc2:	1e43      	subs	r3, r0, #1
   dabc4:	b2db      	uxtb	r3, r3
   dabc6:	2b18      	cmp	r3, #24
   dabc8:	d804      	bhi.n	dabd4 <__gethex+0x11e>
   dabca:	230a      	movs	r3, #10
   dabcc:	fb03 0202 	mla	r2, r3, r2, r0
   dabd0:	3a10      	subs	r2, #16
   dabd2:	e7f2      	b.n	dabba <__gethex+0x104>
   dabd4:	f1b9 0f00 	cmp.w	r9, #0
   dabd8:	d000      	beq.n	dabdc <__gethex+0x126>
   dabda:	4252      	negs	r2, r2
   dabdc:	4414      	add	r4, r2
   dabde:	e000      	b.n	dabe2 <__gethex+0x12c>
   dabe0:	4631      	mov	r1, r6
   dabe2:	f8ca 1000 	str.w	r1, [sl]
   dabe6:	b12d      	cbz	r5, dabf4 <__gethex+0x13e>
   dabe8:	f1bb 0f00 	cmp.w	fp, #0
   dabec:	bf14      	ite	ne
   dabee:	2000      	movne	r0, #0
   dabf0:	2006      	moveq	r0, #6
   dabf2:	e17c      	b.n	daeee <__gethex+0x438>
   dabf4:	1bf3      	subs	r3, r6, r7
   dabf6:	3b01      	subs	r3, #1
   dabf8:	4629      	mov	r1, r5
   dabfa:	2b07      	cmp	r3, #7
   dabfc:	dd02      	ble.n	dac04 <__gethex+0x14e>
   dabfe:	3101      	adds	r1, #1
   dac00:	105b      	asrs	r3, r3, #1
   dac02:	e7fa      	b.n	dabfa <__gethex+0x144>
   dac04:	9802      	ldr	r0, [sp, #8]
   dac06:	f000 fa28 	bl	db05a <_Balloc>
   dac0a:	9b01      	ldr	r3, [sp, #4]
   dac0c:	f100 0a14 	add.w	sl, r0, #20
   dac10:	f04f 0900 	mov.w	r9, #0
   dac14:	f1c3 0301 	rsb	r3, r3, #1
   dac18:	4605      	mov	r5, r0
   dac1a:	f8cd a010 	str.w	sl, [sp, #16]
   dac1e:	46cb      	mov	fp, r9
   dac20:	9308      	str	r3, [sp, #32]
   dac22:	42b7      	cmp	r7, r6
   dac24:	d22f      	bcs.n	dac86 <__gethex+0x1d0>
   dac26:	1e73      	subs	r3, r6, #1
   dac28:	9305      	str	r3, [sp, #20]
   dac2a:	9a07      	ldr	r2, [sp, #28]
   dac2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dac30:	4293      	cmp	r3, r2
   dac32:	d00b      	beq.n	dac4c <__gethex+0x196>
   dac34:	f1bb 0f20 	cmp.w	fp, #32
   dac38:	d116      	bne.n	dac68 <__gethex+0x1b2>
   dac3a:	9b04      	ldr	r3, [sp, #16]
   dac3c:	f8c3 9000 	str.w	r9, [r3]
   dac40:	3304      	adds	r3, #4
   dac42:	f04f 0900 	mov.w	r9, #0
   dac46:	9304      	str	r3, [sp, #16]
   dac48:	46cb      	mov	fp, r9
   dac4a:	e00d      	b.n	dac68 <__gethex+0x1b2>
   dac4c:	9b05      	ldr	r3, [sp, #20]
   dac4e:	9a08      	ldr	r2, [sp, #32]
   dac50:	4413      	add	r3, r2
   dac52:	429f      	cmp	r7, r3
   dac54:	d8ee      	bhi.n	dac34 <__gethex+0x17e>
   dac56:	4618      	mov	r0, r3
   dac58:	9a01      	ldr	r2, [sp, #4]
   dac5a:	9903      	ldr	r1, [sp, #12]
   dac5c:	9309      	str	r3, [sp, #36]	; 0x24
   dac5e:	f7ff f86a 	bl	d9d36 <strncmp>
   dac62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dac64:	b168      	cbz	r0, dac82 <__gethex+0x1cc>
   dac66:	e7e5      	b.n	dac34 <__gethex+0x17e>
   dac68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dac6c:	f7ff ff0e 	bl	daa8c <__hexdig_fun>
   dac70:	f000 000f 	and.w	r0, r0, #15
   dac74:	fa00 f00b 	lsl.w	r0, r0, fp
   dac78:	9b05      	ldr	r3, [sp, #20]
   dac7a:	ea49 0900 	orr.w	r9, r9, r0
   dac7e:	f10b 0b04 	add.w	fp, fp, #4
   dac82:	461e      	mov	r6, r3
   dac84:	e7cd      	b.n	dac22 <__gethex+0x16c>
   dac86:	9804      	ldr	r0, [sp, #16]
   dac88:	f840 9b04 	str.w	r9, [r0], #4
   dac8c:	ebca 0000 	rsb	r0, sl, r0
   dac90:	1080      	asrs	r0, r0, #2
   dac92:	6128      	str	r0, [r5, #16]
   dac94:	0147      	lsls	r7, r0, #5
   dac96:	4648      	mov	r0, r9
   dac98:	f000 faa4 	bl	db1e4 <__hi0bits>
   dac9c:	f8d8 6000 	ldr.w	r6, [r8]
   daca0:	1a38      	subs	r0, r7, r0
   daca2:	42b0      	cmp	r0, r6
   daca4:	dd26      	ble.n	dacf4 <__gethex+0x23e>
   daca6:	1b87      	subs	r7, r0, r6
   daca8:	4639      	mov	r1, r7
   dacaa:	4628      	mov	r0, r5
   dacac:	f000 fda3 	bl	db7f6 <__any_on>
   dacb0:	b1c8      	cbz	r0, dace6 <__gethex+0x230>
   dacb2:	1e7b      	subs	r3, r7, #1
   dacb4:	1159      	asrs	r1, r3, #5
   dacb6:	f003 021f 	and.w	r2, r3, #31
   dacba:	f04f 0901 	mov.w	r9, #1
   dacbe:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dacc2:	fa09 f202 	lsl.w	r2, r9, r2
   dacc6:	420a      	tst	r2, r1
   dacc8:	d00e      	beq.n	dace8 <__gethex+0x232>
   dacca:	454b      	cmp	r3, r9
   daccc:	dc02      	bgt.n	dacd4 <__gethex+0x21e>
   dacce:	f04f 0902 	mov.w	r9, #2
   dacd2:	e009      	b.n	dace8 <__gethex+0x232>
   dacd4:	1eb9      	subs	r1, r7, #2
   dacd6:	4628      	mov	r0, r5
   dacd8:	f000 fd8d 	bl	db7f6 <__any_on>
   dacdc:	2800      	cmp	r0, #0
   dacde:	d0f6      	beq.n	dacce <__gethex+0x218>
   dace0:	f04f 0903 	mov.w	r9, #3
   dace4:	e000      	b.n	dace8 <__gethex+0x232>
   dace6:	4681      	mov	r9, r0
   dace8:	4639      	mov	r1, r7
   dacea:	4628      	mov	r0, r5
   dacec:	f7ff fe98 	bl	daa20 <rshift>
   dacf0:	443c      	add	r4, r7
   dacf2:	e00c      	b.n	dad0e <__gethex+0x258>
   dacf4:	da09      	bge.n	dad0a <__gethex+0x254>
   dacf6:	1a37      	subs	r7, r6, r0
   dacf8:	4629      	mov	r1, r5
   dacfa:	463a      	mov	r2, r7
   dacfc:	9802      	ldr	r0, [sp, #8]
   dacfe:	f000 fba7 	bl	db450 <__lshift>
   dad02:	1be4      	subs	r4, r4, r7
   dad04:	4605      	mov	r5, r0
   dad06:	f100 0a14 	add.w	sl, r0, #20
   dad0a:	f04f 0900 	mov.w	r9, #0
   dad0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dad12:	429c      	cmp	r4, r3
   dad14:	dd08      	ble.n	dad28 <__gethex+0x272>
   dad16:	9802      	ldr	r0, [sp, #8]
   dad18:	4629      	mov	r1, r5
   dad1a:	f000 f9d3 	bl	db0c4 <_Bfree>
   dad1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dad20:	2300      	movs	r3, #0
   dad22:	6013      	str	r3, [r2, #0]
   dad24:	20a3      	movs	r0, #163	; 0xa3
   dad26:	e0e2      	b.n	daeee <__gethex+0x438>
   dad28:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dad2c:	4284      	cmp	r4, r0
   dad2e:	da53      	bge.n	dadd8 <__gethex+0x322>
   dad30:	1b04      	subs	r4, r0, r4
   dad32:	42a6      	cmp	r6, r4
   dad34:	dc2e      	bgt.n	dad94 <__gethex+0x2de>
   dad36:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dad3a:	2b02      	cmp	r3, #2
   dad3c:	d01a      	beq.n	dad74 <__gethex+0x2be>
   dad3e:	2b03      	cmp	r3, #3
   dad40:	d01c      	beq.n	dad7c <__gethex+0x2c6>
   dad42:	2b01      	cmp	r3, #1
   dad44:	d11d      	bne.n	dad82 <__gethex+0x2cc>
   dad46:	42a6      	cmp	r6, r4
   dad48:	d11b      	bne.n	dad82 <__gethex+0x2cc>
   dad4a:	2e01      	cmp	r6, #1
   dad4c:	dc0b      	bgt.n	dad66 <__gethex+0x2b0>
   dad4e:	9a06      	ldr	r2, [sp, #24]
   dad50:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dad54:	6013      	str	r3, [r2, #0]
   dad56:	2301      	movs	r3, #1
   dad58:	612b      	str	r3, [r5, #16]
   dad5a:	f8ca 3000 	str.w	r3, [sl]
   dad5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dad60:	2062      	movs	r0, #98	; 0x62
   dad62:	601d      	str	r5, [r3, #0]
   dad64:	e0c3      	b.n	daeee <__gethex+0x438>
   dad66:	1e71      	subs	r1, r6, #1
   dad68:	4628      	mov	r0, r5
   dad6a:	f000 fd44 	bl	db7f6 <__any_on>
   dad6e:	2800      	cmp	r0, #0
   dad70:	d1ed      	bne.n	dad4e <__gethex+0x298>
   dad72:	e006      	b.n	dad82 <__gethex+0x2cc>
   dad74:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dad76:	2b00      	cmp	r3, #0
   dad78:	d0e9      	beq.n	dad4e <__gethex+0x298>
   dad7a:	e002      	b.n	dad82 <__gethex+0x2cc>
   dad7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dad7e:	2b00      	cmp	r3, #0
   dad80:	d1e5      	bne.n	dad4e <__gethex+0x298>
   dad82:	9802      	ldr	r0, [sp, #8]
   dad84:	4629      	mov	r1, r5
   dad86:	f000 f99d 	bl	db0c4 <_Bfree>
   dad8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dad8c:	2300      	movs	r3, #0
   dad8e:	6013      	str	r3, [r2, #0]
   dad90:	2050      	movs	r0, #80	; 0x50
   dad92:	e0ac      	b.n	daeee <__gethex+0x438>
   dad94:	1e67      	subs	r7, r4, #1
   dad96:	f1b9 0f00 	cmp.w	r9, #0
   dad9a:	d106      	bne.n	dadaa <__gethex+0x2f4>
   dad9c:	b13f      	cbz	r7, dadae <__gethex+0x2f8>
   dad9e:	4639      	mov	r1, r7
   dada0:	4628      	mov	r0, r5
   dada2:	f000 fd28 	bl	db7f6 <__any_on>
   dada6:	4681      	mov	r9, r0
   dada8:	e001      	b.n	dadae <__gethex+0x2f8>
   dadaa:	f04f 0901 	mov.w	r9, #1
   dadae:	117a      	asrs	r2, r7, #5
   dadb0:	2301      	movs	r3, #1
   dadb2:	f007 071f 	and.w	r7, r7, #31
   dadb6:	fa03 f707 	lsl.w	r7, r3, r7
   dadba:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dadbe:	4621      	mov	r1, r4
   dadc0:	421f      	tst	r7, r3
   dadc2:	4628      	mov	r0, r5
   dadc4:	bf18      	it	ne
   dadc6:	f049 0902 	orrne.w	r9, r9, #2
   dadca:	1b36      	subs	r6, r6, r4
   dadcc:	f7ff fe28 	bl	daa20 <rshift>
   dadd0:	2702      	movs	r7, #2
   dadd2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dadd6:	e000      	b.n	dadda <__gethex+0x324>
   dadd8:	2701      	movs	r7, #1
   dadda:	f1b9 0f00 	cmp.w	r9, #0
   dadde:	f000 8081 	beq.w	daee4 <__gethex+0x42e>
   dade2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dade6:	2b02      	cmp	r3, #2
   dade8:	d00e      	beq.n	dae08 <__gethex+0x352>
   dadea:	2b03      	cmp	r3, #3
   dadec:	d010      	beq.n	dae10 <__gethex+0x35a>
   dadee:	2b01      	cmp	r3, #1
   dadf0:	d176      	bne.n	daee0 <__gethex+0x42a>
   dadf2:	f019 0f02 	tst.w	r9, #2
   dadf6:	d073      	beq.n	daee0 <__gethex+0x42a>
   dadf8:	f8da 0000 	ldr.w	r0, [sl]
   dadfc:	ea49 0900 	orr.w	r9, r9, r0
   dae00:	f019 0f01 	tst.w	r9, #1
   dae04:	d107      	bne.n	dae16 <__gethex+0x360>
   dae06:	e06b      	b.n	daee0 <__gethex+0x42a>
   dae08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dae0a:	f1c3 0301 	rsb	r3, r3, #1
   dae0e:	9315      	str	r3, [sp, #84]	; 0x54
   dae10:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dae12:	2b00      	cmp	r3, #0
   dae14:	d064      	beq.n	daee0 <__gethex+0x42a>
   dae16:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dae1a:	f105 0314 	add.w	r3, r5, #20
   dae1e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dae22:	eb03 0109 	add.w	r1, r3, r9
   dae26:	2000      	movs	r0, #0
   dae28:	681a      	ldr	r2, [r3, #0]
   dae2a:	f1b2 3fff 	cmp.w	r2, #4294967295
   dae2e:	d002      	beq.n	dae36 <__gethex+0x380>
   dae30:	3201      	adds	r2, #1
   dae32:	601a      	str	r2, [r3, #0]
   dae34:	e020      	b.n	dae78 <__gethex+0x3c2>
   dae36:	f843 0b04 	str.w	r0, [r3], #4
   dae3a:	4299      	cmp	r1, r3
   dae3c:	d8f4      	bhi.n	dae28 <__gethex+0x372>
   dae3e:	68ab      	ldr	r3, [r5, #8]
   dae40:	459a      	cmp	sl, r3
   dae42:	db12      	blt.n	dae6a <__gethex+0x3b4>
   dae44:	6869      	ldr	r1, [r5, #4]
   dae46:	9802      	ldr	r0, [sp, #8]
   dae48:	3101      	adds	r1, #1
   dae4a:	f000 f906 	bl	db05a <_Balloc>
   dae4e:	692a      	ldr	r2, [r5, #16]
   dae50:	3202      	adds	r2, #2
   dae52:	f105 010c 	add.w	r1, r5, #12
   dae56:	4683      	mov	fp, r0
   dae58:	0092      	lsls	r2, r2, #2
   dae5a:	300c      	adds	r0, #12
   dae5c:	f7fe fed1 	bl	d9c02 <memcpy>
   dae60:	4629      	mov	r1, r5
   dae62:	9802      	ldr	r0, [sp, #8]
   dae64:	f000 f92e 	bl	db0c4 <_Bfree>
   dae68:	465d      	mov	r5, fp
   dae6a:	692b      	ldr	r3, [r5, #16]
   dae6c:	1c5a      	adds	r2, r3, #1
   dae6e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dae72:	612a      	str	r2, [r5, #16]
   dae74:	2201      	movs	r2, #1
   dae76:	615a      	str	r2, [r3, #20]
   dae78:	2f02      	cmp	r7, #2
   dae7a:	f105 0214 	add.w	r2, r5, #20
   dae7e:	d111      	bne.n	daea4 <__gethex+0x3ee>
   dae80:	f8d8 3000 	ldr.w	r3, [r8]
   dae84:	3b01      	subs	r3, #1
   dae86:	429e      	cmp	r6, r3
   dae88:	d127      	bne.n	daeda <__gethex+0x424>
   dae8a:	1171      	asrs	r1, r6, #5
   dae8c:	2301      	movs	r3, #1
   dae8e:	f006 061f 	and.w	r6, r6, #31
   dae92:	fa03 f606 	lsl.w	r6, r3, r6
   dae96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dae9a:	421e      	tst	r6, r3
   dae9c:	bf0c      	ite	eq
   dae9e:	2702      	moveq	r7, #2
   daea0:	2701      	movne	r7, #1
   daea2:	e01a      	b.n	daeda <__gethex+0x424>
   daea4:	692b      	ldr	r3, [r5, #16]
   daea6:	459a      	cmp	sl, r3
   daea8:	da0a      	bge.n	daec0 <__gethex+0x40a>
   daeaa:	2101      	movs	r1, #1
   daeac:	4628      	mov	r0, r5
   daeae:	f7ff fdb7 	bl	daa20 <rshift>
   daeb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   daeb6:	3401      	adds	r4, #1
   daeb8:	429c      	cmp	r4, r3
   daeba:	f73f af2c 	bgt.w	dad16 <__gethex+0x260>
   daebe:	e00b      	b.n	daed8 <__gethex+0x422>
   daec0:	f016 061f 	ands.w	r6, r6, #31
   daec4:	d008      	beq.n	daed8 <__gethex+0x422>
   daec6:	4491      	add	r9, r2
   daec8:	f1c6 0620 	rsb	r6, r6, #32
   daecc:	f859 0c04 	ldr.w	r0, [r9, #-4]
   daed0:	f000 f988 	bl	db1e4 <__hi0bits>
   daed4:	42b0      	cmp	r0, r6
   daed6:	dbe8      	blt.n	daeaa <__gethex+0x3f4>
   daed8:	2701      	movs	r7, #1
   daeda:	f047 0720 	orr.w	r7, r7, #32
   daede:	e001      	b.n	daee4 <__gethex+0x42e>
   daee0:	f047 0710 	orr.w	r7, r7, #16
   daee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daee6:	601d      	str	r5, [r3, #0]
   daee8:	9b06      	ldr	r3, [sp, #24]
   daeea:	4638      	mov	r0, r7
   daeec:	601c      	str	r4, [r3, #0]
   daeee:	b00b      	add	sp, #44	; 0x2c
   daef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daef4 <L_shift>:
   daef4:	f1c2 0208 	rsb	r2, r2, #8
   daef8:	0092      	lsls	r2, r2, #2
   daefa:	b570      	push	{r4, r5, r6, lr}
   daefc:	f1c2 0620 	rsb	r6, r2, #32
   daf00:	6843      	ldr	r3, [r0, #4]
   daf02:	6805      	ldr	r5, [r0, #0]
   daf04:	fa03 f406 	lsl.w	r4, r3, r6
   daf08:	432c      	orrs	r4, r5
   daf0a:	40d3      	lsrs	r3, r2
   daf0c:	6004      	str	r4, [r0, #0]
   daf0e:	f840 3f04 	str.w	r3, [r0, #4]!
   daf12:	4288      	cmp	r0, r1
   daf14:	d3f4      	bcc.n	daf00 <L_shift+0xc>
   daf16:	bd70      	pop	{r4, r5, r6, pc}

000daf18 <__match>:
   daf18:	b530      	push	{r4, r5, lr}
   daf1a:	6803      	ldr	r3, [r0, #0]
   daf1c:	f811 4b01 	ldrb.w	r4, [r1], #1
   daf20:	3301      	adds	r3, #1
   daf22:	b14c      	cbz	r4, daf38 <__match+0x20>
   daf24:	781a      	ldrb	r2, [r3, #0]
   daf26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   daf2a:	2d19      	cmp	r5, #25
   daf2c:	bf98      	it	ls
   daf2e:	3220      	addls	r2, #32
   daf30:	42a2      	cmp	r2, r4
   daf32:	d0f3      	beq.n	daf1c <__match+0x4>
   daf34:	2000      	movs	r0, #0
   daf36:	bd30      	pop	{r4, r5, pc}
   daf38:	6003      	str	r3, [r0, #0]
   daf3a:	2001      	movs	r0, #1
   daf3c:	bd30      	pop	{r4, r5, pc}

000daf3e <__hexnan>:
   daf3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daf42:	680b      	ldr	r3, [r1, #0]
   daf44:	f8d0 b000 	ldr.w	fp, [r0]
   daf48:	115e      	asrs	r6, r3, #5
   daf4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   daf4e:	f013 031f 	ands.w	r3, r3, #31
   daf52:	b085      	sub	sp, #20
   daf54:	bf18      	it	ne
   daf56:	3604      	addne	r6, #4
   daf58:	1f35      	subs	r5, r6, #4
   daf5a:	4617      	mov	r7, r2
   daf5c:	2200      	movs	r2, #0
   daf5e:	4682      	mov	sl, r0
   daf60:	9301      	str	r3, [sp, #4]
   daf62:	f846 2c04 	str.w	r2, [r6, #-4]
   daf66:	46a8      	mov	r8, r5
   daf68:	462c      	mov	r4, r5
   daf6a:	9200      	str	r2, [sp, #0]
   daf6c:	4691      	mov	r9, r2
   daf6e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   daf72:	2900      	cmp	r1, #0
   daf74:	d03c      	beq.n	daff0 <__hexnan+0xb2>
   daf76:	4608      	mov	r0, r1
   daf78:	9203      	str	r2, [sp, #12]
   daf7a:	9102      	str	r1, [sp, #8]
   daf7c:	f7ff fd86 	bl	daa8c <__hexdig_fun>
   daf80:	9a03      	ldr	r2, [sp, #12]
   daf82:	bb00      	cbnz	r0, dafc6 <__hexnan+0x88>
   daf84:	9902      	ldr	r1, [sp, #8]
   daf86:	2920      	cmp	r1, #32
   daf88:	d816      	bhi.n	dafb8 <__hexnan+0x7a>
   daf8a:	9b00      	ldr	r3, [sp, #0]
   daf8c:	4599      	cmp	r9, r3
   daf8e:	ddee      	ble.n	daf6e <__hexnan+0x30>
   daf90:	4544      	cmp	r4, r8
   daf92:	d205      	bcs.n	dafa0 <__hexnan+0x62>
   daf94:	2a07      	cmp	r2, #7
   daf96:	dc03      	bgt.n	dafa0 <__hexnan+0x62>
   daf98:	4641      	mov	r1, r8
   daf9a:	4620      	mov	r0, r4
   daf9c:	f7ff ffaa 	bl	daef4 <L_shift>
   dafa0:	42bc      	cmp	r4, r7
   dafa2:	d923      	bls.n	dafec <__hexnan+0xae>
   dafa4:	2300      	movs	r3, #0
   dafa6:	f1a4 0804 	sub.w	r8, r4, #4
   dafaa:	f844 3c04 	str.w	r3, [r4, #-4]
   dafae:	f8cd 9000 	str.w	r9, [sp]
   dafb2:	4644      	mov	r4, r8
   dafb4:	461a      	mov	r2, r3
   dafb6:	e7da      	b.n	daf6e <__hexnan+0x30>
   dafb8:	2929      	cmp	r1, #41	; 0x29
   dafba:	d148      	bne.n	db04e <__hexnan+0x110>
   dafbc:	f10b 0301 	add.w	r3, fp, #1
   dafc0:	f8ca 3000 	str.w	r3, [sl]
   dafc4:	e014      	b.n	daff0 <__hexnan+0xb2>
   dafc6:	3201      	adds	r2, #1
   dafc8:	2a08      	cmp	r2, #8
   dafca:	f109 0901 	add.w	r9, r9, #1
   dafce:	dd06      	ble.n	dafde <__hexnan+0xa0>
   dafd0:	42bc      	cmp	r4, r7
   dafd2:	d9cc      	bls.n	daf6e <__hexnan+0x30>
   dafd4:	2300      	movs	r3, #0
   dafd6:	f844 3c04 	str.w	r3, [r4, #-4]
   dafda:	2201      	movs	r2, #1
   dafdc:	3c04      	subs	r4, #4
   dafde:	6821      	ldr	r1, [r4, #0]
   dafe0:	f000 000f 	and.w	r0, r0, #15
   dafe4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dafe8:	6020      	str	r0, [r4, #0]
   dafea:	e7c0      	b.n	daf6e <__hexnan+0x30>
   dafec:	2208      	movs	r2, #8
   dafee:	e7be      	b.n	daf6e <__hexnan+0x30>
   daff0:	f1b9 0f00 	cmp.w	r9, #0
   daff4:	d02b      	beq.n	db04e <__hexnan+0x110>
   daff6:	4544      	cmp	r4, r8
   daff8:	d205      	bcs.n	db006 <__hexnan+0xc8>
   daffa:	2a07      	cmp	r2, #7
   daffc:	dc03      	bgt.n	db006 <__hexnan+0xc8>
   daffe:	4641      	mov	r1, r8
   db000:	4620      	mov	r0, r4
   db002:	f7ff ff77 	bl	daef4 <L_shift>
   db006:	42bc      	cmp	r4, r7
   db008:	d90c      	bls.n	db024 <__hexnan+0xe6>
   db00a:	463b      	mov	r3, r7
   db00c:	f854 2b04 	ldr.w	r2, [r4], #4
   db010:	f843 2b04 	str.w	r2, [r3], #4
   db014:	42a5      	cmp	r5, r4
   db016:	d2f9      	bcs.n	db00c <__hexnan+0xce>
   db018:	2200      	movs	r2, #0
   db01a:	f843 2b04 	str.w	r2, [r3], #4
   db01e:	429d      	cmp	r5, r3
   db020:	d2fb      	bcs.n	db01a <__hexnan+0xdc>
   db022:	e00b      	b.n	db03c <__hexnan+0xfe>
   db024:	9b01      	ldr	r3, [sp, #4]
   db026:	b14b      	cbz	r3, db03c <__hexnan+0xfe>
   db028:	f1c3 0220 	rsb	r2, r3, #32
   db02c:	f04f 33ff 	mov.w	r3, #4294967295
   db030:	40d3      	lsrs	r3, r2
   db032:	f856 2c04 	ldr.w	r2, [r6, #-4]
   db036:	4013      	ands	r3, r2
   db038:	f846 3c04 	str.w	r3, [r6, #-4]
   db03c:	682b      	ldr	r3, [r5, #0]
   db03e:	b943      	cbnz	r3, db052 <__hexnan+0x114>
   db040:	42bd      	cmp	r5, r7
   db042:	d102      	bne.n	db04a <__hexnan+0x10c>
   db044:	2301      	movs	r3, #1
   db046:	602b      	str	r3, [r5, #0]
   db048:	e003      	b.n	db052 <__hexnan+0x114>
   db04a:	3d04      	subs	r5, #4
   db04c:	e7f6      	b.n	db03c <__hexnan+0xfe>
   db04e:	2004      	movs	r0, #4
   db050:	e000      	b.n	db054 <__hexnan+0x116>
   db052:	2005      	movs	r0, #5
   db054:	b005      	add	sp, #20
   db056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db05a <_Balloc>:
   db05a:	b570      	push	{r4, r5, r6, lr}
   db05c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   db05e:	4604      	mov	r4, r0
   db060:	460e      	mov	r6, r1
   db062:	b93d      	cbnz	r5, db074 <_Balloc+0x1a>
   db064:	2010      	movs	r0, #16
   db066:	f7fb f8bb 	bl	d61e0 <malloc>
   db06a:	6260      	str	r0, [r4, #36]	; 0x24
   db06c:	6045      	str	r5, [r0, #4]
   db06e:	6085      	str	r5, [r0, #8]
   db070:	6005      	str	r5, [r0, #0]
   db072:	60c5      	str	r5, [r0, #12]
   db074:	6a65      	ldr	r5, [r4, #36]	; 0x24
   db076:	68eb      	ldr	r3, [r5, #12]
   db078:	b143      	cbz	r3, db08c <_Balloc+0x32>
   db07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db07c:	68db      	ldr	r3, [r3, #12]
   db07e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   db082:	b178      	cbz	r0, db0a4 <_Balloc+0x4a>
   db084:	6802      	ldr	r2, [r0, #0]
   db086:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   db08a:	e017      	b.n	db0bc <_Balloc+0x62>
   db08c:	2221      	movs	r2, #33	; 0x21
   db08e:	2104      	movs	r1, #4
   db090:	4620      	mov	r0, r4
   db092:	f000 fbd2 	bl	db83a <_calloc_r>
   db096:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db098:	60e8      	str	r0, [r5, #12]
   db09a:	68db      	ldr	r3, [r3, #12]
   db09c:	2b00      	cmp	r3, #0
   db09e:	d1ec      	bne.n	db07a <_Balloc+0x20>
   db0a0:	2000      	movs	r0, #0
   db0a2:	bd70      	pop	{r4, r5, r6, pc}
   db0a4:	2101      	movs	r1, #1
   db0a6:	fa01 f506 	lsl.w	r5, r1, r6
   db0aa:	1d6a      	adds	r2, r5, #5
   db0ac:	0092      	lsls	r2, r2, #2
   db0ae:	4620      	mov	r0, r4
   db0b0:	f000 fbc3 	bl	db83a <_calloc_r>
   db0b4:	2800      	cmp	r0, #0
   db0b6:	d0f3      	beq.n	db0a0 <_Balloc+0x46>
   db0b8:	6046      	str	r6, [r0, #4]
   db0ba:	6085      	str	r5, [r0, #8]
   db0bc:	2300      	movs	r3, #0
   db0be:	6103      	str	r3, [r0, #16]
   db0c0:	60c3      	str	r3, [r0, #12]
   db0c2:	bd70      	pop	{r4, r5, r6, pc}

000db0c4 <_Bfree>:
   db0c4:	b570      	push	{r4, r5, r6, lr}
   db0c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   db0c8:	4606      	mov	r6, r0
   db0ca:	460d      	mov	r5, r1
   db0cc:	b93c      	cbnz	r4, db0de <_Bfree+0x1a>
   db0ce:	2010      	movs	r0, #16
   db0d0:	f7fb f886 	bl	d61e0 <malloc>
   db0d4:	6270      	str	r0, [r6, #36]	; 0x24
   db0d6:	6044      	str	r4, [r0, #4]
   db0d8:	6084      	str	r4, [r0, #8]
   db0da:	6004      	str	r4, [r0, #0]
   db0dc:	60c4      	str	r4, [r0, #12]
   db0de:	b13d      	cbz	r5, db0f0 <_Bfree+0x2c>
   db0e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   db0e2:	686a      	ldr	r2, [r5, #4]
   db0e4:	68db      	ldr	r3, [r3, #12]
   db0e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   db0ea:	6029      	str	r1, [r5, #0]
   db0ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   db0f0:	bd70      	pop	{r4, r5, r6, pc}

000db0f2 <__multadd>:
   db0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db0f6:	690d      	ldr	r5, [r1, #16]
   db0f8:	461f      	mov	r7, r3
   db0fa:	4606      	mov	r6, r0
   db0fc:	460c      	mov	r4, r1
   db0fe:	f101 0e14 	add.w	lr, r1, #20
   db102:	2300      	movs	r3, #0
   db104:	f8de 0000 	ldr.w	r0, [lr]
   db108:	b281      	uxth	r1, r0
   db10a:	fb02 7101 	mla	r1, r2, r1, r7
   db10e:	0c0f      	lsrs	r7, r1, #16
   db110:	0c00      	lsrs	r0, r0, #16
   db112:	fb02 7000 	mla	r0, r2, r0, r7
   db116:	b289      	uxth	r1, r1
   db118:	3301      	adds	r3, #1
   db11a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   db11e:	429d      	cmp	r5, r3
   db120:	ea4f 4710 	mov.w	r7, r0, lsr #16
   db124:	f84e 1b04 	str.w	r1, [lr], #4
   db128:	dcec      	bgt.n	db104 <__multadd+0x12>
   db12a:	b1d7      	cbz	r7, db162 <__multadd+0x70>
   db12c:	68a3      	ldr	r3, [r4, #8]
   db12e:	429d      	cmp	r5, r3
   db130:	db12      	blt.n	db158 <__multadd+0x66>
   db132:	6861      	ldr	r1, [r4, #4]
   db134:	4630      	mov	r0, r6
   db136:	3101      	adds	r1, #1
   db138:	f7ff ff8f 	bl	db05a <_Balloc>
   db13c:	6922      	ldr	r2, [r4, #16]
   db13e:	3202      	adds	r2, #2
   db140:	f104 010c 	add.w	r1, r4, #12
   db144:	4680      	mov	r8, r0
   db146:	0092      	lsls	r2, r2, #2
   db148:	300c      	adds	r0, #12
   db14a:	f7fe fd5a 	bl	d9c02 <memcpy>
   db14e:	4621      	mov	r1, r4
   db150:	4630      	mov	r0, r6
   db152:	f7ff ffb7 	bl	db0c4 <_Bfree>
   db156:	4644      	mov	r4, r8
   db158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   db15c:	3501      	adds	r5, #1
   db15e:	615f      	str	r7, [r3, #20]
   db160:	6125      	str	r5, [r4, #16]
   db162:	4620      	mov	r0, r4
   db164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db168 <__s2b>:
   db168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db16c:	460c      	mov	r4, r1
   db16e:	4615      	mov	r5, r2
   db170:	461f      	mov	r7, r3
   db172:	2209      	movs	r2, #9
   db174:	3308      	adds	r3, #8
   db176:	4606      	mov	r6, r0
   db178:	fb93 f3f2 	sdiv	r3, r3, r2
   db17c:	2100      	movs	r1, #0
   db17e:	2201      	movs	r2, #1
   db180:	429a      	cmp	r2, r3
   db182:	da02      	bge.n	db18a <__s2b+0x22>
   db184:	0052      	lsls	r2, r2, #1
   db186:	3101      	adds	r1, #1
   db188:	e7fa      	b.n	db180 <__s2b+0x18>
   db18a:	4630      	mov	r0, r6
   db18c:	f7ff ff65 	bl	db05a <_Balloc>
   db190:	9b08      	ldr	r3, [sp, #32]
   db192:	6143      	str	r3, [r0, #20]
   db194:	2d09      	cmp	r5, #9
   db196:	f04f 0301 	mov.w	r3, #1
   db19a:	6103      	str	r3, [r0, #16]
   db19c:	dd11      	ble.n	db1c2 <__s2b+0x5a>
   db19e:	f104 0809 	add.w	r8, r4, #9
   db1a2:	46c1      	mov	r9, r8
   db1a4:	442c      	add	r4, r5
   db1a6:	f819 3b01 	ldrb.w	r3, [r9], #1
   db1aa:	4601      	mov	r1, r0
   db1ac:	3b30      	subs	r3, #48	; 0x30
   db1ae:	220a      	movs	r2, #10
   db1b0:	4630      	mov	r0, r6
   db1b2:	f7ff ff9e 	bl	db0f2 <__multadd>
   db1b6:	45a1      	cmp	r9, r4
   db1b8:	d1f5      	bne.n	db1a6 <__s2b+0x3e>
   db1ba:	eb08 0405 	add.w	r4, r8, r5
   db1be:	3c08      	subs	r4, #8
   db1c0:	e001      	b.n	db1c6 <__s2b+0x5e>
   db1c2:	340a      	adds	r4, #10
   db1c4:	2509      	movs	r5, #9
   db1c6:	1b2d      	subs	r5, r5, r4
   db1c8:	1963      	adds	r3, r4, r5
   db1ca:	429f      	cmp	r7, r3
   db1cc:	dd08      	ble.n	db1e0 <__s2b+0x78>
   db1ce:	f814 3b01 	ldrb.w	r3, [r4], #1
   db1d2:	4601      	mov	r1, r0
   db1d4:	3b30      	subs	r3, #48	; 0x30
   db1d6:	220a      	movs	r2, #10
   db1d8:	4630      	mov	r0, r6
   db1da:	f7ff ff8a 	bl	db0f2 <__multadd>
   db1de:	e7f3      	b.n	db1c8 <__s2b+0x60>
   db1e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db1e4 <__hi0bits>:
   db1e4:	0c03      	lsrs	r3, r0, #16
   db1e6:	041b      	lsls	r3, r3, #16
   db1e8:	b913      	cbnz	r3, db1f0 <__hi0bits+0xc>
   db1ea:	0400      	lsls	r0, r0, #16
   db1ec:	2310      	movs	r3, #16
   db1ee:	e000      	b.n	db1f2 <__hi0bits+0xe>
   db1f0:	2300      	movs	r3, #0
   db1f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db1f6:	bf04      	itt	eq
   db1f8:	0200      	lsleq	r0, r0, #8
   db1fa:	3308      	addeq	r3, #8
   db1fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db200:	bf04      	itt	eq
   db202:	0100      	lsleq	r0, r0, #4
   db204:	3304      	addeq	r3, #4
   db206:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db20a:	bf04      	itt	eq
   db20c:	0080      	lsleq	r0, r0, #2
   db20e:	3302      	addeq	r3, #2
   db210:	2800      	cmp	r0, #0
   db212:	db03      	blt.n	db21c <__hi0bits+0x38>
   db214:	0042      	lsls	r2, r0, #1
   db216:	d503      	bpl.n	db220 <__hi0bits+0x3c>
   db218:	1c58      	adds	r0, r3, #1
   db21a:	4770      	bx	lr
   db21c:	4618      	mov	r0, r3
   db21e:	4770      	bx	lr
   db220:	2020      	movs	r0, #32
   db222:	4770      	bx	lr

000db224 <__lo0bits>:
   db224:	6803      	ldr	r3, [r0, #0]
   db226:	f013 0207 	ands.w	r2, r3, #7
   db22a:	d00b      	beq.n	db244 <__lo0bits+0x20>
   db22c:	07d9      	lsls	r1, r3, #31
   db22e:	d422      	bmi.n	db276 <__lo0bits+0x52>
   db230:	079a      	lsls	r2, r3, #30
   db232:	bf4b      	itete	mi
   db234:	085b      	lsrmi	r3, r3, #1
   db236:	089b      	lsrpl	r3, r3, #2
   db238:	6003      	strmi	r3, [r0, #0]
   db23a:	6003      	strpl	r3, [r0, #0]
   db23c:	bf4c      	ite	mi
   db23e:	2001      	movmi	r0, #1
   db240:	2002      	movpl	r0, #2
   db242:	4770      	bx	lr
   db244:	b299      	uxth	r1, r3
   db246:	b909      	cbnz	r1, db24c <__lo0bits+0x28>
   db248:	0c1b      	lsrs	r3, r3, #16
   db24a:	2210      	movs	r2, #16
   db24c:	f013 0fff 	tst.w	r3, #255	; 0xff
   db250:	bf04      	itt	eq
   db252:	0a1b      	lsreq	r3, r3, #8
   db254:	3208      	addeq	r2, #8
   db256:	0719      	lsls	r1, r3, #28
   db258:	bf04      	itt	eq
   db25a:	091b      	lsreq	r3, r3, #4
   db25c:	3204      	addeq	r2, #4
   db25e:	0799      	lsls	r1, r3, #30
   db260:	bf04      	itt	eq
   db262:	089b      	lsreq	r3, r3, #2
   db264:	3202      	addeq	r2, #2
   db266:	07d9      	lsls	r1, r3, #31
   db268:	d402      	bmi.n	db270 <__lo0bits+0x4c>
   db26a:	085b      	lsrs	r3, r3, #1
   db26c:	d005      	beq.n	db27a <__lo0bits+0x56>
   db26e:	3201      	adds	r2, #1
   db270:	6003      	str	r3, [r0, #0]
   db272:	4610      	mov	r0, r2
   db274:	4770      	bx	lr
   db276:	2000      	movs	r0, #0
   db278:	4770      	bx	lr
   db27a:	2020      	movs	r0, #32
   db27c:	4770      	bx	lr

000db27e <__i2b>:
   db27e:	b510      	push	{r4, lr}
   db280:	460c      	mov	r4, r1
   db282:	2101      	movs	r1, #1
   db284:	f7ff fee9 	bl	db05a <_Balloc>
   db288:	2201      	movs	r2, #1
   db28a:	6144      	str	r4, [r0, #20]
   db28c:	6102      	str	r2, [r0, #16]
   db28e:	bd10      	pop	{r4, pc}

000db290 <__multiply>:
   db290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db294:	4614      	mov	r4, r2
   db296:	690a      	ldr	r2, [r1, #16]
   db298:	6923      	ldr	r3, [r4, #16]
   db29a:	429a      	cmp	r2, r3
   db29c:	bfb8      	it	lt
   db29e:	460b      	movlt	r3, r1
   db2a0:	4688      	mov	r8, r1
   db2a2:	bfbc      	itt	lt
   db2a4:	46a0      	movlt	r8, r4
   db2a6:	461c      	movlt	r4, r3
   db2a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   db2ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db2b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db2b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   db2b8:	eb07 0609 	add.w	r6, r7, r9
   db2bc:	429e      	cmp	r6, r3
   db2be:	bfc8      	it	gt
   db2c0:	3101      	addgt	r1, #1
   db2c2:	f7ff feca 	bl	db05a <_Balloc>
   db2c6:	f100 0514 	add.w	r5, r0, #20
   db2ca:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   db2ce:	462b      	mov	r3, r5
   db2d0:	2200      	movs	r2, #0
   db2d2:	4563      	cmp	r3, ip
   db2d4:	d202      	bcs.n	db2dc <__multiply+0x4c>
   db2d6:	f843 2b04 	str.w	r2, [r3], #4
   db2da:	e7fa      	b.n	db2d2 <__multiply+0x42>
   db2dc:	f104 0214 	add.w	r2, r4, #20
   db2e0:	f108 0114 	add.w	r1, r8, #20
   db2e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db2e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   db2ec:	9300      	str	r3, [sp, #0]
   db2ee:	9b00      	ldr	r3, [sp, #0]
   db2f0:	9201      	str	r2, [sp, #4]
   db2f2:	4293      	cmp	r3, r2
   db2f4:	d957      	bls.n	db3a6 <__multiply+0x116>
   db2f6:	f8b2 b000 	ldrh.w	fp, [r2]
   db2fa:	f1bb 0f00 	cmp.w	fp, #0
   db2fe:	d023      	beq.n	db348 <__multiply+0xb8>
   db300:	4689      	mov	r9, r1
   db302:	46ae      	mov	lr, r5
   db304:	f04f 0800 	mov.w	r8, #0
   db308:	f859 4b04 	ldr.w	r4, [r9], #4
   db30c:	f8be a000 	ldrh.w	sl, [lr]
   db310:	b2a3      	uxth	r3, r4
   db312:	fb0b a303 	mla	r3, fp, r3, sl
   db316:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   db31a:	f8de 4000 	ldr.w	r4, [lr]
   db31e:	4443      	add	r3, r8
   db320:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db324:	fb0b 840a 	mla	r4, fp, sl, r8
   db328:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   db32c:	46f2      	mov	sl, lr
   db32e:	b29b      	uxth	r3, r3
   db330:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   db334:	454f      	cmp	r7, r9
   db336:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db33a:	f84a 3b04 	str.w	r3, [sl], #4
   db33e:	d901      	bls.n	db344 <__multiply+0xb4>
   db340:	46d6      	mov	lr, sl
   db342:	e7e1      	b.n	db308 <__multiply+0x78>
   db344:	f8ce 8004 	str.w	r8, [lr, #4]
   db348:	9b01      	ldr	r3, [sp, #4]
   db34a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   db34e:	3204      	adds	r2, #4
   db350:	f1ba 0f00 	cmp.w	sl, #0
   db354:	d021      	beq.n	db39a <__multiply+0x10a>
   db356:	682b      	ldr	r3, [r5, #0]
   db358:	462c      	mov	r4, r5
   db35a:	4689      	mov	r9, r1
   db35c:	f04f 0800 	mov.w	r8, #0
   db360:	f8b9 e000 	ldrh.w	lr, [r9]
   db364:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   db368:	fb0a be0e 	mla	lr, sl, lr, fp
   db36c:	44f0      	add	r8, lr
   db36e:	46a3      	mov	fp, r4
   db370:	b29b      	uxth	r3, r3
   db372:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   db376:	f84b 3b04 	str.w	r3, [fp], #4
   db37a:	f859 3b04 	ldr.w	r3, [r9], #4
   db37e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   db382:	0c1b      	lsrs	r3, r3, #16
   db384:	fb0a e303 	mla	r3, sl, r3, lr
   db388:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   db38c:	454f      	cmp	r7, r9
   db38e:	ea4f 4813 	mov.w	r8, r3, lsr #16
   db392:	d901      	bls.n	db398 <__multiply+0x108>
   db394:	465c      	mov	r4, fp
   db396:	e7e3      	b.n	db360 <__multiply+0xd0>
   db398:	6063      	str	r3, [r4, #4]
   db39a:	3504      	adds	r5, #4
   db39c:	e7a7      	b.n	db2ee <__multiply+0x5e>
   db39e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   db3a2:	b913      	cbnz	r3, db3aa <__multiply+0x11a>
   db3a4:	3e01      	subs	r6, #1
   db3a6:	2e00      	cmp	r6, #0
   db3a8:	dcf9      	bgt.n	db39e <__multiply+0x10e>
   db3aa:	6106      	str	r6, [r0, #16]
   db3ac:	b003      	add	sp, #12
   db3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db3b4 <__pow5mult>:
   db3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db3b8:	4615      	mov	r5, r2
   db3ba:	f012 0203 	ands.w	r2, r2, #3
   db3be:	4606      	mov	r6, r0
   db3c0:	460f      	mov	r7, r1
   db3c2:	d007      	beq.n	db3d4 <__pow5mult+0x20>
   db3c4:	3a01      	subs	r2, #1
   db3c6:	4c21      	ldr	r4, [pc, #132]	; (db44c <__pow5mult+0x98>)
   db3c8:	2300      	movs	r3, #0
   db3ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db3ce:	f7ff fe90 	bl	db0f2 <__multadd>
   db3d2:	4607      	mov	r7, r0
   db3d4:	10ad      	asrs	r5, r5, #2
   db3d6:	d036      	beq.n	db446 <__pow5mult+0x92>
   db3d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db3da:	b93c      	cbnz	r4, db3ec <__pow5mult+0x38>
   db3dc:	2010      	movs	r0, #16
   db3de:	f7fa feff 	bl	d61e0 <malloc>
   db3e2:	6270      	str	r0, [r6, #36]	; 0x24
   db3e4:	6044      	str	r4, [r0, #4]
   db3e6:	6084      	str	r4, [r0, #8]
   db3e8:	6004      	str	r4, [r0, #0]
   db3ea:	60c4      	str	r4, [r0, #12]
   db3ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db3f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db3f4:	b94c      	cbnz	r4, db40a <__pow5mult+0x56>
   db3f6:	f240 2171 	movw	r1, #625	; 0x271
   db3fa:	4630      	mov	r0, r6
   db3fc:	f7ff ff3f 	bl	db27e <__i2b>
   db400:	2300      	movs	r3, #0
   db402:	f8c8 0008 	str.w	r0, [r8, #8]
   db406:	4604      	mov	r4, r0
   db408:	6003      	str	r3, [r0, #0]
   db40a:	f04f 0800 	mov.w	r8, #0
   db40e:	07eb      	lsls	r3, r5, #31
   db410:	d50a      	bpl.n	db428 <__pow5mult+0x74>
   db412:	4639      	mov	r1, r7
   db414:	4622      	mov	r2, r4
   db416:	4630      	mov	r0, r6
   db418:	f7ff ff3a 	bl	db290 <__multiply>
   db41c:	4639      	mov	r1, r7
   db41e:	4681      	mov	r9, r0
   db420:	4630      	mov	r0, r6
   db422:	f7ff fe4f 	bl	db0c4 <_Bfree>
   db426:	464f      	mov	r7, r9
   db428:	106d      	asrs	r5, r5, #1
   db42a:	d00c      	beq.n	db446 <__pow5mult+0x92>
   db42c:	6820      	ldr	r0, [r4, #0]
   db42e:	b108      	cbz	r0, db434 <__pow5mult+0x80>
   db430:	4604      	mov	r4, r0
   db432:	e7ec      	b.n	db40e <__pow5mult+0x5a>
   db434:	4622      	mov	r2, r4
   db436:	4621      	mov	r1, r4
   db438:	4630      	mov	r0, r6
   db43a:	f7ff ff29 	bl	db290 <__multiply>
   db43e:	6020      	str	r0, [r4, #0]
   db440:	f8c0 8000 	str.w	r8, [r0]
   db444:	e7f4      	b.n	db430 <__pow5mult+0x7c>
   db446:	4638      	mov	r0, r7
   db448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db44c:	000dc798 	.word	0x000dc798

000db450 <__lshift>:
   db450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db454:	460c      	mov	r4, r1
   db456:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db45a:	6926      	ldr	r6, [r4, #16]
   db45c:	6849      	ldr	r1, [r1, #4]
   db45e:	68a3      	ldr	r3, [r4, #8]
   db460:	4456      	add	r6, sl
   db462:	4607      	mov	r7, r0
   db464:	4691      	mov	r9, r2
   db466:	1c75      	adds	r5, r6, #1
   db468:	42ab      	cmp	r3, r5
   db46a:	da02      	bge.n	db472 <__lshift+0x22>
   db46c:	3101      	adds	r1, #1
   db46e:	005b      	lsls	r3, r3, #1
   db470:	e7fa      	b.n	db468 <__lshift+0x18>
   db472:	4638      	mov	r0, r7
   db474:	f7ff fdf1 	bl	db05a <_Balloc>
   db478:	2300      	movs	r3, #0
   db47a:	4680      	mov	r8, r0
   db47c:	f100 0114 	add.w	r1, r0, #20
   db480:	461a      	mov	r2, r3
   db482:	4553      	cmp	r3, sl
   db484:	da03      	bge.n	db48e <__lshift+0x3e>
   db486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   db48a:	3301      	adds	r3, #1
   db48c:	e7f9      	b.n	db482 <__lshift+0x32>
   db48e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   db492:	6920      	ldr	r0, [r4, #16]
   db494:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db498:	f019 091f 	ands.w	r9, r9, #31
   db49c:	f104 0114 	add.w	r1, r4, #20
   db4a0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   db4a4:	d014      	beq.n	db4d0 <__lshift+0x80>
   db4a6:	f1c9 0c20 	rsb	ip, r9, #32
   db4aa:	2200      	movs	r2, #0
   db4ac:	6808      	ldr	r0, [r1, #0]
   db4ae:	fa00 f009 	lsl.w	r0, r0, r9
   db4b2:	4302      	orrs	r2, r0
   db4b4:	469a      	mov	sl, r3
   db4b6:	f843 2b04 	str.w	r2, [r3], #4
   db4ba:	f851 2b04 	ldr.w	r2, [r1], #4
   db4be:	458e      	cmp	lr, r1
   db4c0:	fa22 f20c 	lsr.w	r2, r2, ip
   db4c4:	d8f2      	bhi.n	db4ac <__lshift+0x5c>
   db4c6:	f8ca 2004 	str.w	r2, [sl, #4]
   db4ca:	b142      	cbz	r2, db4de <__lshift+0x8e>
   db4cc:	1cb5      	adds	r5, r6, #2
   db4ce:	e006      	b.n	db4de <__lshift+0x8e>
   db4d0:	3b04      	subs	r3, #4
   db4d2:	f851 2b04 	ldr.w	r2, [r1], #4
   db4d6:	f843 2f04 	str.w	r2, [r3, #4]!
   db4da:	458e      	cmp	lr, r1
   db4dc:	d8f9      	bhi.n	db4d2 <__lshift+0x82>
   db4de:	3d01      	subs	r5, #1
   db4e0:	4638      	mov	r0, r7
   db4e2:	f8c8 5010 	str.w	r5, [r8, #16]
   db4e6:	4621      	mov	r1, r4
   db4e8:	f7ff fdec 	bl	db0c4 <_Bfree>
   db4ec:	4640      	mov	r0, r8
   db4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db4f2 <__mcmp>:
   db4f2:	6903      	ldr	r3, [r0, #16]
   db4f4:	690a      	ldr	r2, [r1, #16]
   db4f6:	1a9b      	subs	r3, r3, r2
   db4f8:	b510      	push	{r4, lr}
   db4fa:	d111      	bne.n	db520 <__mcmp+0x2e>
   db4fc:	0092      	lsls	r2, r2, #2
   db4fe:	3014      	adds	r0, #20
   db500:	3114      	adds	r1, #20
   db502:	1883      	adds	r3, r0, r2
   db504:	440a      	add	r2, r1
   db506:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   db50a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   db50e:	428c      	cmp	r4, r1
   db510:	d002      	beq.n	db518 <__mcmp+0x26>
   db512:	d307      	bcc.n	db524 <__mcmp+0x32>
   db514:	2001      	movs	r0, #1
   db516:	bd10      	pop	{r4, pc}
   db518:	4298      	cmp	r0, r3
   db51a:	d3f4      	bcc.n	db506 <__mcmp+0x14>
   db51c:	2000      	movs	r0, #0
   db51e:	bd10      	pop	{r4, pc}
   db520:	4618      	mov	r0, r3
   db522:	bd10      	pop	{r4, pc}
   db524:	f04f 30ff 	mov.w	r0, #4294967295
   db528:	bd10      	pop	{r4, pc}

000db52a <__mdiff>:
   db52a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db52e:	460c      	mov	r4, r1
   db530:	4607      	mov	r7, r0
   db532:	4611      	mov	r1, r2
   db534:	4620      	mov	r0, r4
   db536:	4615      	mov	r5, r2
   db538:	f7ff ffdb 	bl	db4f2 <__mcmp>
   db53c:	1e06      	subs	r6, r0, #0
   db53e:	d108      	bne.n	db552 <__mdiff+0x28>
   db540:	4631      	mov	r1, r6
   db542:	4638      	mov	r0, r7
   db544:	f7ff fd89 	bl	db05a <_Balloc>
   db548:	2301      	movs	r3, #1
   db54a:	6103      	str	r3, [r0, #16]
   db54c:	6146      	str	r6, [r0, #20]
   db54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db552:	bfbc      	itt	lt
   db554:	4623      	movlt	r3, r4
   db556:	462c      	movlt	r4, r5
   db558:	4638      	mov	r0, r7
   db55a:	6861      	ldr	r1, [r4, #4]
   db55c:	bfba      	itte	lt
   db55e:	461d      	movlt	r5, r3
   db560:	2601      	movlt	r6, #1
   db562:	2600      	movge	r6, #0
   db564:	f7ff fd79 	bl	db05a <_Balloc>
   db568:	692b      	ldr	r3, [r5, #16]
   db56a:	60c6      	str	r6, [r0, #12]
   db56c:	6926      	ldr	r6, [r4, #16]
   db56e:	f105 0914 	add.w	r9, r5, #20
   db572:	3414      	adds	r4, #20
   db574:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   db578:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   db57c:	f100 0514 	add.w	r5, r0, #20
   db580:	f04f 0c00 	mov.w	ip, #0
   db584:	f854 3b04 	ldr.w	r3, [r4], #4
   db588:	f859 2b04 	ldr.w	r2, [r9], #4
   db58c:	fa1c f183 	uxtah	r1, ip, r3
   db590:	fa1f fe82 	uxth.w	lr, r2
   db594:	0c12      	lsrs	r2, r2, #16
   db596:	ebce 0101 	rsb	r1, lr, r1
   db59a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   db59e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   db5a2:	b289      	uxth	r1, r1
   db5a4:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db5a8:	45c8      	cmp	r8, r9
   db5aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   db5ae:	46a6      	mov	lr, r4
   db5b0:	f845 3b04 	str.w	r3, [r5], #4
   db5b4:	d8e6      	bhi.n	db584 <__mdiff+0x5a>
   db5b6:	45be      	cmp	lr, r7
   db5b8:	d20e      	bcs.n	db5d8 <__mdiff+0xae>
   db5ba:	f85e 1b04 	ldr.w	r1, [lr], #4
   db5be:	fa1c f281 	uxtah	r2, ip, r1
   db5c2:	1413      	asrs	r3, r2, #16
   db5c4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   db5c8:	b292      	uxth	r2, r2
   db5ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   db5ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db5d2:	f845 2b04 	str.w	r2, [r5], #4
   db5d6:	e7ee      	b.n	db5b6 <__mdiff+0x8c>
   db5d8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   db5dc:	b90b      	cbnz	r3, db5e2 <__mdiff+0xb8>
   db5de:	3e01      	subs	r6, #1
   db5e0:	e7fa      	b.n	db5d8 <__mdiff+0xae>
   db5e2:	6106      	str	r6, [r0, #16]
   db5e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db5e8 <__ulp>:
   db5e8:	4b12      	ldr	r3, [pc, #72]	; (db634 <__ulp+0x4c>)
   db5ea:	ee10 2a90 	vmov	r2, s1
   db5ee:	401a      	ands	r2, r3
   db5f0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   db5f4:	2b00      	cmp	r3, #0
   db5f6:	dd02      	ble.n	db5fe <__ulp+0x16>
   db5f8:	2000      	movs	r0, #0
   db5fa:	4619      	mov	r1, r3
   db5fc:	e017      	b.n	db62e <__ulp+0x46>
   db5fe:	425b      	negs	r3, r3
   db600:	151b      	asrs	r3, r3, #20
   db602:	2b13      	cmp	r3, #19
   db604:	f04f 0000 	mov.w	r0, #0
   db608:	f04f 0100 	mov.w	r1, #0
   db60c:	dc04      	bgt.n	db618 <__ulp+0x30>
   db60e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   db612:	fa42 f103 	asr.w	r1, r2, r3
   db616:	e00a      	b.n	db62e <__ulp+0x46>
   db618:	3b14      	subs	r3, #20
   db61a:	2b1e      	cmp	r3, #30
   db61c:	f04f 0201 	mov.w	r2, #1
   db620:	bfda      	itte	le
   db622:	f1c3 031f 	rsble	r3, r3, #31
   db626:	fa02 f303 	lslle.w	r3, r2, r3
   db62a:	4613      	movgt	r3, r2
   db62c:	4618      	mov	r0, r3
   db62e:	ec41 0b10 	vmov	d0, r0, r1
   db632:	4770      	bx	lr
   db634:	7ff00000 	.word	0x7ff00000

000db638 <__b2d>:
   db638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db63a:	6905      	ldr	r5, [r0, #16]
   db63c:	f100 0614 	add.w	r6, r0, #20
   db640:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   db644:	1f2f      	subs	r7, r5, #4
   db646:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db64a:	4620      	mov	r0, r4
   db64c:	f7ff fdca 	bl	db1e4 <__hi0bits>
   db650:	f1c0 0320 	rsb	r3, r0, #32
   db654:	280a      	cmp	r0, #10
   db656:	600b      	str	r3, [r1, #0]
   db658:	dc14      	bgt.n	db684 <__b2d+0x4c>
   db65a:	f1c0 0e0b 	rsb	lr, r0, #11
   db65e:	fa24 f10e 	lsr.w	r1, r4, lr
   db662:	42be      	cmp	r6, r7
   db664:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   db668:	bf34      	ite	cc
   db66a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db66e:	2100      	movcs	r1, #0
   db670:	3015      	adds	r0, #21
   db672:	fa04 f000 	lsl.w	r0, r4, r0
   db676:	fa21 f10e 	lsr.w	r1, r1, lr
   db67a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db67e:	ea40 0201 	orr.w	r2, r0, r1
   db682:	e023      	b.n	db6cc <__b2d+0x94>
   db684:	42be      	cmp	r6, r7
   db686:	bf3a      	itte	cc
   db688:	f1a5 0708 	subcc.w	r7, r5, #8
   db68c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db690:	2100      	movcs	r1, #0
   db692:	380b      	subs	r0, #11
   db694:	d015      	beq.n	db6c2 <__b2d+0x8a>
   db696:	4084      	lsls	r4, r0
   db698:	f1c0 0520 	rsb	r5, r0, #32
   db69c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   db6a0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   db6a4:	42b7      	cmp	r7, r6
   db6a6:	fa21 fe05 	lsr.w	lr, r1, r5
   db6aa:	ea44 030e 	orr.w	r3, r4, lr
   db6ae:	bf8c      	ite	hi
   db6b0:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   db6b4:	2400      	movls	r4, #0
   db6b6:	fa01 f000 	lsl.w	r0, r1, r0
   db6ba:	40ec      	lsrs	r4, r5
   db6bc:	ea40 0204 	orr.w	r2, r0, r4
   db6c0:	e004      	b.n	db6cc <__b2d+0x94>
   db6c2:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   db6c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db6ca:	460a      	mov	r2, r1
   db6cc:	ec43 2b10 	vmov	d0, r2, r3
   db6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db6d2 <__d2b>:
   db6d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db6d6:	460e      	mov	r6, r1
   db6d8:	2101      	movs	r1, #1
   db6da:	ec59 8b10 	vmov	r8, r9, d0
   db6de:	4615      	mov	r5, r2
   db6e0:	f7ff fcbb 	bl	db05a <_Balloc>
   db6e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   db6e8:	4607      	mov	r7, r0
   db6ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
   db6ee:	b10c      	cbz	r4, db6f4 <__d2b+0x22>
   db6f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db6f4:	9301      	str	r3, [sp, #4]
   db6f6:	f1b8 0f00 	cmp.w	r8, #0
   db6fa:	d019      	beq.n	db730 <__d2b+0x5e>
   db6fc:	a802      	add	r0, sp, #8
   db6fe:	f840 8d08 	str.w	r8, [r0, #-8]!
   db702:	f7ff fd8f 	bl	db224 <__lo0bits>
   db706:	9b00      	ldr	r3, [sp, #0]
   db708:	b148      	cbz	r0, db71e <__d2b+0x4c>
   db70a:	9a01      	ldr	r2, [sp, #4]
   db70c:	f1c0 0120 	rsb	r1, r0, #32
   db710:	fa02 f101 	lsl.w	r1, r2, r1
   db714:	430b      	orrs	r3, r1
   db716:	40c2      	lsrs	r2, r0
   db718:	617b      	str	r3, [r7, #20]
   db71a:	9201      	str	r2, [sp, #4]
   db71c:	e000      	b.n	db720 <__d2b+0x4e>
   db71e:	617b      	str	r3, [r7, #20]
   db720:	9b01      	ldr	r3, [sp, #4]
   db722:	61bb      	str	r3, [r7, #24]
   db724:	2b00      	cmp	r3, #0
   db726:	bf14      	ite	ne
   db728:	2102      	movne	r1, #2
   db72a:	2101      	moveq	r1, #1
   db72c:	6139      	str	r1, [r7, #16]
   db72e:	e007      	b.n	db740 <__d2b+0x6e>
   db730:	a801      	add	r0, sp, #4
   db732:	f7ff fd77 	bl	db224 <__lo0bits>
   db736:	9b01      	ldr	r3, [sp, #4]
   db738:	617b      	str	r3, [r7, #20]
   db73a:	2101      	movs	r1, #1
   db73c:	6139      	str	r1, [r7, #16]
   db73e:	3020      	adds	r0, #32
   db740:	b134      	cbz	r4, db750 <__d2b+0x7e>
   db742:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   db746:	4404      	add	r4, r0
   db748:	6034      	str	r4, [r6, #0]
   db74a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db74e:	e009      	b.n	db764 <__d2b+0x92>
   db750:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   db754:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db758:	6030      	str	r0, [r6, #0]
   db75a:	6918      	ldr	r0, [r3, #16]
   db75c:	f7ff fd42 	bl	db1e4 <__hi0bits>
   db760:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   db764:	6028      	str	r0, [r5, #0]
   db766:	4638      	mov	r0, r7
   db768:	b003      	add	sp, #12
   db76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db76e <__ratio>:
   db76e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db772:	4688      	mov	r8, r1
   db774:	4669      	mov	r1, sp
   db776:	4681      	mov	r9, r0
   db778:	f7ff ff5e 	bl	db638 <__b2d>
   db77c:	a901      	add	r1, sp, #4
   db77e:	4640      	mov	r0, r8
   db780:	ec55 4b10 	vmov	r4, r5, d0
   db784:	f7ff ff58 	bl	db638 <__b2d>
   db788:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db78c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db790:	1a9a      	subs	r2, r3, r2
   db792:	e89d 000a 	ldmia.w	sp, {r1, r3}
   db796:	1ac9      	subs	r1, r1, r3
   db798:	ec57 6b10 	vmov	r6, r7, d0
   db79c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   db7a0:	2b00      	cmp	r3, #0
   db7a2:	bfcc      	ite	gt
   db7a4:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   db7a8:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   db7ac:	4632      	mov	r2, r6
   db7ae:	463b      	mov	r3, r7
   db7b0:	4620      	mov	r0, r4
   db7b2:	4629      	mov	r1, r5
   db7b4:	f7fd fff8 	bl	d97a8 <__aeabi_ddiv>
   db7b8:	ec41 0b10 	vmov	d0, r0, r1
   db7bc:	b003      	add	sp, #12
   db7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db7c2 <__copybits>:
   db7c2:	3901      	subs	r1, #1
   db7c4:	b510      	push	{r4, lr}
   db7c6:	1149      	asrs	r1, r1, #5
   db7c8:	6914      	ldr	r4, [r2, #16]
   db7ca:	3101      	adds	r1, #1
   db7cc:	f102 0314 	add.w	r3, r2, #20
   db7d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db7d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db7d8:	42a3      	cmp	r3, r4
   db7da:	4602      	mov	r2, r0
   db7dc:	d204      	bcs.n	db7e8 <__copybits+0x26>
   db7de:	f853 2b04 	ldr.w	r2, [r3], #4
   db7e2:	f840 2b04 	str.w	r2, [r0], #4
   db7e6:	e7f7      	b.n	db7d8 <__copybits+0x16>
   db7e8:	2300      	movs	r3, #0
   db7ea:	428a      	cmp	r2, r1
   db7ec:	d202      	bcs.n	db7f4 <__copybits+0x32>
   db7ee:	f842 3b04 	str.w	r3, [r2], #4
   db7f2:	e7fa      	b.n	db7ea <__copybits+0x28>
   db7f4:	bd10      	pop	{r4, pc}

000db7f6 <__any_on>:
   db7f6:	f100 0214 	add.w	r2, r0, #20
   db7fa:	6900      	ldr	r0, [r0, #16]
   db7fc:	114b      	asrs	r3, r1, #5
   db7fe:	4298      	cmp	r0, r3
   db800:	b510      	push	{r4, lr}
   db802:	db0c      	blt.n	db81e <__any_on+0x28>
   db804:	dd0c      	ble.n	db820 <__any_on+0x2a>
   db806:	f011 011f 	ands.w	r1, r1, #31
   db80a:	d009      	beq.n	db820 <__any_on+0x2a>
   db80c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db810:	fa24 f001 	lsr.w	r0, r4, r1
   db814:	fa00 f101 	lsl.w	r1, r0, r1
   db818:	428c      	cmp	r4, r1
   db81a:	d10c      	bne.n	db836 <__any_on+0x40>
   db81c:	e000      	b.n	db820 <__any_on+0x2a>
   db81e:	4603      	mov	r3, r0
   db820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db824:	4293      	cmp	r3, r2
   db826:	d904      	bls.n	db832 <__any_on+0x3c>
   db828:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db82c:	2900      	cmp	r1, #0
   db82e:	d0f9      	beq.n	db824 <__any_on+0x2e>
   db830:	e001      	b.n	db836 <__any_on+0x40>
   db832:	2000      	movs	r0, #0
   db834:	bd10      	pop	{r4, pc}
   db836:	2001      	movs	r0, #1
   db838:	bd10      	pop	{r4, pc}

000db83a <_calloc_r>:
   db83a:	b538      	push	{r3, r4, r5, lr}
   db83c:	fb02 f401 	mul.w	r4, r2, r1
   db840:	4621      	mov	r1, r4
   db842:	f7fa fcfd 	bl	d6240 <_malloc_r>
   db846:	4605      	mov	r5, r0
   db848:	b118      	cbz	r0, db852 <_calloc_r+0x18>
   db84a:	4622      	mov	r2, r4
   db84c:	2100      	movs	r1, #0
   db84e:	f7fe f9fe 	bl	d9c4e <memset>
   db852:	4628      	mov	r0, r5
   db854:	bd38      	pop	{r3, r4, r5, pc}

000db856 <link_code_end>:
	...

000db858 <dynalib_user>:
   db858:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db868:	0000 0000                                   ....

000db86c <_ZTV5Timer>:
	...
   db874:	41a1 000d 41e9 000d 4129 000d 6572 6563     .A...A..)A..rece
   db884:	7669 6465 2520 3a73 2520 0073 6544 6f74     ived %s: %s.Deto
   db894:	616e 6574 5200 6d65 746f 2065 6552 6573     nate.Remote Rese
   db8a4:	2074 6e49 7469 6169 6574 0064 6544 7562     t Initiated.Debu
   db8b4:	0067 6f42 6d6f 4200 4f4f 214d 4200 6f6f     g.Boom.BOOM!.Boo
   db8c4:	5f6d 6361 006b 6544 6f74 616e 6574 615f     m_ack.Detonate_a
   db8d4:	6b63 4200 6f6f 5f6d 6572 6573 0074 4f42     ck.Boom_reset.BO
   db8e4:	4d4f 725f 7365 7465 2500 322e 0066 6f76     OM_reset.%.2f.vo
   db8f4:	746c 6761 0065 6170 7472 6369 656c 642f     ltage.particle/d
   db904:	7665 6369 2f65 616e 656d 5500 6962 6f64     evice/name.Ubido
   db914:	7374 7700 6265 6f68 6b6f 4200 6165 6f63     ts.webhook.Beaco
   db924:	206e 414d 0043 7441 6574 706d 6974 676e     n MAC.Attempting
   db934:	7420 206f 6572 6f63 6e6e 6365 0074 7254      to reconnect.Tr
   db944:	6979 676e 7420 206f 6f63 6e6e 6365 2074     ying to connect 
   db954:	6f74 0020 2c20 6120 7474 6d65 7470 6e20     to . , attempt n
   db964:	6d75 6562 3a72 0020 6974 656d 756f 2c74     umber: .timeout,
   db974:	6320 756f 646c 6e20 746f 7220 6165 2064      could not read 
   db984:	6e61 2079 6572 7073 6e6f 6573 6620 6f72     any response fro
   db994:	206d 6874 2065 6f68 7473 5300 7265 6576     m the host.Serve
   db9a4:	2772 2073 6572 7073 6e6f 6573 003a 2d0a     r's response:..-
   db9b4:	2d2d 2d2d 2d2d 2d2d 002d 4f50 5453 4f00     ---------.POST.O
   db9c4:	004b 6f43 6c75 2064 6f6e 2074 6f63 6e6e     K.Could not conn
   db9d4:	6365 2074 6f74 7420 6568 6820 736f 0074     ect to the host.
   db9e4:	4c7c 7c56 5000 7961 6f6c 6461 6620 726f     |LV|.Payload for
   db9f4:	7220 7165 6575 7473 003a 2d0a 2d2d 002d      request:..----.
   dba04:	564c 4500 5252 524f 6320 756f 646c 6e20     LV.ERROR could n
   dba14:	746f 6320 6e6f 656e 7463 7420 206f 6874     ot connect to th
   dba24:	2065 6573 7672 7265 0000 0000               e server....

000dba30 <_ZTV6UbiTCP>:
	...
   dba38:	4859 000d 48fd 000d 4655 000d 6f59 2075     YH...H..UF..You 
   dba48:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
   dba58:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
   dba68:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
   dba78:	7620 7261 6169 6c62 7365 4500 5252 524f      variables.ERROR
   dba88:	202c 6164 6174 7220 7465 6972 7665 6c61     , data retrieval
   dba98:	6920 2073 6e6f 796c 7320 7075 6f70 7472      is only support
   dbaa8:	6465 7520 6973 676e 5420 5043 6f20 2072     ed using TCP or 
   dbab8:	5448 5054 7020 6f72 6f74 6f63 736c 2500     HTTP protocols.%
   dbac8:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   dbad8:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   dbae8:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   dbaf8:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   dbb08:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   dbb18:	2500 2c73 7000 7961 6f6c 6461 003a 6255     .%s,.payload:.Ub
   dbb28:	6469 746f 5073 7261 6974 6c63 2f65 2e33     idotsParticle/3.
   dbb38:	0031 7325 507c 534f 7c54 7325 007c 7325     1.%s|POST|%s|.%s
   dbb48:	7325 253a 0073 7325 3e3d 2500 2473 7325     %s:%s.%s=>.%s$%s
   dbb58:	2500 4073 6c25 0075 7325 657c 646e 5300     .%s@%lu.%s|end.S
   dbb68:	6e65 6964 676e 6420 7461 2e61 2e2e 6900     ending data....i
   dbb78:	646e 7375 7274 6169 2e6c 7061 2e69 6275     ndustrial.api.ub
   dbb88:	6469 746f 2e73 6f63 006d 575b 5241 494e     idots.com.[WARNI
   dbb98:	474e 205d 6854 2065 654d 6873 5020 6f72     NG] The Mesh Pro
   dbba8:	6f74 6f63 206c 7369 6e20 746f 7320 7075     tocol is not sup
   dbbb8:	6f70 7472 6465 6920 206e 6874 7369 6420     ported in this d
   dbbc8:	7665 6369 2065 6f66 2072 6573 646e 6e69     evice for sendin
   dbbd8:	2067 6164 6174 5b00 6157 6e72 6e69 5d67     g data.[Warning]
   dbbe8:	5420 206f 6572 7274 6569 6576 6420 7461      To retrieve dat
   dbbf8:	2c61 7020 656c 7361 2065 6573 2074 2061     a, please set a 
   dbc08:	6176 696c 2064 6c63 756f 2064 7270 746f     valid cloud prot
   dbc18:	636f 6c6f 6920 206e 6874 2065 6255 6469     ocol in the Ubid
   dbc28:	746f 2073 6f63 736e 7274 6375 6f74 0072     ots constructor.
   dbc38:	6f59 2075 7261 2065 6461 6964 676e 6d20     You are adding m
   dbc48:	726f 2065 6874 6e61 7420 6568 6d20 7861     ore than the max
   dbc58:	6d69 6d75 6f20 2066 6f63 736e 6365 7475     imum of consecut
   dbc68:	7669 2065 656b 2d79 6176 756c 7365 7020     ive key-values p
   dbc78:	6961 7372 2500 2573 3d73 7325 2500 2473     airs.%s%s=%s.%s$
   dbc88:	2500 2273 7325 3a22 2522 2273 0000 0000     .%s"%s":"%s"....

000dbc98 <_ZTV7UbiHTTP>:
	...
   dbca0:	4ebd 000d 50ed 000d 4c99 000d 7441 6574     .N...P...L..Atte
   dbcb0:	706d 2074 6966 696e 6873 6465 5000 534f     mpt finished.POS
   dbcc0:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
   dbcd0:	6563 2f73 2000 5448 5054 312f 312e 0a0d     ces/. HTTP/1.1..
   dbce0:	4800 736f 3a74 0020 7355 7265 412d 6567     .Host: .User-Age
   dbcf0:	746e 203a 5800 412d 7475 2d68 6f54 656b     nt: .X-Auth-Toke
   dbd00:	3a6e 0020 6f43 6e6e 6365 6974 6e6f 203a     n: .Connection: 
   dbd10:	6c63 736f 0d65 000a 6f43 746e 6e65 2d74     close...Content-
   dbd20:	7954 6570 203a 7061 6c70 6369 7461 6f69     Type: applicatio
   dbd30:	2f6e 736a 6e6f 0a0d 4300 6e6f 6574 746e     n/json...Content
   dbd40:	4c2d 6e65 7467 3a68 0020 614d 696b 676e     -Length: .Making
   dbd50:	7220 7165 6575 7473 7420 206f 6255 6469      request to Ubid
   dbd60:	746f 3a73 000a 6177 7469 6e69 2067 6f66     ots:..waiting fo
   dbd70:	2072 6573 7672 7265 6120 736e 6577 2072     r server answer 
   dbd80:	2e2e 002e 550a 6962 6f64 7374 2027 6553     .....Ubidots' Se
   dbd90:	7672 7265 7220 7365 6f70 736e 3a65 000a     rver response:..
   dbda0:	6f43 6c75 2064 6f6e 2074 6573 646e 6420     Could not send d
   dbdb0:	7461 2061 6f74 7520 6962 6f64 7374 7520     ata to ubidots u
   dbdc0:	6973 676e 4820 5454 0050 4547 2054 612f     sing HTTP.GET /a
   dbdd0:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   dbde0:	2f00 766c 4300 6e6f 6574 746e 542d 7079     ./lv.Content-Typ
   dbdf0:	3a65 6120 7070 696c 6163 6974 6e6f 6a2f     e: application/j
   dbe00:	6f73 0d6e 0d0a 000a 6f43 6e6e 6365 6974     son.....Connecti
   dbe10:	6e6f 4620 6961 656c 2064 6275 6469 746f     on Failed ubidot
   dbe20:	2073 202d 7254 2079 6741 6961 006e          s - Try Again.

000dbe2e <_ZStL19piecewise_construct>:
   dbe2e:	5b00 4157 4e52 4e49 5d47 5920 756f 2072     .[WARNING] Your 
   dbe3e:	654d 6873 6320 6e6f 6574 7478 6c20 6e65     Mesh context len
   dbe4e:	7467 2068 756d 7473 6220 2065 6f6c 6577     gth must be lowe
   dbe5e:	2072 6874 6e61 3120 3030 2500 7c73 6625     r than 100.%s|%f
   dbe6e:	257c 7c73 7325 257c 0073 2041 7270 626f     |%s|%s|%s.A prob
   dbe7e:	656c 206d 6168 2073 6172 7369 6465 7720     lem has raised w
   dbe8e:	7469 2068 6874 2065 6564 6976 6563 7420     ith the device t
   dbe9e:	7972 6e69 2067 6f74 6f20 6570 206e 2061     rying to open a 
   dbeae:	654d 6873 6f73 6b63 7465 5900 756f 6820     Meshsocket.You h
   dbebe:	7661 2065 6f6e 2074 6461 6564 2064 6e61     ave not added an
   dbece:	2079 6176 6972 6261 656c 7620 6c61 6575     y variable value
   dbede:	202c 6c70 6165 6573 6320 6c61 206c 6874     , please call th
   dbeee:	2065 6461 2864 6d29 7465 6f68 2064 6966     e add()method fi
   dbefe:	7372 0074 6275 6469 746f 2d73 656d 6873     rst.ubidots-mesh
   dbf0e:	5b00 4157 4e52 4e49 5d47 7920 756f 2072     .[WARNING] your 
   dbf1e:	6173 706d 656c 7420 6d69 2065 6572 6361     sample time reac
   dbf2e:	6568 2064 6874 2065 6874 6f72 7474 696c     hed the throttli
   dbf3e:	676e 6f20 2066 3032 7320 202c 6c70 6165     ng of 20 s, plea
   dbf4e:	6573 7320 7465 6120 6820 6769 6568 2072     se set a higher 
   dbf5e:	6173 706d 656c 7420 6d69 2065 726f 7520     sample time or u
   dbf6e:	6573 5520 5044 6f20 2072 6150 7472 6369     se UDP or Partic
   dbf7e:	656c 5720 6265 6f68 6b6f 2073 6f74 7320     le Webhooks to s
   dbf8e:	6e65 2064 6164 6174 5b00 6157 6e72 6e69     end data.[Warnin
   dbf9e:	5d67 4320 756f 646c 6e20 746f 7320 6c6f     g] Could not sol
   dbfae:	6576 4920 2050 6441 7264 7365 2073 666f     ve IP Address of
   dbfbe:	7420 6568 7220 6d65 746f 2065 6f68 7473      the remote host
   dbfce:	202c 6977 6874 7920 756f 2072 4e44 2053     , with your DNS 
   dbfde:	6573 7574 2e70 2020 2020 2020 2020 2020     setup.          
   dbfee:	0a20 7355 6e69 2067 6564 6166 6c75 2074      .Using default 
   dbffe:	6e49 7564 7473 6972 6c61 5520 6962 6f64     Industrial Ubido
   dc00e:	7374 4920 3a50 3120 3936 352e 2e35 3136     ts IP: 169.55.61
   dc01e:	322e 3334 4500 5252 524f 7320 6e65 6964     .243.ERROR sendi
   dc02e:	676e 7620 6c61 6575 2073 6977 6874 5520     ng values with U
   dc03e:	5044 0000 0000                              DP....

000dc044 <_ZTV6UbiUDP>:
	...
   dc04c:	59a5 000d 5939 000d 5945 000d               .Y..9Y..EY..

000dc058 <_ZTV11UbiParticle>:
	...
   dc060:	5ad3 000d 5a6d 000d 5a79 000d               .Z..mZ..yZ..

000dc06c <_ZTVN5spark13EthernetClassE>:
	...
   dc074:	62bf 000d 62b5 000d 62ab 000d 62a1 000d     .b...b...b...b..
   dc084:	6295 000d 6289 000d 627d 000d 6275 000d     .b...b..}b..ub..
   dc094:	626b 000d 6261 000d 8b69 000d               kb..ab..i...

000dc0a0 <_ZTV8SPIClass>:
	...
   dc0a8:	62dd 000d 62df 000d                         .b...b..

000dc0b0 <_ZTV3UDP>:
	...
   dc0b8:	53d9 000d 544d 000d 6365 000d 648f 000d     .S..MT..ec...d..
   dc0c8:	635d 000d 637b 000d 6399 000d 63b3 000d     ]c..{c...c...c..
   dc0d8:	63d7 000d 6473 000d 6775 000d 6515 000d     .c..sd..ug...e..
   dc0e8:	6695 000d 6345 000d 691d 000d 6619 000d     .f..Ec...i...f..
   dc0f8:	654d 000d 694b 000d 64b9 000d 6353 000d     Me..Ki...d..Sc..
   dc108:	64f5 000d 6359 000d 63b5 000d fff0 ffff     .d..Yc...c......
   dc118:	0000 0000 63cf 000d                         .....c..

000dc120 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc128:	6ad9 000d 6adf 000d 6dc3 000d 6aed 000d     .j...j...m...j..
   dc138:	6adb 000d 6977 6972 676e 622e 656c 5300     .j..wiring.ble.S
   dc148:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   dc158:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   dc168:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   dc178:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   dc188:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   dc198:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   dc1a8:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   dc1b8:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   dc1c8:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   dc1d8:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   dc1e8:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   dc1f8:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   dc208:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   dc218:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   dc228:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   dc238:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   dc248:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   dc258:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   dc268:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   dc278:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   dc288:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   dc298:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   dc2a8:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   dc2b8:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   dc2c8:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   dc2d8:	6465 002e 6162 6475 5300 7265 6169 006c     ed..baud.Serial.
   dc2e8:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   dc2f8:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   dc308:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   dc318:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   dc328:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   dc338:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   dc348:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   dc358:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   dc368:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   dc378:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
   dc388:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   dc398:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   dc3a8:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   dc3b8:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   dc3c8:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   dc3d8:	7463 6d69 0065 0000                         ctime...

000dc3e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc3e8:	7429 000d 742f 000d 7473 000d 743d 000d     )t../t..st..=t..
   dc3f8:	742b 000d                                   +t..

000dc3fc <_ZTV9IPAddress>:
	...
   dc404:	7a19 000d 7a09 000d 7a0b 000d               .z...z...z..

000dc410 <_ZTV9USBSerial>:
	...
   dc418:	7b37 000d 7b87 000d 7b95 000d 7125 000d     7{...{...{..%q..
   dc428:	7b73 000d 7b39 000d 7b4f 000d 7b81 000d     s{..9{..O{...{..
   dc438:	7b65 000d 7b33 000d                         e{..3{..

000dc440 <_ZTV11USARTSerial>:
	...
   dc448:	7c45 000d 7c95 000d 7ca3 000d 7125 000d     E|...|...|..%q..
   dc458:	7c59 000d 7c7b 000d 7c67 000d 7c8f 000d     Y|..{|..g|...|..
   dc468:	7c47 000d 7c4b 000d                         G|..K|..

000dc470 <_ZTV7TwoWire>:
	...
   dc478:	7d71 000d 7dbb 000d 7d93 000d 7d73 000d     q}...}...}..s}..
   dc488:	7d9b 000d 7da3 000d 7dab 000d 7db3 000d     .}...}...}...}..

000dc498 <_ZTVN5spark9MeshClassE>:
	...
   dc4a0:	7e77 000d 7e6d 000d 7e63 000d 5745 000d     w~..m~..c~..EW..
   dc4b0:	7e57 000d 7e4b 000d 7e3f 000d 7e37 000d     W~..K~..?~..7~..
   dc4c0:	7e2d 000d 7e23 000d 8b69 000d 6666 3330     -~..#~..i...ff03
   dc4d0:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   dc4e0:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   dc4f0:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000dc4fc <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc504:	8575 000d 857b 000d 8a6b 000d 8589 000d     u...{...k.......
   dc514:	8577 000d                                   w...

000dc518 <_ZTV9TCPClient>:
	...
   dc520:	4659 000d 468d 000d 84ed 000d 8507 000d     YF...F..........
   dc530:	8909 000d 865b 000d 862d 000d 8531 000d     ....[...-...1...
   dc540:	87e5 000d 86e1 000d 868f 000d 88d9 000d     ................
   dc550:	8533 000d 856b 000d 8519 000d 858d 000d     3...k...........
   dc560:	860d 000d 6572 7663 6520 7272 726f 3d20     ....recv error =
   dc570:	2520 0064                                    %d.

000dc574 <_ZTVN5spark9WiFiClassE>:
	...
   dc57c:	8ae1 000d 8ad7 000d 8acd 000d 8a83 000d     ................
   dc58c:	8ac1 000d 8ab5 000d 8aa9 000d 8aa1 000d     ................
   dc59c:	8a97 000d 8a8d 000d 8b69 000d               ........i...

000dc5a8 <_ZTVN5spark12NetworkClassE>:
	...
   dc5b0:	8b01 000d 8b0b 000d 8b15 000d 8b1f 000d     ................
   dc5c0:	8b29 000d 8b35 000d 8b41 000d 8b4d 000d     )...5...A...M...
   dc5d0:	8b55 000d 8b5f 000d 8b69 000d               U..._...i...

000dc5dc <_ZSt7nothrow>:
   dc5dc:	0000 0000                                   ....

000dc5e0 <__sf_fake_stdin>:
	...

000dc600 <__sf_fake_stdout>:
	...

000dc620 <__sf_fake_stderr>:
	...
   dc640:	4f50 4953 0058 0000                         POSIX...

000dc648 <fpi.5344>:
   dc648:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc658:	0000 0000                                   ....

000dc65c <fpinan.5380>:
   dc65c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc66c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   dc67c:	0000 0000                                   ....

000dc680 <tinytens>:
   dc680:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc690:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc6a0:	6f43 64ac 0628 1168                         Co.d(.h.

000dc6a8 <__mprec_tens>:
   dc6a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc6b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc6c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc6d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc6e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc6f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc708:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc718:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc728:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc738:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc748:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc758:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc768:	9db4 79d9 7843 44ea                         ...yCx.D

000dc770 <__mprec_bigtens>:
   dc770:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc780:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc790:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc798 <p05.5387>:
   dc798:	0005 0000 0019 0000 007d 0000               ........}...

000dc7a4 <link_const_variable_data_end>:
   dc7a4:	000d450d 	.word	0x000d450d
   dc7a8:	000d4a61 	.word	0x000d4a61
   dc7ac:	000d4ba1 	.word	0x000d4ba1
   dc7b0:	000d4c8b 	.word	0x000d4c8b
   dc7b4:	000d52d1 	.word	0x000d52d1
   dc7b8:	000d56e9 	.word	0x000d56e9
   dc7bc:	000d5925 	.word	0x000d5925
   dc7c0:	000d5969 	.word	0x000d5969
   dc7c4:	000d5b3b 	.word	0x000d5b3b
   dc7c8:	000d5b3f 	.word	0x000d5b3f
   dc7cc:	000d5b43 	.word	0x000d5b43
   dc7d0:	000d5b47 	.word	0x000d5b47
   dc7d4:	000d62c9 	.word	0x000d62c9
   dc7d8:	000d632d 	.word	0x000d632d
   dc7dc:	000d7115 	.word	0x000d7115
   dc7e0:	000d72e1 	.word	0x000d72e1
   dc7e4:	000d72f1 	.word	0x000d72f1
   dc7e8:	000d7339 	.word	0x000d7339
   dc7ec:	000d849d 	.word	0x000d849d
   dc7f0:	000d8aed 	.word	0x000d8aed
   dc7f4:	000d8c35 	.word	0x000d8c35
   dc7f8:	000d8d15 	.word	0x000d8d15
   dc7fc:	000d8f55 	.word	0x000d8f55
   dc800:	000d8fd9 	.word	0x000d8fd9
   dc804:	000d909d 	.word	0x000d909d
   dc808:	000d9161 	.word	0x000d9161

000dc80c <link_constructors_end>:
   dc80c:	00000000 	.word	0x00000000
